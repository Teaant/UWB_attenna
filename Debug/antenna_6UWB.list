
antenna_6UWB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c530  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800c7d0  0800c7d0  0000d7d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cc80  0800cc80  0000dc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cc88  0800cc88  0000dc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800cc8c  0800cc8c  0000dc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  24000000  0800cc90  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a94  240001e8  0800ce78  0000e1e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000c7c  0800ce78  0000ec7c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023dd6  00000000  00000000  0000e216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000460d  00000000  00000000  00031fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b30  00000000  00000000  00036600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014fb  00000000  00000000  00038130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e5e3  00000000  00000000  0003962b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002662b  00000000  00000000  00077c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001738fe  00000000  00000000  0009e239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00211b37  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008128  00000000  00000000  00211b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  00219ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00000092  00000000  00000000  00219cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c7b8 	.word	0x0800c7b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800c7b8 	.word	0x0800c7b8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <enqueueData>:
//U_Task tasks_fifo[QUEUE_SIZE];
uint8_t params_fifo[QUEUE_SIZE];
uint8_t front = 0, rear;


uint8_t enqueueData( uint8_t id){
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	//队列满
	if((rear+1)%QUEUE_SIZE == front){
 800068a:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <enqueueData+0x6c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	1c59      	adds	r1, r3, #1
 8000690:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <enqueueData+0x70>)
 8000692:	fb83 2301 	smull	r2, r3, r3, r1
 8000696:	105a      	asrs	r2, r3, #1
 8000698:	17cb      	asrs	r3, r1, #31
 800069a:	1ad2      	subs	r2, r2, r3
 800069c:	4613      	mov	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4413      	add	r3, r2
 80006a2:	1aca      	subs	r2, r1, r3
 80006a4:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <enqueueData+0x74>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d101      	bne.n	80006b0 <enqueueData+0x30>
		return 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	e016      	b.n	80006de <enqueueData+0x5e>
	}else{
		params_fifo[rear] = id;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <enqueueData+0x6c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	4a10      	ldr	r2, [pc, #64]	@ (80006f8 <enqueueData+0x78>)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	5453      	strb	r3, [r2, r1]
		rear = (rear+1)%QUEUE_SIZE;
 80006bc:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <enqueueData+0x6c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	1c5a      	adds	r2, r3, #1
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <enqueueData+0x70>)
 80006c4:	fb83 1302 	smull	r1, r3, r3, r2
 80006c8:	1059      	asrs	r1, r3, #1
 80006ca:	17d3      	asrs	r3, r2, #31
 80006cc:	1ac9      	subs	r1, r1, r3
 80006ce:	460b      	mov	r3, r1
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	440b      	add	r3, r1
 80006d4:	1ad1      	subs	r1, r2, r3
 80006d6:	b2ca      	uxtb	r2, r1
 80006d8:	4b04      	ldr	r3, [pc, #16]	@ (80006ec <enqueueData+0x6c>)
 80006da:	701a      	strb	r2, [r3, #0]
		return 1;
 80006dc:	2301      	movs	r3, #1
	}
}
 80006de:	4618      	mov	r0, r3
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	2400020a 	.word	0x2400020a
 80006f0:	66666667 	.word	0x66666667
 80006f4:	24000209 	.word	0x24000209
 80006f8:	24000204 	.word	0x24000204

080006fc <dequeueData>:

uint8_t dequeueData(void){
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
	//队列空
	uint8_t dwt_id;

	if(front == rear){
 8000702:	4b12      	ldr	r3, [pc, #72]	@ (800074c <dequeueData+0x50>)
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <dequeueData+0x54>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	429a      	cmp	r2, r3
 800070c:	d101      	bne.n	8000712 <dequeueData+0x16>
		return 255;
 800070e:	23ff      	movs	r3, #255	@ 0xff
 8000710:	e016      	b.n	8000740 <dequeueData+0x44>
	}else{
		dwt_id = params_fifo[front];
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <dequeueData+0x50>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <dequeueData+0x58>)
 800071a:	5c9b      	ldrb	r3, [r3, r2]
 800071c:	71fb      	strb	r3, [r7, #7]
		front = (front+1)%QUEUE_SIZE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <dequeueData+0x50>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <dequeueData+0x5c>)
 8000726:	fb83 1302 	smull	r1, r3, r3, r2
 800072a:	1059      	asrs	r1, r3, #1
 800072c:	17d3      	asrs	r3, r2, #31
 800072e:	1ac9      	subs	r1, r1, r3
 8000730:	460b      	mov	r3, r1
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	440b      	add	r3, r1
 8000736:	1ad1      	subs	r1, r2, r3
 8000738:	b2ca      	uxtb	r2, r1
 800073a:	4b04      	ldr	r3, [pc, #16]	@ (800074c <dequeueData+0x50>)
 800073c:	701a      	strb	r2, [r3, #0]
		return dwt_id;
 800073e:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	24000209 	.word	0x24000209
 8000750:	2400020a 	.word	0x2400020a
 8000754:	24000204 	.word	0x24000204
 8000758:	66666667 	.word	0x66666667

0800075c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	@ 0x30
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	4ba7      	ldr	r3, [pc, #668]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000778:	4aa5      	ldr	r2, [pc, #660]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 800077a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000782:	4ba3      	ldr	r3, [pc, #652]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b9f      	ldr	r3, [pc, #636]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000796:	4a9e      	ldr	r2, [pc, #632]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a0:	4b9b      	ldr	r3, [pc, #620]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b98      	ldr	r3, [pc, #608]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b4:	4a96      	ldr	r2, [pc, #600]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007be:	4b94      	ldr	r3, [pc, #592]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c4:	f003 0302 	and.w	r3, r3, #2
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007cc:	4b90      	ldr	r3, [pc, #576]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d2:	4a8f      	ldr	r2, [pc, #572]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 80007d4:	f043 0310 	orr.w	r3, r3, #16
 80007d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007dc:	4b8c      	ldr	r3, [pc, #560]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e2:	f003 0310 	and.w	r3, r3, #16
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	4b89      	ldr	r3, [pc, #548]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f0:	4a87      	ldr	r2, [pc, #540]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007fa:	4b85      	ldr	r3, [pc, #532]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000800:	f003 0308 	and.w	r3, r3, #8
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000808:	4b81      	ldr	r3, [pc, #516]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 800080a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800080e:	4a80      	ldr	r2, [pc, #512]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000818:	4b7d      	ldr	r3, [pc, #500]	@ (8000a10 <MX_GPIO_Init+0x2b4>)
 800081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UWB1_RESET_Pin|UWB1_CSn_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f240 2106 	movw	r1, #518	@ 0x206
 800082c:	4879      	ldr	r0, [pc, #484]	@ (8000a14 <MX_GPIO_Init+0x2b8>)
 800082e:	f003 fb93 	bl	8003f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, UWB1_WAKEUP_Pin|UWB2_RESET_Pin|UWB2_CSn_Pin|UWB2_WAKEUP_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 5162 	mov.w	r1, #14464	@ 0x3880
 8000838:	4877      	ldr	r0, [pc, #476]	@ (8000a18 <MX_GPIO_Init+0x2bc>)
 800083a:	f003 fb8d 	bl	8003f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, UWB3_RESET_Pin|UWB3_CSn_Pin|UWB3_WAKEUP_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8000844:	4875      	ldr	r0, [pc, #468]	@ (8000a1c <MX_GPIO_Init+0x2c0>)
 8000846:	f003 fb87 	bl	8003f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UWB4_RESET_Pin|UWB4_CSn_Pin|UWB4_WAKEUP_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000850:	4873      	ldr	r0, [pc, #460]	@ (8000a20 <MX_GPIO_Init+0x2c4>)
 8000852:	f003 fb81 	bl	8003f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYNC_EN_GPIO_Port, SYNC_EN_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800085c:	4871      	ldr	r0, [pc, #452]	@ (8000a24 <MX_GPIO_Init+0x2c8>)
 800085e:	f003 fb7b 	bl	8003f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB1_IRQ_Pin;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000866:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UWB1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4867      	ldr	r0, [pc, #412]	@ (8000a14 <MX_GPIO_Init+0x2b8>)
 8000878:	f003 f9a6 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB1_RESET_Pin;
 800087c:	2302      	movs	r3, #2
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000880:	2311      	movs	r3, #17
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UWB1_RESET_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4860      	ldr	r0, [pc, #384]	@ (8000a14 <MX_GPIO_Init+0x2b8>)
 8000894:	f003 f998 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB9 */
  GPIO_InitStruct.Pin = UWB1_CSn_Pin|GPIO_PIN_9;
 8000898:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4858      	ldr	r0, [pc, #352]	@ (8000a14 <MX_GPIO_Init+0x2b8>)
 80008b2:	f003 f989 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = UWB1_WAKEUP_Pin|UWB2_CSn_Pin|UWB2_WAKEUP_Pin;
 80008b6:	f44f 5342 	mov.w	r3, #12416	@ 0x3080
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4852      	ldr	r0, [pc, #328]	@ (8000a18 <MX_GPIO_Init+0x2bc>)
 80008d0:	f003 f97a 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB2_IRQ_Pin;
 80008d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UWB2_IRQ_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	484b      	ldr	r0, [pc, #300]	@ (8000a18 <MX_GPIO_Init+0x2bc>)
 80008ec:	f003 f96c 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB2_RESET_Pin;
 80008f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008f6:	2311      	movs	r3, #17
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UWB2_RESET_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4843      	ldr	r0, [pc, #268]	@ (8000a18 <MX_GPIO_Init+0x2bc>)
 800090a:	f003 f95d 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB3_IRQ_Pin;
 800090e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000914:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UWB3_IRQ_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	483d      	ldr	r0, [pc, #244]	@ (8000a1c <MX_GPIO_Init+0x2c0>)
 8000926:	f003 f94f 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB3_RESET_Pin;
 800092a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000930:	2311      	movs	r3, #17
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UWB3_RESET_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4836      	ldr	r0, [pc, #216]	@ (8000a1c <MX_GPIO_Init+0x2c0>)
 8000944:	f003 f940 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = UWB3_CSn_Pin|UWB3_WAKEUP_Pin;
 8000948:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	482e      	ldr	r0, [pc, #184]	@ (8000a1c <MX_GPIO_Init+0x2c0>)
 8000962:	f003 f931 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB4_IRQ_Pin;
 8000966:	2340      	movs	r3, #64	@ 0x40
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UWB4_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4829      	ldr	r0, [pc, #164]	@ (8000a20 <MX_GPIO_Init+0x2c4>)
 800097c:	f003 f924 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB4_RESET_Pin;
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000984:	2311      	movs	r3, #17
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UWB4_RESET_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4822      	ldr	r0, [pc, #136]	@ (8000a20 <MX_GPIO_Init+0x2c4>)
 8000998:	f003 f916 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = UWB4_CSn_Pin|UWB4_WAKEUP_Pin;
 800099c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	481a      	ldr	r0, [pc, #104]	@ (8000a20 <MX_GPIO_Init+0x2c4>)
 80009b6:	f003 f907 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SYNC_EN_Pin;
 80009ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SYNC_EN_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4814      	ldr	r0, [pc, #80]	@ (8000a24 <MX_GPIO_Init+0x2c8>)
 80009d4:	f003 f8f8 	bl	8003bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2006      	movs	r0, #6
 80009de:	f003 f846 	bl	8003a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009e2:	2006      	movs	r0, #6
 80009e4:	f003 f85d 	bl	8003aa2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2017      	movs	r0, #23
 80009ee:	f003 f83e 	bl	8003a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009f2:	2017      	movs	r0, #23
 80009f4:	f003 f855 	bl	8003aa2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	2028      	movs	r0, #40	@ 0x28
 80009fe:	f003 f836 	bl	8003a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a02:	2028      	movs	r0, #40	@ 0x28
 8000a04:	f003 f84d 	bl	8003aa2 <HAL_NVIC_EnableIRQ>

}
 8000a08:	bf00      	nop
 8000a0a:	3730      	adds	r7, #48	@ 0x30
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	58024400 	.word	0x58024400
 8000a14:	58020400 	.word	0x58020400
 8000a18:	58021000 	.word	0x58021000
 8000a1c:	58020c00 	.word	0x58020c00
 8000a20:	58020800 	.word	0x58020800
 8000a24:	58020000 	.word	0x58020000

08000a28 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa0 <MX_I2C1_Init+0x78>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x107075B0;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a34:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa4 <MX_I2C1_Init+0x7c>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a38:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3e:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a62:	480e      	ldr	r0, [pc, #56]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a64:	f003 faac 	bl	8003fc0 <HAL_I2C_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a6e:	f000 f99f 	bl	8000db0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a72:	2100      	movs	r1, #0
 8000a74:	4809      	ldr	r0, [pc, #36]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a76:	f003 fb3f 	bl	80040f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a80:	f000 f996 	bl	8000db0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_I2C1_Init+0x74>)
 8000a88:	f003 fb81 	bl	800418e <HAL_I2CEx_ConfigDigitalFilter>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a92:	f000 f98d 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2400020c 	.word	0x2400020c
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	107075b0 	.word	0x107075b0

08000aa8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b0ba      	sub	sp, #232	@ 0xe8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	22c0      	movs	r2, #192	@ 0xc0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f009 fe00 	bl	800a6ce <memset>
  if(i2cHandle->Instance==I2C1)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a26      	ldr	r2, [pc, #152]	@ (8000b6c <HAL_I2C_MspInit+0xc4>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d145      	bne.n	8000b64 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ad8:	f04f 0208 	mov.w	r2, #8
 8000adc:	f04f 0300 	mov.w	r3, #0
 8000ae0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	4618      	mov	r0, r3
 8000af0:	f004 fbba 	bl	8005268 <HAL_RCCEx_PeriphCLKConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000afa:	f000 f959 	bl	8000db0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <HAL_I2C_MspInit+0xc8>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b04:	4a1a      	ldr	r2, [pc, #104]	@ (8000b70 <HAL_I2C_MspInit+0xc8>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <HAL_I2C_MspInit+0xc8>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b1c:	23c0      	movs	r3, #192	@ 0xc0
 8000b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b22:	2312      	movs	r3, #18
 8000b24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b34:	2304      	movs	r3, #4
 8000b36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <HAL_I2C_MspInit+0xcc>)
 8000b42:	f003 f841 	bl	8003bc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b46:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <HAL_I2C_MspInit+0xc8>)
 8000b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b4c:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <HAL_I2C_MspInit+0xc8>)
 8000b4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_I2C_MspInit+0xc8>)
 8000b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b64:	bf00      	nop
 8000b66:	37e8      	adds	r7, #232	@ 0xe8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40005400 	.word	0x40005400
 8000b70:	58024400 	.word	0x58024400
 8000b74:	58020400 	.word	0x58020400

08000b78 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7c:	f3bf 8f4f 	dsb	sy
}
 8000b80:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <__NVIC_SystemReset+0x24>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000b8a:	4904      	ldr	r1, [pc, #16]	@ (8000b9c <__NVIC_SystemReset+0x24>)
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <__NVIC_SystemReset+0x28>)
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b92:	f3bf 8f4f 	dsb	sy
}
 8000b96:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <__NVIC_SystemReset+0x20>
 8000b9c:	e000ed00 	.word	0xe000ed00
 8000ba0:	05fa0004 	.word	0x05fa0004

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000baa:	f000 f8d5 	bl	8000d58 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f002 fdc1 	bl	8003734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f853 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f7ff fdd1 	bl	800075c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bba:	f7ff ff35 	bl	8000a28 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bbe:	f000 f8fd 	bl	8000dbc <MX_SPI1_Init>
  MX_TIM1_Init();
 8000bc2:	f000 fbf5 	bl	80013b0 <MX_TIM1_Init>
  MX_SPI2_Init();
 8000bc6:	f000 f94f 	bl	8000e68 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000bca:	f000 fc45 	bl	8001458 <MX_TIM2_Init>
  MX_UART4_Init();
 8000bce:	f000 fd57 	bl	8001680 <MX_UART4_Init>
	 * 否则Antenna_Array_Init()时DW1000内部还没开始工作 SPI通信会失败
	 * 错过了Antenna_Array_Init()这次初始化后只能复位STM32
	 *
	 * RSTn引脚被DW1000内部拉高标志着进入了INIT状态
	 */
	if(Check_DW1000RSTn(100) != UWB_OK || Antenna_Array_Init() != UWB_OK)
 8000bd2:	2064      	movs	r0, #100	@ 0x64
 8000bd4:	f001 f928 	bl	8001e28 <Check_DW1000RSTn>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d104      	bne.n	8000be8 <main+0x44>
 8000bde:	f000 fe17 	bl	8001810 <Antenna_Array_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <main+0x4c>
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
	{
		/* 只需成功 不需失败 重启*/
		__disable_irq();
		NVIC_SystemReset();
 8000bec:	f7ff ffc4 	bl	8000b78 <__NVIC_SystemReset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	volatile uint8_t index = 255;
 8000bf0:	23ff      	movs	r3, #255	@ 0xff
 8000bf2:	70fb      	strb	r3, [r7, #3]
	while(1)
	{
		index = dequeueData();
 8000bf4:	f7ff fd82 	bl	80006fc <dequeueData>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	70fb      	strb	r3, [r7, #3]
		if (index != 255) {
 8000bfc:	78fb      	ldrb	r3, [r7, #3]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2bff      	cmp	r3, #255	@ 0xff
 8000c02:	d0f7      	beq.n	8000bf4 <main+0x50>
			DW1000_Port_t *pa = &UWB_device_array[index];
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	461a      	mov	r2, r3
 8000c0a:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000c0e:	fb02 f303 	mul.w	r3, r2, r3
 8000c12:	4a10      	ldr	r2, [pc, #64]	@ (8000c54 <main+0xb0>)
 8000c14:	4413      	add	r3, r2
 8000c16:	607b      	str	r3, [r7, #4]
			//可增加
			printf("\n%u,%u,%u,%f,%f", pa->aoa_param.sequence, index, pa->aoa_param.src_addr, pa->aoa_param.phi, pa->aoa_param.beta);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f8d3 1130 	ldr.w	r1, [r3, #304]	@ 0x130
 8000c1e:	78fb      	ldrb	r3, [r7, #3]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f8b3 312c 	ldrh.w	r3, [r3, #300]	@ 0x12c
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 8000c32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	edd3 6a4e 	vldr	s13, [r3, #312]	@ 0x138
 8000c3c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c40:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c44:	ed8d 7b00 	vstr	d7, [sp]
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4803      	ldr	r0, [pc, #12]	@ (8000c58 <main+0xb4>)
 8000c4c:	f009 fcea 	bl	800a624 <iprintf>
		index = dequeueData();
 8000c50:	e7d0      	b.n	8000bf4 <main+0x50>
 8000c52:	bf00      	nop
 8000c54:	24000260 	.word	0x24000260
 8000c58:	0800c7d0 	.word	0x0800c7d0

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09c      	sub	sp, #112	@ 0x70
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c66:	224c      	movs	r2, #76	@ 0x4c
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f009 fd2f 	bl	800a6ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2220      	movs	r2, #32
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f009 fd29 	bl	800a6ce <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c7c:	2002      	movs	r0, #2
 8000c7e:	f003 fad3 	bl	8004228 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4b32      	ldr	r3, [pc, #200]	@ (8000d50 <SystemClock_Config+0xf4>)
 8000c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c8a:	4a31      	ldr	r2, [pc, #196]	@ (8000d50 <SystemClock_Config+0xf4>)
 8000c8c:	f023 0301 	bic.w	r3, r3, #1
 8000c90:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c92:	4b2f      	ldr	r3, [pc, #188]	@ (8000d50 <SystemClock_Config+0xf4>)
 8000c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d54 <SystemClock_Config+0xf8>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8000d54 <SystemClock_Config+0xf8>)
 8000ca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b29      	ldr	r3, [pc, #164]	@ (8000d54 <SystemClock_Config+0xf8>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cb8:	bf00      	nop
 8000cba:	4b26      	ldr	r3, [pc, #152]	@ (8000d54 <SystemClock_Config+0xf8>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cc6:	d1f8      	bne.n	8000cba <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000ccc:	2380      	movs	r3, #128	@ 0x80
 8000cce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000cd0:	2320      	movs	r3, #32
 8000cd2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000ce0:	2378      	movs	r3, #120	@ 0x78
 8000ce2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cec:	2302      	movs	r3, #2
 8000cee:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d00:	4618      	mov	r0, r3
 8000d02:	f003 facb 	bl	800429c <HAL_RCC_OscConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d0c:	f000 f850 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d10:	233f      	movs	r3, #63	@ 0x3f
 8000d12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d14:	2303      	movs	r3, #3
 8000d16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d20:	2340      	movs	r3, #64	@ 0x40
 8000d22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000d24:	2350      	movs	r3, #80	@ 0x50
 8000d26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d2e:	2340      	movs	r3, #64	@ 0x40
 8000d30:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 ff0a 	bl	8004b50 <HAL_RCC_ClockConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000d42:	f000 f835 	bl	8000db0 <Error_Handler>
  }
}
 8000d46:	bf00      	nop
 8000d48:	3770      	adds	r7, #112	@ 0x70
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58000400 	.word	0x58000400
 8000d54:	58024800 	.word	0x58024800

08000d58 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d5e:	463b      	mov	r3, r7
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d6a:	f002 feb5 	bl	8003ad8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d7a:	231f      	movs	r3, #31
 8000d7c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d7e:	2387      	movs	r3, #135	@ 0x87
 8000d80:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d86:	2300      	movs	r3, #0
 8000d88:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 fed3 	bl	8003b48 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000da2:	2004      	movs	r0, #4
 8000da4:	f002 feb0 	bl	8003b08 <HAL_MPU_Enable>

}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <Error_Handler+0x8>

08000dbc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000dc0:	4b27      	ldr	r3, [pc, #156]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000dc2:	4a28      	ldr	r2, [pc, #160]	@ (8000e64 <MX_SPI1_Init+0xa8>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dc6:	4b26      	ldr	r3, [pc, #152]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000dc8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000dcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dce:	4b24      	ldr	r3, [pc, #144]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000dd4:	4b22      	ldr	r3, [pc, #136]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dda:	4b21      	ldr	r3, [pc, #132]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000de6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000de8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000dec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e00:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e06:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000e0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e12:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e38:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <MX_SPI1_Init+0xa4>)
 8000e4c:	f006 f838 	bl	8006ec0 <HAL_SPI_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000e56:	f7ff ffab 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	24000800 	.word	0x24000800
 8000e64:	40013000 	.word	0x40013000

08000e68 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e6c:	4b27      	ldr	r3, [pc, #156]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000e6e:	4a28      	ldr	r2, [pc, #160]	@ (8000f10 <MX_SPI2_Init+0xa8>)
 8000e70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e72:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000e74:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e7a:	4b24      	ldr	r3, [pc, #144]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e80:	4b22      	ldr	r3, [pc, #136]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000e82:	2203      	movs	r2, #3
 8000e84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e86:	4b21      	ldr	r3, [pc, #132]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e92:	4b1e      	ldr	r3, [pc, #120]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000e94:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea6:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eac:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000eb2:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000eba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ebe:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <MX_SPI2_Init+0xa4>)
 8000ef8:	f005 ffe2 	bl	8006ec0 <HAL_SPI_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000f02:	f7ff ff55 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	24000888 	.word	0x24000888
 8000f10:	40003800 	.word	0x40003800

08000f14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0bc      	sub	sp, #240	@ 0xf0
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	22c0      	movs	r2, #192	@ 0xc0
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f009 fbca 	bl	800a6ce <memset>
  if(spiHandle->Instance==SPI1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a4c      	ldr	r2, [pc, #304]	@ (8001070 <HAL_SPI_MspInit+0x15c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d145      	bne.n	8000fd0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f54:	f107 0318 	add.w	r3, r7, #24
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 f985 	bl	8005268 <HAL_RCCEx_PeriphCLKConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000f64:	f7ff ff24 	bl	8000db0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f68:	4b42      	ldr	r3, [pc, #264]	@ (8001074 <HAL_SPI_MspInit+0x160>)
 8000f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f6e:	4a41      	ldr	r2, [pc, #260]	@ (8001074 <HAL_SPI_MspInit+0x160>)
 8000f70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f78:	4b3e      	ldr	r3, [pc, #248]	@ (8001074 <HAL_SPI_MspInit+0x160>)
 8000f7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b3b      	ldr	r3, [pc, #236]	@ (8001074 <HAL_SPI_MspInit+0x160>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8c:	4a39      	ldr	r2, [pc, #228]	@ (8001074 <HAL_SPI_MspInit+0x160>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f96:	4b37      	ldr	r3, [pc, #220]	@ (8001074 <HAL_SPI_MspInit+0x160>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fa4:	23e0      	movs	r3, #224	@ 0xe0
 8000fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	482b      	ldr	r0, [pc, #172]	@ (8001078 <HAL_SPI_MspInit+0x164>)
 8000fca:	f002 fdfd 	bl	8003bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000fce:	e04a      	b.n	8001066 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a29      	ldr	r2, [pc, #164]	@ (800107c <HAL_SPI_MspInit+0x168>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d145      	bne.n	8001066 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000fda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fea:	f107 0318 	add.w	r3, r7, #24
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f004 f93a 	bl	8005268 <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8000ffa:	f7ff fed9 	bl	8000db0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <HAL_SPI_MspInit+0x160>)
 8001000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001004:	4a1b      	ldr	r2, [pc, #108]	@ (8001074 <HAL_SPI_MspInit+0x160>)
 8001006:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800100a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <HAL_SPI_MspInit+0x160>)
 8001010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001014:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_SPI_MspInit+0x160>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001022:	4a14      	ldr	r2, [pc, #80]	@ (8001074 <HAL_SPI_MspInit+0x160>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_SPI_MspInit+0x160>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800103a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800103e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001054:	2305      	movs	r3, #5
 8001056:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800105e:	4619      	mov	r1, r3
 8001060:	4807      	ldr	r0, [pc, #28]	@ (8001080 <HAL_SPI_MspInit+0x16c>)
 8001062:	f002 fdb1 	bl	8003bc8 <HAL_GPIO_Init>
}
 8001066:	bf00      	nop
 8001068:	37f0      	adds	r7, #240	@ 0xf0
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40013000 	.word	0x40013000
 8001074:	58024400 	.word	0x58024400
 8001078:	58020000 	.word	0x58020000
 800107c:	40003800 	.word	0x40003800
 8001080:	58020400 	.word	0x58020400

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <HAL_MspInit+0x30>)
 800108c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001090:	4a08      	ldr	r2, [pc, #32]	@ (80010b4 <HAL_MspInit+0x30>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800109a:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HAL_MspInit+0x30>)
 800109c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	58024400 	.word	0x58024400

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <NMI_Handler+0x4>

080010c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <MemManage_Handler+0x4>

080010d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <UsageFault_Handler+0x4>

080010e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110e:	f002 fb83 	bl	8003818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}

08001116 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UWB1_IRQ_Pin);
 800111a:	2001      	movs	r0, #1
 800111c:	f002 ff35 	bl	8003f8a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}

08001124 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UWB4_IRQ_Pin);
 8001128:	2040      	movs	r0, #64	@ 0x40
 800112a:	f002 ff2e 	bl	8003f8a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UWB2_IRQ_Pin);
 800112e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001132:	f002 ff2a 	bl	8003f8a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}

0800113a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UWB3_IRQ_Pin);
 800113e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001142:	f002 ff22 	bl	8003f8a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}

0800114a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  return 1;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <_kill>:

int _kill(int pid, int sig)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001164:	f009 fb06 	bl	800a774 <__errno>
 8001168:	4603      	mov	r3, r0
 800116a:	2216      	movs	r2, #22
 800116c:	601a      	str	r2, [r3, #0]
  return -1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <_exit>:

void _exit (int status)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001182:	f04f 31ff 	mov.w	r1, #4294967295
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffe7 	bl	800115a <_kill>
  while (1) {}    /* Make sure we hang here */
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <_exit+0x12>

08001190 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	e00a      	b.n	80011b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011a2:	f3af 8000 	nop.w
 80011a6:	4601      	mov	r1, r0
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	60ba      	str	r2, [r7, #8]
 80011ae:	b2ca      	uxtb	r2, r1
 80011b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	429a      	cmp	r2, r3
 80011be:	dbf0      	blt.n	80011a2 <_read+0x12>
  }

  return len;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <_close>:
  }
  return len;
}

int _close(int file)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011f2:	605a      	str	r2, [r3, #4]
  return 0;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_isatty>:

int _isatty(int file)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800123c:	4a14      	ldr	r2, [pc, #80]	@ (8001290 <_sbrk+0x5c>)
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <_sbrk+0x60>)
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <_sbrk+0x64>)
 8001252:	4a12      	ldr	r2, [pc, #72]	@ (800129c <_sbrk+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	429a      	cmp	r2, r3
 8001262:	d207      	bcs.n	8001274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001264:	f009 fa86 	bl	800a774 <__errno>
 8001268:	4603      	mov	r3, r0
 800126a:	220c      	movs	r2, #12
 800126c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	e009      	b.n	8001288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001274:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127a:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4a05      	ldr	r2, [pc, #20]	@ (8001298 <_sbrk+0x64>)
 8001284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	24080000 	.word	0x24080000
 8001294:	00000400 	.word	0x00000400
 8001298:	24000910 	.word	0x24000910
 800129c:	24000c80 	.word	0x24000c80

080012a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012a4:	4b37      	ldr	r3, [pc, #220]	@ (8001384 <SystemInit+0xe4>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012aa:	4a36      	ldr	r2, [pc, #216]	@ (8001384 <SystemInit+0xe4>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012b4:	4b34      	ldr	r3, [pc, #208]	@ (8001388 <SystemInit+0xe8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	2b06      	cmp	r3, #6
 80012be:	d807      	bhi.n	80012d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012c0:	4b31      	ldr	r3, [pc, #196]	@ (8001388 <SystemInit+0xe8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 030f 	bic.w	r3, r3, #15
 80012c8:	4a2f      	ldr	r2, [pc, #188]	@ (8001388 <SystemInit+0xe8>)
 80012ca:	f043 0307 	orr.w	r3, r3, #7
 80012ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012d0:	4b2e      	ldr	r3, [pc, #184]	@ (800138c <SystemInit+0xec>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a2d      	ldr	r2, [pc, #180]	@ (800138c <SystemInit+0xec>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012dc:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <SystemInit+0xec>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012e2:	4b2a      	ldr	r3, [pc, #168]	@ (800138c <SystemInit+0xec>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4929      	ldr	r1, [pc, #164]	@ (800138c <SystemInit+0xec>)
 80012e8:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <SystemInit+0xf0>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ee:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <SystemInit+0xe8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012fa:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <SystemInit+0xe8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 030f 	bic.w	r3, r3, #15
 8001302:	4a21      	ldr	r2, [pc, #132]	@ (8001388 <SystemInit+0xe8>)
 8001304:	f043 0307 	orr.w	r3, r3, #7
 8001308:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <SystemInit+0xec>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001310:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <SystemInit+0xec>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001316:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <SystemInit+0xec>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <SystemInit+0xec>)
 800131e:	4a1d      	ldr	r2, [pc, #116]	@ (8001394 <SystemInit+0xf4>)
 8001320:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001322:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <SystemInit+0xec>)
 8001324:	4a1c      	ldr	r2, [pc, #112]	@ (8001398 <SystemInit+0xf8>)
 8001326:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <SystemInit+0xec>)
 800132a:	4a1c      	ldr	r2, [pc, #112]	@ (800139c <SystemInit+0xfc>)
 800132c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800132e:	4b17      	ldr	r3, [pc, #92]	@ (800138c <SystemInit+0xec>)
 8001330:	2200      	movs	r2, #0
 8001332:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <SystemInit+0xec>)
 8001336:	4a19      	ldr	r2, [pc, #100]	@ (800139c <SystemInit+0xfc>)
 8001338:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800133a:	4b14      	ldr	r3, [pc, #80]	@ (800138c <SystemInit+0xec>)
 800133c:	2200      	movs	r2, #0
 800133e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <SystemInit+0xec>)
 8001342:	4a16      	ldr	r2, [pc, #88]	@ (800139c <SystemInit+0xfc>)
 8001344:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001346:	4b11      	ldr	r3, [pc, #68]	@ (800138c <SystemInit+0xec>)
 8001348:	2200      	movs	r2, #0
 800134a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <SystemInit+0xec>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0e      	ldr	r2, [pc, #56]	@ (800138c <SystemInit+0xec>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001356:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <SystemInit+0xec>)
 800135a:	2200      	movs	r2, #0
 800135c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <SystemInit+0x100>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <SystemInit+0x104>)
 8001364:	4013      	ands	r3, r2
 8001366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800136a:	d202      	bcs.n	8001372 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <SystemInit+0x108>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <SystemInit+0x10c>)
 8001374:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001378:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00
 8001388:	52002000 	.word	0x52002000
 800138c:	58024400 	.word	0x58024400
 8001390:	eaf6ed7f 	.word	0xeaf6ed7f
 8001394:	02020200 	.word	0x02020200
 8001398:	01ff0000 	.word	0x01ff0000
 800139c:	01010280 	.word	0x01010280
 80013a0:	5c001000 	.word	0x5c001000
 80013a4:	ffff0000 	.word	0xffff0000
 80013a8:	51008108 	.word	0x51008108
 80013ac:	52004000 	.word	0x52004000

080013b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <MX_TIM1_Init+0xa0>)
 80013d0:	4a20      	ldr	r2, [pc, #128]	@ (8001454 <MX_TIM1_Init+0xa4>)
 80013d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <MX_TIM1_Init+0xa0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <MX_TIM1_Init+0xa0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <MX_TIM1_Init+0xa0>)
 80013e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <MX_TIM1_Init+0xa0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ee:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <MX_TIM1_Init+0xa0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <MX_TIM1_Init+0xa0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013fa:	4815      	ldr	r0, [pc, #84]	@ (8001450 <MX_TIM1_Init+0xa0>)
 80013fc:	f006 fbdb 	bl	8007bb6 <HAL_TIM_Base_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001406:	f7ff fcd3 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800140e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4619      	mov	r1, r3
 8001416:	480e      	ldr	r0, [pc, #56]	@ (8001450 <MX_TIM1_Init+0xa0>)
 8001418:	f006 fd00 	bl	8007e1c <HAL_TIM_ConfigClockSource>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001422:	f7ff fcc5 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4806      	ldr	r0, [pc, #24]	@ (8001450 <MX_TIM1_Init+0xa0>)
 8001438:	f007 fa02 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001442:	f7ff fcb5 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	24000914 	.word	0x24000914
 8001454:	40010000 	.word	0x40010000

08001458 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	@ 0x38
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001478:	463b      	mov	r3, r7
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]
 8001486:	615a      	str	r2, [r3, #20]
 8001488:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800148a:	4b30      	ldr	r3, [pc, #192]	@ (800154c <MX_TIM2_Init+0xf4>)
 800148c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001490:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001492:	4b2e      	ldr	r3, [pc, #184]	@ (800154c <MX_TIM2_Init+0xf4>)
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001498:	4b2c      	ldr	r3, [pc, #176]	@ (800154c <MX_TIM2_Init+0xf4>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800149e:	4b2b      	ldr	r3, [pc, #172]	@ (800154c <MX_TIM2_Init+0xf4>)
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a6:	4b29      	ldr	r3, [pc, #164]	@ (800154c <MX_TIM2_Init+0xf4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ac:	4b27      	ldr	r3, [pc, #156]	@ (800154c <MX_TIM2_Init+0xf4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014b2:	4826      	ldr	r0, [pc, #152]	@ (800154c <MX_TIM2_Init+0xf4>)
 80014b4:	f006 fb7f 	bl	8007bb6 <HAL_TIM_Base_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80014be:	f7ff fc77 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80014c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	633b      	str	r3, [r7, #48]	@ 0x30
  sClockSourceConfig.ClockFilter = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014d8:	4619      	mov	r1, r3
 80014da:	481c      	ldr	r0, [pc, #112]	@ (800154c <MX_TIM2_Init+0xf4>)
 80014dc:	f006 fc9e 	bl	8007e1c <HAL_TIM_ConfigClockSource>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80014e6:	f7ff fc63 	bl	8000db0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80014ea:	4818      	ldr	r0, [pc, #96]	@ (800154c <MX_TIM2_Init+0xf4>)
 80014ec:	f006 fbba 	bl	8007c64 <HAL_TIM_OC_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80014f6:	f7ff fc5b 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4619      	mov	r1, r3
 8001508:	4810      	ldr	r0, [pc, #64]	@ (800154c <MX_TIM2_Init+0xf4>)
 800150a:	f007 f999 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8001514:	f7ff fc4c 	bl	8000db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001518:	2300      	movs	r3, #0
 800151a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	2204      	movs	r2, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4807      	ldr	r0, [pc, #28]	@ (800154c <MX_TIM2_Init+0xf4>)
 8001530:	f006 fbfa 	bl	8007d28 <HAL_TIM_OC_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800153a:	f7ff fc39 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800153e:	4803      	ldr	r0, [pc, #12]	@ (800154c <MX_TIM2_Init+0xf4>)
 8001540:	f000 f866 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8001544:	bf00      	nop
 8001546:	3738      	adds	r7, #56	@ 0x38
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	24000960 	.word	0x24000960

08001550 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a25      	ldr	r2, [pc, #148]	@ (8001604 <HAL_TIM_Base_MspInit+0xb4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d10f      	bne.n	8001592 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001572:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <HAL_TIM_Base_MspInit+0xb8>)
 8001574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001578:	4a23      	ldr	r2, [pc, #140]	@ (8001608 <HAL_TIM_Base_MspInit+0xb8>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001582:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <HAL_TIM_Base_MspInit+0xb8>)
 8001584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001590:	e033      	b.n	80015fa <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800159a:	d12e      	bne.n	80015fa <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800159c:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <HAL_TIM_Base_MspInit+0xb8>)
 800159e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a2:	4a19      	ldr	r2, [pc, #100]	@ (8001608 <HAL_TIM_Base_MspInit+0xb8>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015ac:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <HAL_TIM_Base_MspInit+0xb8>)
 80015ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <HAL_TIM_Base_MspInit+0xb8>)
 80015bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c0:	4a11      	ldr	r2, [pc, #68]	@ (8001608 <HAL_TIM_Base_MspInit+0xb8>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <HAL_TIM_Base_MspInit+0xb8>)
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ea:	2301      	movs	r3, #1
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	@ (800160c <HAL_TIM_Base_MspInit+0xbc>)
 80015f6:	f002 fae7 	bl	8003bc8 <HAL_GPIO_Init>
}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	@ 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40010000 	.word	0x40010000
 8001608:	58024400 	.word	0x58024400
 800160c:	58020000 	.word	0x58020000

08001610 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001630:	d11e      	bne.n	8001670 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <HAL_TIM_MspPostInit+0x68>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001638:	4a0f      	ldr	r2, [pc, #60]	@ (8001678 <HAL_TIM_MspPostInit+0x68>)
 800163a:	f043 0302 	orr.w	r3, r3, #2
 800163e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001642:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <HAL_TIM_MspPostInit+0x68>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001650:	2308      	movs	r3, #8
 8001652:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001660:	2301      	movs	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	4619      	mov	r1, r3
 800166a:	4804      	ldr	r0, [pc, #16]	@ (800167c <HAL_TIM_MspPostInit+0x6c>)
 800166c:	f002 faac 	bl	8003bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	58024400 	.word	0x58024400
 800167c:	58020400 	.word	0x58020400

08001680 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001684:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <MX_UART4_Init+0x90>)
 8001686:	4a23      	ldr	r2, [pc, #140]	@ (8001714 <MX_UART4_Init+0x94>)
 8001688:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800168a:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <MX_UART4_Init+0x90>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <MX_UART4_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <MX_UART4_Init+0x90>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800169e:	4b1c      	ldr	r3, [pc, #112]	@ (8001710 <MX_UART4_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <MX_UART4_Init+0x90>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <MX_UART4_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <MX_UART4_Init+0x90>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b6:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <MX_UART4_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016bc:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <MX_UART4_Init+0x90>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c2:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <MX_UART4_Init+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016c8:	4811      	ldr	r0, [pc, #68]	@ (8001710 <MX_UART4_Init+0x90>)
 80016ca:	f007 f947 	bl	800895c <HAL_UART_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80016d4:	f7ff fb6c 	bl	8000db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d8:	2100      	movs	r1, #0
 80016da:	480d      	ldr	r0, [pc, #52]	@ (8001710 <MX_UART4_Init+0x90>)
 80016dc:	f008 f9dd 	bl	8009a9a <HAL_UARTEx_SetTxFifoThreshold>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80016e6:	f7ff fb63 	bl	8000db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ea:	2100      	movs	r1, #0
 80016ec:	4808      	ldr	r0, [pc, #32]	@ (8001710 <MX_UART4_Init+0x90>)
 80016ee:	f008 fa12 	bl	8009b16 <HAL_UARTEx_SetRxFifoThreshold>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80016f8:	f7ff fb5a 	bl	8000db0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	@ (8001710 <MX_UART4_Init+0x90>)
 80016fe:	f008 f993 	bl	8009a28 <HAL_UARTEx_DisableFifoMode>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001708:	f7ff fb52 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	240009ac 	.word	0x240009ac
 8001714:	40004c00 	.word	0x40004c00

08001718 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b0ba      	sub	sp, #232	@ 0xe8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	22c0      	movs	r2, #192	@ 0xc0
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f008 ffc8 	bl	800a6ce <memset>
  if(uartHandle->Instance==UART4)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a26      	ldr	r2, [pc, #152]	@ (80017dc <HAL_UART_MspInit+0xc4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d145      	bne.n	80017d4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001748:	f04f 0202 	mov.w	r2, #2
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001754:	2300      	movs	r3, #0
 8001756:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	4618      	mov	r0, r3
 8001760:	f003 fd82 	bl	8005268 <HAL_RCCEx_PeriphCLKConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800176a:	f7ff fb21 	bl	8000db0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <HAL_UART_MspInit+0xc8>)
 8001770:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001774:	4a1a      	ldr	r2, [pc, #104]	@ (80017e0 <HAL_UART_MspInit+0xc8>)
 8001776:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800177a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <HAL_UART_MspInit+0xc8>)
 8001780:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001784:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <HAL_UART_MspInit+0xc8>)
 800178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001792:	4a13      	ldr	r2, [pc, #76]	@ (80017e0 <HAL_UART_MspInit+0xc8>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800179c:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <HAL_UART_MspInit+0xc8>)
 800179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017aa:	2303      	movs	r3, #3
 80017ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017c2:	2308      	movs	r3, #8
 80017c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017cc:	4619      	mov	r1, r3
 80017ce:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <HAL_UART_MspInit+0xcc>)
 80017d0:	f002 f9fa 	bl	8003bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80017d4:	bf00      	nop
 80017d6:	37e8      	adds	r7, #232	@ 0xe8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40004c00 	.word	0x40004c00
 80017e0:	58024400 	.word	0x58024400
 80017e4:	58020000 	.word	0x58020000

080017e8 <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
//HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
  HAL_UART_Transmit(&huart4, (uint8_t*)ptr, len, 100);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	2364      	movs	r3, #100	@ 0x64
 80017fa:	68b9      	ldr	r1, [r7, #8]
 80017fc:	4803      	ldr	r0, [pc, #12]	@ (800180c <_write+0x24>)
 80017fe:	f007 f8fd 	bl	80089fc <HAL_UART_Transmit>

  return len;
 8001802:	687b      	ldr	r3, [r7, #4]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	240009ac 	.word	0x240009ac

08001810 <Antenna_Array_Init>:
//Tanya_add
volatile uint32_t data_sequence = 0;


UWB_StatusTypeDef Antenna_Array_Init()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e0b2      	b.n	8001982 <Antenna_Array_Init+0x172>
	{
		UWB_device_array[0].port.index = 0;
 800181c:	4baa      	ldr	r3, [pc, #680]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		UWB_device_array[0].port.hspi = &hspi1;
 8001824:	4ba8      	ldr	r3, [pc, #672]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001826:	4aa9      	ldr	r2, [pc, #676]	@ (8001acc <Antenna_Array_Init+0x2bc>)
 8001828:	609a      	str	r2, [r3, #8]
		UWB_device_array[0].port.irq_pin = UWB1_IRQ_Pin;
 800182a:	4ba7      	ldr	r3, [pc, #668]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 800182c:	2201      	movs	r2, #1
 800182e:	851a      	strh	r2, [r3, #40]	@ 0x28
		UWB_device_array[0].port.irq_port = UWB1_IRQ_GPIO_Port;
 8001830:	4ba5      	ldr	r3, [pc, #660]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001832:	4aa7      	ldr	r2, [pc, #668]	@ (8001ad0 <Antenna_Array_Init+0x2c0>)
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24
		UWB_device_array[0].port.rstn_pin = UWB1_RESET_Pin;
 8001836:	4ba4      	ldr	r3, [pc, #656]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001838:	2202      	movs	r2, #2
 800183a:	841a      	strh	r2, [r3, #32]
		UWB_device_array[0].port.rstn_port = UWB1_RESET_GPIO_Port;
 800183c:	4ba2      	ldr	r3, [pc, #648]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 800183e:	4aa4      	ldr	r2, [pc, #656]	@ (8001ad0 <Antenna_Array_Init+0x2c0>)
 8001840:	61da      	str	r2, [r3, #28]
		UWB_device_array[0].port.spi_csn_pin = UWB1_CSn_Pin;
 8001842:	4ba1      	ldr	r3, [pc, #644]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001844:	2204      	movs	r2, #4
 8001846:	821a      	strh	r2, [r3, #16]
		UWB_device_array[0].port.spi_csn_port = UWB1_CSn_GPIO_Port;
 8001848:	4b9f      	ldr	r3, [pc, #636]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 800184a:	4aa1      	ldr	r2, [pc, #644]	@ (8001ad0 <Antenna_Array_Init+0x2c0>)
 800184c:	60da      	str	r2, [r3, #12]
		UWB_device_array[0].port.wakeup_pin = UWB1_WAKEUP_Pin;
 800184e:	4b9e      	ldr	r3, [pc, #632]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001850:	2280      	movs	r2, #128	@ 0x80
 8001852:	831a      	strh	r2, [r3, #24]
		UWB_device_array[0].port.wakeup_port = UWB1_WAKEUP_GPIO_Port;
 8001854:	4b9c      	ldr	r3, [pc, #624]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001856:	4a9f      	ldr	r2, [pc, #636]	@ (8001ad4 <Antenna_Array_Init+0x2c4>)
 8001858:	615a      	str	r2, [r3, #20]
		UWB_device_array[0].port.irq = EXTI0_IRQn;
 800185a:	4b9b      	ldr	r3, [pc, #620]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 800185c:	2206      	movs	r2, #6
 800185e:	62da      	str	r2, [r3, #44]	@ 0x2c

		UWB_device_array[1].port.index = 1;
 8001860:	4b99      	ldr	r3, [pc, #612]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2198 	strb.w	r2, [r3, #408]	@ 0x198
		UWB_device_array[1].port.hspi = &hspi1;
 8001868:	4b97      	ldr	r3, [pc, #604]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 800186a:	4a98      	ldr	r2, [pc, #608]	@ (8001acc <Antenna_Array_Init+0x2bc>)
 800186c:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
		UWB_device_array[1].port.irq_pin = UWB2_IRQ_Pin;
 8001870:	4b95      	ldr	r3, [pc, #596]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001876:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
		UWB_device_array[1].port.irq_port = UWB2_IRQ_GPIO_Port;
 800187a:	4b93      	ldr	r3, [pc, #588]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 800187c:	4a95      	ldr	r2, [pc, #596]	@ (8001ad4 <Antenna_Array_Init+0x2c4>)
 800187e:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
		UWB_device_array[1].port.rstn_pin = UWB2_RESET_Pin;
 8001882:	4b91      	ldr	r3, [pc, #580]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001884:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001888:	f8a3 2188 	strh.w	r2, [r3, #392]	@ 0x188
		UWB_device_array[1].port.rstn_port = UWB2_RESET_GPIO_Port;
 800188c:	4b8e      	ldr	r3, [pc, #568]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 800188e:	4a91      	ldr	r2, [pc, #580]	@ (8001ad4 <Antenna_Array_Init+0x2c4>)
 8001890:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
		UWB_device_array[1].port.spi_csn_pin = UWB2_CSn_Pin;
 8001894:	4b8c      	ldr	r3, [pc, #560]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001896:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800189a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
		UWB_device_array[1].port.spi_csn_port = UWB2_CSn_GPIO_Port;
 800189e:	4b8a      	ldr	r3, [pc, #552]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 80018a0:	4a8c      	ldr	r2, [pc, #560]	@ (8001ad4 <Antenna_Array_Init+0x2c4>)
 80018a2:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
		UWB_device_array[1].port.wakeup_pin = UWB2_WAKEUP_Pin;
 80018a6:	4b88      	ldr	r3, [pc, #544]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 80018a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018ac:	f8a3 2180 	strh.w	r2, [r3, #384]	@ 0x180
		UWB_device_array[1].port.wakeup_port = UWB2_WAKEUP_GPIO_Port;
 80018b0:	4b85      	ldr	r3, [pc, #532]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 80018b2:	4a88      	ldr	r2, [pc, #544]	@ (8001ad4 <Antenna_Array_Init+0x2c4>)
 80018b4:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
		UWB_device_array[1].port.irq = EXTI9_5_IRQn;
 80018b8:	4b83      	ldr	r3, [pc, #524]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 80018ba:	2217      	movs	r2, #23
 80018bc:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194

		UWB_device_array[2].port.index = 2;
 80018c0:	4b81      	ldr	r3, [pc, #516]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
		UWB_device_array[2].port.hspi = &hspi2;
 80018c8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 80018ca:	4a83      	ldr	r2, [pc, #524]	@ (8001ad8 <Antenna_Array_Init+0x2c8>)
 80018cc:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
		UWB_device_array[2].port.irq_pin = UWB3_IRQ_Pin;
 80018d0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 80018d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018d6:	f8a3 22f8 	strh.w	r2, [r3, #760]	@ 0x2f8
		UWB_device_array[2].port.irq_port = UWB3_IRQ_GPIO_Port;
 80018da:	4b7b      	ldr	r3, [pc, #492]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 80018dc:	4a7f      	ldr	r2, [pc, #508]	@ (8001adc <Antenna_Array_Init+0x2cc>)
 80018de:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
		UWB_device_array[2].port.rstn_pin = UWB3_RESET_Pin;
 80018e2:	4b79      	ldr	r3, [pc, #484]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 80018e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018e8:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0
		UWB_device_array[2].port.rstn_port = UWB3_RESET_GPIO_Port;
 80018ec:	4b76      	ldr	r3, [pc, #472]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 80018ee:	4a7b      	ldr	r2, [pc, #492]	@ (8001adc <Antenna_Array_Init+0x2cc>)
 80018f0:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
		UWB_device_array[2].port.spi_csn_pin = UWB3_CSn_Pin;
 80018f4:	4b74      	ldr	r3, [pc, #464]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 80018f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018fa:	f8a3 22e0 	strh.w	r2, [r3, #736]	@ 0x2e0
		UWB_device_array[2].port.spi_csn_port = UWB3_CSn_GPIO_Port;
 80018fe:	4b72      	ldr	r3, [pc, #456]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001900:	4a76      	ldr	r2, [pc, #472]	@ (8001adc <Antenna_Array_Init+0x2cc>)
 8001902:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
		UWB_device_array[2].port.wakeup_pin = UWB3_WAKEUP_Pin;
 8001906:	4b70      	ldr	r3, [pc, #448]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001908:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800190c:	f8a3 22e8 	strh.w	r2, [r3, #744]	@ 0x2e8
		UWB_device_array[2].port.wakeup_port = UWB3_WAKEUP_GPIO_Port;
 8001910:	4b6d      	ldr	r3, [pc, #436]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001912:	4a72      	ldr	r2, [pc, #456]	@ (8001adc <Antenna_Array_Init+0x2cc>)
 8001914:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
		UWB_device_array[2].port.irq = EXTI15_10_IRQn;
 8001918:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 800191a:	2228      	movs	r2, #40	@ 0x28
 800191c:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc

		UWB_device_array[3].port.index = 3;
 8001920:	4b69      	ldr	r3, [pc, #420]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001922:	2203      	movs	r2, #3
 8001924:	f883 2468 	strb.w	r2, [r3, #1128]	@ 0x468
		UWB_device_array[3].port.hspi = &hspi2;
 8001928:	4b67      	ldr	r3, [pc, #412]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 800192a:	4a6b      	ldr	r2, [pc, #428]	@ (8001ad8 <Antenna_Array_Init+0x2c8>)
 800192c:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
		UWB_device_array[3].port.irq_pin = UWB4_IRQ_Pin;
 8001930:	4b65      	ldr	r3, [pc, #404]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001932:	2240      	movs	r2, #64	@ 0x40
 8001934:	f8a3 2460 	strh.w	r2, [r3, #1120]	@ 0x460
		UWB_device_array[3].port.irq_port = UWB4_IRQ_GPIO_Port;
 8001938:	4b63      	ldr	r3, [pc, #396]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 800193a:	4a69      	ldr	r2, [pc, #420]	@ (8001ae0 <Antenna_Array_Init+0x2d0>)
 800193c:	f8c3 245c 	str.w	r2, [r3, #1116]	@ 0x45c
		UWB_device_array[3].port.rstn_pin = UWB4_RESET_Pin;
 8001940:	4b61      	ldr	r3, [pc, #388]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001942:	2280      	movs	r2, #128	@ 0x80
 8001944:	f8a3 2458 	strh.w	r2, [r3, #1112]	@ 0x458
		UWB_device_array[3].port.rstn_port = UWB4_RESET_GPIO_Port;
 8001948:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 800194a:	4a65      	ldr	r2, [pc, #404]	@ (8001ae0 <Antenna_Array_Init+0x2d0>)
 800194c:	f8c3 2454 	str.w	r2, [r3, #1108]	@ 0x454
		UWB_device_array[3].port.spi_csn_pin = UWB4_CSn_Pin;
 8001950:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001952:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001956:	f8a3 2448 	strh.w	r2, [r3, #1096]	@ 0x448
		UWB_device_array[3].port.spi_csn_port = UWB4_CSn_GPIO_Port;
 800195a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 800195c:	4a60      	ldr	r2, [pc, #384]	@ (8001ae0 <Antenna_Array_Init+0x2d0>)
 800195e:	f8c3 2444 	str.w	r2, [r3, #1092]	@ 0x444
		UWB_device_array[3].port.wakeup_pin = UWB4_WAKEUP_Pin;
 8001962:	4b59      	ldr	r3, [pc, #356]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001964:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001968:	f8a3 2450 	strh.w	r2, [r3, #1104]	@ 0x450
		UWB_device_array[3].port.wakeup_port = UWB4_WAKEUP_GPIO_Port;
 800196c:	4b56      	ldr	r3, [pc, #344]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 800196e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ae0 <Antenna_Array_Init+0x2d0>)
 8001970:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
		UWB_device_array[3].port.irq = EXTI9_5_IRQn;
 8001974:	4b54      	ldr	r3, [pc, #336]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001976:	2217      	movs	r2, #23
 8001978:	f8c3 2464 	str.w	r2, [r3, #1124]	@ 0x464
	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	3301      	adds	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2b03      	cmp	r3, #3
 8001986:	f77f af49 	ble.w	800181c <Antenna_Array_Init+0xc>

	/* Reset and initialise DW1000.
	 * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
	 * performance. */

	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	e00d      	b.n	80019ac <Antenna_Array_Init+0x19c>
	{
		reset_DW1000((DW1000_Port_t *)&UWB_device_array[i].port);
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	3308      	adds	r3, #8
 800199c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 800199e:	4413      	add	r3, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 fd8b 	bl	80034bc <reset_DW1000>
	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	3301      	adds	r3, #1
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	ddee      	ble.n	8001990 <Antenna_Array_Init+0x180>
	}

	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	e07e      	b.n	8001ab6 <Antenna_Array_Init+0x2a6>
	{
		DW1000_Port_t *antenna_port = (DW1000_Port_t *) &UWB_device_array[i].port;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	3308      	adds	r3, #8
 80019c4:	4a40      	ldr	r2, [pc, #256]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 80019c6:	4413      	add	r3, r2
 80019c8:	607b      	str	r3, [r7, #4]
		int trys = 10;
 80019ca:	230a      	movs	r3, #10
 80019cc:	60bb      	str	r3, [r7, #8]
		port_set_dw1000_slowrate(antenna_port);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f001 fd99 	bl	8003506 <port_set_dw1000_slowrate>

		dwt_setlocaldataptr(i);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fa90 	bl	8001efc <dwt_setlocaldataptr>

		do
		{
			if(dwt_initialise(DWT_LOADUCODE,
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	2001      	movs	r0, #1
 80019e0:	f000 faaa 	bl	8001f38 <dwt_initialise>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10a      	bne.n	8001a00 <Antenna_Array_Init+0x1f0>
							  antenna_port) == DWT_SUCCESS)
			{
				UWB_device_array[i].avalible = 1;
 80019ea:	4a37      	ldr	r2, [pc, #220]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80019f2:	fb01 f303 	mul.w	r3, r1, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	3304      	adds	r3, #4
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
 80019fe:	e010      	b.n	8001a22 <Antenna_Array_Init+0x212>
			}
			else
			{
				reset_DW1000((DW1000_Port_t *)&UWB_device_array[i].port);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001a0e:	4413      	add	r3, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 fd53 	bl	80034bc <reset_DW1000>
				deca_sleep(5);
 8001a16:	2005      	movs	r0, #5
 8001a18:	f001 fc47 	bl	80032aa <deca_sleep>
				trys--;
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
			}
		} while((trys > 0) && UWB_device_array[i].avalible != 1);
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	dd0b      	ble.n	8001a40 <Antenna_Array_Init+0x230>
 8001a28:	4a27      	ldr	r2, [pc, #156]	@ (8001ac8 <Antenna_Array_Init+0x2b8>)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	3304      	adds	r3, #4
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d1cd      	bne.n	80019dc <Antenna_Array_Init+0x1cc>
		if(trys <= 0)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	dc01      	bgt.n	8001a4a <Antenna_Array_Init+0x23a>
		{
			return UWB_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e03a      	b.n	8001ac0 <Antenna_Array_Init+0x2b0>
		}

		port_set_dw1000_fastrate(antenna_port);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f001 fd6d 	bl	800352a <port_set_dw1000_fastrate>

		/*Setup Interrupt*/
		dwt_setinterrupt((SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO),
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	2102      	movs	r1, #2
 8001a54:	4823      	ldr	r0, [pc, #140]	@ (8001ae4 <Antenna_Array_Init+0x2d4>)
 8001a56:	f001 fb39 	bl	80030cc <dwt_setinterrupt>
						 2,
						 antenna_port);

		//核心 四个回调函数
		dwt_setcallbacks(NULL,
 8001a5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <Antenna_Array_Init+0x2d8>)
 8001a5c:	4a23      	ldr	r2, [pc, #140]	@ (8001aec <Antenna_Array_Init+0x2dc>)
 8001a5e:	4924      	ldr	r1, [pc, #144]	@ (8001af0 <Antenna_Array_Init+0x2e0>)
 8001a60:	2000      	movs	r0, #0
 8001a62:	f000 ffe9 	bl	8002a38 <dwt_setcallbacks>
						 rxOkCallback,
						 rxToCallback,
						 rxErrCallback);
		port_set_deca_isr(dwt_isr,
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4822      	ldr	r0, [pc, #136]	@ (8001af4 <Antenna_Array_Init+0x2e4>)
 8001a6a:	f001 fe43 	bl	80036f4 <port_set_deca_isr>
						  antenna_port);

		dwt_write32bitreg(SYS_STATUS_ID,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a21      	ldr	r2, [pc, #132]	@ (8001af8 <Antenna_Array_Init+0x2e8>)
 8001a72:	2100      	movs	r1, #0
 8001a74:	200f      	movs	r0, #15
 8001a76:	f000 ff3e 	bl	80028f6 <dwt_write32bitoffsetreg>
						  SYS_STATUS_ALL_RX_GOOD | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR,
						  antenna_port);

		dwt_configure(&config,
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	481f      	ldr	r0, [pc, #124]	@ (8001afc <Antenna_Array_Init+0x2ec>)
 8001a7e:	f000 fbcb 	bl	8002218 <dwt_configure>
					  antenna_port);

		dwt_setrxantennadelay(RX_ANT_DLY,
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	f244 0043 	movw	r0, #16451	@ 0x4043
 8001a88:	f000 fd46 	bl	8002518 <dwt_setrxantennadelay>
							  antenna_port);
		dwt_settxantennadelay(TX_ANT_DLY,
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	f244 0043 	movw	r0, #16451	@ 0x4043
 8001a92:	f000 fd52 	bl	800253a <dwt_settxantennadelay>
							  antenna_port);

		dwt_setpreambledetecttimeout(PRE_TIMEOUT,
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f001 fb07 	bl	80030ac <dwt_setpreambledetecttimeout>
									 antenna_port);

		/* Configure LED */
		dwt_setleds(1,
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f001 f8f3 	bl	8002c8c <dwt_setleds>
					antenna_port);

		/* Set Sync to OSTR*/
		dwt_setecctrl(EC_CTRL_OSTRM,
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001aac:	f001 fbc8 	bl	8003240 <dwt_setecctrl>
	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	f77f af7d 	ble.w	80019b8 <Antenna_Array_Init+0x1a8>
					  antenna_port);
	}
	return UWB_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	24000260 	.word	0x24000260
 8001acc:	24000800 	.word	0x24000800
 8001ad0:	58020400 	.word	0x58020400
 8001ad4:	58021000 	.word	0x58021000
 8001ad8:	24000888 	.word	0x24000888
 8001adc:	58020c00 	.word	0x58020c00
 8001ae0:	58020800 	.word	0x58020800
 8001ae4:	2427d000 	.word	0x2427d000
 8001ae8:	08001e07 	.word	0x08001e07
 8001aec:	08001de5 	.word	0x08001de5
 8001af0:	08001d91 	.word	0x08001d91
 8001af4:	08002a79 	.word	0x08002a79
 8001af8:	2427ff00 	.word	0x2427ff00
 8001afc:	24000008 	.word	0x24000008

08001b00 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(DW1000_Port_t *pports)
{
 8001b00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b04:	b088      	sub	sp, #32
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
	uint8 ts_tab[5];
	uint64 ts = 0;
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i;
	dwt_readrxtimestamp(ts_tab,
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fd92 	bl	8002646 <dwt_readrxtimestamp>
						pports);
	for(i = 4; i >= 0; i--)
 8001b22:	2304      	movs	r3, #4
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e01f      	b.n	8001b68 <get_rx_timestamp_u64+0x68>
	{
		ts <<= 8;
 8001b28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	020b      	lsls	r3, r1, #8
 8001b36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001b3a:	0202      	lsls	r2, r0, #8
 8001b3c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ts |= ts_tab[i];
 8001b40:	f107 020c 	add.w	r2, r7, #12
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	4413      	add	r3, r2
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	461c      	mov	r4, r3
 8001b50:	4615      	mov	r5, r2
 8001b52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b56:	ea42 0804 	orr.w	r8, r2, r4
 8001b5a:	ea43 0905 	orr.w	r9, r3, r5
 8001b5e:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for(i = 4; i >= 0; i--)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	dadc      	bge.n	8001b28 <get_rx_timestamp_u64+0x28>
	}
	return ts;
 8001b6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001b7e <uwb_get_fp_angle>:

static float uwb_get_fp_angle(uint16_t fp_index, DW1000_Port_t *pports)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	6039      	str	r1, [r7, #0]
 8001b88:	80fb      	strh	r3, [r7, #6]
    uint8_t acc_buffer[5];
    uint8_t len = 4;
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	75fb      	strb	r3, [r7, #23]
    int16_t cir_real, cir_imag;
    dwt_readaccdata(acc_buffer,
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	3301      	adds	r3, #1
 8001b94:	b299      	uxth	r1, r3
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	f107 0010 	add.w	r0, r7, #16
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	f000 fcef 	bl	8002584 <dwt_readaccdata>
                    len + 1,
                    4 * fp_index,
                    pports);
    memcpy(&cir_real,
 8001ba6:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	81fb      	strh	r3, [r7, #14]
           &acc_buffer[1],
           sizeof(int16_t));
    memcpy(&cir_imag,
 8001bae:	f8b7 3013 	ldrh.w	r3, [r7, #19]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	81bb      	strh	r3, [r7, #12]
           &acc_buffer[3],
           sizeof(int16_t));
    return atan2f((float) cir_imag,
 8001bb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bc6:	ee07 3a10 	vmov	s14, r3
 8001bca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001bce:	eef0 0a47 	vmov.f32	s1, s14
 8001bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd6:	f00a fc2f 	bl	800c438 <atan2f>
 8001bda:	eef0 7a40 	vmov.f32	s15, s0
                  (float) cir_real);
}
 8001bde:	eeb0 0a67 	vmov.f32	s0, s15
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <read_pdoa>:


static void read_pdoa(DW1000_Port_t *antenna_port, uint64 rx_ts)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b0ae      	sub	sp, #184	@ 0xb8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	e9c7 2300 	strd	r2, r3, [r7]
//	uint64_t rx_ts_64 = (uint64_t) get_rx_timestamp_u64(pports);
//	uint32_t rx_ts = (uint32_t) rx_ts_64;
//	uint16_t src_car_id = uwb_node.pdoa_buffer.header.src;
//	uint8_t my_dw_id = pports - &UWB.ports[0];
	uint8_t my_dw_id = antenna_port->index;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001bfa:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	uint8_t rcphase;
	dwt_rxdiag_t tempdiag;
	uint8_t tempacc[129];
	uint16_t fp_index;
	float fp_angle;
	AoADiagnosticTypeDef *pdiag = &(antenna_port->aoa_diagnose);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8001c04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

	dwt_readrcphase(&rcphase, antenna_port);
 8001c08:	f107 03a7 	add.w	r3, r7, #167	@ 0xa7
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 faef 	bl	80031f2 <dwt_readrcphase>
	dwt_readdiagnostics(&tempdiag, antenna_port);
 8001c14:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001c18:	68f9      	ldr	r1, [r7, #12]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 fccf 	bl	80025be <dwt_readdiagnostics>
	fp_index = (uint16_t) round(((float) (tempdiag.firstPath & 0x3F) / 0x3F))
 8001c20:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8001c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c30:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8001d88 <read_pdoa+0x1a0>
 8001c34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c3c:	eeb0 0b47 	vmov.f64	d0, d7
 8001c40:	f00a fbfc 	bl	800c43c <round>
 8001c44:	eeb0 7b40 	vmov.f64	d7, d0
 8001c48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c4c:	ee17 3a90 	vmov	r3, s15
 8001c50:	b29a      	uxth	r2, r3
			+ (tempdiag.firstPath >> 6);
 8001c52:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8001c56:	099b      	lsrs	r3, r3, #6
 8001c58:	b29b      	uxth	r3, r3
	fp_index = (uint16_t) round(((float) (tempdiag.firstPath & 0x3F) / 0x3F))
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
	fp_angle = uwb_get_fp_angle(fp_index, antenna_port);
 8001c60:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff89 	bl	8001b7e <uwb_get_fp_angle>
 8001c6c:	ed87 0a2a 	vstr	s0, [r7, #168]	@ 0xa8

	//私以为这些都没什么必要的？但是是一些这种数据
	pdiag->avalible = 1;
 8001c70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c74:	2201      	movs	r2, #1
 8001c76:	769a      	strb	r2, [r3, #26]
	pdiag->fp_amp1 = tempdiag.firstPathAmp1;
 8001c78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8001c7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c80:	81da      	strh	r2, [r3, #14]
	pdiag->fp_amp2 = tempdiag.firstPathAmp2;
 8001c82:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8001c86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c8a:	821a      	strh	r2, [r3, #16]
	pdiag->fp_amp3 = tempdiag.firstPathAmp3;
 8001c8c:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8001c90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c94:	825a      	strh	r2, [r3, #18]
	pdiag->fp_amp_sum = pdiag->fp_amp1 + pdiag->fp_amp2 + pdiag->fp_amp3;
 8001c96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c9a:	89db      	ldrh	r3, [r3, #14]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ca2:	8a1b      	ldrh	r3, [r3, #16]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001caa:	8a52      	ldrh	r2, [r2, #18]
 8001cac:	4413      	add	r3, r2
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cb4:	615a      	str	r2, [r3, #20]
	pdiag->fp_angle = fp_angle;
 8001cb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001cbe:	609a      	str	r2, [r3, #8]
	pdiag->fp_index = fp_index;
 8001cc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cc4:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8001cc8:	819a      	strh	r2, [r3, #12]
	pdiag->my_dw_id = my_dw_id;
 8001cca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cce:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8001cd2:	701a      	strb	r2, [r3, #0]
	pdiag->rcphase = rcphase;
 8001cd4:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8001cd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cdc:	705a      	strb	r2, [r3, #1]
	pdiag->rx_ts = rx_ts;
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ce4:	605a      	str	r2, [r3, #4]
	pdiag->std_noise = tempdiag.stdNoise;
 8001ce6:	f8b7 2098 	ldrh.w	r2, [r7, #152]	@ 0x98
 8001cea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cee:	831a      	strh	r2, [r3, #24]
	pdiag->cir_pwr = tempdiag.maxGrowthCIR;
 8001cf0:	f8b7 209e 	ldrh.w	r2, [r7, #158]	@ 0x9e
 8001cf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cf8:	841a      	strh	r2, [r3, #32]
	pdiag->rxpacc = tempdiag.rxPreamCount;
 8001cfa:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	@ 0xa0
 8001cfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d02:	839a      	strh	r2, [r3, #28]
	pdiag->rxpacc_nosat = tempdiag.rxPreamCountNOSAT;
 8001d04:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8001d08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d0c:	83da      	strh	r2, [r3, #30]

	//test
	if (pdiag->fp_amp1 < (uint16_t) 256) {
 8001d0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d12:	89db      	ldrh	r3, [r3, #14]
 8001d14:	2bff      	cmp	r3, #255	@ 0xff
 8001d16:	d804      	bhi.n	8001d22 <read_pdoa+0x13a>
		pdiag->avalible = 0;
 8001d18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	769a      	strb	r2, [r3, #26]
 8001d20:	e024      	b.n	8001d6c <read_pdoa+0x184>
		return;
	}

	antenna_port->aoa_param.phi = fp_angle;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001d28:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
	antenna_port->aoa_param.beta = (float) rcphase / 64.0 * PI;
 8001d2c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d38:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001d3c:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 8001d78 <read_pdoa+0x190>
 8001d40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d44:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8001d80 <read_pdoa+0x198>
 8001d48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
	antenna_port->aoa_param.sequence = data_sequence;
 8001d56:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <read_pdoa+0x1a4>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

	/**
	 * @TODO enqueueData  (with index)
	 */

	enqueueData(antenna_port->index);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fc8a 	bl	8000680 <enqueueData>

//	UWB.aoa_param[my_dw_id].phi = fp_angle;
//	UWB.aoa_param[my_dw_id].beta = (float) rcphase / 64.0 * PI;
//	UWB.aoa_param[my_dw_id].avalible = 1;
//	UWB.aoa_param[my_dw_id].src_car_id = src_car_id;
}
 8001d6c:	37b8      	adds	r7, #184	@ 0xb8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	f3af 8000 	nop.w
 8001d78:	00000000 	.word	0x00000000
 8001d7c:	40500000 	.word	0x40500000
 8001d80:	4d12d84a 	.word	0x4d12d84a
 8001d84:	400921fb 	.word	0x400921fb
 8001d88:	427c0000 	.word	0x427c0000
 8001d8c:	24000a40 	.word	0x24000a40

08001d90 <rxOkCallback>:



void rxOkCallback(const dwt_cb_data_t *cbData, DW1000_Port_t *antenna_port)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
	uint64 rx_timestamp = 0;
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	/* Clear reception timeout to start next ranging process. */
	dwt_setrxtimeout(0,
 8001da6:	6839      	ldr	r1, [r7, #0]
 8001da8:	2000      	movs	r0, #0
 8001daa:	f001 f93d 	bl	8003028 <dwt_setrxtimeout>
					 antenna_port);

	/* Activate reception immediately. */
	dwt_rxenable(DWT_START_RX_IMMEDIATE,
 8001dae:	6839      	ldr	r1, [r7, #0]
 8001db0:	2000      	movs	r0, #0
 8001db2:	f001 f8f2 	bl	8002f9a <dwt_rxenable>
				 antenna_port);

	dwt_readrxdata(antenna_port->antenna_buffer.rxBuffer,
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f103 00ac 	add.w	r0, r3, #172	@ 0xac
				   cbData->datalength,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	8899      	ldrh	r1, [r3, #4]
	dwt_readrxdata(antenna_port->antenna_buffer.rxBuffer,
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f000 fbc9 	bl	800255a <dwt_readrxdata>
				   0,
				   antenna_port);

	rx_timestamp = get_rx_timestamp_u64(antenna_port);
 8001dc8:	6838      	ldr	r0, [r7, #0]
 8001dca:	f7ff fe99 	bl	8001b00 <get_rx_timestamp_u64>
 8001dce:	e9c7 0102 	strd	r0, r1, [r7, #8]

	read_pdoa(antenna_port, rx_timestamp);
 8001dd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dd6:	6838      	ldr	r0, [r7, #0]
 8001dd8:	f7ff ff06 	bl	8001be8 <read_pdoa>




}
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <rxToCallback>:


void rxToCallback(const dwt_cb_data_t *cbData, DW1000_Port_t *antenna_port)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
	/* Clear reception timeout to start next ranging process. */
	dwt_setrxtimeout(0,
 8001dee:	6839      	ldr	r1, [r7, #0]
 8001df0:	2000      	movs	r0, #0
 8001df2:	f001 f919 	bl	8003028 <dwt_setrxtimeout>
					 antenna_port);

	/* Activate reception immediately. */
	dwt_rxenable(DWT_START_RX_IMMEDIATE,
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f001 f8ce 	bl	8002f9a <dwt_rxenable>
				 antenna_port);
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <rxErrCallback>:

void rxErrCallback(const dwt_cb_data_t *cbData, DW1000_Port_t *antenna_port)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	6039      	str	r1, [r7, #0]

	/* Clear reception timeout to start next ranging process. */
	dwt_setrxtimeout(0,
 8001e10:	6839      	ldr	r1, [r7, #0]
 8001e12:	2000      	movs	r0, #0
 8001e14:	f001 f908 	bl	8003028 <dwt_setrxtimeout>
					 antenna_port);

	/* Activate reception immediately. */
	dwt_rxenable(DWT_START_RX_IMMEDIATE,
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f001 f8bd 	bl	8002f9a <dwt_rxenable>
				 antenna_port);
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <Check_DW1000RSTn>:
												 2)) / powf(adjusted_rxpacc,
															2)) - A_PRF64M;
}

UWB_StatusTypeDef Check_DW1000RSTn(uint32_t Timeout)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8001e30:	f001 fd06 	bl	8003840 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]
	 * When the I/O port is programmed as output:
	 * The data present on the I/O pin are sampled into the input data register every AHB clock cycle
	 * A read access to the input data register gets the I/O state
	 */

	while(HAL_GPIO_ReadPin(UWB1_RESET_GPIO_Port,
 8001e36:	e009      	b.n	8001e4c <Check_DW1000RSTn+0x24>
		  && HAL_GPIO_ReadPin(UWB3_RESET_GPIO_Port,
							  UWB3_RESET_Pin) == GPIO_PIN_RESET
		  && HAL_GPIO_ReadPin(UWB4_RESET_GPIO_Port,
							  UWB4_RESET_Pin) == GPIO_PIN_RESET)
	{
		if((HAL_GetTick() - tickstart) > Timeout)
 8001e38:	f001 fd02 	bl	8003840 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d201      	bcs.n	8001e4c <Check_DW1000RSTn+0x24>
		{
			return UWB_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e021      	b.n	8001e90 <Check_DW1000RSTn+0x68>
	while(HAL_GPIO_ReadPin(UWB1_RESET_GPIO_Port,
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	4812      	ldr	r0, [pc, #72]	@ (8001e98 <Check_DW1000RSTn+0x70>)
 8001e50:	f002 f86a 	bl	8003f28 <HAL_GPIO_ReadPin>
 8001e54:	4603      	mov	r3, r0
		  && HAL_GPIO_ReadPin(UWB4_RESET_GPIO_Port,
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d116      	bne.n	8001e88 <Check_DW1000RSTn+0x60>
		  && HAL_GPIO_ReadPin(UWB2_RESET_GPIO_Port,
 8001e5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e5e:	480f      	ldr	r0, [pc, #60]	@ (8001e9c <Check_DW1000RSTn+0x74>)
 8001e60:	f002 f862 	bl	8003f28 <HAL_GPIO_ReadPin>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10e      	bne.n	8001e88 <Check_DW1000RSTn+0x60>
		  && HAL_GPIO_ReadPin(UWB3_RESET_GPIO_Port,
 8001e6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e6e:	480c      	ldr	r0, [pc, #48]	@ (8001ea0 <Check_DW1000RSTn+0x78>)
 8001e70:	f002 f85a 	bl	8003f28 <HAL_GPIO_ReadPin>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <Check_DW1000RSTn+0x60>
		  && HAL_GPIO_ReadPin(UWB4_RESET_GPIO_Port,
 8001e7a:	2180      	movs	r1, #128	@ 0x80
 8001e7c:	4809      	ldr	r0, [pc, #36]	@ (8001ea4 <Check_DW1000RSTn+0x7c>)
 8001e7e:	f002 f853 	bl	8003f28 <HAL_GPIO_ReadPin>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0d7      	beq.n	8001e38 <Check_DW1000RSTn+0x10>
		}
	}

	/*从INIT到IDLE还需要几us 等1ms足够*/
	deca_sleep(1);
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f001 fa0e 	bl	80032aa <deca_sleep>

	return UWB_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	58020400 	.word	0x58020400
 8001e9c:	58021000 	.word	0x58021000
 8001ea0:	58020c00 	.word	0x58020c00
 8001ea4:	58020800 	.word	0x58020800

08001ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ea8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ee0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001eac:	f7ff f9f8 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb0:	480c      	ldr	r0, [pc, #48]	@ (8001ee4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eb2:	490d      	ldr	r1, [pc, #52]	@ (8001ee8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001eec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb8:	e002      	b.n	8001ec0 <LoopCopyDataInit>

08001eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ebe:	3304      	adds	r3, #4

08001ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec4:	d3f9      	bcc.n	8001eba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ef4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ecc:	e001      	b.n	8001ed2 <LoopFillZerobss>

08001ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed0:	3204      	adds	r2, #4

08001ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed4:	d3fb      	bcc.n	8001ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f008 fc53 	bl	800a780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eda:	f7fe fe63 	bl	8000ba4 <main>
  bx  lr
 8001ede:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ee0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ee4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ee8:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8001eec:	0800cc90 	.word	0x0800cc90
  ldr r2, =_sbss
 8001ef0:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8001ef4:	24000c7c 	.word	0x24000c7c

08001ef8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC3_IRQHandler>
	...

08001efc <dwt_setlocaldataptr>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_setlocaldataptr(unsigned int index)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
    // Check the index is within the array bounds
    if (DWT_NUM_DW_DEV <= index) // return error if index outside the array bounds
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d902      	bls.n	8001f10 <dwt_setlocaldataptr+0x14>
    {
        return DWT_ERROR ;
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	e009      	b.n	8001f24 <dwt_setlocaldataptr+0x28>
    }

    pdw1000local = &dw1000local[index];
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4a05      	ldr	r2, [pc, #20]	@ (8001f30 <dwt_setlocaldataptr+0x34>)
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a05      	ldr	r2, [pc, #20]	@ (8001f34 <dwt_setlocaldataptr+0x38>)
 8001f20:	6013      	str	r3, [r2, #0]

    return DWT_SUCCESS ;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	24000a44 	.word	0x24000a44
 8001f34:	24000014 	.word	0x24000014

08001f38 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config, DW1000_Port_t *antenna_port)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
    uint16 otp_xtaltrim_and_rev = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8001f4a:	4b8c      	ldr	r3, [pc, #560]	@ (800217c <dwt_initialise+0x244>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8001f52:	4b8a      	ldr	r3, [pc, #552]	@ (800217c <dwt_initialise+0x244>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2200      	movs	r2, #0
 8001f58:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8001f5a:	4b88      	ldr	r3, [pc, #544]	@ (800217c <dwt_initialise+0x244>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8001f62:	4b86      	ldr	r3, [pc, #536]	@ (800217c <dwt_initialise+0x244>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2200      	movs	r2, #0
 8001f68:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 8001f6a:	4b84      	ldr	r3, [pc, #528]	@ (800217c <dwt_initialise+0x244>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 8001f72:	4b82      	ldr	r3, [pc, #520]	@ (800217c <dwt_initialise+0x244>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 8001f7a:	4b80      	ldr	r3, [pc, #512]	@ (800217c <dwt_initialise+0x244>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	635a      	str	r2, [r3, #52]	@ 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid(antenna_port)) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8001f82:	6838      	ldr	r0, [r7, #0]
 8001f84:	f000 f93a 	bl	80021fc <dwt_readdevid>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4a7d      	ldr	r2, [pc, #500]	@ (8002180 <dwt_initialise+0x248>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d002      	beq.n	8001f96 <dwt_initialise+0x5e>
    {
        return DWT_ERROR ;
 8001f90:	f04f 33ff 	mov.w	r3, #4294967295
 8001f94:	e12c      	b.n	80021f0 <dwt_initialise+0x2b8>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <dwt_initialise+0x6e>
    {
        dwt_softreset(antenna_port); // Make sure the device is completely reset before starting initialisation
 8001fa0:	6838      	ldr	r0, [r7, #0]
 8001fa2:	f001 f8dd 	bl	8003160 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d004      	beq.n	8001fba <dwt_initialise+0x82>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d103      	bne.n	8001fc2 <dwt_initialise+0x8a>
    {
        _dwt_enableclocks(FORCE_SYS_XTI, antenna_port); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8001fba:	6839      	ldr	r1, [r7, #0]
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f000 fedf 	bl	8002d80 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK, antenna_port);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	2024      	movs	r0, #36	@ 0x24
 8001fca:	f000 fc5d 	bl	8002888 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d118      	bne.n	800200a <dwt_initialise+0xd2>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS, antenna_port);
 8001fd8:	6839      	ldr	r1, [r7, #0]
 8001fda:	2004      	movs	r0, #4
 8001fdc:	f000 fcb6 	bl	800294c <_dwt_otpread>
 8001fe0:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d021      	beq.n	800202e <dwt_initialise+0xf6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK, antenna_port); // Set load LDO kick bit
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2202      	movs	r2, #2
 8001fee:	2112      	movs	r1, #18
 8001ff0:	202d      	movs	r0, #45	@ 0x2d
 8001ff2:	f000 fc49 	bl	8002888 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8001ff6:	4b61      	ldr	r3, [pc, #388]	@ (800217c <dwt_initialise+0x244>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	8ada      	ldrh	r2, [r3, #22]
 8001ffc:	4b5f      	ldr	r3, [pc, #380]	@ (800217c <dwt_initialise+0x244>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002004:	b292      	uxth	r2, r2
 8002006:	82da      	strh	r2, [r3, #22]
 8002008:	e011      	b.n	800202e <dwt_initialise+0xf6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE, antenna_port) != LDOTUNE_DEFAULT)
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	2130      	movs	r1, #48	@ 0x30
 800200e:	2028      	movs	r0, #40	@ 0x28
 8002010:	f000 fbd9 	bl	80027c6 <dwt_read32bitoffsetreg>
 8002014:	4603      	mov	r3, r0
 8002016:	f1b3 3f88 	cmp.w	r3, #2290649224	@ 0x88888888
 800201a:	d008      	beq.n	800202e <dwt_initialise+0xf6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800201c:	4b57      	ldr	r3, [pc, #348]	@ (800217c <dwt_initialise+0x244>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	8ada      	ldrh	r2, [r3, #22]
 8002022:	4b56      	ldr	r3, [pc, #344]	@ (800217c <dwt_initialise+0x244>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800202a:	b292      	uxth	r2, r2
 800202c:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d009      	beq.n	800204c <dwt_initialise+0x114>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d012      	beq.n	8002068 <dwt_initialise+0x130>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00d      	beq.n	8002068 <dwt_initialise+0x130>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS, antenna_port) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800204c:	6839      	ldr	r1, [r7, #0]
 800204e:	201e      	movs	r0, #30
 8002050:	f000 fc7c 	bl	800294c <_dwt_otpread>
 8002054:	4603      	mov	r3, r0
 8002056:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8002058:	8afb      	ldrh	r3, [r7, #22]
 800205a:	0a1b      	lsrs	r3, r3, #8
 800205c:	b29a      	uxth	r2, r3
 800205e:	4b47      	ldr	r3, [pc, #284]	@ (800217c <dwt_initialise+0x244>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	72da      	strb	r2, [r3, #11]
 8002066:	e003      	b.n	8002070 <dwt_initialise+0x138>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8002068:	4b44      	ldr	r3, [pc, #272]	@ (800217c <dwt_initialise+0x244>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2200      	movs	r2, #0
 800206e:	72da      	strb	r2, [r3, #11]
    // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10c      	bne.n	8002094 <dwt_initialise+0x15c>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800207a:	8afb      	ldrh	r3, [r7, #22]
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <dwt_initialise+0x150>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8002084:	2310      	movs	r3, #16
 8002086:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev, antenna_port);
 8002088:	8afb      	ldrh	r3, [r7, #22]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	6839      	ldr	r1, [r7, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f001 f896 	bl	80031c0 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b00      	cmp	r3, #0
 800209c:	d008      	beq.n	80020b0 <dwt_initialise+0x178>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS, antenna_port);
 800209e:	4b37      	ldr	r3, [pc, #220]	@ (800217c <dwt_initialise+0x244>)
 80020a0:	681c      	ldr	r4, [r3, #0]
 80020a2:	6839      	ldr	r1, [r7, #0]
 80020a4:	2006      	movs	r0, #6
 80020a6:	f000 fc51 	bl	800294c <_dwt_otpread>
 80020aa:	4603      	mov	r3, r0
 80020ac:	6023      	str	r3, [r4, #0]
 80020ae:	e003      	b.n	80020b8 <dwt_initialise+0x180>
    }
    else
    {
        pdw1000local->partID = 0;
 80020b0:	4b32      	ldr	r3, [pc, #200]	@ (800217c <dwt_initialise+0x244>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <dwt_initialise+0x19c>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS, antenna_port);
 80020c2:	4b2e      	ldr	r3, [pc, #184]	@ (800217c <dwt_initialise+0x244>)
 80020c4:	681c      	ldr	r4, [r3, #0]
 80020c6:	6839      	ldr	r1, [r7, #0]
 80020c8:	2007      	movs	r0, #7
 80020ca:	f000 fc3f 	bl	800294c <_dwt_otpread>
 80020ce:	4603      	mov	r3, r0
 80020d0:	6063      	str	r3, [r4, #4]
 80020d2:	e003      	b.n	80020dc <dwt_initialise+0x1a4>
    }
    else
    {
        pdw1000local->lotID = 0;
 80020d4:	4b29      	ldr	r3, [pc, #164]	@ (800217c <dwt_initialise+0x244>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2200      	movs	r2, #0
 80020da:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <dwt_initialise+0x1c2>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS, antenna_port) & 0xff;
 80020e6:	6839      	ldr	r1, [r7, #0]
 80020e8:	2008      	movs	r0, #8
 80020ea:	f000 fc2f 	bl	800294c <_dwt_otpread>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b22      	ldr	r3, [pc, #136]	@ (800217c <dwt_initialise+0x244>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	721a      	strb	r2, [r3, #8]
 80020f8:	e003      	b.n	8002102 <dwt_initialise+0x1ca>
    }
    else
    {
        pdw1000local->vBatP = 0;
 80020fa:	4b20      	ldr	r3, [pc, #128]	@ (800217c <dwt_initialise+0x244>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2200      	movs	r2, #0
 8002100:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002108:	2b00      	cmp	r3, #0
 800210a:	d009      	beq.n	8002120 <dwt_initialise+0x1e8>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS, antenna_port) & 0xff;
 800210c:	6839      	ldr	r1, [r7, #0]
 800210e:	2009      	movs	r0, #9
 8002110:	f000 fc1c 	bl	800294c <_dwt_otpread>
 8002114:	4602      	mov	r2, r0
 8002116:	4b19      	ldr	r3, [pc, #100]	@ (800217c <dwt_initialise+0x244>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	725a      	strb	r2, [r3, #9]
 800211e:	e003      	b.n	8002128 <dwt_initialise+0x1f0>
    }
    else
    {
        pdw1000local->tempP = 0;
 8002120:	4b16      	ldr	r3, [pc, #88]	@ (800217c <dwt_initialise+0x244>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d128      	bne.n	8002184 <dwt_initialise+0x24c>
    {
        if(DWT_LOADUCODE & config)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00c      	beq.n	8002156 <dwt_initialise+0x21e>
        {
            _dwt_loaducodefromrom(antenna_port);
 800213c:	6838      	ldr	r0, [r7, #0]
 800213e:	f000 fc60 	bl	8002a02 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8002142:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <dwt_initialise+0x244>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	8ada      	ldrh	r2, [r3, #22]
 8002148:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <dwt_initialise+0x244>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002150:	b292      	uxth	r2, r2
 8002152:	82da      	strh	r2, [r3, #22]
 8002154:	e024      	b.n	80021a0 <dwt_initialise+0x268>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, antenna_port) ;
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	2105      	movs	r1, #5
 800215a:	2036      	movs	r0, #54	@ 0x36
 800215c:	f000 fb5e 	bl	800281c <dwt_read16bitoffsetreg>
 8002160:	4603      	mov	r3, r0
 8002162:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8002164:	89fb      	ldrh	r3, [r7, #14]
 8002166:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800216a:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega, antenna_port) ;
 800216c:	89fa      	ldrh	r2, [r7, #14]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2105      	movs	r1, #5
 8002172:	2036      	movs	r0, #54	@ 0x36
 8002174:	f000 fb9f 	bl	80028b6 <dwt_write16bitoffsetreg>
 8002178:	e012      	b.n	80021a0 <dwt_initialise+0x268>
 800217a:	bf00      	nop
 800217c:	24000014 	.word	0x24000014
 8002180:	deca0130 	.word	0xdeca0130
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d108      	bne.n	80021a0 <dwt_initialise+0x268>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800218e:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <dwt_initialise+0x2c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	8ada      	ldrh	r2, [r3, #22]
 8002194:	4b18      	ldr	r3, [pc, #96]	@ (80021f8 <dwt_initialise+0x2c0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800219c:	b292      	uxth	r2, r2
 800219e:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ, antenna_port); // Enable clocks for sequencing
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	2001      	movs	r0, #1
 80021a4:	f000 fdec 	bl	8002d80 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00, antenna_port);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	210a      	movs	r1, #10
 80021ae:	202c      	movs	r0, #44	@ 0x2c
 80021b0:	f000 fb6a 	bl	8002888 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID, antenna_port); // Read sysconfig register
 80021b4:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <dwt_initialise+0x2c0>)
 80021b6:	681c      	ldr	r4, [r3, #0]
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	2100      	movs	r1, #0
 80021bc:	2004      	movs	r0, #4
 80021be:	f000 fb02 	bl	80027c6 <dwt_read32bitoffsetreg>
 80021c2:	4603      	mov	r3, r0
 80021c4:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80021c6:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <dwt_initialise+0x2c0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	0c1b      	lsrs	r3, r3, #16
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <dwt_initialise+0x2c0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f002 0203 	and.w	r2, r2, #3
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID, antenna_port) ;
 80021dc:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <dwt_initialise+0x2c0>)
 80021de:	681c      	ldr	r4, [r3, #0]
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	2100      	movs	r1, #0
 80021e4:	2008      	movs	r0, #8
 80021e6:	f000 faee 	bl	80027c6 <dwt_read32bitoffsetreg>
 80021ea:	4603      	mov	r3, r0
 80021ec:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 80021ee:	2300      	movs	r3, #0

} // end dwt_initialise()
 80021f0:	4618      	mov	r0, r3
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd90      	pop	{r4, r7, pc}
 80021f8:	24000014 	.word	0x24000014

080021fc <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(DW1000_Port_t *antenna_port)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
    return dwt_read32bitoffsetreg(DEV_ID_ID,0,antenna_port);
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	2100      	movs	r1, #0
 8002208:	2000      	movs	r0, #0
 800220a:	f000 fadc 	bl	80027c6 <dwt_read32bitoffsetreg>
 800220e:	4603      	mov	r3, r0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config, DW1000_Port_t *antenna_port)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
    uint8 nsSfd_result  = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	795b      	ldrb	r3, [r3, #5]
 8002234:	461a      	mov	r2, r3
 8002236:	4bab      	ldr	r3, [pc, #684]	@ (80024e4 <dwt_configure+0x2cc>)
 8002238:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800223c:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	785b      	ldrb	r3, [r3, #1]
 8002242:	3b01      	subs	r3, #1
 8002244:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8002246:	7cfb      	ldrb	r3, [r7, #19]
 8002248:	2b04      	cmp	r3, #4
 800224a:	d002      	beq.n	8002252 <dwt_configure+0x3a>
 800224c:	7cfb      	ldrb	r3, [r7, #19]
 800224e:	2b07      	cmp	r3, #7
 8002250:	d101      	bne.n	8002256 <dwt_configure+0x3e>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <dwt_configure+0x40>
 8002256:	2300      	movs	r3, #0
 8002258:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	79db      	ldrb	r3, [r3, #7]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10b      	bne.n	800227a <dwt_configure+0x62>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8002262:	4ba1      	ldr	r3, [pc, #644]	@ (80024e8 <dwt_configure+0x2d0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	4b9f      	ldr	r3, [pc, #636]	@ (80024e8 <dwt_configure+0x2d0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002270:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8002272:	8abb      	ldrh	r3, [r7, #20]
 8002274:	08db      	lsrs	r3, r3, #3
 8002276:	82bb      	strh	r3, [r7, #20]
 8002278:	e007      	b.n	800228a <dwt_configure+0x72>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 800227a:	4b9b      	ldr	r3, [pc, #620]	@ (80024e8 <dwt_configure+0x2d0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	4b99      	ldr	r3, [pc, #612]	@ (80024e8 <dwt_configure+0x2d0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8002288:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 800228a:	4b97      	ldr	r3, [pc, #604]	@ (80024e8 <dwt_configure+0x2d0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	7a12      	ldrb	r2, [r2, #8]
 8002292:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8002294:	4b94      	ldr	r3, [pc, #592]	@ (80024e8 <dwt_configure+0x2d0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	4b93      	ldr	r3, [pc, #588]	@ (80024e8 <dwt_configure+0x2d0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80022a2:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80022a4:	4b90      	ldr	r3, [pc, #576]	@ (80024e8 <dwt_configure+0x2d0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6919      	ldr	r1, [r3, #16]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7a1b      	ldrb	r3, [r3, #8]
 80022ae:	041b      	lsls	r3, r3, #16
 80022b0:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022b4:	4b8c      	ldr	r3, [pc, #560]	@ (80024e8 <dwt_configure+0x2d0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg, antenna_port) ;
 80022bc:	4b8a      	ldr	r3, [pc, #552]	@ (80024e8 <dwt_configure+0x2d0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2100      	movs	r1, #0
 80022c6:	2004      	movs	r0, #4
 80022c8:	f000 fb15 	bl	80028f6 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16, antenna_port) ;
 80022cc:	8aba      	ldrh	r2, [r7, #20]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f642 0104 	movw	r1, #10244	@ 0x2804
 80022d4:	202e      	movs	r0, #46	@ 0x2e
 80022d6:	f000 faee 	bl	80028b6 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex, antenna_port);
 80022da:	7cbb      	ldrb	r3, [r7, #18]
 80022dc:	6839      	ldr	r1, [r7, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fb6b 	bl	80029ba <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]], antenna_port);
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	4a81      	ldr	r2, [pc, #516]	@ (80024ec <dwt_configure+0x2d4>)
 80022e8:	5cd3      	ldrb	r3, [r2, r3]
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b80      	ldr	r3, [pc, #512]	@ (80024f0 <dwt_configure+0x2d8>)
 80022ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2107      	movs	r1, #7
 80022f6:	202b      	movs	r0, #43	@ 0x2b
 80022f8:	f000 fafd 	bl	80028f6 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]], antenna_port);
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	4a7b      	ldr	r2, [pc, #492]	@ (80024ec <dwt_configure+0x2d4>)
 8002300:	5cd3      	ldrb	r3, [r2, r3]
 8002302:	461a      	mov	r2, r3
 8002304:	4b7b      	ldr	r3, [pc, #492]	@ (80024f4 <dwt_configure+0x2dc>)
 8002306:	5c9a      	ldrb	r2, [r3, r2]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	210b      	movs	r1, #11
 800230c:	202b      	movs	r0, #43	@ 0x2b
 800230e:	f000 fabb 	bl	8002888 <dwt_write8bitoffsetreg>

    // Configure Pulse Generator Delay
    dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGDELAY_OFFSET, tc_pgdelay[chan_idx[chan]], antenna_port);
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	4a75      	ldr	r2, [pc, #468]	@ (80024ec <dwt_configure+0x2d4>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	461a      	mov	r2, r3
 800231a:	4b77      	ldr	r3, [pc, #476]	@ (80024f8 <dwt_configure+0x2e0>)
 800231c:	5c9a      	ldrb	r2, [r3, r2]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	210b      	movs	r1, #11
 8002322:	202a      	movs	r0, #42	@ 0x2a
 8002324:	f000 fab0 	bl	8002888 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw], antenna_port);
 8002328:	7c7b      	ldrb	r3, [r7, #17]
 800232a:	4a74      	ldr	r2, [pc, #464]	@ (80024fc <dwt_configure+0x2e4>)
 800232c:	5cd2      	ldrb	r2, [r2, r3]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	210b      	movs	r1, #11
 8002332:	2028      	movs	r0, #40	@ 0x28
 8002334:	f000 faa8 	bl	8002888 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]], antenna_port);
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	4a6c      	ldr	r2, [pc, #432]	@ (80024ec <dwt_configure+0x2d4>)
 800233c:	5cd3      	ldrb	r3, [r2, r3]
 800233e:	461a      	mov	r2, r3
 8002340:	4b6f      	ldr	r3, [pc, #444]	@ (8002500 <dwt_configure+0x2e8>)
 8002342:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	210c      	movs	r1, #12
 800234a:	2028      	movs	r0, #40	@ 0x28
 800234c:	f000 fad3 	bl	80028f6 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD], antenna_port);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	79db      	ldrb	r3, [r3, #7]
 8002354:	4618      	mov	r0, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	799b      	ldrb	r3, [r3, #6]
 800235a:	4619      	mov	r1, r3
 800235c:	4a69      	ldr	r2, [pc, #420]	@ (8002504 <dwt_configure+0x2ec>)
 800235e:	0043      	lsls	r3, r0, #1
 8002360:	440b      	add	r3, r1
 8002362:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2102      	movs	r1, #2
 800236a:	2027      	movs	r0, #39	@ 0x27
 800236c:	f000 faa3 	bl	80028b6 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex], antenna_port);
 8002370:	7cbb      	ldrb	r3, [r7, #18]
 8002372:	4a65      	ldr	r2, [pc, #404]	@ (8002508 <dwt_configure+0x2f0>)
 8002374:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2104      	movs	r1, #4
 800237c:	2027      	movs	r0, #39	@ 0x27
 800237e:	f000 fa9a 	bl	80028b6 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	79db      	ldrb	r3, [r3, #7]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <dwt_configure+0x180>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K, antenna_port);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2264      	movs	r2, #100	@ 0x64
 800238e:	2106      	movs	r1, #6
 8002390:	2027      	movs	r0, #39	@ 0x27
 8002392:	f000 fa90 	bl	80028b6 <dwt_write16bitoffsetreg>
 8002396:	e01c      	b.n	80023d2 <dwt_configure+0x1ba>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	789b      	ldrb	r3, [r3, #2]
 800239c:	2b04      	cmp	r3, #4
 800239e:	d10c      	bne.n	80023ba <dwt_configure+0x1a2>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64, antenna_port);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2210      	movs	r2, #16
 80023a4:	2106      	movs	r1, #6
 80023a6:	2027      	movs	r0, #39	@ 0x27
 80023a8:	f000 fa85 	bl	80028b6 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64, antenna_port);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2210      	movs	r2, #16
 80023b0:	2126      	movs	r1, #38	@ 0x26
 80023b2:	2027      	movs	r0, #39	@ 0x27
 80023b4:	f000 fa68 	bl	8002888 <dwt_write8bitoffsetreg>
 80023b8:	e00b      	b.n	80023d2 <dwt_configure+0x1ba>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8, antenna_port);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2220      	movs	r2, #32
 80023be:	2106      	movs	r1, #6
 80023c0:	2027      	movs	r0, #39	@ 0x27
 80023c2:	f000 fa78 	bl	80028b6 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS, antenna_port);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2228      	movs	r2, #40	@ 0x28
 80023ca:	2126      	movs	r1, #38	@ 0x26
 80023cc:	2027      	movs	r0, #39	@ 0x27
 80023ce:	f000 fa5b 	bl	8002888 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC], antenna_port);
 80023d2:	7cbb      	ldrb	r3, [r7, #18]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	78d2      	ldrb	r2, [r2, #3]
 80023d8:	4611      	mov	r1, r2
 80023da:	4a4c      	ldr	r2, [pc, #304]	@ (800250c <dwt_configure+0x2f4>)
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2108      	movs	r1, #8
 80023e8:	2027      	movs	r0, #39	@ 0x27
 80023ea:	f000 fa84 	bl	80028f6 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	895b      	ldrh	r3, [r3, #10]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d103      	bne.n	80023fe <dwt_configure+0x1e6>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f241 0241 	movw	r2, #4161	@ 0x1041
 80023fc:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO, antenna_port);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	895a      	ldrh	r2, [r3, #10]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2120      	movs	r1, #32
 8002406:	2027      	movs	r0, #39	@ 0x27
 8002408:	f000 fa55 	bl	80028b6 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32, antenna_port);
 800240c:	4b40      	ldr	r3, [pc, #256]	@ (8002510 <dwt_configure+0x2f8>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	210c      	movs	r1, #12
 8002414:	2023      	movs	r0, #35	@ 0x23
 8002416:	f000 fa6e 	bl	80028f6 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex], antenna_port);
 800241a:	7cbb      	ldrb	r3, [r7, #18]
 800241c:	4a3c      	ldr	r2, [pc, #240]	@ (8002510 <dwt_configure+0x2f8>)
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	889a      	ldrh	r2, [r3, #4]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2104      	movs	r1, #4
 8002428:	2023      	movs	r0, #35	@ 0x23
 800242a:	f000 fa44 	bl	80028b6 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	799b      	ldrb	r3, [r3, #6]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00d      	beq.n	8002452 <dwt_configure+0x23a>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate], antenna_port);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	79db      	ldrb	r3, [r3, #7]
 800243a:	461a      	mov	r2, r3
 800243c:	4b35      	ldr	r3, [pc, #212]	@ (8002514 <dwt_configure+0x2fc>)
 800243e:	5c9a      	ldrb	r2, [r3, r2]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	2100      	movs	r1, #0
 8002444:	2021      	movs	r0, #33	@ 0x21
 8002446:	f000 fa1f 	bl	8002888 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800244a:	2303      	movs	r3, #3
 800244c:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 800244e:	2301      	movs	r3, #1
 8002450:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800245e:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	049b      	lsls	r3, r3, #18
 8002466:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800246a:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	051b      	lsls	r3, r3, #20
 8002470:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8002474:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8002476:	7dbb      	ldrb	r3, [r7, #22]
 8002478:	045b      	lsls	r3, r3, #17
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800247e:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	791b      	ldrb	r3, [r3, #4]
 8002484:	059b      	lsls	r3, r3, #22
 8002486:	f003 63f8 	and.w	r3, r3, #130023424	@ 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800248a:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	795b      	ldrb	r3, [r3, #5]
 8002490:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval, antenna_port) ;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	2100      	movs	r1, #0
 800249c:	201f      	movs	r0, #31
 800249e:	f000 fa2a 	bl	80028f6 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	789a      	ldrb	r2, [r3, #2]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	785b      	ldrb	r3, [r3, #1]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	0419      	lsls	r1, r3, #16
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	79db      	ldrb	r3, [r3, #7]
 80024b4:	035a      	lsls	r2, r3, #13
 80024b6:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <dwt_configure+0x2d0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL, antenna_port);
 80024be:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <dwt_configure+0x2d0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2100      	movs	r1, #0
 80024c8:	2008      	movs	r0, #8
 80024ca:	f000 fa14 	bl	80028f6 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF, antenna_port); // Request TX start and TRX off at the same time
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2242      	movs	r2, #66	@ 0x42
 80024d2:	2100      	movs	r1, #0
 80024d4:	200d      	movs	r0, #13
 80024d6:	f000 f9d7 	bl	8002888 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	0800c878 	.word	0x0800c878
 80024e8:	24000014 	.word	0x24000014
 80024ec:	0800c7f0 	.word	0x0800c7f0
 80024f0:	0800c810 	.word	0x0800c810
 80024f4:	0800c828 	.word	0x0800c828
 80024f8:	0800c830 	.word	0x0800c830
 80024fc:	0800c838 	.word	0x0800c838
 8002500:	0800c7f8 	.word	0x0800c7f8
 8002504:	0800c848 	.word	0x0800c848
 8002508:	0800c854 	.word	0x0800c854
 800250c:	0800c858 	.word	0x0800c858
 8002510:	0800c83c 	.word	0x0800c83c
 8002514:	0800c844 	.word	0x0800c844

08002518 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay, DW1000_Port_t *antenna_port)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay, antenna_port);
 8002524:	88fa      	ldrh	r2, [r7, #6]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f641 0104 	movw	r1, #6148	@ 0x1804
 800252c:	202e      	movs	r0, #46	@ 0x2e
 800252e:	f000 f9c2 	bl	80028b6 <dwt_write16bitoffsetreg>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay, DW1000_Port_t *antenna_port)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	6039      	str	r1, [r7, #0]
 8002544:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay, antenna_port);
 8002546:	88fa      	ldrh	r2, [r7, #6]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2100      	movs	r1, #0
 800254c:	2018      	movs	r0, #24
 800254e:	f000 f9b2 	bl	80028b6 <dwt_write16bitoffsetreg>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset, DW1000_Port_t *antenna_port)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af02      	add	r7, sp, #8
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	817b      	strh	r3, [r7, #10]
 8002568:	4613      	mov	r3, r2
 800256a:	813b      	strh	r3, [r7, #8]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer,antenna_port) ;
 800256c:	897a      	ldrh	r2, [r7, #10]
 800256e:	8939      	ldrh	r1, [r7, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2011      	movs	r0, #17
 8002578:	f000 f8cf 	bl	800271a <dwt_readfromdevice>
}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <dwt_readaccdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readaccdata(uint8 *buffer, uint16 len, uint16 accOffset, DW1000_Port_t *antenna_port)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af02      	add	r7, sp, #8
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	817b      	strh	r3, [r7, #10]
 8002592:	4613      	mov	r3, r2
 8002594:	813b      	strh	r3, [r7, #8]
    // Force on the ACC clocks if we are sequenced
    _dwt_enableclocks(READ_ACC_ON, antenna_port);
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	2007      	movs	r0, #7
 800259a:	f000 fbf1 	bl	8002d80 <_dwt_enableclocks>

    dwt_readfromdevice(ACC_MEM_ID,accOffset,len,buffer,antenna_port) ;
 800259e:	897a      	ldrh	r2, [r7, #10]
 80025a0:	8939      	ldrh	r1, [r7, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2025      	movs	r0, #37	@ 0x25
 80025aa:	f000 f8b6 	bl	800271a <dwt_readfromdevice>

    _dwt_enableclocks(READ_ACC_OFF, antenna_port); // Revert clocks back
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	2008      	movs	r0, #8
 80025b2:	f000 fbe5 	bl	8002d80 <_dwt_enableclocks>
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <dwt_readdiagnostics>:
 * output parameters
 *
 * no return value
 */
void dwt_readdiagnostics(dwt_rxdiag_t *diagnostics, DW1000_Port_t *antenna_port)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af02      	add	r7, sp, #8
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
    // Read the HW FP index
    diagnostics->firstPath = dwt_read16bitoffsetreg(RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, antenna_port);
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	2105      	movs	r1, #5
 80025cc:	2015      	movs	r0, #21
 80025ce:	f000 f925 	bl	800281c <dwt_read16bitoffsetreg>
 80025d2:	4603      	mov	r3, r0
 80025d4:	461a      	mov	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	821a      	strh	r2, [r3, #16]

    // LDE diagnostic data
    diagnostics->maxNoise = dwt_read16bitoffsetreg(LDE_IF_ID, LDE_THRESH_OFFSET, antenna_port);
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	2100      	movs	r1, #0
 80025de:	202e      	movs	r0, #46	@ 0x2e
 80025e0:	f000 f91c 	bl	800281c <dwt_read16bitoffsetreg>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	801a      	strh	r2, [r3, #0]

    // Read all 8 bytes in one SPI transaction
    dwt_readfromdevice(RX_FQUAL_ID, 0x0, 8, (uint8*)&diagnostics->stdNoise, antenna_port);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	1d1a      	adds	r2, r3, #4
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	2208      	movs	r2, #8
 80025f8:	2100      	movs	r1, #0
 80025fa:	2012      	movs	r0, #18
 80025fc:	f000 f88d 	bl	800271a <dwt_readfromdevice>

    diagnostics->firstPathAmp1 = dwt_read16bitoffsetreg(RX_TIME_ID, RX_TIME_FP_AMPL1_OFFSET, antenna_port);
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	2107      	movs	r1, #7
 8002604:	2015      	movs	r0, #21
 8002606:	f000 f909 	bl	800281c <dwt_read16bitoffsetreg>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	805a      	strh	r2, [r3, #2]

    diagnostics->rxPreamCount = (dwt_read32bitreg(RX_FINFO_ID, antenna_port) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT  ;
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	2100      	movs	r1, #0
 8002616:	2010      	movs	r0, #16
 8002618:	f000 f8d5 	bl	80027c6 <dwt_read32bitoffsetreg>
 800261c:	4603      	mov	r3, r0
 800261e:	0d1b      	lsrs	r3, r3, #20
 8002620:	b29b      	uxth	r3, r3
 8002622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002626:	b29a      	uxth	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	819a      	strh	r2, [r3, #12]

    diagnostics->rxPreamCountNOSAT = dwt_read16bitoffsetreg(DRX_CONF_ID, RXPACC_NOSAT_OFFSET, antenna_port);
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	212c      	movs	r1, #44	@ 0x2c
 8002630:	2027      	movs	r0, #39	@ 0x27
 8002632:	f000 f8f3 	bl	800281c <dwt_read16bitoffsetreg>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	81da      	strh	r2, [r3, #14]
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp, DW1000_Port_t *antenna_port)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af02      	add	r7, sp, #8
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp, antenna_port) ; // Get the adjusted time of arrival
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2205      	movs	r2, #5
 8002658:	2100      	movs	r1, #0
 800265a:	2015      	movs	r0, #21
 800265c:	f000 f85d 	bl	800271a <dwt_readfromdevice>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <dwt_writetodevice>:
                uint16  index,
                uint32        length,
                const uint8   *buffer,
                DW1000_Port_t *antenna_port
        )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af02      	add	r7, sp, #8
 800266e:	60ba      	str	r2, [r7, #8]
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	4603      	mov	r3, r0
 8002674:	81fb      	strh	r3, [r7, #14]
 8002676:	460b      	mov	r3, r1
 8002678:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800267e:	89bb      	ldrh	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10c      	bne.n	800269e <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002684:	89fb      	ldrh	r3, [r7, #14]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	1c59      	adds	r1, r3, #1
 800268c:	6179      	str	r1, [r7, #20]
 800268e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	3318      	adds	r3, #24
 8002696:	443b      	add	r3, r7
 8002698:	f803 2c08 	strb.w	r2, [r3, #-8]
 800269c:	e02f      	b.n	80026fe <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800269e:	89fb      	ldrh	r3, [r7, #14]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	1c59      	adds	r1, r3, #1
 80026a6:	6179      	str	r1, [r7, #20]
 80026a8:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	3318      	adds	r3, #24
 80026b0:	443b      	add	r3, r7
 80026b2:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80026b6:	89bb      	ldrh	r3, [r7, #12]
 80026b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80026ba:	d809      	bhi.n	80026d0 <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	617a      	str	r2, [r7, #20]
 80026c2:	89ba      	ldrh	r2, [r7, #12]
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	3318      	adds	r3, #24
 80026c8:	443b      	add	r3, r7
 80026ca:	f803 2c08 	strb.w	r2, [r3, #-8]
 80026ce:	e016      	b.n	80026fe <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80026d0:	89bb      	ldrh	r3, [r7, #12]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	1c59      	adds	r1, r3, #1
 80026d8:	6179      	str	r1, [r7, #20]
 80026da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	3318      	adds	r3, #24
 80026e2:	443b      	add	r3, r7
 80026e4:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80026e8:	89bb      	ldrh	r3, [r7, #12]
 80026ea:	09db      	lsrs	r3, r3, #7
 80026ec:	b299      	uxth	r1, r3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	617a      	str	r2, [r7, #20]
 80026f4:	b2ca      	uxtb	r2, r1
 80026f6:	3318      	adds	r3, #24
 80026f8:	443b      	add	r3, r7
 80026fa:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer,antenna_port);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	b298      	uxth	r0, r3
 8002702:	f107 0110 	add.w	r1, r7, #16
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	f000 fdd7 	bl	80032c0 <writetospi>
} // end dwt_writetodevice()
 8002712:	bf00      	nop
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <dwt_readfromdevice>:
                uint16  index,
                uint32        length,
                uint8         *buffer,
                DW1000_Port_t *antenna_port
        )
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b088      	sub	sp, #32
 800271e:	af02      	add	r7, sp, #8
 8002720:	60ba      	str	r2, [r7, #8]
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	4603      	mov	r3, r0
 8002726:	81fb      	strh	r3, [r7, #14]
 8002728:	460b      	mov	r3, r1
 800272a:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8002730:	89bb      	ldrh	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	617a      	str	r2, [r7, #20]
 800273c:	89fa      	ldrh	r2, [r7, #14]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	3318      	adds	r3, #24
 8002742:	443b      	add	r3, r7
 8002744:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002748:	e02f      	b.n	80027aa <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800274a:	89fb      	ldrh	r3, [r7, #14]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	1c59      	adds	r1, r3, #1
 8002752:	6179      	str	r1, [r7, #20]
 8002754:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	3318      	adds	r3, #24
 800275c:	443b      	add	r3, r7
 800275e:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8002762:	89bb      	ldrh	r3, [r7, #12]
 8002764:	2b7f      	cmp	r3, #127	@ 0x7f
 8002766:	d809      	bhi.n	800277c <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	617a      	str	r2, [r7, #20]
 800276e:	89ba      	ldrh	r2, [r7, #12]
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	3318      	adds	r3, #24
 8002774:	443b      	add	r3, r7
 8002776:	f803 2c08 	strb.w	r2, [r3, #-8]
 800277a:	e016      	b.n	80027aa <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800277c:	89bb      	ldrh	r3, [r7, #12]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	1c59      	adds	r1, r3, #1
 8002784:	6179      	str	r1, [r7, #20]
 8002786:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	3318      	adds	r3, #24
 800278e:	443b      	add	r3, r7
 8002790:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8002794:	89bb      	ldrh	r3, [r7, #12]
 8002796:	09db      	lsrs	r3, r3, #7
 8002798:	b299      	uxth	r1, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	617a      	str	r2, [r7, #20]
 80027a0:	b2ca      	uxtb	r2, r1
 80027a2:	3318      	adds	r3, #24
 80027a4:	443b      	add	r3, r7
 80027a6:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer, antenna_port);  // result is stored in the buffer
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	b298      	uxth	r0, r3
 80027ae:	f107 0110 	add.w	r1, r7, #16
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	f000 fdb5 	bl	8003328 <readfromspi>
} // end dwt_readfromdevice()
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset, DW1000_Port_t *antenna_port)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b08a      	sub	sp, #40	@ 0x28
 80027ca:	af02      	add	r7, sp, #8
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
    uint32  regval = 0 ;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer,antenna_port); // Read 4 bytes (32-bits) register into buffer
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	b298      	uxth	r0, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	b299      	uxth	r1, r3
 80027de:	f107 0214 	add.w	r2, r7, #20
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	4613      	mov	r3, r2
 80027e8:	2204      	movs	r2, #4
 80027ea:	f7ff ff96 	bl	800271a <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 80027ee:	2303      	movs	r3, #3
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	e00b      	b.n	800280c <dwt_read32bitoffsetreg+0x46>
    {
        regval = (regval << 8) + buffer[j] ;
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	f107 0114 	add.w	r1, r7, #20
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	440a      	add	r2, r1
 8002800:	7812      	ldrb	r2, [r2, #0]
 8002802:	4413      	add	r3, r2
 8002804:	61fb      	str	r3, [r7, #28]
    for (j = 3 ; j >= 0 ; j --)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	3b01      	subs	r3, #1
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b00      	cmp	r3, #0
 8002810:	daf0      	bge.n	80027f4 <dwt_read32bitoffsetreg+0x2e>
    }
    return regval ;
 8002812:	69fb      	ldr	r3, [r7, #28]

} // end dwt_read32bitoffsetreg()
 8002814:	4618      	mov	r0, r3
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset, DW1000_Port_t *antenna_port)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
    uint16  regval = 0 ;
 8002828:	2300      	movs	r3, #0
 800282a:	82fb      	strh	r3, [r7, #22]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer,antenna_port); // Read 2 bytes (16-bits) register into buffer
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	b298      	uxth	r0, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	b299      	uxth	r1, r3
 8002834:	f107 0214 	add.w	r2, r7, #20
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	2202      	movs	r2, #2
 8002840:	f7ff ff6b 	bl	800271a <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8002844:	7d7b      	ldrb	r3, [r7, #21]
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	b29b      	uxth	r3, r3
 800284a:	7d3a      	ldrb	r2, [r7, #20]
 800284c:	4413      	add	r3, r2
 800284e:	82fb      	strh	r3, [r7, #22]
    return regval ;
 8002850:	8afb      	ldrh	r3, [r7, #22]

} // end dwt_read16bitoffsetreg()
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset, DW1000_Port_t *antenna_port)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b088      	sub	sp, #32
 800285e:	af02      	add	r7, sp, #8
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval, antenna_port);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	b298      	uxth	r0, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	b299      	uxth	r1, r3
 800286e:	f107 0217 	add.w	r2, r7, #23
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	4613      	mov	r3, r2
 8002878:	2201      	movs	r2, #1
 800287a:	f7ff ff4e 	bl	800271a <dwt_readfromdevice>

    return regval ;
 800287e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval, DW1000_Port_t *antenna_port)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af02      	add	r7, sp, #8
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval, antenna_port);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	b298      	uxth	r0, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	b299      	uxth	r1, r3
 80028a0:	1dfa      	adds	r2, r7, #7
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	4613      	mov	r3, r2
 80028a8:	2201      	movs	r2, #1
 80028aa:	f7ff fedd 	bl	8002668 <dwt_writetodevice>
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval, DW1000_Port_t *antenna_port)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b088      	sub	sp, #32
 80028ba:	af02      	add	r7, sp, #8
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	4613      	mov	r3, r2
 80028c4:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer,antenna_port);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	b298      	uxth	r0, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	b299      	uxth	r1, r3
 80028de:	f107 0214 	add.w	r2, r7, #20
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	4613      	mov	r3, r2
 80028e8:	2202      	movs	r2, #2
 80028ea:	f7ff febd 	bl	8002668 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval, DW1000_Port_t *antenna_port)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b088      	sub	sp, #32
 80028fa:	af02      	add	r7, sp, #8
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	603b      	str	r3, [r7, #0]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	e00d      	b.n	8002926 <dwt_write32bitoffsetreg+0x30>
    {
        buffer[j] = regval & 0xff ;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	b2d9      	uxtb	r1, r3
 800290e:	f107 0210 	add.w	r2, r7, #16
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	4413      	add	r3, r2
 8002916:	460a      	mov	r2, r1
 8002918:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3301      	adds	r3, #1
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b03      	cmp	r3, #3
 800292a:	ddee      	ble.n	800290a <dwt_write32bitoffsetreg+0x14>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer,antenna_port);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	b298      	uxth	r0, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	b299      	uxth	r1, r3
 8002934:	f107 0210 	add.w	r2, r7, #16
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	2204      	movs	r2, #4
 8002940:	f7ff fe92 	bl	8002668 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8002944:	bf00      	nop
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address, DW1000_Port_t *antenna_port)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	6039      	str	r1, [r7, #0]
 8002956:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address, antenna_port);
 8002958:	88fa      	ldrh	r2, [r7, #6]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2104      	movs	r1, #4
 800295e:	202d      	movs	r0, #45	@ 0x2d
 8002960:	f7ff ffa9 	bl	80028b6 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN, antenna_port);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	2203      	movs	r2, #3
 8002968:	2106      	movs	r1, #6
 800296a:	202d      	movs	r0, #45	@ 0x2d
 800296c:	f7ff ff8c 	bl	8002888 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00, antenna_port); // OTPREAD is self clearing but OTPRDEN is not
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2200      	movs	r2, #0
 8002974:	2106      	movs	r1, #6
 8002976:	202d      	movs	r0, #45	@ 0x2d
 8002978:	f7ff ff86 	bl	8002888 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT, antenna_port);
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	210a      	movs	r1, #10
 8002980:	202d      	movs	r0, #45	@ 0x2d
 8002982:	f7ff ff20 	bl	80027c6 <dwt_read32bitoffsetreg>
 8002986:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8002988:	68fb      	ldr	r3, [r7, #12]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(DW1000_Port_t *antenna_port)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00, antenna_port); // Clear the register
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	2102      	movs	r1, #2
 80029a0:	202c      	movs	r0, #44	@ 0x2c
 80029a2:	f7ff ff71 	bl	8002888 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, antenna_port);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2202      	movs	r2, #2
 80029aa:	2102      	movs	r1, #2
 80029ac:	202c      	movs	r0, #44	@ 0x2c
 80029ae:	f7ff ff6b 	bl	8002888 <dwt_write8bitoffsetreg>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex, DW1000_Port_t *antenna_port)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1, antenna_port); // 8-bit configuration register
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	226d      	movs	r2, #109	@ 0x6d
 80029c8:	f640 0106 	movw	r1, #2054	@ 0x806
 80029cc:	202e      	movs	r0, #46	@ 0x2e
 80029ce:	f7ff ff5b 	bl	8002888 <dwt_write8bitoffsetreg>

    if(prfIndex)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <_dwt_configlde+0x30>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64, antenna_port); // 16-bit LDE configuration tuning register
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f240 6207 	movw	r2, #1543	@ 0x607
 80029de:	f641 0106 	movw	r1, #6150	@ 0x1806
 80029e2:	202e      	movs	r0, #46	@ 0x2e
 80029e4:	f7ff ff67 	bl	80028b6 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16, antenna_port);
    }
}
 80029e8:	e007      	b.n	80029fa <_dwt_configlde+0x40>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16, antenna_port);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f241 6207 	movw	r2, #5639	@ 0x1607
 80029f0:	f641 0106 	movw	r1, #6150	@ 0x1806
 80029f4:	202e      	movs	r0, #46	@ 0x2e
 80029f6:	f7ff ff5e 	bl	80028b6 <dwt_write16bitoffsetreg>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(DW1000_Port_t *antenna_port)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE, antenna_port);
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	200e      	movs	r0, #14
 8002a0e:	f000 f9b7 	bl	8002d80 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD, antenna_port); // Set load LDE kick bit
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002a18:	2106      	movs	r1, #6
 8002a1a:	202d      	movs	r0, #45	@ 0x2d
 8002a1c:	f7ff ff4b 	bl	80028b6 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8002a20:	2001      	movs	r0, #1
 8002a22:	f000 fc42 	bl	80032aa <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ, antenna_port); // Enable clocks for sequencing
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	2001      	movs	r0, #1
 8002a2a:	f000 f9a9 	bl	8002d80 <_dwt_enableclocks>
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <dwt_setcallbacks>:
 * output parameters
 *
 * no return value
 */
void dwt_setcallbacks(dwt_cb_t cbTxDone, dwt_cb_t cbRxOk, dwt_cb_t cbRxTo, dwt_cb_t cbRxErr)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
    pdw1000local->cbTxDone = cbTxDone;
 8002a46:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <dwt_setcallbacks+0x3c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = cbRxOk;
 8002a4e:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <dwt_setcallbacks+0x3c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = cbRxTo;
 8002a56:	4b07      	ldr	r3, [pc, #28]	@ (8002a74 <dwt_setcallbacks+0x3c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = cbRxErr;
 8002a5e:	4b05      	ldr	r3, [pc, #20]	@ (8002a74 <dwt_setcallbacks+0x3c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	24000014 	.word	0x24000014

08002a78 <dwt_isr>:
 * output parameters
 *
 * no return value
 */
void dwt_isr(DW1000_Port_t *antenna_port)
{
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b08b      	sub	sp, #44	@ 0x2c
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	6078      	str	r0, [r7, #4]
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID, antenna_port); // Read status register low 32bits
 8002a80:	4b80      	ldr	r3, [pc, #512]	@ (8002c84 <dwt_isr+0x20c>)
 8002a82:	681c      	ldr	r4, [r3, #0]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	2100      	movs	r1, #0
 8002a88:	200f      	movs	r0, #15
 8002a8a:	f7ff fe9c 	bl	80027c6 <dwt_read32bitoffsetreg>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	61e3      	str	r3, [r4, #28]
 8002a92:	69e3      	ldr	r3, [r4, #28]
 8002a94:	61bb      	str	r3, [r7, #24]

    // Handle RX good frame event
    if(status & SYS_STATUS_RXFCG) //疑问: 为什么不是SYS_STATUS_RXDFR
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d076      	beq.n	8002b8e <dwt_isr+0x116>
    {
        uint16 finfo16;
        uint16 len;

        /* RXPRD(前导码检测) -> RXSFDD(SFD检测) -> RXPHD(PHY Header检测) -> RXFCG(crc正确) -> RXDFR(接收完成) */
        dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXPRD | \
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f44f 42d6 	mov.w	r2, #27392	@ 0x6b00
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	200f      	movs	r0, #15
 8002aaa:	f7ff ff24 	bl	80028f6 <dwt_write32bitoffsetreg>
                SYS_STATUS_RXSFDD | SYS_STATUS_RXPHD ), antenna_port); // Clear all receive status bits

        pdw1000local->cbData.rx_flags = 0;
 8002aae:	4b75      	ldr	r3, [pc, #468]	@ (8002c84 <dwt_isr+0x20c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        // Read frame info - Only the first two bytes of the register are used here.
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET, antenna_port);
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	2100      	movs	r1, #0
 8002abc:	2010      	movs	r0, #16
 8002abe:	f7ff fead 	bl	800281c <dwt_read16bitoffsetreg>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	82fb      	strh	r3, [r7, #22]

        // Report frame length - Standard frame length up to 127, extended frame length up to 1023 bytes
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
 8002ac6:	8afb      	ldrh	r3, [r7, #22]
 8002ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002acc:	83fb      	strh	r3, [r7, #30]
        if(pdw1000local->longFrames == 0)
 8002ace:	4b6d      	ldr	r3, [pc, #436]	@ (8002c84 <dwt_isr+0x20c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	7a9b      	ldrb	r3, [r3, #10]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d103      	bne.n	8002ae0 <dwt_isr+0x68>
        {
            len &= RX_FINFO_RXFLEN_MASK;
 8002ad8:	8bfb      	ldrh	r3, [r7, #30]
 8002ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ade:	83fb      	strh	r3, [r7, #30]
        }
        pdw1000local->cbData.datalength = len;
 8002ae0:	4b68      	ldr	r3, [pc, #416]	@ (8002c84 <dwt_isr+0x20c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	8bfa      	ldrh	r2, [r7, #30]
 8002ae6:	841a      	strh	r2, [r3, #32]

        // Report ranging bit
        if(finfo16 & RX_FINFO_RNG)
 8002ae8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	da0a      	bge.n	8002b06 <dwt_isr+0x8e>
        {
            pdw1000local->cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
 8002af0:	4b64      	ldr	r3, [pc, #400]	@ (8002c84 <dwt_isr+0x20c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8002af8:	4b62      	ldr	r3, [pc, #392]	@ (8002c84 <dwt_isr+0x20c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        // Report frame control - First bytes of the received frame.
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, pdw1000local->cbData.fctrl, antenna_port);
 8002b06:	4b5f      	ldr	r3, [pc, #380]	@ (8002c84 <dwt_isr+0x20c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	4613      	mov	r3, r2
 8002b14:	2202      	movs	r2, #2
 8002b16:	2100      	movs	r1, #0
 8002b18:	2011      	movs	r0, #17
 8002b1a:	f7ff fdfe 	bl	800271a <dwt_readfromdevice>

        // Because of a previous frame not being received properly, AAT bit can be set upon the proper reception of a frame not requesting for
        // acknowledgement (ACK frame is not actually sent though). If the AAT bit is set, check ACK request bit in frame control to confirm (this
        // implementation works only for IEEE802.15.4-2011 compliant frames).
        // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
        if((status & SYS_STATUS_AAT) && ((pdw1000local->cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d019      	beq.n	8002b5c <dwt_isr+0xe4>
 8002b28:	4b56      	ldr	r3, [pc, #344]	@ (8002c84 <dwt_isr+0x20c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d111      	bne.n	8002b5c <dwt_isr+0xe4>
        {
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT, antenna_port); // Clear AAT status bit in register
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	200f      	movs	r0, #15
 8002b40:	f7ff fed9 	bl	80028f6 <dwt_write32bitoffsetreg>
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
 8002b44:	4b4f      	ldr	r3, [pc, #316]	@ (8002c84 <dwt_isr+0x20c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c84 <dwt_isr+0x20c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0208 	bic.w	r2, r2, #8
 8002b52:	61da      	str	r2, [r3, #28]
            pdw1000local->wait4resp = 0;
 8002b54:	4b4b      	ldr	r3, [pc, #300]	@ (8002c84 <dwt_isr+0x20c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	755a      	strb	r2, [r3, #21]
        }

        // Call the corresponding callback if present
        if(pdw1000local->cbRxOk != NULL)
 8002b5c:	4b49      	ldr	r3, [pc, #292]	@ (8002c84 <dwt_isr+0x20c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <dwt_isr+0x100>
        {
            pdw1000local->cbRxOk(&pdw1000local->cbData, antenna_port);
 8002b66:	4b47      	ldr	r3, [pc, #284]	@ (8002c84 <dwt_isr+0x20c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	4a45      	ldr	r2, [pc, #276]	@ (8002c84 <dwt_isr+0x20c>)
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	321c      	adds	r2, #28
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4610      	mov	r0, r2
 8002b76:	4798      	blx	r3
        }

        if (pdw1000local->dblbuffon)
 8002b78:	4b42      	ldr	r3, [pc, #264]	@ (8002c84 <dwt_isr+0x20c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	7d1b      	ldrb	r3, [r3, #20]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <dwt_isr+0x116>
        {
            // Toggle the Host side Receive Buffer Pointer
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1, antenna_port);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	2103      	movs	r1, #3
 8002b88:	200d      	movs	r0, #13
 8002b8a:	f7ff fe7d 	bl	8002888 <dwt_write8bitoffsetreg>
        }
    }

    // Handle TX confirmation event
    if(status & SYS_STATUS_TXFRS)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d023      	beq.n	8002be0 <dwt_isr+0x168>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX, antenna_port); // Clear TX event bits  就是啊，这边会自动清除的啊，为什么还要什么东西呢？
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	22f8      	movs	r2, #248	@ 0xf8
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	200f      	movs	r0, #15
 8002ba0:	f7ff fea9 	bl	80028f6 <dwt_write32bitoffsetreg>
        // In the case where this TXFRS interrupt is due to the automatic transmission of an ACK solicited by a response (with ACK request bit set)
        // that we receive through using wait4resp to a previous TX (and assuming that the IRQ processing of that TX has already been handled), then
        // we need to handle the IC issue which turns on the RX again in this situation (i.e. because it is wrongly applying the wait4resp after the
        // ACK TX).
        // See section "Transmit and automatically wait for response" in DW1000 User Manual
        if((status & SYS_STATUS_AAT) && pdw1000local->wait4resp)   //wait4resp是在tx的时候设置了expect_resp, 但是这个什么SYS_STATUS_AAT不知道是在哪里设置的啊
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <dwt_isr+0x14c>
 8002bae:	4b35      	ldr	r3, [pc, #212]	@ (8002c84 <dwt_isr+0x20c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	7d5b      	ldrb	r3, [r3, #21]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <dwt_isr+0x14c>
        {
            dwt_forcetrxoff(antenna_port); // Turn the RX off
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f997 	bl	8002eec <dwt_forcetrxoff>
            dwt_rxreset(antenna_port); // Reset in case we were late and a frame was already being received
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 faba 	bl	8003138 <dwt_rxreset>
        }

        // Call the corresponding callback if present
        if(pdw1000local->cbTxDone != NULL)
 8002bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8002c84 <dwt_isr+0x20c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <dwt_isr+0x168>
        {
            pdw1000local->cbTxDone(&pdw1000local->cbData, antenna_port);
 8002bce:	4b2d      	ldr	r3, [pc, #180]	@ (8002c84 <dwt_isr+0x20c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8002c84 <dwt_isr+0x20c>)
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	321c      	adds	r2, #28
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4798      	blx	r3
        }
    }

    // Handle frame reception/preamble detect timeout events
    if(status & SYS_STATUS_ALL_RX_TO)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f403 1308 	and.w	r3, r3, #2228224	@ 0x220000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01e      	beq.n	8002c28 <dwt_isr+0x1b0>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO, antenna_port); // Clear RX timeout event bits
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f44f 1208 	mov.w	r2, #2228224	@ 0x220000
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	200f      	movs	r0, #15
 8002bf4:	f7ff fe7f 	bl	80028f6 <dwt_write32bitoffsetreg>

        pdw1000local->wait4resp = 0;
 8002bf8:	4b22      	ldr	r3, [pc, #136]	@ (8002c84 <dwt_isr+0x20c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	755a      	strb	r2, [r3, #21]

        // Because of an issue with receiver restart after error conditions, an RX reset must be applied after any error or timeout event to ensure
        // the next good frame's timestamp is computed correctly.
        // See section "RX Message timestamp" in DW1000 User Manual.
        dwt_forcetrxoff(antenna_port);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f973 	bl	8002eec <dwt_forcetrxoff>
        dwt_rxreset(antenna_port);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fa96 	bl	8003138 <dwt_rxreset>

        // Call the corresponding callback if present
        if(pdw1000local->cbRxTo != NULL)
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c84 <dwt_isr+0x20c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <dwt_isr+0x1b0>
        {
            pdw1000local->cbRxTo(&pdw1000local->cbData, antenna_port);
 8002c16:	4b1b      	ldr	r3, [pc, #108]	@ (8002c84 <dwt_isr+0x20c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1c:	4a19      	ldr	r2, [pc, #100]	@ (8002c84 <dwt_isr+0x20c>)
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	321c      	adds	r2, #28
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4610      	mov	r0, r2
 8002c26:	4798      	blx	r3
        }
    }

    // Handle RX errors events
    if(status & SYS_STATUS_ALL_RX_ERR)
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4b17      	ldr	r3, [pc, #92]	@ (8002c88 <dwt_isr+0x210>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01a      	beq.n	8002c68 <dwt_isr+0x1f0>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR, antenna_port); // Clear RX error event bits
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a14      	ldr	r2, [pc, #80]	@ (8002c88 <dwt_isr+0x210>)
 8002c36:	2100      	movs	r1, #0
 8002c38:	200f      	movs	r0, #15
 8002c3a:	f7ff fe5c 	bl	80028f6 <dwt_write32bitoffsetreg>

        pdw1000local->wait4resp = 0;
 8002c3e:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <dwt_isr+0x20c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2200      	movs	r2, #0
 8002c44:	755a      	strb	r2, [r3, #21]

        // Because of an issue with receiver restart after error conditions, an RX reset must be applied after any error or timeout event to ensure
        // the next good frame's timestamp is computed correctly.
        // See section "RX Message timestamp" in DW1000 User Manual.
        //        dwt_forcetrxoff();
        dwt_rxreset(antenna_port);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fa76 	bl	8003138 <dwt_rxreset>

        // Call the corresponding callback if present
        if(pdw1000local->cbRxErr != NULL)
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <dwt_isr+0x20c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <dwt_isr+0x1f0>
        {
            pdw1000local->cbRxErr(&pdw1000local->cbData, antenna_port);
 8002c56:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <dwt_isr+0x20c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c5c:	4a09      	ldr	r2, [pc, #36]	@ (8002c84 <dwt_isr+0x20c>)
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	321c      	adds	r2, #28
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4610      	mov	r0, r2
 8002c66:	4798      	blx	r3
        }
    }

    uint32 sysconfig1;
    sysconfig1 = dwt_read32bitreg(SYS_CFG_ID, antenna_port) ; // Read sysconfig register
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	2004      	movs	r0, #4
 8002c6e:	f7ff fdaa 	bl	80027c6 <dwt_read32bitoffsetreg>
 8002c72:	6138      	str	r0, [r7, #16]
    int a;
    a++;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3301      	adds	r3, #1
 8002c78:	60fb      	str	r3, [r7, #12]
}
 8002c7a:	bf00      	nop
 8002c7c:	3724      	adds	r7, #36	@ 0x24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd90      	pop	{r4, r7, pc}
 8002c82:	bf00      	nop
 8002c84:	24000014 	.word	0x24000014
 8002c88:	24059000 	.word	0x24059000

08002c8c <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode, DW1000_Port_t *antenna_port)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	6039      	str	r1, [r7, #0]
 8002c96:	71fb      	strb	r3, [r7, #7]
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d059      	beq.n	8002d56 <dwt_setleds+0xca>
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, antenna_port);
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	2026      	movs	r0, #38	@ 0x26
 8002ca8:	f7ff fd8d 	bl	80027c6 <dwt_read32bitoffsetreg>
 8002cac:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8002cb4:	60fb      	str	r3, [r7, #12]
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8002cbc:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, antenna_port);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	2026      	movs	r0, #38	@ 0x26
 8002cc6:	f7ff fe16 	bl	80028f6 <dwt_write32bitoffsetreg>



        //RXOK GPIO0
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, antenna_port);
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	2100      	movs	r1, #0
 8002cce:	2026      	movs	r0, #38	@ 0x26
 8002cd0:	f7ff fd79 	bl	80027c6 <dwt_read32bitoffsetreg>
 8002cd4:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP0_MASK | GPIO_MSGP3_MASK);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f423 5343 	bic.w	r3, r3, #12480	@ 0x30c0
 8002cdc:	60fb      	str	r3, [r7, #12]
        reg |= (0x00000040 | GPIO_PIN3_TXLED);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f443 5382 	orr.w	r3, r3, #4160	@ 0x1040
 8002ce4:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, antenna_port);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	2100      	movs	r1, #0
 8002cec:	2026      	movs	r0, #38	@ 0x26
 8002cee:	f7ff fe02 	bl	80028f6 <dwt_write32bitoffsetreg>




        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, antenna_port);
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	2036      	movs	r0, #54	@ 0x36
 8002cf8:	f7ff fd65 	bl	80027c6 <dwt_read32bitoffsetreg>
 8002cfc:	60f8      	str	r0, [r7, #12]
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f443 0304 	orr.w	r3, r3, #8650752	@ 0x840000
 8002d04:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg, antenna_port);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	2036      	movs	r0, #54	@ 0x36
 8002d0e:	f7ff fdf2 	bl	80028f6 <dwt_write32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
 8002d12:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002d16:	60fb      	str	r3, [r7, #12]
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <dwt_setleds+0x9e>
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8002d28:	60fb      	str	r3, [r7, #12]
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg, antenna_port);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	2128      	movs	r1, #40	@ 0x28
 8002d30:	2036      	movs	r0, #54	@ 0x36
 8002d32:	f7ff fde0 	bl	80028f6 <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01a      	beq.n	8002d76 <dwt_setleds+0xea>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8002d46:	60fb      	str	r3, [r7, #12]
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg, antenna_port);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	2128      	movs	r1, #40	@ 0x28
 8002d4e:	2036      	movs	r0, #54	@ 0x36
 8002d50:	f7ff fdd1 	bl	80028f6 <dwt_write32bitoffsetreg>
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, antenna_port);
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, antenna_port);
    }
}
 8002d54:	e00f      	b.n	8002d76 <dwt_setleds+0xea>
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, antenna_port);
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2026      	movs	r0, #38	@ 0x26
 8002d5c:	f7ff fd33 	bl	80027c6 <dwt_read32bitoffsetreg>
 8002d60:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8002d68:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, antenna_port);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	2100      	movs	r1, #0
 8002d70:	2026      	movs	r0, #38	@ 0x26
 8002d72:	f7ff fdc0 	bl	80028f6 <dwt_write32bitoffsetreg>
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks, DW1000_Port_t *antenna_port)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg, antenna_port);
 8002d8a:	f107 020c 	add.w	r2, r7, #12
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	4613      	mov	r3, r2
 8002d94:	2202      	movs	r2, #2
 8002d96:	2100      	movs	r1, #0
 8002d98:	2036      	movs	r0, #54	@ 0x36
 8002d9a:	f7ff fcbe 	bl	800271a <dwt_readfromdevice>
    switch(clocks)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b0e      	cmp	r3, #14
 8002da2:	d876      	bhi.n	8002e92 <_dwt_enableclocks+0x112>
 8002da4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dac <_dwt_enableclocks+0x2c>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002df9 	.word	0x08002df9
 8002db0:	08002de9 	.word	0x08002de9
 8002db4:	08002e0f 	.word	0x08002e0f
 8002db8:	08002e93 	.word	0x08002e93
 8002dbc:	08002e93 	.word	0x08002e93
 8002dc0:	08002e93 	.word	0x08002e93
 8002dc4:	08002e93 	.word	0x08002e93
 8002dc8:	08002e25 	.word	0x08002e25
 8002dcc:	08002e45 	.word	0x08002e45
 8002dd0:	08002e93 	.word	0x08002e93
 8002dd4:	08002e93 	.word	0x08002e93
 8002dd8:	08002e5b 	.word	0x08002e5b
 8002ddc:	08002e67 	.word	0x08002e67
 8002de0:	08002e73 	.word	0x08002e73
 8002de4:	08002e89 	.word	0x08002e89
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8002de8:	2300      	movs	r3, #0
 8002dea:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8002dec:	7b7b      	ldrb	r3, [r7, #13]
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	737b      	strb	r3, [r7, #13]
        }
            break;
 8002df6:	e04d      	b.n	8002e94 <_dwt_enableclocks+0x114>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8002df8:	7b3b      	ldrb	r3, [r7, #12]
 8002dfa:	b25b      	sxtb	r3, r3
 8002dfc:	f023 0303 	bic.w	r3, r3, #3
 8002e00:	b25b      	sxtb	r3, r3
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	b25b      	sxtb	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	733b      	strb	r3, [r7, #12]
        }
            break;
 8002e0c:	e042      	b.n	8002e94 <_dwt_enableclocks+0x114>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8002e0e:	7b3b      	ldrb	r3, [r7, #12]
 8002e10:	b25b      	sxtb	r3, r3
 8002e12:	f023 0303 	bic.w	r3, r3, #3
 8002e16:	b25b      	sxtb	r3, r3
 8002e18:	f043 0302 	orr.w	r3, r3, #2
 8002e1c:	b25b      	sxtb	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	733b      	strb	r3, [r7, #12]
        }
            break;
 8002e22:	e037      	b.n	8002e94 <_dwt_enableclocks+0x114>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8002e24:	7b3b      	ldrb	r3, [r7, #12]
 8002e26:	b25b      	sxtb	r3, r3
 8002e28:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 8002e2c:	b25b      	sxtb	r3, r3
 8002e2e:	f043 0348 	orr.w	r3, r3, #72	@ 0x48
 8002e32:	b25b      	sxtb	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8002e38:	7b7b      	ldrb	r3, [r7, #13]
 8002e3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	737b      	strb	r3, [r7, #13]
        }
            break;
 8002e42:	e027      	b.n	8002e94 <_dwt_enableclocks+0x114>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8002e44:	7b3b      	ldrb	r3, [r7, #12]
 8002e46:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8002e4e:	7b7b      	ldrb	r3, [r7, #13]
 8002e50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	737b      	strb	r3, [r7, #13]
        }
            break;
 8002e58:	e01c      	b.n	8002e94 <_dwt_enableclocks+0x114>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8002e5a:	7b7b      	ldrb	r3, [r7, #13]
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	737b      	strb	r3, [r7, #13]
        }
            break;
 8002e64:	e016      	b.n	8002e94 <_dwt_enableclocks+0x114>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8002e66:	7b7b      	ldrb	r3, [r7, #13]
 8002e68:	f023 0302 	bic.w	r3, r3, #2
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	737b      	strb	r3, [r7, #13]
        }
            break;
 8002e70:	e010      	b.n	8002e94 <_dwt_enableclocks+0x114>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8002e72:	7b3b      	ldrb	r3, [r7, #12]
 8002e74:	b25b      	sxtb	r3, r3
 8002e76:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002e7a:	b25b      	sxtb	r3, r3
 8002e7c:	f043 0320 	orr.w	r3, r3, #32
 8002e80:	b25b      	sxtb	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	733b      	strb	r3, [r7, #12]
        }
            break;
 8002e86:	e005      	b.n	8002e94 <_dwt_enableclocks+0x114>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	737b      	strb	r3, [r7, #13]
        }
            break;
 8002e90:	e000      	b.n	8002e94 <_dwt_enableclocks+0x114>
        default:
            break;
 8002e92:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0], antenna_port);
 8002e94:	f107 020c 	add.w	r2, r7, #12
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	2036      	movs	r0, #54	@ 0x36
 8002ea4:	f7ff fbe0 	bl	8002668 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1], antenna_port);
 8002ea8:	f107 030c 	add.w	r3, r7, #12
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	2036      	movs	r0, #54	@ 0x36
 8002eba:	f7ff fbd5 	bl	8002668 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop

08002ec8 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(DW1000_Port_t *antenna_port) // Disable sequencing and go to state "INIT"
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
    _dwt_enableclocks(FORCE_SYS_XTI, antenna_port); // Set system clock to XTI
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7ff ff54 	bl	8002d80 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, antenna_port); // Disable PMSC ctrl of RF and RX clk blocks
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	2104      	movs	r1, #4
 8002ede:	2036      	movs	r0, #54	@ 0x36
 8002ee0:	f7ff fce9 	bl	80028b6 <dwt_write16bitoffsetreg>
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(DW1000_Port_t *antenna_port)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID, antenna_port) ; // Read set interrupt mask
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	200e      	movs	r0, #14
 8002efa:	f7ff fc64 	bl	80027c6 <dwt_read32bitoffsetreg>
 8002efe:	60f8      	str	r0, [r7, #12]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon(antenna_port) ;
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f9af 	bl	8003264 <decamutexon>
 8002f06:	60b8      	str	r0, [r7, #8]

    dwt_write32bitreg(SYS_MASK_ID, 0, antenna_port) ; // Clear interrupt mask - so we don't get any unwanted events
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	200e      	movs	r0, #14
 8002f10:	f7ff fcf1 	bl	80028f6 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF, antenna_port) ; // Disable the radio
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2240      	movs	r2, #64	@ 0x40
 8002f18:	2100      	movs	r1, #0
 8002f1a:	200d      	movs	r0, #13
 8002f1c:	f7ff fcb4 	bl	8002888 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD), antenna_port);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a0d      	ldr	r2, [pc, #52]	@ (8002f58 <dwt_forcetrxoff+0x6c>)
 8002f24:	2100      	movs	r1, #0
 8002f26:	200f      	movs	r0, #15
 8002f28:	f7ff fce5 	bl	80028f6 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs(antenna_port);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f817 	bl	8002f60 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask, antenna_port) ; // Set interrupt mask to what it was
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	2100      	movs	r1, #0
 8002f38:	200e      	movs	r0, #14
 8002f3a:	f7ff fcdc 	bl	80028f6 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat, antenna_port) ;
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	68b8      	ldr	r0, [r7, #8]
 8002f42:	f000 f9a3 	bl	800328c <decamutexoff>
    pdw1000local->wait4resp = 0;
 8002f46:	4b05      	ldr	r3, [pc, #20]	@ (8002f5c <dwt_forcetrxoff+0x70>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	2427fff8 	.word	0x2427fff8
 8002f5c:	24000014 	.word	0x24000014

08002f60 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(DW1000_Port_t *antenna_port)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3, antenna_port); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	2103      	movs	r1, #3
 8002f6c:	200f      	movs	r0, #15
 8002f6e:	f7ff fc74 	bl	800285a <dwt_read8bitoffsetreg>
 8002f72:	4603      	mov	r3, r0
 8002f74:	73fb      	strb	r3, [r7, #15]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8002f76:	7bfa      	ldrb	r2, [r7, #15]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8002f7c:	4053      	eors	r3, r2
 8002f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <dwt_syncrxbufptrs+0x32>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01, antenna_port) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	2103      	movs	r1, #3
 8002f8c:	200d      	movs	r0, #13
 8002f8e:	f7ff fc7b 	bl	8002888 <dwt_write8bitoffsetreg>
    }
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode, DW1000_Port_t *antenna_port)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <dwt_rxenable+0x1a>
    {
        dwt_syncrxbufptrs(antenna_port);
 8002fae:	6838      	ldr	r0, [r7, #0]
 8002fb0:	f7ff ffd6 	bl	8002f60 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8002fb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fb8:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <dwt_rxenable+0x32>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8002fc4:	89fb      	ldrh	r3, [r7, #14]
 8002fc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fca:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp, antenna_port);
 8002fcc:	89fa      	ldrh	r2, [r7, #14]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	200d      	movs	r0, #13
 8002fd4:	f7ff fc6f 	bl	80028b6 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d01d      	beq.n	800301e <dwt_rxenable+0x84>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3, antenna_port); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	2103      	movs	r1, #3
 8002fe6:	200f      	movs	r0, #15
 8002fe8:	f7ff fc37 	bl	800285a <dwt_read8bitoffsetreg>
 8002fec:	4603      	mov	r3, r0
 8002fee:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8002ff0:	7b7b      	ldrb	r3, [r7, #13]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d011      	beq.n	800301e <dwt_rxenable+0x84>
        {
            dwt_forcetrxoff(antenna_port); // turn the delayed receive off
 8002ffa:	6838      	ldr	r0, [r7, #0]
 8002ffc:	f7ff ff76 	bl	8002eec <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <dwt_rxenable+0x7e>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB, antenna_port);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003010:	2100      	movs	r1, #0
 8003012:	200d      	movs	r0, #13
 8003014:	f7ff fc4f 	bl	80028b6 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8003018:	f04f 33ff 	mov.w	r3, #4294967295
 800301c:	e000      	b.n	8003020 <dwt_rxenable+0x86>
        }
    }

    return DWT_SUCCESS;
 800301e:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time, DW1000_Port_t *antenna_port)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3, antenna_port); // Read at offset 3 to get the upper byte only
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	2103      	movs	r1, #3
 8003038:	2004      	movs	r0, #4
 800303a:	f7ff fc0e 	bl	800285a <dwt_read8bitoffsetreg>
 800303e:	4603      	mov	r3, r0
 8003040:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d018      	beq.n	800307a <dwt_setrxtimeout+0x52>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time, antenna_port) ;
 8003048:	88fa      	ldrh	r2, [r7, #6]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2100      	movs	r1, #0
 800304e:	200c      	movs	r0, #12
 8003050:	f7ff fc31 	bl	80028b6 <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	f043 0310 	orr.w	r3, r3, #16
 800305a:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 800305c:	4b12      	ldr	r3, [pc, #72]	@ (80030a8 <dwt_setrxtimeout+0x80>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <dwt_setrxtimeout+0x80>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800306a:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp, antenna_port); // Write at offset 3 to write the upper byte only
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2103      	movs	r1, #3
 8003072:	2004      	movs	r0, #4
 8003074:	f7ff fc08 	bl	8002888 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp, antenna_port); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 8003078:	e011      	b.n	800309e <dwt_setrxtimeout+0x76>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	f023 0310 	bic.w	r3, r3, #16
 8003080:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 8003082:	4b09      	ldr	r3, [pc, #36]	@ (80030a8 <dwt_setrxtimeout+0x80>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	4b07      	ldr	r3, [pc, #28]	@ (80030a8 <dwt_setrxtimeout+0x80>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003090:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp, antenna_port); // Write at offset 3 to write the upper byte only
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2103      	movs	r1, #3
 8003098:	2004      	movs	r0, #4
 800309a:	f7ff fbf5 	bl	8002888 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	24000014 	.word	0x24000014

080030ac <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout, DW1000_Port_t *antenna_port)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	6039      	str	r1, [r7, #0]
 80030b6:	80fb      	strh	r3, [r7, #6]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout, antenna_port);
 80030b8:	88fa      	ldrh	r2, [r7, #6]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2124      	movs	r1, #36	@ 0x24
 80030be:	2027      	movs	r0, #39	@ 0x27
 80030c0:	f7ff fbf9 	bl	80028b6 <dwt_write16bitoffsetreg>
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <dwt_setinterrupt>:
 * output parameters
 *
 * no return value
 */
void dwt_setinterrupt(uint32 bitmask, uint8 operation, DW1000_Port_t *antenna_port)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	460b      	mov	r3, r1
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	72fb      	strb	r3, [r7, #11]
    decaIrqStatus_t stat ;
    uint32 mask ;

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    stat = decamutexon(antenna_port) ;
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f8c2 	bl	8003264 <decamutexon>
 80030e0:	6138      	str	r0, [r7, #16]

    if(operation == 2)
 80030e2:	7afb      	ldrb	r3, [r7, #11]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d106      	bne.n	80030f6 <dwt_setinterrupt+0x2a>
    {
        dwt_write32bitreg(SYS_MASK_ID, bitmask, antenna_port) ; // New value
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	2100      	movs	r1, #0
 80030ee:	200e      	movs	r0, #14
 80030f0:	f7ff fc01 	bl	80028f6 <dwt_write32bitoffsetreg>
 80030f4:	e018      	b.n	8003128 <dwt_setinterrupt+0x5c>
    }
    else
    {
        mask = dwt_read32bitreg(SYS_MASK_ID, antenna_port) ; // Read register
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	2100      	movs	r1, #0
 80030fa:	200e      	movs	r0, #14
 80030fc:	f7ff fb63 	bl	80027c6 <dwt_read32bitoffsetreg>
 8003100:	6178      	str	r0, [r7, #20]
        if(operation == 1)
 8003102:	7afb      	ldrb	r3, [r7, #11]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d104      	bne.n	8003112 <dwt_setinterrupt+0x46>
        {
            mask |= bitmask ;
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	e004      	b.n	800311c <dwt_setinterrupt+0x50>
        }
        else
        {
            mask &= ~bitmask ; // Clear the bit
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	43db      	mvns	r3, r3
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4013      	ands	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
        }
        dwt_write32bitreg(SYS_MASK_ID, mask, antenna_port) ; // New value
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	2100      	movs	r1, #0
 8003122:	200e      	movs	r0, #14
 8003124:	f7ff fbe7 	bl	80028f6 <dwt_write32bitoffsetreg>
    }

    decamutexoff(stat,antenna_port) ;
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	6938      	ldr	r0, [r7, #16]
 800312c:	f000 f8ae 	bl	800328c <decamutexoff>
}
 8003130:	bf00      	nop
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(DW1000_Port_t *antenna_port)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX, antenna_port);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	22e0      	movs	r2, #224	@ 0xe0
 8003144:	2103      	movs	r1, #3
 8003146:	2036      	movs	r0, #54	@ 0x36
 8003148:	f7ff fb9e 	bl	8002888 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, antenna_port);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	22f0      	movs	r2, #240	@ 0xf0
 8003150:	2103      	movs	r1, #3
 8003152:	2036      	movs	r0, #54	@ 0x36
 8003154:	f7ff fb98 	bl	8002888 <dwt_write8bitoffsetreg>
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(DW1000_Port_t *antenna_port)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
    _dwt_disablesequencing(antenna_port);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7ff fead 	bl	8002ec8 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00, antenna_port);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	2100      	movs	r1, #0
 8003174:	202c      	movs	r0, #44	@ 0x2c
 8003176:	f7ff fb9e 	bl	80028b6 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00, antenna_port);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	2106      	movs	r1, #6
 8003180:	202c      	movs	r0, #44	@ 0x2c
 8003182:	f7ff fb81 	bl	8002888 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload(antenna_port);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff fc03 	bl	8002992 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL, antenna_port);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	2103      	movs	r1, #3
 8003192:	2036      	movs	r0, #54	@ 0x36
 8003194:	f7ff fb78 	bl	8002888 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8003198:	2001      	movs	r0, #1
 800319a:	f000 f886 	bl	80032aa <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, antenna_port);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	22f0      	movs	r2, #240	@ 0xf0
 80031a2:	2103      	movs	r1, #3
 80031a4:	2036      	movs	r0, #54	@ 0x36
 80031a6:	f7ff fb6f 	bl	8002888 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 80031aa:	4b04      	ldr	r3, [pc, #16]	@ (80031bc <dwt_softreset+0x5c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2200      	movs	r2, #0
 80031b0:	755a      	strb	r2, [r3, #21]
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	24000014 	.word	0x24000014

080031c0 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value, DW1000_Port_t *antenna_port)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	6039      	str	r1, [r7, #0]
 80031ca:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 80031cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	b25b      	sxtb	r3, r3
 80031d6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80031da:	b25b      	sxtb	r3, r3
 80031dc:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val, antenna_port);
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	210e      	movs	r1, #14
 80031e4:	202b      	movs	r0, #43	@ 0x2b
 80031e6:	f7ff fb4f 	bl	8002888 <dwt_write8bitoffsetreg>
}
 80031ea:	bf00      	nop
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <dwt_readrcphase>:
*/

// read RCPHASE register

void dwt_readrcphase(uint8_t *phase, DW1000_Port_t *antenna_port)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af02      	add	r7, sp, #8
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]
    uint64_t temp={0};
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	e9c7 2302 	strd	r2, r3, [r7, #8]
    dwt_readfromdevice(RX_TTCKO_ID, 0, RX_TTCKO_LEN, (uint8_t*)&temp, antenna_port);
 8003208:	f107 0208 	add.w	r2, r7, #8
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	4613      	mov	r3, r2
 8003212:	2205      	movs	r2, #5
 8003214:	2100      	movs	r1, #0
 8003216:	2014      	movs	r0, #20
 8003218:	f7ff fa7f 	bl	800271a <dwt_readfromdevice>

    *phase = (temp & RX_TTCKO_RCPHASE_MASK) >> 32;
 800321c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	000a      	movs	r2, r1
 800322a:	2300      	movs	r3, #0
 800322c:	b2d3      	uxtb	r3, r2
 800322e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003232:	b2da      	uxtb	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	701a      	strb	r2, [r3, #0]
}
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <dwt_setecctrl>:
// set EC_CTRL OSTRM (One Shot Timebase Reset)
void dwt_setecctrl(uint32_t reg, DW1000_Port_t *antenna_port)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af02      	add	r7, sp, #8
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
    dwt_writetodevice(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_LEN, &reg, antenna_port);
 800324a:	1d3a      	adds	r2, r7, #4
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	4613      	mov	r3, r2
 8003252:	2204      	movs	r2, #4
 8003254:	2100      	movs	r1, #0
 8003256:	2024      	movs	r0, #36	@ 0x24
 8003258:	f7ff fa06 	bl	8002668 <dwt_writetodevice>
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(DW1000_Port_t *antenna_port)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
	decaIrqStatus_t s = (decaIrqStatus_t)port_GetEXT_IRQStatus(antenna_port);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fa21 	bl	80036b4 <port_GetEXT_IRQStatus>
 8003272:	4603      	mov	r3, r0
 8003274:	60fb      	str	r3, [r7, #12]

	if(s) {
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <decamutexon+0x1e>
		port_DisableEXT_IRQ(antenna_port); //disable the external interrupt line
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f9fd 	bl	800367c <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8003282:	68fb      	ldr	r3, [r7, #12]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s, DW1000_Port_t *antenna_port)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <decamutexoff+0x16>
		port_EnableEXT_IRQ(antenna_port);
 800329c:	6838      	ldr	r0, [r7, #0]
 800329e:	f000 f9fb 	bl	8003698 <port_EnableEXT_IRQ>
	}
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f8d9 	bl	800346a <Sleep>
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <writetospi>:
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer,
               DW1000_Port_t *antenna_port)
{
 80032c0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	4683      	mov	fp, r0
 80032c8:	468a      	mov	sl, r1
 80032ca:	4690      	mov	r8, r2
 80032cc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80032ce:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    SPI_HandleTypeDef *hspi = antenna_port->hspi;
    stat = decamutexon(antenna_port);
 80032d0:	4630      	mov	r0, r6
    SPI_HandleTypeDef *hspi = antenna_port->hspi;
 80032d2:	6835      	ldr	r5, [r6, #0]
    stat = decamutexon(antenna_port);
 80032d4:	f7ff ffc6 	bl	8003264 <decamutexon>
 80032d8:	9001      	str	r0, [sp, #4]

    while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY);
 80032da:	4628      	mov	r0, r5
 80032dc:	f004 fb74 	bl	80079c8 <HAL_SPI_GetState>
 80032e0:	2801      	cmp	r0, #1
 80032e2:	4604      	mov	r4, r0
 80032e4:	d1f9      	bne.n	80032da <writetospi+0x1a>

    HAL_GPIO_WritePin(antenna_port->spi_csn_port, antenna_port->spi_csn_pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80032e6:	8931      	ldrh	r1, [r6, #8]
 80032e8:	2200      	movs	r2, #0
 80032ea:	6870      	ldr	r0, [r6, #4]
 80032ec:	f000 fe34 	bl	8003f58 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hspi, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80032f0:	465a      	mov	r2, fp
 80032f2:	4651      	mov	r1, sl
 80032f4:	f04f 33ff 	mov.w	r3, #4294967295
 80032f8:	4628      	mov	r0, r5
 80032fa:	f003 ff05 	bl	8007108 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003302:	4649      	mov	r1, r9
 8003304:	fa1f f288 	uxth.w	r2, r8
 8003308:	4628      	mov	r0, r5
 800330a:	f003 fefd 	bl	8007108 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(antenna_port->spi_csn_port, antenna_port->spi_csn_pin, GPIO_PIN_SET); /**< Put chip select line high */
 800330e:	4622      	mov	r2, r4
 8003310:	8931      	ldrh	r1, [r6, #8]
 8003312:	6870      	ldr	r0, [r6, #4]
 8003314:	f000 fe20 	bl	8003f58 <HAL_GPIO_WritePin>

    decamutexoff(stat, antenna_port);
 8003318:	9801      	ldr	r0, [sp, #4]
 800331a:	4631      	mov	r1, r6
 800331c:	f7ff ffb6 	bl	800328c <decamutexoff>

    return 0;
} // end writetospi()
 8003320:	2000      	movs	r0, #0
 8003322:	b002      	add	sp, #8
 8003324:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003328 <readfromspi>:
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer,
                DW1000_Port_t *antenna_port)
{
 8003328:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	4683      	mov	fp, r0
 8003330:	468a      	mov	sl, r1
 8003332:	4690      	mov	r8, r2
 8003334:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8003336:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    SPI_HandleTypeDef *hspi = antenna_port->hspi;
    stat = decamutexon(antenna_port) ;
 8003338:	4630      	mov	r0, r6
    SPI_HandleTypeDef *hspi = antenna_port->hspi;
 800333a:	6835      	ldr	r5, [r6, #0]
    stat = decamutexon(antenna_port) ;
 800333c:	f7ff ff92 	bl	8003264 <decamutexon>
 8003340:	9001      	str	r0, [sp, #4]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY);
 8003342:	4628      	mov	r0, r5
 8003344:	f004 fb40 	bl	80079c8 <HAL_SPI_GetState>
 8003348:	2801      	cmp	r0, #1
 800334a:	4604      	mov	r4, r0
 800334c:	d1f9      	bne.n	8003342 <readfromspi+0x1a>

    HAL_GPIO_WritePin(antenna_port->spi_csn_port, antenna_port->spi_csn_pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800334e:	8931      	ldrh	r1, [r6, #8]
 8003350:	2200      	movs	r2, #0
 8003352:	6870      	ldr	r0, [r6, #4]
 8003354:	f000 fe00 	bl	8003f58 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hspi, headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 8003358:	465a      	mov	r2, fp
 800335a:	4651      	mov	r1, sl
 800335c:	f04f 33ff 	mov.w	r3, #4294967295
 8003360:	4628      	mov	r0, r5
 8003362:	f003 fed1 	bl	8007108 <HAL_SPI_Transmit>

    HAL_SPI_Receive(hspi, readBuffer, readlength, HAL_MAX_DELAY);
 8003366:	f04f 33ff 	mov.w	r3, #4294967295
 800336a:	4649      	mov	r1, r9
 800336c:	fa1f f288 	uxth.w	r2, r8
 8003370:	4628      	mov	r0, r5
 8003372:	f004 f8b7 	bl	80074e4 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(antenna_port->spi_csn_port, antenna_port->spi_csn_pin, GPIO_PIN_SET); /**< Put chip select line high */
 8003376:	4622      	mov	r2, r4
 8003378:	8931      	ldrh	r1, [r6, #8]
 800337a:	6870      	ldr	r0, [r6, #4]
 800337c:	f000 fdec 	bl	8003f58 <HAL_GPIO_WritePin>

    decamutexoff(stat, antenna_port);
 8003380:	9801      	ldr	r0, [sp, #4]
 8003382:	4631      	mov	r1, r6
 8003384:	f7ff ff82 	bl	800328c <decamutexoff>

    return 0;
} // end readfromspi()
 8003388:	2000      	movs	r0, #0
 800338a:	b002      	add	sp, #8
 800338c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003390 <__NVIC_EnableIRQ>:
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800339a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	db0b      	blt.n	80033ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	f003 021f 	and.w	r2, r3, #31
 80033a8:	4907      	ldr	r1, [pc, #28]	@ (80033c8 <__NVIC_EnableIRQ+0x38>)
 80033aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	2001      	movs	r0, #1
 80033b2:	fa00 f202 	lsl.w	r2, r0, r2
 80033b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	e000e100 	.word	0xe000e100

080033cc <__NVIC_DisableIRQ>:
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	db12      	blt.n	8003404 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	f003 021f 	and.w	r2, r3, #31
 80033e4:	490a      	ldr	r1, [pc, #40]	@ (8003410 <__NVIC_DisableIRQ+0x44>)
 80033e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	2001      	movs	r0, #1
 80033ee:	fa00 f202 	lsl.w	r2, r0, r2
 80033f2:	3320      	adds	r3, #32
 80033f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80033f8:	f3bf 8f4f 	dsb	sy
}
 80033fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033fe:	f3bf 8f6f 	isb	sy
}
 8003402:	bf00      	nop
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000e100 	.word	0xe000e100

08003414 <usleep>:
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")

int usleep(uint16_t usec)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	80fb      	strh	r3, [r7, #6]
    int i, j;
#pragma GCC ivdep
    for(i = 0; i < usec; i++)
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e012      	b.n	800344a <usleep+0x36>
    {
#pragma GCC ivdep
        for(j = 0; j < 2; j++)
 8003424:	2300      	movs	r3, #0
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	e004      	b.n	8003434 <usleep+0x20>
        {
            __NOP();
 800342a:	bf00      	nop
            __NOP();
 800342c:	bf00      	nop
        for(j = 0; j < 2; j++)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	3301      	adds	r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b01      	cmp	r3, #1
 8003438:	bfd4      	ite	le
 800343a:	2301      	movle	r3, #1
 800343c:	2300      	movgt	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f2      	bne.n	800342a <usleep+0x16>
    for(i = 0; i < usec; i++)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3301      	adds	r3, #1
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	429a      	cmp	r2, r3
 8003450:	bfb4      	ite	lt
 8003452:	2301      	movlt	r3, #1
 8003454:	2300      	movge	r3, #0
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e3      	bne.n	8003424 <usleep+0x10>
        }
    }
    return 0;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f9f0 	bl	8003858 <HAL_Delay>
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t) x) >> 5UL)] & \
 8003488:	4a0b      	ldr	r2, [pc, #44]	@ (80034b8 <EXTI_GetITEnStatus+0x38>)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t) (1UL << (((uint32_t) x) & 0x1FUL))) == (uint32_t) RESET) ? (RESET) : (SET);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000e100 	.word	0xe000e100

080034bc <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(DW1000_Port_t *antenna_port)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
    //拉低开漏的RESET引脚
    HAL_GPIO_WritePin(antenna_port->rstn_port,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6958      	ldr	r0, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8b1b      	ldrh	r3, [r3, #24]
 80034cc:	2200      	movs	r2, #0
 80034ce:	4619      	mov	r1, r3
 80034d0:	f000 fd42 	bl	8003f58 <HAL_GPIO_WritePin>
                      antenna_port->rstn_pin,
                      GPIO_PIN_RESET);

    usleep(1);
 80034d4:	2001      	movs	r0, #1
 80034d6:	f7ff ff9d 	bl	8003414 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0, antenna_port);
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	2000      	movs	r0, #0
 80034de:	f000 f807 	bl	80034f0 <setup_DW1000RSTnIRQ>

    Sleep(2);
 80034e2:	2002      	movs	r0, #2
 80034e4:	f7ff ffc1 	bl	800346a <Sleep>
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <setup_DW1000RSTnIRQ>:
 * 主要是用来唤醒DW1000  唤醒后进入init模式  DW1000自动拉高RESET
 * @param enable
 * @param antenna_port
 */
void setup_DW1000RSTnIRQ(int enable, DW1000_Port_t *antenna_port)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
//                      &GPIO_InitStruct);
//        HAL_GPIO_WritePin(antenna_port->rstn_port,
//                          antenna_port->rstn_pin,
//                          GPIO_PIN_SET);
//    }
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <port_set_dw1000_slowrate>:
/**
 * @brief 好像是强制初始化(Init中会关闭SPI) 可能需要加锁(ing)
 * @param antenna_port
 */
void port_set_dw1000_slowrate(DW1000_Port_t *antenna_port)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
    antenna_port->hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003516:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(antenna_port->hspi);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f003 fccf 	bl	8006ec0 <HAL_SPI_Init>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(DW1000_Port_t *antenna_port)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
    antenna_port->hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800353a:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(antenna_port->hspi);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f003 fcbd 	bl	8006ec0 <HAL_SPI_Init>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <HAL_GPIO_EXTI_Callback>:
 * 这里需要根据GPIO_Port和GPIO_Pin分辨出是哪个DW1000引起的中断
 * 本函数和不同的引脚连接有关 因此不同的项目移植本函数都要进行修改(还没有想到通用移植办法)
 * @param GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	80fb      	strh	r3, [r7, #6]
    uint8_t pin_index = __builtin_ctz(GPIO_Pin);
 800355a:	88fb      	ldrh	r3, [r7, #6]
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	75fb      	strb	r3, [r7, #23]
    uint32_t syscfg_exticr = SYSCFG->EXTICR[pin_index / 4];
 8003566:	4a34      	ldr	r2, [pc, #208]	@ (8003638 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	089b      	lsrs	r3, r3, #2
 800356c:	b2db      	uxtb	r3, r3
 800356e:	3302      	adds	r3, #2
 8003570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003574:	613b      	str	r3, [r7, #16]
    uint8_t port_index = (syscfg_exticr >> (4 * (pin_index % 4))) & 0xFF;
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
 8003584:	73fb      	strb	r3, [r7, #15]

	/* 这里的dwt_setlocaldataptr(index)非常重要 index一定要和UWB_device_array[]的索引对上 */
    if(GPIO_Pin == UWB1_IRQ_Pin && (GPIO_PORT_INDEX(UWB1_IRQ_GPIO_Port) == port_index))
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d109      	bne.n	80035a0 <HAL_GPIO_EXTI_Callback+0x50>
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d106      	bne.n	80035a0 <HAL_GPIO_EXTI_Callback+0x50>
    {
        dwt_setlocaldataptr(0);
 8003592:	2000      	movs	r0, #0
 8003594:	f7fe fcb2 	bl	8001efc <dwt_setlocaldataptr>
        process_deca_irq(&UWB_device_array[0].port);
 8003598:	4828      	ldr	r0, [pc, #160]	@ (800363c <HAL_GPIO_EXTI_Callback+0xec>)
 800359a:	f000 f859 	bl	8003650 <process_deca_irq>
 800359e:	e046      	b.n	800362e <HAL_GPIO_EXTI_Callback+0xde>
    }
    else if(GPIO_Pin == UWB2_IRQ_Pin && (GPIO_PORT_INDEX(UWB2_IRQ_GPIO_Port) == port_index))
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035a6:	d109      	bne.n	80035bc <HAL_GPIO_EXTI_Callback+0x6c>
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d106      	bne.n	80035bc <HAL_GPIO_EXTI_Callback+0x6c>
	{
		dwt_setlocaldataptr(1);
 80035ae:	2001      	movs	r0, #1
 80035b0:	f7fe fca4 	bl	8001efc <dwt_setlocaldataptr>
		process_deca_irq(&UWB_device_array[1].port);
 80035b4:	4822      	ldr	r0, [pc, #136]	@ (8003640 <HAL_GPIO_EXTI_Callback+0xf0>)
 80035b6:	f000 f84b 	bl	8003650 <process_deca_irq>
 80035ba:	e038      	b.n	800362e <HAL_GPIO_EXTI_Callback+0xde>
	}
	else if(GPIO_Pin == UWB3_IRQ_Pin && (GPIO_PORT_INDEX(UWB3_IRQ_GPIO_Port) == port_index))
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c2:	d109      	bne.n	80035d8 <HAL_GPIO_EXTI_Callback+0x88>
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d106      	bne.n	80035d8 <HAL_GPIO_EXTI_Callback+0x88>
	{
		dwt_setlocaldataptr(2);
 80035ca:	2002      	movs	r0, #2
 80035cc:	f7fe fc96 	bl	8001efc <dwt_setlocaldataptr>
		process_deca_irq(&UWB_device_array[2].port);
 80035d0:	481c      	ldr	r0, [pc, #112]	@ (8003644 <HAL_GPIO_EXTI_Callback+0xf4>)
 80035d2:	f000 f83d 	bl	8003650 <process_deca_irq>
 80035d6:	e02a      	b.n	800362e <HAL_GPIO_EXTI_Callback+0xde>
	}
	else if(GPIO_Pin == UWB4_IRQ_Pin && (GPIO_PORT_INDEX(UWB4_IRQ_GPIO_Port) == port_index))
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	2b40      	cmp	r3, #64	@ 0x40
 80035dc:	d109      	bne.n	80035f2 <HAL_GPIO_EXTI_Callback+0xa2>
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d106      	bne.n	80035f2 <HAL_GPIO_EXTI_Callback+0xa2>
	{
		dwt_setlocaldataptr(3);
 80035e4:	2003      	movs	r0, #3
 80035e6:	f7fe fc89 	bl	8001efc <dwt_setlocaldataptr>
		process_deca_irq(&UWB_device_array[3].port);
 80035ea:	4817      	ldr	r0, [pc, #92]	@ (8003648 <HAL_GPIO_EXTI_Callback+0xf8>)
 80035ec:	f000 f830 	bl	8003650 <process_deca_irq>
 80035f0:	e01d      	b.n	800362e <HAL_GPIO_EXTI_Callback+0xde>
	}
    else if((GPIO_Pin == UWB1_RESET_Pin && (GPIO_PORT_INDEX(UWB1_RESET_GPIO_Port) == port_index))
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d102      	bne.n	80035fe <HAL_GPIO_EXTI_Callback+0xae>
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d013      	beq.n	8003626 <HAL_GPIO_EXTI_Callback+0xd6>
			|| (GPIO_Pin == UWB2_RESET_Pin && (GPIO_PORT_INDEX(UWB2_RESET_GPIO_Port) == port_index))
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003604:	d102      	bne.n	800360c <HAL_GPIO_EXTI_Callback+0xbc>
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d00c      	beq.n	8003626 <HAL_GPIO_EXTI_Callback+0xd6>
				|| (GPIO_Pin == UWB3_RESET_Pin && (GPIO_PORT_INDEX(UWB3_RESET_GPIO_Port) == port_index))
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003612:	d102      	bne.n	800361a <HAL_GPIO_EXTI_Callback+0xca>
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b03      	cmp	r3, #3
 8003618:	d005      	beq.n	8003626 <HAL_GPIO_EXTI_Callback+0xd6>
					|| (GPIO_Pin == UWB4_RESET_Pin && (GPIO_PORT_INDEX(UWB4_RESET_GPIO_Port) == port_index)))
 800361a:	88fb      	ldrh	r3, [r7, #6]
 800361c:	2b80      	cmp	r3, #128	@ 0x80
 800361e:	d106      	bne.n	800362e <HAL_GPIO_EXTI_Callback+0xde>
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d103      	bne.n	800362e <HAL_GPIO_EXTI_Callback+0xde>
    {
        signalResetDone = 1;
 8003626:	4b09      	ldr	r3, [pc, #36]	@ (800364c <HAL_GPIO_EXTI_Callback+0xfc>)
 8003628:	2201      	movs	r2, #1
 800362a:	601a      	str	r2, [r3, #0]
    }
}
 800362c:	e7ff      	b.n	800362e <HAL_GPIO_EXTI_Callback+0xde>
 800362e:	bf00      	nop
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	58000400 	.word	0x58000400
 800363c:	24000268 	.word	0x24000268
 8003640:	240003d0 	.word	0x240003d0
 8003644:	24000538 	.word	0x24000538
 8003648:	240006a0 	.word	0x240006a0
 800364c:	24000b24 	.word	0x24000b24

08003650 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(DW1000_Port_t *antenna_port)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
    while(port_CheckEXT_IRQ(antenna_port) != 0)
 8003658:	e003      	b.n	8003662 <process_deca_irq+0x12>
    {

        port_deca_isr(antenna_port);
 800365a:	4b07      	ldr	r3, [pc, #28]	@ (8003678 <process_deca_irq+0x28>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	4798      	blx	r3
    while(port_CheckEXT_IRQ(antenna_port) != 0)
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f834 	bl	80036d0 <port_CheckEXT_IRQ>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f5      	bne.n	800365a <process_deca_irq+0xa>

    } //while DW1000 IRQ line active
}
 800366e:	bf00      	nop
 8003670:	bf00      	nop
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	24000b28 	.word	0x24000b28

0800367c <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(DW1000_Port_t *antenna_port)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(antenna_port->irq);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	b21b      	sxth	r3, r3
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fe9e 	bl	80033cc <__NVIC_DisableIRQ>
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(DW1000_Port_t *antenna_port)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(antenna_port->irq);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	b21b      	sxth	r3, r3
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fe72 	bl	8003390 <__NVIC_EnableIRQ>
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(DW1000_Port_t *antenna_port)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
    return EXTI_GetITEnStatus(antenna_port->irq);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff fedd 	bl	8003480 <EXTI_GetITEnStatus>
 80036c6:	4603      	mov	r3, r0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(DW1000_Port_t *antenna_port)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(antenna_port->irq_port,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69da      	ldr	r2, [r3, #28]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8c1b      	ldrh	r3, [r3, #32]
 80036e0:	4619      	mov	r1, r3
 80036e2:	4610      	mov	r0, r2
 80036e4:	f000 fc20 	bl	8003f28 <HAL_GPIO_ReadPin>
 80036e8:	4603      	mov	r3, r0
                            antenna_port->irq_pin);
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <port_set_deca_isr>:
 * @param deca_isr function pointer to DW1000 interrupt handler to install
 *
 * @return none
 */
void port_set_deca_isr(port_deca_isr_t deca_isr, DW1000_Port_t *antenna_port)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
    /* Check DW1000 IRQ activation status. */
    ITStatus en = port_GetEXT_IRQStatus(antenna_port);
 80036fe:	6838      	ldr	r0, [r7, #0]
 8003700:	f7ff ffd8 	bl	80036b4 <port_GetEXT_IRQStatus>
 8003704:	4603      	mov	r3, r0
 8003706:	73fb      	strb	r3, [r7, #15]

    /* If needed, deactivate DW1000 IRQ during the installation of the new handler. */
    if(en)
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <port_set_deca_isr+0x20>
    {
        port_DisableEXT_IRQ(antenna_port);
 800370e:	6838      	ldr	r0, [r7, #0]
 8003710:	f7ff ffb4 	bl	800367c <port_DisableEXT_IRQ>
    }
    port_deca_isr = deca_isr;
 8003714:	4a06      	ldr	r2, [pc, #24]	@ (8003730 <port_set_deca_isr+0x3c>)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6013      	str	r3, [r2, #0]
    if(en)
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <port_set_deca_isr+0x32>
    {
        port_EnableEXT_IRQ(antenna_port);
 8003720:	6838      	ldr	r0, [r7, #0]
 8003722:	f7ff ffb9 	bl	8003698 <port_EnableEXT_IRQ>
    }
}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	24000b28 	.word	0x24000b28

08003734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800373a:	2003      	movs	r0, #3
 800373c:	f000 f98c 	bl	8003a58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003740:	f001 fbbc 	bl	8004ebc <HAL_RCC_GetSysClockFreq>
 8003744:	4602      	mov	r2, r0
 8003746:	4b15      	ldr	r3, [pc, #84]	@ (800379c <HAL_Init+0x68>)
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	0a1b      	lsrs	r3, r3, #8
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	4913      	ldr	r1, [pc, #76]	@ (80037a0 <HAL_Init+0x6c>)
 8003752:	5ccb      	ldrb	r3, [r1, r3]
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
 800375c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800375e:	4b0f      	ldr	r3, [pc, #60]	@ (800379c <HAL_Init+0x68>)
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	4a0e      	ldr	r2, [pc, #56]	@ (80037a0 <HAL_Init+0x6c>)
 8003768:	5cd3      	ldrb	r3, [r2, r3]
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
 8003774:	4a0b      	ldr	r2, [pc, #44]	@ (80037a4 <HAL_Init+0x70>)
 8003776:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003778:	4a0b      	ldr	r2, [pc, #44]	@ (80037a8 <HAL_Init+0x74>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800377e:	200f      	movs	r0, #15
 8003780:	f000 f814 	bl	80037ac <HAL_InitTick>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e002      	b.n	8003794 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800378e:	f7fd fc79 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	58024400 	.word	0x58024400
 80037a0:	0800c7e0 	.word	0x0800c7e0
 80037a4:	24000004 	.word	0x24000004
 80037a8:	24000000 	.word	0x24000000

080037ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80037b4:	4b15      	ldr	r3, [pc, #84]	@ (800380c <HAL_InitTick+0x60>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e021      	b.n	8003804 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80037c0:	4b13      	ldr	r3, [pc, #76]	@ (8003810 <HAL_InitTick+0x64>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b11      	ldr	r3, [pc, #68]	@ (800380c <HAL_InitTick+0x60>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	4619      	mov	r1, r3
 80037ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80037d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f971 	bl	8003abe <HAL_SYSTICK_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e00e      	b.n	8003804 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b0f      	cmp	r3, #15
 80037ea:	d80a      	bhi.n	8003802 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037ec:	2200      	movs	r2, #0
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295
 80037f4:	f000 f93b 	bl	8003a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037f8:	4a06      	ldr	r2, [pc, #24]	@ (8003814 <HAL_InitTick+0x68>)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	e000      	b.n	8003804 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	2400001c 	.word	0x2400001c
 8003810:	24000000 	.word	0x24000000
 8003814:	24000018 	.word	0x24000018

08003818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800381c:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <HAL_IncTick+0x20>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	4b06      	ldr	r3, [pc, #24]	@ (800383c <HAL_IncTick+0x24>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4413      	add	r3, r2
 8003828:	4a04      	ldr	r2, [pc, #16]	@ (800383c <HAL_IncTick+0x24>)
 800382a:	6013      	str	r3, [r2, #0]
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	2400001c 	.word	0x2400001c
 800383c:	24000b2c 	.word	0x24000b2c

08003840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return uwTick;
 8003844:	4b03      	ldr	r3, [pc, #12]	@ (8003854 <HAL_GetTick+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	24000b2c 	.word	0x24000b2c

08003858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003860:	f7ff ffee 	bl	8003840 <HAL_GetTick>
 8003864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d005      	beq.n	800387e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003872:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <HAL_Delay+0x44>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800387e:	bf00      	nop
 8003880:	f7ff ffde 	bl	8003840 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	429a      	cmp	r2, r3
 800388e:	d8f7      	bhi.n	8003880 <HAL_Delay+0x28>
  {
  }
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	2400001c 	.word	0x2400001c

080038a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80038a4:	4b03      	ldr	r3, [pc, #12]	@ (80038b4 <HAL_GetREVID+0x14>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	0c1b      	lsrs	r3, r3, #16
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	5c001000 	.word	0x5c001000

080038b8 <__NVIC_SetPriorityGrouping>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c8:	4b0b      	ldr	r3, [pc, #44]	@ (80038f8 <__NVIC_SetPriorityGrouping+0x40>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038d4:	4013      	ands	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038e0:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <__NVIC_SetPriorityGrouping+0x44>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038e6:	4a04      	ldr	r2, [pc, #16]	@ (80038f8 <__NVIC_SetPriorityGrouping+0x40>)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	60d3      	str	r3, [r2, #12]
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00
 80038fc:	05fa0000 	.word	0x05fa0000

08003900 <__NVIC_GetPriorityGrouping>:
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003904:	4b04      	ldr	r3, [pc, #16]	@ (8003918 <__NVIC_GetPriorityGrouping+0x18>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	0a1b      	lsrs	r3, r3, #8
 800390a:	f003 0307 	and.w	r3, r3, #7
}
 800390e:	4618      	mov	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <__NVIC_EnableIRQ>:
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800392a:	2b00      	cmp	r3, #0
 800392c:	db0b      	blt.n	8003946 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	f003 021f 	and.w	r2, r3, #31
 8003934:	4907      	ldr	r1, [pc, #28]	@ (8003954 <__NVIC_EnableIRQ+0x38>)
 8003936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	2001      	movs	r0, #1
 800393e:	fa00 f202 	lsl.w	r2, r0, r2
 8003942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	e000e100 	.word	0xe000e100

08003958 <__NVIC_SetPriority>:
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	6039      	str	r1, [r7, #0]
 8003962:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003968:	2b00      	cmp	r3, #0
 800396a:	db0a      	blt.n	8003982 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	490c      	ldr	r1, [pc, #48]	@ (80039a4 <__NVIC_SetPriority+0x4c>)
 8003972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003976:	0112      	lsls	r2, r2, #4
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	440b      	add	r3, r1
 800397c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003980:	e00a      	b.n	8003998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4908      	ldr	r1, [pc, #32]	@ (80039a8 <__NVIC_SetPriority+0x50>)
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	3b04      	subs	r3, #4
 8003990:	0112      	lsls	r2, r2, #4
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	440b      	add	r3, r1
 8003996:	761a      	strb	r2, [r3, #24]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	e000e100 	.word	0xe000e100
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <NVIC_EncodePriority>:
{
 80039ac:	b480      	push	{r7}
 80039ae:	b089      	sub	sp, #36	@ 0x24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f1c3 0307 	rsb	r3, r3, #7
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	bf28      	it	cs
 80039ca:	2304      	movcs	r3, #4
 80039cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3304      	adds	r3, #4
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d902      	bls.n	80039dc <NVIC_EncodePriority+0x30>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3b03      	subs	r3, #3
 80039da:	e000      	b.n	80039de <NVIC_EncodePriority+0x32>
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	401a      	ands	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f4:	f04f 31ff 	mov.w	r1, #4294967295
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	43d9      	mvns	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a04:	4313      	orrs	r3, r2
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3724      	adds	r7, #36	@ 0x24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a24:	d301      	bcc.n	8003a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00f      	b.n	8003a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a54 <SysTick_Config+0x40>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a32:	210f      	movs	r1, #15
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	f7ff ff8e 	bl	8003958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a3c:	4b05      	ldr	r3, [pc, #20]	@ (8003a54 <SysTick_Config+0x40>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a42:	4b04      	ldr	r3, [pc, #16]	@ (8003a54 <SysTick_Config+0x40>)
 8003a44:	2207      	movs	r2, #7
 8003a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	e000e010 	.word	0xe000e010

08003a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff29 	bl	80038b8 <__NVIC_SetPriorityGrouping>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	4603      	mov	r3, r0
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a7c:	f7ff ff40 	bl	8003900 <__NVIC_GetPriorityGrouping>
 8003a80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	6978      	ldr	r0, [r7, #20]
 8003a88:	f7ff ff90 	bl	80039ac <NVIC_EncodePriority>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff5f 	bl	8003958 <__NVIC_SetPriority>
}
 8003a9a:	bf00      	nop
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff ff33 	bl	800391c <__NVIC_EnableIRQ>
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff ffa4 	bl	8003a14 <SysTick_Config>
 8003acc:	4603      	mov	r3, r0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003adc:	f3bf 8f5f 	dmb	sy
}
 8003ae0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003ae2:	4b07      	ldr	r3, [pc, #28]	@ (8003b00 <HAL_MPU_Disable+0x28>)
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	4a06      	ldr	r2, [pc, #24]	@ (8003b00 <HAL_MPU_Disable+0x28>)
 8003ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003aee:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <HAL_MPU_Disable+0x2c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	605a      	str	r2, [r3, #4]
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	e000ed00 	.word	0xe000ed00
 8003b04:	e000ed90 	.word	0xe000ed90

08003b08 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003b10:	4a0b      	ldr	r2, [pc, #44]	@ (8003b40 <HAL_MPU_Enable+0x38>)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <HAL_MPU_Enable+0x3c>)
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	4a09      	ldr	r2, [pc, #36]	@ (8003b44 <HAL_MPU_Enable+0x3c>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b24:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003b26:	f3bf 8f4f 	dsb	sy
}
 8003b2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b2c:	f3bf 8f6f 	isb	sy
}
 8003b30:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	e000ed90 	.word	0xe000ed90
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	785a      	ldrb	r2, [r3, #1]
 8003b54:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc4 <HAL_MPU_ConfigRegion+0x7c>)
 8003b56:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003b58:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc4 <HAL_MPU_ConfigRegion+0x7c>)
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	4a19      	ldr	r2, [pc, #100]	@ (8003bc4 <HAL_MPU_ConfigRegion+0x7c>)
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003b64:	4a17      	ldr	r2, [pc, #92]	@ (8003bc4 <HAL_MPU_ConfigRegion+0x7c>)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	7b1b      	ldrb	r3, [r3, #12]
 8003b70:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	7adb      	ldrb	r3, [r3, #11]
 8003b76:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7a9b      	ldrb	r3, [r3, #10]
 8003b7e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003b80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7b5b      	ldrb	r3, [r3, #13]
 8003b86:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003b88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7b9b      	ldrb	r3, [r3, #14]
 8003b8e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003b90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	7bdb      	ldrb	r3, [r3, #15]
 8003b96:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003b98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	7a5b      	ldrb	r3, [r3, #9]
 8003b9e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003ba0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	7a1b      	ldrb	r3, [r3, #8]
 8003ba6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003ba8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	7812      	ldrb	r2, [r2, #0]
 8003bae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003bb0:	4a04      	ldr	r2, [pc, #16]	@ (8003bc4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003bb2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003bb4:	6113      	str	r3, [r2, #16]
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	e000ed90 	.word	0xe000ed90

08003bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b089      	sub	sp, #36	@ 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003bd6:	4b89      	ldr	r3, [pc, #548]	@ (8003dfc <HAL_GPIO_Init+0x234>)
 8003bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bda:	e194      	b.n	8003f06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	2101      	movs	r1, #1
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	4013      	ands	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8186 	beq.w	8003f00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d005      	beq.n	8003c0c <HAL_GPIO_Init+0x44>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d130      	bne.n	8003c6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c42:	2201      	movs	r2, #1
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	091b      	lsrs	r3, r3, #4
 8003c58:	f003 0201 	and.w	r2, r3, #1
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d017      	beq.n	8003caa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	2203      	movs	r2, #3
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d123      	bne.n	8003cfe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	08da      	lsrs	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3208      	adds	r2, #8
 8003cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	220f      	movs	r2, #15
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	08da      	lsrs	r2, r3, #3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3208      	adds	r2, #8
 8003cf8:	69b9      	ldr	r1, [r7, #24]
 8003cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	2203      	movs	r2, #3
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 0203 	and.w	r2, r3, #3
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80e0 	beq.w	8003f00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d40:	4b2f      	ldr	r3, [pc, #188]	@ (8003e00 <HAL_GPIO_Init+0x238>)
 8003d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d46:	4a2e      	ldr	r2, [pc, #184]	@ (8003e00 <HAL_GPIO_Init+0x238>)
 8003d48:	f043 0302 	orr.w	r3, r3, #2
 8003d4c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003d50:	4b2b      	ldr	r3, [pc, #172]	@ (8003e00 <HAL_GPIO_Init+0x238>)
 8003d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d5e:	4a29      	ldr	r2, [pc, #164]	@ (8003e04 <HAL_GPIO_Init+0x23c>)
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	089b      	lsrs	r3, r3, #2
 8003d64:	3302      	adds	r3, #2
 8003d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	220f      	movs	r2, #15
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a20      	ldr	r2, [pc, #128]	@ (8003e08 <HAL_GPIO_Init+0x240>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d052      	beq.n	8003e30 <HAL_GPIO_Init+0x268>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8003e0c <HAL_GPIO_Init+0x244>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d031      	beq.n	8003df6 <HAL_GPIO_Init+0x22e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1e      	ldr	r2, [pc, #120]	@ (8003e10 <HAL_GPIO_Init+0x248>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d02b      	beq.n	8003df2 <HAL_GPIO_Init+0x22a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e14 <HAL_GPIO_Init+0x24c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d025      	beq.n	8003dee <HAL_GPIO_Init+0x226>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e18 <HAL_GPIO_Init+0x250>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01f      	beq.n	8003dea <HAL_GPIO_Init+0x222>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1b      	ldr	r2, [pc, #108]	@ (8003e1c <HAL_GPIO_Init+0x254>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d019      	beq.n	8003de6 <HAL_GPIO_Init+0x21e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e20 <HAL_GPIO_Init+0x258>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_GPIO_Init+0x21a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a19      	ldr	r2, [pc, #100]	@ (8003e24 <HAL_GPIO_Init+0x25c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00d      	beq.n	8003dde <HAL_GPIO_Init+0x216>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a18      	ldr	r2, [pc, #96]	@ (8003e28 <HAL_GPIO_Init+0x260>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d007      	beq.n	8003dda <HAL_GPIO_Init+0x212>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a17      	ldr	r2, [pc, #92]	@ (8003e2c <HAL_GPIO_Init+0x264>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d101      	bne.n	8003dd6 <HAL_GPIO_Init+0x20e>
 8003dd2:	2309      	movs	r3, #9
 8003dd4:	e02d      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003dd6:	230a      	movs	r3, #10
 8003dd8:	e02b      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003dda:	2308      	movs	r3, #8
 8003ddc:	e029      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003dde:	2307      	movs	r3, #7
 8003de0:	e027      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003de2:	2306      	movs	r3, #6
 8003de4:	e025      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003de6:	2305      	movs	r3, #5
 8003de8:	e023      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003dea:	2304      	movs	r3, #4
 8003dec:	e021      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003dee:	2303      	movs	r3, #3
 8003df0:	e01f      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e01d      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e01b      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003dfa:	bf00      	nop
 8003dfc:	58000080 	.word	0x58000080
 8003e00:	58024400 	.word	0x58024400
 8003e04:	58000400 	.word	0x58000400
 8003e08:	58020000 	.word	0x58020000
 8003e0c:	58020400 	.word	0x58020400
 8003e10:	58020800 	.word	0x58020800
 8003e14:	58020c00 	.word	0x58020c00
 8003e18:	58021000 	.word	0x58021000
 8003e1c:	58021400 	.word	0x58021400
 8003e20:	58021800 	.word	0x58021800
 8003e24:	58021c00 	.word	0x58021c00
 8003e28:	58022000 	.word	0x58022000
 8003e2c:	58022400 	.word	0x58022400
 8003e30:	2300      	movs	r3, #0
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	f002 0203 	and.w	r2, r2, #3
 8003e38:	0092      	lsls	r2, r2, #2
 8003e3a:	4093      	lsls	r3, r2
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e42:	4938      	ldr	r1, [pc, #224]	@ (8003f24 <HAL_GPIO_Init+0x35c>)
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	089b      	lsrs	r3, r3, #2
 8003e48:	3302      	adds	r3, #2
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ea4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	3301      	adds	r3, #1
 8003f04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f47f ae63 	bne.w	8003bdc <HAL_GPIO_Init+0x14>
  }
}
 8003f16:	bf00      	nop
 8003f18:	bf00      	nop
 8003f1a:	3724      	adds	r7, #36	@ 0x24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	58000400 	.word	0x58000400

08003f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	887b      	ldrh	r3, [r7, #2]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
 8003f44:	e001      	b.n	8003f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f46:	2300      	movs	r3, #0
 8003f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	807b      	strh	r3, [r7, #2]
 8003f64:	4613      	mov	r3, r2
 8003f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f68:	787b      	ldrb	r3, [r7, #1]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f6e:	887a      	ldrh	r2, [r7, #2]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003f74:	e003      	b.n	8003f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003f76:	887b      	ldrh	r3, [r7, #2]
 8003f78:	041a      	lsls	r2, r3, #16
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	619a      	str	r2, [r3, #24]
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	4603      	mov	r3, r0
 8003f92:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f98:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff facd 	bl	8003550 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e08b      	b.n	80040ea <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fc fd5e 	bl	8000aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2224      	movs	r2, #36	@ 0x24
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004010:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004020:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d107      	bne.n	800403a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	e006      	b.n	8004048 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004046:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d108      	bne.n	8004062 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	e007      	b.n	8004072 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004070:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	4b1d      	ldr	r3, [pc, #116]	@ (80040f4 <HAL_I2C_Init+0x134>)
 800407e:	430b      	orrs	r3, r1
 8004080:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004090:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69d9      	ldr	r1, [r3, #28]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1a      	ldr	r2, [r3, #32]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	02008000 	.word	0x02008000

080040f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b20      	cmp	r3, #32
 800410c:	d138      	bne.n	8004180 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004118:	2302      	movs	r3, #2
 800411a:	e032      	b.n	8004182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2224      	movs	r2, #36	@ 0x24
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800414a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6819      	ldr	r1, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	e000      	b.n	8004182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004180:	2302      	movs	r3, #2
  }
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d139      	bne.n	8004218 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e033      	b.n	800421a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2224      	movs	r2, #36	@ 0x24
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0201 	bic.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	e000      	b.n	800421a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004218:	2302      	movs	r3, #2
  }
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004230:	4b19      	ldr	r3, [pc, #100]	@ (8004298 <HAL_PWREx_ConfigSupply+0x70>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b04      	cmp	r3, #4
 800423a:	d00a      	beq.n	8004252 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800423c:	4b16      	ldr	r3, [pc, #88]	@ (8004298 <HAL_PWREx_ConfigSupply+0x70>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	429a      	cmp	r2, r3
 8004248:	d001      	beq.n	800424e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e01f      	b.n	800428e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	e01d      	b.n	800428e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004252:	4b11      	ldr	r3, [pc, #68]	@ (8004298 <HAL_PWREx_ConfigSupply+0x70>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f023 0207 	bic.w	r2, r3, #7
 800425a:	490f      	ldr	r1, [pc, #60]	@ (8004298 <HAL_PWREx_ConfigSupply+0x70>)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4313      	orrs	r3, r2
 8004260:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004262:	f7ff faed 	bl	8003840 <HAL_GetTick>
 8004266:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004268:	e009      	b.n	800427e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800426a:	f7ff fae9 	bl	8003840 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004278:	d901      	bls.n	800427e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e007      	b.n	800428e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800427e:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <HAL_PWREx_ConfigSupply+0x70>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800428a:	d1ee      	bne.n	800426a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	58024800 	.word	0x58024800

0800429c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08c      	sub	sp, #48	@ 0x30
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d102      	bne.n	80042b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f000 bc48 	b.w	8004b40 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 8088 	beq.w	80043ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042be:	4b99      	ldr	r3, [pc, #612]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042c8:	4b96      	ldr	r3, [pc, #600]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80042ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d007      	beq.n	80042e4 <HAL_RCC_OscConfig+0x48>
 80042d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d6:	2b18      	cmp	r3, #24
 80042d8:	d111      	bne.n	80042fe <HAL_RCC_OscConfig+0x62>
 80042da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d10c      	bne.n	80042fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d06d      	beq.n	80043cc <HAL_RCC_OscConfig+0x130>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d169      	bne.n	80043cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f000 bc21 	b.w	8004b40 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004306:	d106      	bne.n	8004316 <HAL_RCC_OscConfig+0x7a>
 8004308:	4b86      	ldr	r3, [pc, #536]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a85      	ldr	r2, [pc, #532]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 800430e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	e02e      	b.n	8004374 <HAL_RCC_OscConfig+0xd8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10c      	bne.n	8004338 <HAL_RCC_OscConfig+0x9c>
 800431e:	4b81      	ldr	r3, [pc, #516]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a80      	ldr	r2, [pc, #512]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004324:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	4b7e      	ldr	r3, [pc, #504]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a7d      	ldr	r2, [pc, #500]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004330:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e01d      	b.n	8004374 <HAL_RCC_OscConfig+0xd8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0xc0>
 8004342:	4b78      	ldr	r3, [pc, #480]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a77      	ldr	r2, [pc, #476]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004348:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	4b75      	ldr	r3, [pc, #468]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a74      	ldr	r2, [pc, #464]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0xd8>
 800435c:	4b71      	ldr	r3, [pc, #452]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a70      	ldr	r2, [pc, #448]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b6e      	ldr	r3, [pc, #440]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a6d      	ldr	r2, [pc, #436]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 800436e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d013      	beq.n	80043a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7ff fa60 	bl	8003840 <HAL_GetTick>
 8004380:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004384:	f7ff fa5c 	bl	8003840 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	@ 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e3d4      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004396:	4b63      	ldr	r3, [pc, #396]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0xe8>
 80043a2:	e014      	b.n	80043ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7ff fa4c 	bl	8003840 <HAL_GetTick>
 80043a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ac:	f7ff fa48 	bl	8003840 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	@ 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e3c0      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043be:	4b59      	ldr	r3, [pc, #356]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x110>
 80043ca:	e000      	b.n	80043ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 80ca 	beq.w	8004570 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043dc:	4b51      	ldr	r3, [pc, #324]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 80043e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d007      	beq.n	8004402 <HAL_RCC_OscConfig+0x166>
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	2b18      	cmp	r3, #24
 80043f6:	d156      	bne.n	80044a6 <HAL_RCC_OscConfig+0x20a>
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d151      	bne.n	80044a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004402:	4b48      	ldr	r3, [pc, #288]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_RCC_OscConfig+0x17e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e392      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800441a:	4b42      	ldr	r3, [pc, #264]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 0219 	bic.w	r2, r3, #25
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	493f      	ldr	r1, [pc, #252]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004428:	4313      	orrs	r3, r2
 800442a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7ff fa08 	bl	8003840 <HAL_GetTick>
 8004430:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004434:	f7ff fa04 	bl	8003840 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e37c      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004446:	4b37      	ldr	r3, [pc, #220]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004452:	f7ff fa25 	bl	80038a0 <HAL_GetREVID>
 8004456:	4603      	mov	r3, r0
 8004458:	f241 0203 	movw	r2, #4099	@ 0x1003
 800445c:	4293      	cmp	r3, r2
 800445e:	d817      	bhi.n	8004490 <HAL_RCC_OscConfig+0x1f4>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b40      	cmp	r3, #64	@ 0x40
 8004466:	d108      	bne.n	800447a <HAL_RCC_OscConfig+0x1de>
 8004468:	4b2e      	ldr	r3, [pc, #184]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004470:	4a2c      	ldr	r2, [pc, #176]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004476:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004478:	e07a      	b.n	8004570 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447a:	4b2a      	ldr	r3, [pc, #168]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	031b      	lsls	r3, r3, #12
 8004488:	4926      	ldr	r1, [pc, #152]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 800448a:	4313      	orrs	r3, r2
 800448c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800448e:	e06f      	b.n	8004570 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004490:	4b24      	ldr	r3, [pc, #144]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	061b      	lsls	r3, r3, #24
 800449e:	4921      	ldr	r1, [pc, #132]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a4:	e064      	b.n	8004570 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d047      	beq.n	800453e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f023 0219 	bic.w	r2, r3, #25
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	491a      	ldr	r1, [pc, #104]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7ff f9be 	bl	8003840 <HAL_GetTick>
 80044c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c8:	f7ff f9ba 	bl	8003840 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e332      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044da:	4b12      	ldr	r3, [pc, #72]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e6:	f7ff f9db 	bl	80038a0 <HAL_GetREVID>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d819      	bhi.n	8004528 <HAL_RCC_OscConfig+0x28c>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	2b40      	cmp	r3, #64	@ 0x40
 80044fa:	d108      	bne.n	800450e <HAL_RCC_OscConfig+0x272>
 80044fc:	4b09      	ldr	r3, [pc, #36]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004504:	4a07      	ldr	r2, [pc, #28]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800450a:	6053      	str	r3, [r2, #4]
 800450c:	e030      	b.n	8004570 <HAL_RCC_OscConfig+0x2d4>
 800450e:	4b05      	ldr	r3, [pc, #20]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	031b      	lsls	r3, r3, #12
 800451c:	4901      	ldr	r1, [pc, #4]	@ (8004524 <HAL_RCC_OscConfig+0x288>)
 800451e:	4313      	orrs	r3, r2
 8004520:	604b      	str	r3, [r1, #4]
 8004522:	e025      	b.n	8004570 <HAL_RCC_OscConfig+0x2d4>
 8004524:	58024400 	.word	0x58024400
 8004528:	4b9a      	ldr	r3, [pc, #616]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	061b      	lsls	r3, r3, #24
 8004536:	4997      	ldr	r1, [pc, #604]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 8004538:	4313      	orrs	r3, r2
 800453a:	604b      	str	r3, [r1, #4]
 800453c:	e018      	b.n	8004570 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800453e:	4b95      	ldr	r3, [pc, #596]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a94      	ldr	r2, [pc, #592]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454a:	f7ff f979 	bl	8003840 <HAL_GetTick>
 800454e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004552:	f7ff f975 	bl	8003840 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e2ed      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004564:	4b8b      	ldr	r3, [pc, #556]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1f0      	bne.n	8004552 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80a9 	beq.w	80046d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800457e:	4b85      	ldr	r3, [pc, #532]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004586:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004588:	4b82      	ldr	r3, [pc, #520]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 800458a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	2b08      	cmp	r3, #8
 8004592:	d007      	beq.n	80045a4 <HAL_RCC_OscConfig+0x308>
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2b18      	cmp	r3, #24
 8004598:	d13a      	bne.n	8004610 <HAL_RCC_OscConfig+0x374>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d135      	bne.n	8004610 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045a4:	4b7b      	ldr	r3, [pc, #492]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_OscConfig+0x320>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	2b80      	cmp	r3, #128	@ 0x80
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e2c1      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045bc:	f7ff f970 	bl	80038a0 <HAL_GetREVID>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d817      	bhi.n	80045fa <HAL_RCC_OscConfig+0x35e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d108      	bne.n	80045e4 <HAL_RCC_OscConfig+0x348>
 80045d2:	4b70      	ldr	r3, [pc, #448]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80045da:	4a6e      	ldr	r2, [pc, #440]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 80045dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045e2:	e075      	b.n	80046d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045e4:	4b6b      	ldr	r3, [pc, #428]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	069b      	lsls	r3, r3, #26
 80045f2:	4968      	ldr	r1, [pc, #416]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045f8:	e06a      	b.n	80046d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045fa:	4b66      	ldr	r3, [pc, #408]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	061b      	lsls	r3, r3, #24
 8004608:	4962      	ldr	r1, [pc, #392]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 800460a:	4313      	orrs	r3, r2
 800460c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800460e:	e05f      	b.n	80046d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d042      	beq.n	800469e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004618:	4b5e      	ldr	r3, [pc, #376]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a5d      	ldr	r2, [pc, #372]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 800461e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004624:	f7ff f90c 	bl	8003840 <HAL_GetTick>
 8004628:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800462c:	f7ff f908 	bl	8003840 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e280      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800463e:	4b55      	ldr	r3, [pc, #340]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800464a:	f7ff f929 	bl	80038a0 <HAL_GetREVID>
 800464e:	4603      	mov	r3, r0
 8004650:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004654:	4293      	cmp	r3, r2
 8004656:	d817      	bhi.n	8004688 <HAL_RCC_OscConfig+0x3ec>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	2b20      	cmp	r3, #32
 800465e:	d108      	bne.n	8004672 <HAL_RCC_OscConfig+0x3d6>
 8004660:	4b4c      	ldr	r3, [pc, #304]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004668:	4a4a      	ldr	r2, [pc, #296]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 800466a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800466e:	6053      	str	r3, [r2, #4]
 8004670:	e02e      	b.n	80046d0 <HAL_RCC_OscConfig+0x434>
 8004672:	4b48      	ldr	r3, [pc, #288]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	069b      	lsls	r3, r3, #26
 8004680:	4944      	ldr	r1, [pc, #272]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 8004682:	4313      	orrs	r3, r2
 8004684:	604b      	str	r3, [r1, #4]
 8004686:	e023      	b.n	80046d0 <HAL_RCC_OscConfig+0x434>
 8004688:	4b42      	ldr	r3, [pc, #264]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	493f      	ldr	r1, [pc, #252]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 8004698:	4313      	orrs	r3, r2
 800469a:	60cb      	str	r3, [r1, #12]
 800469c:	e018      	b.n	80046d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800469e:	4b3d      	ldr	r3, [pc, #244]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a3c      	ldr	r2, [pc, #240]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 80046a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046aa:	f7ff f8c9 	bl	8003840 <HAL_GetTick>
 80046ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046b2:	f7ff f8c5 	bl	8003840 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e23d      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046c4:	4b33      	ldr	r3, [pc, #204]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f0      	bne.n	80046b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d036      	beq.n	800474a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d019      	beq.n	8004718 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 80046e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7ff f8a6 	bl	8003840 <HAL_GetTick>
 80046f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f8:	f7ff f8a2 	bl	8003840 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e21a      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800470a:	4b22      	ldr	r3, [pc, #136]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 800470c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0x45c>
 8004716:	e018      	b.n	800474a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004718:	4b1e      	ldr	r3, [pc, #120]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 800471a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800471c:	4a1d      	ldr	r2, [pc, #116]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004724:	f7ff f88c 	bl	8003840 <HAL_GetTick>
 8004728:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800472c:	f7ff f888 	bl	8003840 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e200      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800473e:	4b15      	ldr	r3, [pc, #84]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 8004740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d039      	beq.n	80047ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d01c      	beq.n	8004798 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800475e:	4b0d      	ldr	r3, [pc, #52]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a0c      	ldr	r2, [pc, #48]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 8004764:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004768:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800476a:	f7ff f869 	bl	8003840 <HAL_GetTick>
 800476e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004772:	f7ff f865 	bl	8003840 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e1dd      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004784:	4b03      	ldr	r3, [pc, #12]	@ (8004794 <HAL_RCC_OscConfig+0x4f8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCC_OscConfig+0x4d6>
 8004790:	e01b      	b.n	80047ca <HAL_RCC_OscConfig+0x52e>
 8004792:	bf00      	nop
 8004794:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004798:	4b9b      	ldr	r3, [pc, #620]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a9a      	ldr	r2, [pc, #616]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 800479e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047a4:	f7ff f84c 	bl	8003840 <HAL_GetTick>
 80047a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047ac:	f7ff f848 	bl	8003840 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e1c0      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047be:	4b92      	ldr	r3, [pc, #584]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 8081 	beq.w	80048da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047d8:	4b8c      	ldr	r3, [pc, #560]	@ (8004a0c <HAL_RCC_OscConfig+0x770>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a8b      	ldr	r2, [pc, #556]	@ (8004a0c <HAL_RCC_OscConfig+0x770>)
 80047de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047e4:	f7ff f82c 	bl	8003840 <HAL_GetTick>
 80047e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ec:	f7ff f828 	bl	8003840 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	@ 0x64
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e1a0      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047fe:	4b83      	ldr	r3, [pc, #524]	@ (8004a0c <HAL_RCC_OscConfig+0x770>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d106      	bne.n	8004820 <HAL_RCC_OscConfig+0x584>
 8004812:	4b7d      	ldr	r3, [pc, #500]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004816:	4a7c      	ldr	r2, [pc, #496]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	6713      	str	r3, [r2, #112]	@ 0x70
 800481e:	e02d      	b.n	800487c <HAL_RCC_OscConfig+0x5e0>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10c      	bne.n	8004842 <HAL_RCC_OscConfig+0x5a6>
 8004828:	4b77      	ldr	r3, [pc, #476]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482c:	4a76      	ldr	r2, [pc, #472]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	6713      	str	r3, [r2, #112]	@ 0x70
 8004834:	4b74      	ldr	r3, [pc, #464]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 8004836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004838:	4a73      	ldr	r2, [pc, #460]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 800483a:	f023 0304 	bic.w	r3, r3, #4
 800483e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004840:	e01c      	b.n	800487c <HAL_RCC_OscConfig+0x5e0>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b05      	cmp	r3, #5
 8004848:	d10c      	bne.n	8004864 <HAL_RCC_OscConfig+0x5c8>
 800484a:	4b6f      	ldr	r3, [pc, #444]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484e:	4a6e      	ldr	r2, [pc, #440]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 8004850:	f043 0304 	orr.w	r3, r3, #4
 8004854:	6713      	str	r3, [r2, #112]	@ 0x70
 8004856:	4b6c      	ldr	r3, [pc, #432]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485a:	4a6b      	ldr	r2, [pc, #428]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6713      	str	r3, [r2, #112]	@ 0x70
 8004862:	e00b      	b.n	800487c <HAL_RCC_OscConfig+0x5e0>
 8004864:	4b68      	ldr	r3, [pc, #416]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004868:	4a67      	ldr	r2, [pc, #412]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 800486a:	f023 0301 	bic.w	r3, r3, #1
 800486e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004870:	4b65      	ldr	r3, [pc, #404]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004874:	4a64      	ldr	r2, [pc, #400]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 8004876:	f023 0304 	bic.w	r3, r3, #4
 800487a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d015      	beq.n	80048b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7fe ffdc 	bl	8003840 <HAL_GetTick>
 8004888:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800488c:	f7fe ffd8 	bl	8003840 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e14e      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048a2:	4b59      	ldr	r3, [pc, #356]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0ee      	beq.n	800488c <HAL_RCC_OscConfig+0x5f0>
 80048ae:	e014      	b.n	80048da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fe ffc6 	bl	8003840 <HAL_GetTick>
 80048b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b8:	f7fe ffc2 	bl	8003840 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e138      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80048d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ee      	bne.n	80048b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 812d 	beq.w	8004b3e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80048e4:	4b48      	ldr	r3, [pc, #288]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048ec:	2b18      	cmp	r3, #24
 80048ee:	f000 80bd 	beq.w	8004a6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	f040 809e 	bne.w	8004a38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fc:	4b42      	ldr	r3, [pc, #264]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a41      	ldr	r2, [pc, #260]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 8004902:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7fe ff9a 	bl	8003840 <HAL_GetTick>
 800490c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004910:	f7fe ff96 	bl	8003840 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e10e      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004922:	4b39      	ldr	r3, [pc, #228]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800492e:	4b36      	ldr	r3, [pc, #216]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 8004930:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004932:	4b37      	ldr	r3, [pc, #220]	@ (8004a10 <HAL_RCC_OscConfig+0x774>)
 8004934:	4013      	ands	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800493e:	0112      	lsls	r2, r2, #4
 8004940:	430a      	orrs	r2, r1
 8004942:	4931      	ldr	r1, [pc, #196]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 8004944:	4313      	orrs	r3, r2
 8004946:	628b      	str	r3, [r1, #40]	@ 0x28
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494c:	3b01      	subs	r3, #1
 800494e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004956:	3b01      	subs	r3, #1
 8004958:	025b      	lsls	r3, r3, #9
 800495a:	b29b      	uxth	r3, r3
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004962:	3b01      	subs	r3, #1
 8004964:	041b      	lsls	r3, r3, #16
 8004966:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004970:	3b01      	subs	r3, #1
 8004972:	061b      	lsls	r3, r3, #24
 8004974:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004978:	4923      	ldr	r1, [pc, #140]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 800497a:	4313      	orrs	r3, r2
 800497c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800497e:	4b22      	ldr	r3, [pc, #136]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 8004980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004982:	4a21      	ldr	r2, [pc, #132]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800498a:	4b1f      	ldr	r3, [pc, #124]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 800498c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800498e:	4b21      	ldr	r3, [pc, #132]	@ (8004a14 <HAL_RCC_OscConfig+0x778>)
 8004990:	4013      	ands	r3, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004996:	00d2      	lsls	r2, r2, #3
 8004998:	491b      	ldr	r1, [pc, #108]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 800499a:	4313      	orrs	r3, r2
 800499c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800499e:	4b1a      	ldr	r3, [pc, #104]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80049a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a2:	f023 020c 	bic.w	r2, r3, #12
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	4917      	ldr	r1, [pc, #92]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80049b0:	4b15      	ldr	r3, [pc, #84]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80049b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b4:	f023 0202 	bic.w	r2, r3, #2
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049bc:	4912      	ldr	r1, [pc, #72]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049c2:	4b11      	ldr	r3, [pc, #68]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80049c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c6:	4a10      	ldr	r2, [pc, #64]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80049c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80049d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80049d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80049da:	4b0b      	ldr	r3, [pc, #44]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80049dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049de:	4a0a      	ldr	r2, [pc, #40]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80049e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80049e6:	4b08      	ldr	r3, [pc, #32]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80049e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ea:	4a07      	ldr	r2, [pc, #28]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f2:	4b05      	ldr	r3, [pc, #20]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a04      	ldr	r2, [pc, #16]	@ (8004a08 <HAL_RCC_OscConfig+0x76c>)
 80049f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fe:	f7fe ff1f 	bl	8003840 <HAL_GetTick>
 8004a02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a04:	e011      	b.n	8004a2a <HAL_RCC_OscConfig+0x78e>
 8004a06:	bf00      	nop
 8004a08:	58024400 	.word	0x58024400
 8004a0c:	58024800 	.word	0x58024800
 8004a10:	fffffc0c 	.word	0xfffffc0c
 8004a14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a18:	f7fe ff12 	bl	8003840 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e08a      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a2a:	4b47      	ldr	r3, [pc, #284]	@ (8004b48 <HAL_RCC_OscConfig+0x8ac>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0f0      	beq.n	8004a18 <HAL_RCC_OscConfig+0x77c>
 8004a36:	e082      	b.n	8004b3e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a38:	4b43      	ldr	r3, [pc, #268]	@ (8004b48 <HAL_RCC_OscConfig+0x8ac>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a42      	ldr	r2, [pc, #264]	@ (8004b48 <HAL_RCC_OscConfig+0x8ac>)
 8004a3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fe fefc 	bl	8003840 <HAL_GetTick>
 8004a48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fe fef8 	bl	8003840 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e070      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8004b48 <HAL_RCC_OscConfig+0x8ac>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x7b0>
 8004a6a:	e068      	b.n	8004b3e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a6c:	4b36      	ldr	r3, [pc, #216]	@ (8004b48 <HAL_RCC_OscConfig+0x8ac>)
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a72:	4b35      	ldr	r3, [pc, #212]	@ (8004b48 <HAL_RCC_OscConfig+0x8ac>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d031      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f003 0203 	and.w	r2, r3, #3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d12a      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d122      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d11a      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	0a5b      	lsrs	r3, r3, #9
 8004ab2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d111      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	0c1b      	lsrs	r3, r3, #16
 8004ac4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004acc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d108      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	0e1b      	lsrs	r3, r3, #24
 8004ad6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ade:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d001      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e02b      	b.n	8004b40 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004ae8:	4b17      	ldr	r3, [pc, #92]	@ (8004b48 <HAL_RCC_OscConfig+0x8ac>)
 8004aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aec:	08db      	lsrs	r3, r3, #3
 8004aee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004af2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d01f      	beq.n	8004b3e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004afe:	4b12      	ldr	r3, [pc, #72]	@ (8004b48 <HAL_RCC_OscConfig+0x8ac>)
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	4a11      	ldr	r2, [pc, #68]	@ (8004b48 <HAL_RCC_OscConfig+0x8ac>)
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b0a:	f7fe fe99 	bl	8003840 <HAL_GetTick>
 8004b0e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004b10:	bf00      	nop
 8004b12:	f7fe fe95 	bl	8003840 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d0f9      	beq.n	8004b12 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b48 <HAL_RCC_OscConfig+0x8ac>)
 8004b20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b22:	4b0a      	ldr	r3, [pc, #40]	@ (8004b4c <HAL_RCC_OscConfig+0x8b0>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b2a:	00d2      	lsls	r2, r2, #3
 8004b2c:	4906      	ldr	r1, [pc, #24]	@ (8004b48 <HAL_RCC_OscConfig+0x8ac>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004b32:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_RCC_OscConfig+0x8ac>)
 8004b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b36:	4a04      	ldr	r2, [pc, #16]	@ (8004b48 <HAL_RCC_OscConfig+0x8ac>)
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3730      	adds	r7, #48	@ 0x30
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	58024400 	.word	0x58024400
 8004b4c:	ffff0007 	.word	0xffff0007

08004b50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e19c      	b.n	8004e9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b64:	4b8a      	ldr	r3, [pc, #552]	@ (8004d90 <HAL_RCC_ClockConfig+0x240>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d910      	bls.n	8004b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b72:	4b87      	ldr	r3, [pc, #540]	@ (8004d90 <HAL_RCC_ClockConfig+0x240>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f023 020f 	bic.w	r2, r3, #15
 8004b7a:	4985      	ldr	r1, [pc, #532]	@ (8004d90 <HAL_RCC_ClockConfig+0x240>)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b82:	4b83      	ldr	r3, [pc, #524]	@ (8004d90 <HAL_RCC_ClockConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d001      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e184      	b.n	8004e9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d010      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	4b7b      	ldr	r3, [pc, #492]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d908      	bls.n	8004bc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bb0:	4b78      	ldr	r3, [pc, #480]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	4975      	ldr	r1, [pc, #468]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d010      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695a      	ldr	r2, [r3, #20]
 8004bd2:	4b70      	ldr	r3, [pc, #448]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d908      	bls.n	8004bf0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bde:	4b6d      	ldr	r3, [pc, #436]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	496a      	ldr	r1, [pc, #424]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d010      	beq.n	8004c1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699a      	ldr	r2, [r3, #24]
 8004c00:	4b64      	ldr	r3, [pc, #400]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d908      	bls.n	8004c1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c0c:	4b61      	ldr	r3, [pc, #388]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	495e      	ldr	r1, [pc, #376]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d010      	beq.n	8004c4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69da      	ldr	r2, [r3, #28]
 8004c2e:	4b59      	ldr	r3, [pc, #356]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d908      	bls.n	8004c4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c3a:	4b56      	ldr	r3, [pc, #344]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	4953      	ldr	r1, [pc, #332]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d010      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	f003 030f 	and.w	r3, r3, #15
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d908      	bls.n	8004c7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c68:	4b4a      	ldr	r3, [pc, #296]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	f023 020f 	bic.w	r2, r3, #15
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4947      	ldr	r1, [pc, #284]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d055      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c86:	4b43      	ldr	r3, [pc, #268]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	4940      	ldr	r1, [pc, #256]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d107      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d121      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e0f6      	b.n	8004e9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d107      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cb8:	4b36      	ldr	r3, [pc, #216]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d115      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0ea      	b.n	8004e9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d107      	bne.n	8004ce0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cd0:	4b30      	ldr	r3, [pc, #192]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e0de      	b.n	8004e9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0d6      	b.n	8004e9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cf0:	4b28      	ldr	r3, [pc, #160]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f023 0207 	bic.w	r2, r3, #7
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4925      	ldr	r1, [pc, #148]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d02:	f7fe fd9d 	bl	8003840 <HAL_GetTick>
 8004d06:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d08:	e00a      	b.n	8004d20 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d0a:	f7fe fd99 	bl	8003840 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e0be      	b.n	8004e9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d20:	4b1c      	ldr	r3, [pc, #112]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d1eb      	bne.n	8004d0a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d010      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	4b14      	ldr	r3, [pc, #80]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d208      	bcs.n	8004d60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d4e:	4b11      	ldr	r3, [pc, #68]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	f023 020f 	bic.w	r2, r3, #15
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	490e      	ldr	r1, [pc, #56]	@ (8004d94 <HAL_RCC_ClockConfig+0x244>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d60:	4b0b      	ldr	r3, [pc, #44]	@ (8004d90 <HAL_RCC_ClockConfig+0x240>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d214      	bcs.n	8004d98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d6e:	4b08      	ldr	r3, [pc, #32]	@ (8004d90 <HAL_RCC_ClockConfig+0x240>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f023 020f 	bic.w	r2, r3, #15
 8004d76:	4906      	ldr	r1, [pc, #24]	@ (8004d90 <HAL_RCC_ClockConfig+0x240>)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7e:	4b04      	ldr	r3, [pc, #16]	@ (8004d90 <HAL_RCC_ClockConfig+0x240>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d005      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e086      	b.n	8004e9e <HAL_RCC_ClockConfig+0x34e>
 8004d90:	52002000 	.word	0x52002000
 8004d94:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d010      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ea8 <HAL_RCC_ClockConfig+0x358>)
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d208      	bcs.n	8004dc6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004db4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ea8 <HAL_RCC_ClockConfig+0x358>)
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	4939      	ldr	r1, [pc, #228]	@ (8004ea8 <HAL_RCC_ClockConfig+0x358>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d010      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695a      	ldr	r2, [r3, #20]
 8004dd6:	4b34      	ldr	r3, [pc, #208]	@ (8004ea8 <HAL_RCC_ClockConfig+0x358>)
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d208      	bcs.n	8004df4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004de2:	4b31      	ldr	r3, [pc, #196]	@ (8004ea8 <HAL_RCC_ClockConfig+0x358>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	492e      	ldr	r1, [pc, #184]	@ (8004ea8 <HAL_RCC_ClockConfig+0x358>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d010      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699a      	ldr	r2, [r3, #24]
 8004e04:	4b28      	ldr	r3, [pc, #160]	@ (8004ea8 <HAL_RCC_ClockConfig+0x358>)
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d208      	bcs.n	8004e22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e10:	4b25      	ldr	r3, [pc, #148]	@ (8004ea8 <HAL_RCC_ClockConfig+0x358>)
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	4922      	ldr	r1, [pc, #136]	@ (8004ea8 <HAL_RCC_ClockConfig+0x358>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d010      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69da      	ldr	r2, [r3, #28]
 8004e32:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea8 <HAL_RCC_ClockConfig+0x358>)
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d208      	bcs.n	8004e50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea8 <HAL_RCC_ClockConfig+0x358>)
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	4917      	ldr	r1, [pc, #92]	@ (8004ea8 <HAL_RCC_ClockConfig+0x358>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e50:	f000 f834 	bl	8004ebc <HAL_RCC_GetSysClockFreq>
 8004e54:	4602      	mov	r2, r0
 8004e56:	4b14      	ldr	r3, [pc, #80]	@ (8004ea8 <HAL_RCC_ClockConfig+0x358>)
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	0a1b      	lsrs	r3, r3, #8
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	4912      	ldr	r1, [pc, #72]	@ (8004eac <HAL_RCC_ClockConfig+0x35c>)
 8004e62:	5ccb      	ldrb	r3, [r1, r3]
 8004e64:	f003 031f 	and.w	r3, r3, #31
 8004e68:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ea8 <HAL_RCC_ClockConfig+0x358>)
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	4a0d      	ldr	r2, [pc, #52]	@ (8004eac <HAL_RCC_ClockConfig+0x35c>)
 8004e78:	5cd3      	ldrb	r3, [r2, r3]
 8004e7a:	f003 031f 	and.w	r3, r3, #31
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	fa22 f303 	lsr.w	r3, r2, r3
 8004e84:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb0 <HAL_RCC_ClockConfig+0x360>)
 8004e86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e88:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb4 <HAL_RCC_ClockConfig+0x364>)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb8 <HAL_RCC_ClockConfig+0x368>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fe fc8a 	bl	80037ac <HAL_InitTick>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	58024400 	.word	0x58024400
 8004eac:	0800c7e0 	.word	0x0800c7e0
 8004eb0:	24000004 	.word	0x24000004
 8004eb4:	24000000 	.word	0x24000000
 8004eb8:	24000018 	.word	0x24000018

08004ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b089      	sub	sp, #36	@ 0x24
 8004ec0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ec2:	4bb3      	ldr	r3, [pc, #716]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eca:	2b18      	cmp	r3, #24
 8004ecc:	f200 8155 	bhi.w	800517a <HAL_RCC_GetSysClockFreq+0x2be>
 8004ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed6:	bf00      	nop
 8004ed8:	08004f3d 	.word	0x08004f3d
 8004edc:	0800517b 	.word	0x0800517b
 8004ee0:	0800517b 	.word	0x0800517b
 8004ee4:	0800517b 	.word	0x0800517b
 8004ee8:	0800517b 	.word	0x0800517b
 8004eec:	0800517b 	.word	0x0800517b
 8004ef0:	0800517b 	.word	0x0800517b
 8004ef4:	0800517b 	.word	0x0800517b
 8004ef8:	08004f63 	.word	0x08004f63
 8004efc:	0800517b 	.word	0x0800517b
 8004f00:	0800517b 	.word	0x0800517b
 8004f04:	0800517b 	.word	0x0800517b
 8004f08:	0800517b 	.word	0x0800517b
 8004f0c:	0800517b 	.word	0x0800517b
 8004f10:	0800517b 	.word	0x0800517b
 8004f14:	0800517b 	.word	0x0800517b
 8004f18:	08004f69 	.word	0x08004f69
 8004f1c:	0800517b 	.word	0x0800517b
 8004f20:	0800517b 	.word	0x0800517b
 8004f24:	0800517b 	.word	0x0800517b
 8004f28:	0800517b 	.word	0x0800517b
 8004f2c:	0800517b 	.word	0x0800517b
 8004f30:	0800517b 	.word	0x0800517b
 8004f34:	0800517b 	.word	0x0800517b
 8004f38:	08004f6f 	.word	0x08004f6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f3c:	4b94      	ldr	r3, [pc, #592]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f48:	4b91      	ldr	r3, [pc, #580]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	08db      	lsrs	r3, r3, #3
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	4a90      	ldr	r2, [pc, #576]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
 8004f58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004f5a:	e111      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f5c:	4b8d      	ldr	r3, [pc, #564]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f5e:	61bb      	str	r3, [r7, #24]
      break;
 8004f60:	e10e      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004f62:	4b8d      	ldr	r3, [pc, #564]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f64:	61bb      	str	r3, [r7, #24]
      break;
 8004f66:	e10b      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004f68:	4b8c      	ldr	r3, [pc, #560]	@ (800519c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f6a:	61bb      	str	r3, [r7, #24]
      break;
 8004f6c:	e108      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f6e:	4b88      	ldr	r3, [pc, #544]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f78:	4b85      	ldr	r3, [pc, #532]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f84:	4b82      	ldr	r3, [pc, #520]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f8e:	4b80      	ldr	r3, [pc, #512]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f92:	08db      	lsrs	r3, r3, #3
 8004f94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 80e1 	beq.w	8005174 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	f000 8083 	beq.w	80050c0 <HAL_RCC_GetSysClockFreq+0x204>
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	f200 80a1 	bhi.w	8005104 <HAL_RCC_GetSysClockFreq+0x248>
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x114>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d056      	beq.n	800507c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004fce:	e099      	b.n	8005104 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d02d      	beq.n	8005038 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	08db      	lsrs	r3, r3, #3
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	4a6b      	ldr	r2, [pc, #428]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	ee07 3a90 	vmov	s15, r3
 8004ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005006:	4b62      	ldr	r3, [pc, #392]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005016:	ed97 6a02 	vldr	s12, [r7, #8]
 800501a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80051a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800501e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800502a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800502e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005032:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005036:	e087      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005042:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80051a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800504a:	4b51      	ldr	r3, [pc, #324]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800504c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505a:	ed97 6a02 	vldr	s12, [r7, #8]
 800505e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80051a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800506e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005076:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800507a:	e065      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005086:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80051a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800508a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800508e:	4b40      	ldr	r3, [pc, #256]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509e:	ed97 6a02 	vldr	s12, [r7, #8]
 80050a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80051a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050be:	e043      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80051ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80050ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80051a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005102:	e021      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80051a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005116:	4b1e      	ldr	r3, [pc, #120]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005126:	ed97 6a02 	vldr	s12, [r7, #8]
 800512a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80051a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800512e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800513a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005142:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005146:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005148:	4b11      	ldr	r3, [pc, #68]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800514a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514c:	0a5b      	lsrs	r3, r3, #9
 800514e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005152:	3301      	adds	r3, #1
 8005154:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	ee07 3a90 	vmov	s15, r3
 800515c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005160:	edd7 6a07 	vldr	s13, [r7, #28]
 8005164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800516c:	ee17 3a90 	vmov	r3, s15
 8005170:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005172:	e005      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	61bb      	str	r3, [r7, #24]
      break;
 8005178:	e002      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800517a:	4b07      	ldr	r3, [pc, #28]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800517c:	61bb      	str	r3, [r7, #24]
      break;
 800517e:	bf00      	nop
  }

  return sysclockfreq;
 8005180:	69bb      	ldr	r3, [r7, #24]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3724      	adds	r7, #36	@ 0x24
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	58024400 	.word	0x58024400
 8005194:	03d09000 	.word	0x03d09000
 8005198:	003d0900 	.word	0x003d0900
 800519c:	017d7840 	.word	0x017d7840
 80051a0:	46000000 	.word	0x46000000
 80051a4:	4c742400 	.word	0x4c742400
 80051a8:	4a742400 	.word	0x4a742400
 80051ac:	4bbebc20 	.word	0x4bbebc20

080051b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80051b6:	f7ff fe81 	bl	8004ebc <HAL_RCC_GetSysClockFreq>
 80051ba:	4602      	mov	r2, r0
 80051bc:	4b10      	ldr	r3, [pc, #64]	@ (8005200 <HAL_RCC_GetHCLKFreq+0x50>)
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	0a1b      	lsrs	r3, r3, #8
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	490f      	ldr	r1, [pc, #60]	@ (8005204 <HAL_RCC_GetHCLKFreq+0x54>)
 80051c8:	5ccb      	ldrb	r3, [r1, r3]
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	fa22 f303 	lsr.w	r3, r2, r3
 80051d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005200 <HAL_RCC_GetHCLKFreq+0x50>)
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	4a09      	ldr	r2, [pc, #36]	@ (8005204 <HAL_RCC_GetHCLKFreq+0x54>)
 80051de:	5cd3      	ldrb	r3, [r2, r3]
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ea:	4a07      	ldr	r2, [pc, #28]	@ (8005208 <HAL_RCC_GetHCLKFreq+0x58>)
 80051ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051ee:	4a07      	ldr	r2, [pc, #28]	@ (800520c <HAL_RCC_GetHCLKFreq+0x5c>)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80051f4:	4b04      	ldr	r3, [pc, #16]	@ (8005208 <HAL_RCC_GetHCLKFreq+0x58>)
 80051f6:	681b      	ldr	r3, [r3, #0]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	58024400 	.word	0x58024400
 8005204:	0800c7e0 	.word	0x0800c7e0
 8005208:	24000004 	.word	0x24000004
 800520c:	24000000 	.word	0x24000000

08005210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005214:	f7ff ffcc 	bl	80051b0 <HAL_RCC_GetHCLKFreq>
 8005218:	4602      	mov	r2, r0
 800521a:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <HAL_RCC_GetPCLK1Freq+0x24>)
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	091b      	lsrs	r3, r3, #4
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	4904      	ldr	r1, [pc, #16]	@ (8005238 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005226:	5ccb      	ldrb	r3, [r1, r3]
 8005228:	f003 031f 	and.w	r3, r3, #31
 800522c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005230:	4618      	mov	r0, r3
 8005232:	bd80      	pop	{r7, pc}
 8005234:	58024400 	.word	0x58024400
 8005238:	0800c7e0 	.word	0x0800c7e0

0800523c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005240:	f7ff ffb6 	bl	80051b0 <HAL_RCC_GetHCLKFreq>
 8005244:	4602      	mov	r2, r0
 8005246:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	0a1b      	lsrs	r3, r3, #8
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	4904      	ldr	r1, [pc, #16]	@ (8005264 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005252:	5ccb      	ldrb	r3, [r1, r3]
 8005254:	f003 031f 	and.w	r3, r3, #31
 8005258:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800525c:	4618      	mov	r0, r3
 800525e:	bd80      	pop	{r7, pc}
 8005260:	58024400 	.word	0x58024400
 8005264:	0800c7e0 	.word	0x0800c7e0

08005268 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800526c:	b0ca      	sub	sp, #296	@ 0x128
 800526e:	af00      	add	r7, sp, #0
 8005270:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800527a:	2300      	movs	r3, #0
 800527c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005288:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800528c:	2500      	movs	r5, #0
 800528e:	ea54 0305 	orrs.w	r3, r4, r5
 8005292:	d049      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005298:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800529a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800529e:	d02f      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80052a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052a4:	d828      	bhi.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80052a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052aa:	d01a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80052ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052b0:	d822      	bhi.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80052b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052ba:	d007      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052bc:	e01c      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052be:	4bb8      	ldr	r3, [pc, #736]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c2:	4ab7      	ldr	r2, [pc, #732]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052ca:	e01a      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d0:	3308      	adds	r3, #8
 80052d2:	2102      	movs	r1, #2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 fc8f 	bl	8006bf8 <RCCEx_PLL2_Config>
 80052da:	4603      	mov	r3, r0
 80052dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052e0:	e00f      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e6:	3328      	adds	r3, #40	@ 0x28
 80052e8:	2102      	movs	r1, #2
 80052ea:	4618      	mov	r0, r3
 80052ec:	f001 fd36 	bl	8006d5c <RCCEx_PLL3_Config>
 80052f0:	4603      	mov	r3, r0
 80052f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052f6:	e004      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052fe:	e000      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800530a:	4ba5      	ldr	r3, [pc, #660]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800530c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800530e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005316:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005318:	4aa1      	ldr	r2, [pc, #644]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800531a:	430b      	orrs	r3, r1
 800531c:	6513      	str	r3, [r2, #80]	@ 0x50
 800531e:	e003      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005334:	f04f 0900 	mov.w	r9, #0
 8005338:	ea58 0309 	orrs.w	r3, r8, r9
 800533c:	d047      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800533e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005344:	2b04      	cmp	r3, #4
 8005346:	d82a      	bhi.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005348:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005365 	.word	0x08005365
 8005354:	08005373 	.word	0x08005373
 8005358:	08005389 	.word	0x08005389
 800535c:	080053a7 	.word	0x080053a7
 8005360:	080053a7 	.word	0x080053a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005364:	4b8e      	ldr	r3, [pc, #568]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005368:	4a8d      	ldr	r2, [pc, #564]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800536a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800536e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005370:	e01a      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005376:	3308      	adds	r3, #8
 8005378:	2100      	movs	r1, #0
 800537a:	4618      	mov	r0, r3
 800537c:	f001 fc3c 	bl	8006bf8 <RCCEx_PLL2_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005386:	e00f      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538c:	3328      	adds	r3, #40	@ 0x28
 800538e:	2100      	movs	r1, #0
 8005390:	4618      	mov	r0, r3
 8005392:	f001 fce3 	bl	8006d5c <RCCEx_PLL3_Config>
 8005396:	4603      	mov	r3, r0
 8005398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800539c:	e004      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053a4:	e000      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80053a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10a      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053b0:	4b7b      	ldr	r3, [pc, #492]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b4:	f023 0107 	bic.w	r1, r3, #7
 80053b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053be:	4a78      	ldr	r2, [pc, #480]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053c0:	430b      	orrs	r3, r1
 80053c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80053c4:	e003      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80053ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80053da:	f04f 0b00 	mov.w	fp, #0
 80053de:	ea5a 030b 	orrs.w	r3, sl, fp
 80053e2:	d04c      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80053e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ee:	d030      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80053f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053f4:	d829      	bhi.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80053f8:	d02d      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80053fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80053fc:	d825      	bhi.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053fe:	2b80      	cmp	r3, #128	@ 0x80
 8005400:	d018      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005402:	2b80      	cmp	r3, #128	@ 0x80
 8005404:	d821      	bhi.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800540a:	2b40      	cmp	r3, #64	@ 0x40
 800540c:	d007      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800540e:	e01c      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005410:	4b63      	ldr	r3, [pc, #396]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005414:	4a62      	ldr	r2, [pc, #392]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800541a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800541c:	e01c      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800541e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005422:	3308      	adds	r3, #8
 8005424:	2100      	movs	r1, #0
 8005426:	4618      	mov	r0, r3
 8005428:	f001 fbe6 	bl	8006bf8 <RCCEx_PLL2_Config>
 800542c:	4603      	mov	r3, r0
 800542e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005432:	e011      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005438:	3328      	adds	r3, #40	@ 0x28
 800543a:	2100      	movs	r1, #0
 800543c:	4618      	mov	r0, r3
 800543e:	f001 fc8d 	bl	8006d5c <RCCEx_PLL3_Config>
 8005442:	4603      	mov	r3, r0
 8005444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005448:	e006      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005450:	e002      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005452:	bf00      	nop
 8005454:	e000      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005456:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005460:	4b4f      	ldr	r3, [pc, #316]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005464:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800546c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546e:	4a4c      	ldr	r2, [pc, #304]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005470:	430b      	orrs	r3, r1
 8005472:	6513      	str	r3, [r2, #80]	@ 0x50
 8005474:	e003      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800547a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800547e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800548a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800548e:	2300      	movs	r3, #0
 8005490:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005494:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005498:	460b      	mov	r3, r1
 800549a:	4313      	orrs	r3, r2
 800549c:	d053      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800549e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80054a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054aa:	d035      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80054ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054b0:	d82e      	bhi.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80054b6:	d031      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80054b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80054bc:	d828      	bhi.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054c2:	d01a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80054c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054c8:	d822      	bhi.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80054ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054d2:	d007      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80054d4:	e01c      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054d6:	4b32      	ldr	r3, [pc, #200]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054da:	4a31      	ldr	r2, [pc, #196]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054e2:	e01c      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e8:	3308      	adds	r3, #8
 80054ea:	2100      	movs	r1, #0
 80054ec:	4618      	mov	r0, r3
 80054ee:	f001 fb83 	bl	8006bf8 <RCCEx_PLL2_Config>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054f8:	e011      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054fe:	3328      	adds	r3, #40	@ 0x28
 8005500:	2100      	movs	r1, #0
 8005502:	4618      	mov	r0, r3
 8005504:	f001 fc2a 	bl	8006d5c <RCCEx_PLL3_Config>
 8005508:	4603      	mov	r3, r0
 800550a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800550e:	e006      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005516:	e002      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005518:	bf00      	nop
 800551a:	e000      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800551c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800551e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10b      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005526:	4b1e      	ldr	r3, [pc, #120]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800552e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005532:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005536:	4a1a      	ldr	r2, [pc, #104]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005538:	430b      	orrs	r3, r1
 800553a:	6593      	str	r3, [r2, #88]	@ 0x58
 800553c:	e003      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005542:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005552:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005556:	2300      	movs	r3, #0
 8005558:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800555c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005560:	460b      	mov	r3, r1
 8005562:	4313      	orrs	r3, r2
 8005564:	d056      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800556e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005572:	d038      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005574:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005578:	d831      	bhi.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800557a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800557e:	d034      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005580:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005584:	d82b      	bhi.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005586:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800558a:	d01d      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800558c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005590:	d825      	bhi.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005592:	2b00      	cmp	r3, #0
 8005594:	d006      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005596:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800559a:	d00a      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800559c:	e01f      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800559e:	bf00      	nop
 80055a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a4:	4ba2      	ldr	r3, [pc, #648]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a8:	4aa1      	ldr	r2, [pc, #644]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055b0:	e01c      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b6:	3308      	adds	r3, #8
 80055b8:	2100      	movs	r1, #0
 80055ba:	4618      	mov	r0, r3
 80055bc:	f001 fb1c 	bl	8006bf8 <RCCEx_PLL2_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80055c6:	e011      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055cc:	3328      	adds	r3, #40	@ 0x28
 80055ce:	2100      	movs	r1, #0
 80055d0:	4618      	mov	r0, r3
 80055d2:	f001 fbc3 	bl	8006d5c <RCCEx_PLL3_Config>
 80055d6:	4603      	mov	r3, r0
 80055d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055dc:	e006      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055e4:	e002      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80055e6:	bf00      	nop
 80055e8:	e000      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80055ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10b      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80055f4:	4b8e      	ldr	r3, [pc, #568]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80055fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005600:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005604:	4a8a      	ldr	r2, [pc, #552]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005606:	430b      	orrs	r3, r1
 8005608:	6593      	str	r3, [r2, #88]	@ 0x58
 800560a:	e003      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005620:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005624:	2300      	movs	r3, #0
 8005626:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800562a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800562e:	460b      	mov	r3, r1
 8005630:	4313      	orrs	r3, r2
 8005632:	d03a      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800563a:	2b30      	cmp	r3, #48	@ 0x30
 800563c:	d01f      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800563e:	2b30      	cmp	r3, #48	@ 0x30
 8005640:	d819      	bhi.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005642:	2b20      	cmp	r3, #32
 8005644:	d00c      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005646:	2b20      	cmp	r3, #32
 8005648:	d815      	bhi.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d019      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800564e:	2b10      	cmp	r3, #16
 8005650:	d111      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005652:	4b77      	ldr	r3, [pc, #476]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005656:	4a76      	ldr	r2, [pc, #472]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800565c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800565e:	e011      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005664:	3308      	adds	r3, #8
 8005666:	2102      	movs	r1, #2
 8005668:	4618      	mov	r0, r3
 800566a:	f001 fac5 	bl	8006bf8 <RCCEx_PLL2_Config>
 800566e:	4603      	mov	r3, r0
 8005670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005674:	e006      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800567c:	e002      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800567e:	bf00      	nop
 8005680:	e000      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800568c:	4b68      	ldr	r3, [pc, #416]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800568e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005690:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800569a:	4a65      	ldr	r2, [pc, #404]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800569c:	430b      	orrs	r3, r1
 800569e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056a0:	e003      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80056b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056ba:	2300      	movs	r3, #0
 80056bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4313      	orrs	r3, r2
 80056c8:	d051      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056d4:	d035      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80056d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056da:	d82e      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056e0:	d031      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80056e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056e6:	d828      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ec:	d01a      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80056ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f2:	d822      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80056f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056fc:	d007      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80056fe:	e01c      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005700:	4b4b      	ldr	r3, [pc, #300]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005704:	4a4a      	ldr	r2, [pc, #296]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800570a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800570c:	e01c      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800570e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005712:	3308      	adds	r3, #8
 8005714:	2100      	movs	r1, #0
 8005716:	4618      	mov	r0, r3
 8005718:	f001 fa6e 	bl	8006bf8 <RCCEx_PLL2_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005722:	e011      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005728:	3328      	adds	r3, #40	@ 0x28
 800572a:	2100      	movs	r1, #0
 800572c:	4618      	mov	r0, r3
 800572e:	f001 fb15 	bl	8006d5c <RCCEx_PLL3_Config>
 8005732:	4603      	mov	r3, r0
 8005734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005738:	e006      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005740:	e002      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005750:	4b37      	ldr	r3, [pc, #220]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005754:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800575e:	4a34      	ldr	r2, [pc, #208]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005760:	430b      	orrs	r3, r1
 8005762:	6513      	str	r3, [r2, #80]	@ 0x50
 8005764:	e003      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800576a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800576e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800577a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800577e:	2300      	movs	r3, #0
 8005780:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005784:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005788:	460b      	mov	r3, r1
 800578a:	4313      	orrs	r3, r2
 800578c:	d056      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800578e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005794:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005798:	d033      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800579a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800579e:	d82c      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057a4:	d02f      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80057a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057aa:	d826      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80057b0:	d02b      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80057b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80057b6:	d820      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057bc:	d012      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80057be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057c2:	d81a      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d022      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80057c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057cc:	d115      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d2:	3308      	adds	r3, #8
 80057d4:	2101      	movs	r1, #1
 80057d6:	4618      	mov	r0, r3
 80057d8:	f001 fa0e 	bl	8006bf8 <RCCEx_PLL2_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80057e2:	e015      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e8:	3328      	adds	r3, #40	@ 0x28
 80057ea:	2101      	movs	r1, #1
 80057ec:	4618      	mov	r0, r3
 80057ee:	f001 fab5 	bl	8006d5c <RCCEx_PLL3_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80057f8:	e00a      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005800:	e006      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005802:	bf00      	nop
 8005804:	e004      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005806:	bf00      	nop
 8005808:	e002      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800580a:	bf00      	nop
 800580c:	e000      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800580e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10d      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005818:	4b05      	ldr	r3, [pc, #20]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800581a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800581c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005826:	4a02      	ldr	r2, [pc, #8]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005828:	430b      	orrs	r3, r1
 800582a:	6513      	str	r3, [r2, #80]	@ 0x50
 800582c:	e006      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800582e:	bf00      	nop
 8005830:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005838:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800583c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005848:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800584c:	2300      	movs	r3, #0
 800584e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005852:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005856:	460b      	mov	r3, r1
 8005858:	4313      	orrs	r3, r2
 800585a:	d055      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800585c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005860:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005864:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005868:	d033      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800586a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800586e:	d82c      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005874:	d02f      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800587a:	d826      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800587c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005880:	d02b      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005882:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005886:	d820      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005888:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800588c:	d012      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800588e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005892:	d81a      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d022      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005898:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800589c:	d115      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800589e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a2:	3308      	adds	r3, #8
 80058a4:	2101      	movs	r1, #1
 80058a6:	4618      	mov	r0, r3
 80058a8:	f001 f9a6 	bl	8006bf8 <RCCEx_PLL2_Config>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80058b2:	e015      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b8:	3328      	adds	r3, #40	@ 0x28
 80058ba:	2101      	movs	r1, #1
 80058bc:	4618      	mov	r0, r3
 80058be:	f001 fa4d 	bl	8006d5c <RCCEx_PLL3_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80058c8:	e00a      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058d0:	e006      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058d2:	bf00      	nop
 80058d4:	e004      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058d6:	bf00      	nop
 80058d8:	e002      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058da:	bf00      	nop
 80058dc:	e000      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10b      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80058e8:	4ba3      	ldr	r3, [pc, #652]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058f8:	4a9f      	ldr	r2, [pc, #636]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058fa:	430b      	orrs	r3, r1
 80058fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80058fe:	e003      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005910:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005918:	2300      	movs	r3, #0
 800591a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800591e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005922:	460b      	mov	r3, r1
 8005924:	4313      	orrs	r3, r2
 8005926:	d037      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800592e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005932:	d00e      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005934:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005938:	d816      	bhi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d018      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800593e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005942:	d111      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005944:	4b8c      	ldr	r3, [pc, #560]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	4a8b      	ldr	r2, [pc, #556]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800594a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800594e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005950:	e00f      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005956:	3308      	adds	r3, #8
 8005958:	2101      	movs	r1, #1
 800595a:	4618      	mov	r0, r3
 800595c:	f001 f94c 	bl	8006bf8 <RCCEx_PLL2_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005966:	e004      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800596e:	e000      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10a      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800597a:	4b7f      	ldr	r3, [pc, #508]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800597c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800597e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005988:	4a7b      	ldr	r2, [pc, #492]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800598a:	430b      	orrs	r3, r1
 800598c:	6513      	str	r3, [r2, #80]	@ 0x50
 800598e:	e003      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005994:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80059a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80059ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4313      	orrs	r3, r2
 80059b6:	d039      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d81c      	bhi.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80059c2:	a201      	add	r2, pc, #4	@ (adr r2, 80059c8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	08005a05 	.word	0x08005a05
 80059cc:	080059d9 	.word	0x080059d9
 80059d0:	080059e7 	.word	0x080059e7
 80059d4:	08005a05 	.word	0x08005a05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d8:	4b67      	ldr	r3, [pc, #412]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059dc:	4a66      	ldr	r2, [pc, #408]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059e4:	e00f      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ea:	3308      	adds	r3, #8
 80059ec:	2102      	movs	r1, #2
 80059ee:	4618      	mov	r0, r3
 80059f0:	f001 f902 	bl	8006bf8 <RCCEx_PLL2_Config>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059fa:	e004      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a02:	e000      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10a      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005a0e:	4b5a      	ldr	r3, [pc, #360]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a12:	f023 0103 	bic.w	r1, r3, #3
 8005a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a1c:	4a56      	ldr	r2, [pc, #344]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a22:	e003      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005a38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005a46:	460b      	mov	r3, r1
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f000 809f 	beq.w	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a4e:	4b4b      	ldr	r3, [pc, #300]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a4a      	ldr	r2, [pc, #296]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a5a:	f7fd fef1 	bl	8003840 <HAL_GetTick>
 8005a5e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a62:	e00b      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a64:	f7fd feec 	bl	8003840 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b64      	cmp	r3, #100	@ 0x64
 8005a72:	d903      	bls.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a7a:	e005      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d0ed      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d179      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a90:	4b39      	ldr	r3, [pc, #228]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a9c:	4053      	eors	r3, r2
 8005a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d015      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005aa6:	4b34      	ldr	r3, [pc, #208]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ab2:	4b31      	ldr	r3, [pc, #196]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab6:	4a30      	ldr	r2, [pc, #192]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005abc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005abe:	4b2e      	ldr	r3, [pc, #184]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ac8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005aca:	4a2b      	ldr	r2, [pc, #172]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005acc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ad0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ade:	d118      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae0:	f7fd feae 	bl	8003840 <HAL_GetTick>
 8005ae4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ae8:	e00d      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7fd fea9 	bl	8003840 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005af4:	1ad2      	subs	r2, r2, r3
 8005af6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d903      	bls.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005b04:	e005      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b06:	4b1c      	ldr	r3, [pc, #112]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0eb      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d129      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b2a:	d10e      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005b2c:	4b12      	ldr	r3, [pc, #72]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b3c:	091a      	lsrs	r2, r3, #4
 8005b3e:	4b10      	ldr	r3, [pc, #64]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	4a0d      	ldr	r2, [pc, #52]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b44:	430b      	orrs	r3, r1
 8005b46:	6113      	str	r3, [r2, #16]
 8005b48:	e005      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b54:	6113      	str	r3, [r2, #16]
 8005b56:	4b08      	ldr	r3, [pc, #32]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b58:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b66:	4a04      	ldr	r2, [pc, #16]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b6c:	e00e      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005b76:	e009      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005b78:	58024400 	.word	0x58024400
 8005b7c:	58024800 	.word	0x58024800
 8005b80:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	f002 0301 	and.w	r3, r2, #1
 8005b98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ba2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f000 8089 	beq.w	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bb4:	2b28      	cmp	r3, #40	@ 0x28
 8005bb6:	d86b      	bhi.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005c99 	.word	0x08005c99
 8005bc4:	08005c91 	.word	0x08005c91
 8005bc8:	08005c91 	.word	0x08005c91
 8005bcc:	08005c91 	.word	0x08005c91
 8005bd0:	08005c91 	.word	0x08005c91
 8005bd4:	08005c91 	.word	0x08005c91
 8005bd8:	08005c91 	.word	0x08005c91
 8005bdc:	08005c91 	.word	0x08005c91
 8005be0:	08005c65 	.word	0x08005c65
 8005be4:	08005c91 	.word	0x08005c91
 8005be8:	08005c91 	.word	0x08005c91
 8005bec:	08005c91 	.word	0x08005c91
 8005bf0:	08005c91 	.word	0x08005c91
 8005bf4:	08005c91 	.word	0x08005c91
 8005bf8:	08005c91 	.word	0x08005c91
 8005bfc:	08005c91 	.word	0x08005c91
 8005c00:	08005c7b 	.word	0x08005c7b
 8005c04:	08005c91 	.word	0x08005c91
 8005c08:	08005c91 	.word	0x08005c91
 8005c0c:	08005c91 	.word	0x08005c91
 8005c10:	08005c91 	.word	0x08005c91
 8005c14:	08005c91 	.word	0x08005c91
 8005c18:	08005c91 	.word	0x08005c91
 8005c1c:	08005c91 	.word	0x08005c91
 8005c20:	08005c99 	.word	0x08005c99
 8005c24:	08005c91 	.word	0x08005c91
 8005c28:	08005c91 	.word	0x08005c91
 8005c2c:	08005c91 	.word	0x08005c91
 8005c30:	08005c91 	.word	0x08005c91
 8005c34:	08005c91 	.word	0x08005c91
 8005c38:	08005c91 	.word	0x08005c91
 8005c3c:	08005c91 	.word	0x08005c91
 8005c40:	08005c99 	.word	0x08005c99
 8005c44:	08005c91 	.word	0x08005c91
 8005c48:	08005c91 	.word	0x08005c91
 8005c4c:	08005c91 	.word	0x08005c91
 8005c50:	08005c91 	.word	0x08005c91
 8005c54:	08005c91 	.word	0x08005c91
 8005c58:	08005c91 	.word	0x08005c91
 8005c5c:	08005c91 	.word	0x08005c91
 8005c60:	08005c99 	.word	0x08005c99
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c68:	3308      	adds	r3, #8
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 ffc3 	bl	8006bf8 <RCCEx_PLL2_Config>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c78:	e00f      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7e:	3328      	adds	r3, #40	@ 0x28
 8005c80:	2101      	movs	r1, #1
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 f86a 	bl	8006d5c <RCCEx_PLL3_Config>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c8e:	e004      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c96:	e000      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ca2:	4bbf      	ldr	r3, [pc, #764]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cb0:	4abb      	ldr	r2, [pc, #748]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cb2:	430b      	orrs	r3, r1
 8005cb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005cb6:	e003      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	f002 0302 	and.w	r3, r2, #2
 8005ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005cd6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	d041      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ce6:	2b05      	cmp	r3, #5
 8005ce8:	d824      	bhi.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005cea:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf0:	08005d3d 	.word	0x08005d3d
 8005cf4:	08005d09 	.word	0x08005d09
 8005cf8:	08005d1f 	.word	0x08005d1f
 8005cfc:	08005d3d 	.word	0x08005d3d
 8005d00:	08005d3d 	.word	0x08005d3d
 8005d04:	08005d3d 	.word	0x08005d3d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	2101      	movs	r1, #1
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 ff71 	bl	8006bf8 <RCCEx_PLL2_Config>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d1c:	e00f      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d22:	3328      	adds	r3, #40	@ 0x28
 8005d24:	2101      	movs	r1, #1
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 f818 	bl	8006d5c <RCCEx_PLL3_Config>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d32:	e004      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d3a:	e000      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d46:	4b96      	ldr	r3, [pc, #600]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4a:	f023 0107 	bic.w	r1, r3, #7
 8005d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d54:	4a92      	ldr	r2, [pc, #584]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d56:	430b      	orrs	r3, r1
 8005d58:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d5a:	e003      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f002 0304 	and.w	r3, r2, #4
 8005d70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d74:	2300      	movs	r3, #0
 8005d76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d7a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4313      	orrs	r3, r2
 8005d82:	d044      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d8c:	2b05      	cmp	r3, #5
 8005d8e:	d825      	bhi.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005d90:	a201      	add	r2, pc, #4	@ (adr r2, 8005d98 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d96:	bf00      	nop
 8005d98:	08005de5 	.word	0x08005de5
 8005d9c:	08005db1 	.word	0x08005db1
 8005da0:	08005dc7 	.word	0x08005dc7
 8005da4:	08005de5 	.word	0x08005de5
 8005da8:	08005de5 	.word	0x08005de5
 8005dac:	08005de5 	.word	0x08005de5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db4:	3308      	adds	r3, #8
 8005db6:	2101      	movs	r1, #1
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 ff1d 	bl	8006bf8 <RCCEx_PLL2_Config>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005dc4:	e00f      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dca:	3328      	adds	r3, #40	@ 0x28
 8005dcc:	2101      	movs	r1, #1
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 ffc4 	bl	8006d5c <RCCEx_PLL3_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005dda:	e004      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005de2:	e000      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10b      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dee:	4b6c      	ldr	r3, [pc, #432]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df2:	f023 0107 	bic.w	r1, r3, #7
 8005df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dfe:	4a68      	ldr	r2, [pc, #416]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e00:	430b      	orrs	r3, r1
 8005e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e04:	e003      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	f002 0320 	and.w	r3, r2, #32
 8005e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	d055      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e3a:	d033      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e40:	d82c      	bhi.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e46:	d02f      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e4c:	d826      	bhi.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e52:	d02b      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005e54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e58:	d820      	bhi.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e5e:	d012      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e64:	d81a      	bhi.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d022      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005e6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e6e:	d115      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e74:	3308      	adds	r3, #8
 8005e76:	2100      	movs	r1, #0
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 febd 	bl	8006bf8 <RCCEx_PLL2_Config>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e84:	e015      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8a:	3328      	adds	r3, #40	@ 0x28
 8005e8c:	2102      	movs	r1, #2
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 ff64 	bl	8006d5c <RCCEx_PLL3_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e9a:	e00a      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ea2:	e006      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ea4:	bf00      	nop
 8005ea6:	e004      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ea8:	bf00      	nop
 8005eaa:	e002      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005eac:	bf00      	nop
 8005eae:	e000      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10b      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eba:	4b39      	ldr	r3, [pc, #228]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eca:	4a35      	ldr	r2, [pc, #212]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ed0:	e003      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005eea:	2300      	movs	r3, #0
 8005eec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005ef0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	d058      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f02:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f06:	d033      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005f08:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f0c:	d82c      	bhi.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f12:	d02f      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f18:	d826      	bhi.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005f1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f1e:	d02b      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005f20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f24:	d820      	bhi.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005f26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f2a:	d012      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005f2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f30:	d81a      	bhi.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d022      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f3a:	d115      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f40:	3308      	adds	r3, #8
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 fe57 	bl	8006bf8 <RCCEx_PLL2_Config>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f50:	e015      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f56:	3328      	adds	r3, #40	@ 0x28
 8005f58:	2102      	movs	r1, #2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 fefe 	bl	8006d5c <RCCEx_PLL3_Config>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f66:	e00a      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f6e:	e006      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f70:	bf00      	nop
 8005f72:	e004      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f74:	bf00      	nop
 8005f76:	e002      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f78:	bf00      	nop
 8005f7a:	e000      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10e      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f86:	4b06      	ldr	r3, [pc, #24]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f8a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f96:	4a02      	ldr	r2, [pc, #8]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f9c:	e006      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005f9e:	bf00      	nop
 8005fa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005fb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fc2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	d055      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005fd4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005fd8:	d033      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005fda:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005fde:	d82c      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005fe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fe4:	d02f      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005fe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fea:	d826      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005fec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005ff0:	d02b      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005ff2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005ff6:	d820      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ff8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ffc:	d012      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005ffe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006002:	d81a      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d022      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800600c:	d115      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800600e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006012:	3308      	adds	r3, #8
 8006014:	2100      	movs	r1, #0
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fdee 	bl	8006bf8 <RCCEx_PLL2_Config>
 800601c:	4603      	mov	r3, r0
 800601e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006022:	e015      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006028:	3328      	adds	r3, #40	@ 0x28
 800602a:	2102      	movs	r1, #2
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fe95 	bl	8006d5c <RCCEx_PLL3_Config>
 8006032:	4603      	mov	r3, r0
 8006034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006038:	e00a      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006040:	e006      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006042:	bf00      	nop
 8006044:	e004      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006046:	bf00      	nop
 8006048:	e002      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800604a:	bf00      	nop
 800604c:	e000      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800604e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10b      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006058:	4ba1      	ldr	r3, [pc, #644]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800605a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800605c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006064:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006068:	4a9d      	ldr	r2, [pc, #628]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800606a:	430b      	orrs	r3, r1
 800606c:	6593      	str	r3, [r2, #88]	@ 0x58
 800606e:	e003      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	f002 0308 	and.w	r3, r2, #8
 8006084:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006088:	2300      	movs	r3, #0
 800608a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800608e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006092:	460b      	mov	r3, r1
 8006094:	4313      	orrs	r3, r2
 8006096:	d01e      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060a4:	d10c      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060aa:	3328      	adds	r3, #40	@ 0x28
 80060ac:	2102      	movs	r1, #2
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fe54 	bl	8006d5c <RCCEx_PLL3_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80060c0:	4b87      	ldr	r3, [pc, #540]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060d0:	4a83      	ldr	r2, [pc, #524]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060d2:	430b      	orrs	r3, r1
 80060d4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f002 0310 	and.w	r3, r2, #16
 80060e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060e6:	2300      	movs	r3, #0
 80060e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80060ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80060f0:	460b      	mov	r3, r1
 80060f2:	4313      	orrs	r3, r2
 80060f4:	d01e      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80060f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006102:	d10c      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006108:	3328      	adds	r3, #40	@ 0x28
 800610a:	2102      	movs	r1, #2
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fe25 	bl	8006d5c <RCCEx_PLL3_Config>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800611e:	4b70      	ldr	r3, [pc, #448]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006122:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800612e:	4a6c      	ldr	r2, [pc, #432]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006130:	430b      	orrs	r3, r1
 8006132:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006140:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006144:	2300      	movs	r3, #0
 8006146:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800614a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800614e:	460b      	mov	r3, r1
 8006150:	4313      	orrs	r3, r2
 8006152:	d03e      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006158:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800615c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006160:	d022      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006166:	d81b      	bhi.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800616c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006170:	d00b      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006172:	e015      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006178:	3308      	adds	r3, #8
 800617a:	2100      	movs	r1, #0
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fd3b 	bl	8006bf8 <RCCEx_PLL2_Config>
 8006182:	4603      	mov	r3, r0
 8006184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006188:	e00f      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618e:	3328      	adds	r3, #40	@ 0x28
 8006190:	2102      	movs	r1, #2
 8006192:	4618      	mov	r0, r3
 8006194:	f000 fde2 	bl	8006d5c <RCCEx_PLL3_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800619e:	e004      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061a6:	e000      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80061a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10b      	bne.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061b2:	4b4b      	ldr	r3, [pc, #300]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80061ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061c2:	4a47      	ldr	r2, [pc, #284]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061c4:	430b      	orrs	r3, r1
 80061c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80061c8:	e003      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80061de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061e0:	2300      	movs	r3, #0
 80061e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80061e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80061e8:	460b      	mov	r3, r1
 80061ea:	4313      	orrs	r3, r2
 80061ec:	d03b      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80061ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061fa:	d01f      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80061fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006200:	d818      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006206:	d003      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006208:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800620c:	d007      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800620e:	e011      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006210:	4b33      	ldr	r3, [pc, #204]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006214:	4a32      	ldr	r2, [pc, #200]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800621a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800621c:	e00f      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800621e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006222:	3328      	adds	r3, #40	@ 0x28
 8006224:	2101      	movs	r1, #1
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fd98 	bl	8006d5c <RCCEx_PLL3_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006232:	e004      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800623a:	e000      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800623c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10b      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006246:	4b26      	ldr	r3, [pc, #152]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800624a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800624e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006256:	4a22      	ldr	r2, [pc, #136]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006258:	430b      	orrs	r3, r1
 800625a:	6553      	str	r3, [r2, #84]	@ 0x54
 800625c:	e003      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006272:	673b      	str	r3, [r7, #112]	@ 0x70
 8006274:	2300      	movs	r3, #0
 8006276:	677b      	str	r3, [r7, #116]	@ 0x74
 8006278:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800627c:	460b      	mov	r3, r1
 800627e:	4313      	orrs	r3, r2
 8006280:	d034      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800628c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006290:	d007      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006292:	e011      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006294:	4b12      	ldr	r3, [pc, #72]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006298:	4a11      	ldr	r2, [pc, #68]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800629a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800629e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80062a0:	e00e      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a6:	3308      	adds	r3, #8
 80062a8:	2102      	movs	r1, #2
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fca4 	bl	8006bf8 <RCCEx_PLL2_Config>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80062b6:	e003      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10d      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80062c8:	4b05      	ldr	r3, [pc, #20]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d6:	4a02      	ldr	r2, [pc, #8]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062d8:	430b      	orrs	r3, r1
 80062da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062dc:	e006      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80062de:	bf00      	nop
 80062e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80062f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062fa:	2300      	movs	r3, #0
 80062fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006302:	460b      	mov	r3, r1
 8006304:	4313      	orrs	r3, r2
 8006306:	d00c      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630c:	3328      	adds	r3, #40	@ 0x28
 800630e:	2102      	movs	r1, #2
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fd23 	bl	8006d5c <RCCEx_PLL3_Config>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800632e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006330:	2300      	movs	r3, #0
 8006332:	667b      	str	r3, [r7, #100]	@ 0x64
 8006334:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006338:	460b      	mov	r3, r1
 800633a:	4313      	orrs	r3, r2
 800633c:	d038      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800633e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006346:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800634a:	d018      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800634c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006350:	d811      	bhi.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006356:	d014      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800635c:	d80b      	bhi.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d011      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006366:	d106      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006368:	4bc3      	ldr	r3, [pc, #780]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800636a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636c:	4ac2      	ldr	r2, [pc, #776]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800636e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006374:	e008      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800637c:	e004      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800637e:	bf00      	nop
 8006380:	e002      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006382:	bf00      	nop
 8006384:	e000      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10b      	bne.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006390:	4bb9      	ldr	r3, [pc, #740]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006394:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063a0:	4ab5      	ldr	r2, [pc, #724]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063a2:	430b      	orrs	r3, r1
 80063a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80063a6:	e003      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80063b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80063bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063be:	2300      	movs	r3, #0
 80063c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80063c6:	460b      	mov	r3, r1
 80063c8:	4313      	orrs	r3, r2
 80063ca:	d009      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80063cc:	4baa      	ldr	r3, [pc, #680]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80063d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063da:	4aa7      	ldr	r2, [pc, #668]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063dc:	430b      	orrs	r3, r1
 80063de:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80063e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80063ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80063ee:	2300      	movs	r3, #0
 80063f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80063f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80063f6:	460b      	mov	r3, r1
 80063f8:	4313      	orrs	r3, r2
 80063fa:	d00a      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80063fc:	4b9e      	ldr	r3, [pc, #632]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006408:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800640c:	4a9a      	ldr	r2, [pc, #616]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800640e:	430b      	orrs	r3, r1
 8006410:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800641e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006420:	2300      	movs	r3, #0
 8006422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006424:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006428:	460b      	mov	r3, r1
 800642a:	4313      	orrs	r3, r2
 800642c:	d009      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800642e:	4b92      	ldr	r3, [pc, #584]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006432:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800643c:	4a8e      	ldr	r2, [pc, #568]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800643e:	430b      	orrs	r3, r1
 8006440:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800644e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006450:	2300      	movs	r3, #0
 8006452:	647b      	str	r3, [r7, #68]	@ 0x44
 8006454:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006458:	460b      	mov	r3, r1
 800645a:	4313      	orrs	r3, r2
 800645c:	d00e      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800645e:	4b86      	ldr	r3, [pc, #536]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	4a85      	ldr	r2, [pc, #532]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006464:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006468:	6113      	str	r3, [r2, #16]
 800646a:	4b83      	ldr	r3, [pc, #524]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800646c:	6919      	ldr	r1, [r3, #16]
 800646e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006472:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006476:	4a80      	ldr	r2, [pc, #512]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006478:	430b      	orrs	r3, r1
 800647a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800647c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006488:	63bb      	str	r3, [r7, #56]	@ 0x38
 800648a:	2300      	movs	r3, #0
 800648c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800648e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006492:	460b      	mov	r3, r1
 8006494:	4313      	orrs	r3, r2
 8006496:	d009      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006498:	4b77      	ldr	r3, [pc, #476]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800649a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80064a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a6:	4a74      	ldr	r2, [pc, #464]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064a8:	430b      	orrs	r3, r1
 80064aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80064b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80064ba:	2300      	movs	r3, #0
 80064bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80064c2:	460b      	mov	r3, r1
 80064c4:	4313      	orrs	r3, r2
 80064c6:	d00a      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064c8:	4b6b      	ldr	r3, [pc, #428]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064cc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80064d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064d8:	4a67      	ldr	r2, [pc, #412]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064da:	430b      	orrs	r3, r1
 80064dc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80064de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e6:	2100      	movs	r1, #0
 80064e8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80064f4:	460b      	mov	r3, r1
 80064f6:	4313      	orrs	r3, r2
 80064f8:	d011      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fe:	3308      	adds	r3, #8
 8006500:	2100      	movs	r1, #0
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fb78 	bl	8006bf8 <RCCEx_PLL2_Config>
 8006508:	4603      	mov	r3, r0
 800650a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800650e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800651a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800651e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	2100      	movs	r1, #0
 8006528:	6239      	str	r1, [r7, #32]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006530:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006534:	460b      	mov	r3, r1
 8006536:	4313      	orrs	r3, r2
 8006538:	d011      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800653a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653e:	3308      	adds	r3, #8
 8006540:	2101      	movs	r1, #1
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fb58 	bl	8006bf8 <RCCEx_PLL2_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800654e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800655a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800655e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	2100      	movs	r1, #0
 8006568:	61b9      	str	r1, [r7, #24]
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	61fb      	str	r3, [r7, #28]
 8006570:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006574:	460b      	mov	r3, r1
 8006576:	4313      	orrs	r3, r2
 8006578:	d011      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800657a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657e:	3308      	adds	r3, #8
 8006580:	2102      	movs	r1, #2
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fb38 	bl	8006bf8 <RCCEx_PLL2_Config>
 8006588:	4603      	mov	r3, r0
 800658a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800658e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800659a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800659e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	2100      	movs	r1, #0
 80065a8:	6139      	str	r1, [r7, #16]
 80065aa:	f003 0308 	and.w	r3, r3, #8
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80065b4:	460b      	mov	r3, r1
 80065b6:	4313      	orrs	r3, r2
 80065b8:	d011      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065be:	3328      	adds	r3, #40	@ 0x28
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fbca 	bl	8006d5c <RCCEx_PLL3_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80065ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80065de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	2100      	movs	r1, #0
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	f003 0310 	and.w	r3, r3, #16
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80065f4:	460b      	mov	r3, r1
 80065f6:	4313      	orrs	r3, r2
 80065f8:	d011      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fe:	3328      	adds	r3, #40	@ 0x28
 8006600:	2101      	movs	r1, #1
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fbaa 	bl	8006d5c <RCCEx_PLL3_Config>
 8006608:	4603      	mov	r3, r0
 800660a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800660e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800661a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	2100      	movs	r1, #0
 8006628:	6039      	str	r1, [r7, #0]
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	607b      	str	r3, [r7, #4]
 8006630:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006634:	460b      	mov	r3, r1
 8006636:	4313      	orrs	r3, r2
 8006638:	d011      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663e:	3328      	adds	r3, #40	@ 0x28
 8006640:	2102      	movs	r1, #2
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fb8a 	bl	8006d5c <RCCEx_PLL3_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800664e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800665a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800665e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	e000      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
}
 800666c:	4618      	mov	r0, r3
 800666e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006672:	46bd      	mov	sp, r7
 8006674:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006678:	58024400 	.word	0x58024400

0800667c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006680:	f7fe fd96 	bl	80051b0 <HAL_RCC_GetHCLKFreq>
 8006684:	4602      	mov	r2, r0
 8006686:	4b06      	ldr	r3, [pc, #24]	@ (80066a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	091b      	lsrs	r3, r3, #4
 800668c:	f003 0307 	and.w	r3, r3, #7
 8006690:	4904      	ldr	r1, [pc, #16]	@ (80066a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006692:	5ccb      	ldrb	r3, [r1, r3]
 8006694:	f003 031f 	and.w	r3, r3, #31
 8006698:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800669c:	4618      	mov	r0, r3
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	58024400 	.word	0x58024400
 80066a4:	0800c7e0 	.word	0x0800c7e0

080066a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b089      	sub	sp, #36	@ 0x24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066b0:	4ba1      	ldr	r3, [pc, #644]	@ (8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80066ba:	4b9f      	ldr	r3, [pc, #636]	@ (8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066be:	0b1b      	lsrs	r3, r3, #12
 80066c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80066c6:	4b9c      	ldr	r3, [pc, #624]	@ (8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ca:	091b      	lsrs	r3, r3, #4
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80066d2:	4b99      	ldr	r3, [pc, #612]	@ (8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d6:	08db      	lsrs	r3, r3, #3
 80066d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 8111 	beq.w	8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	f000 8083 	beq.w	8006804 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	2b02      	cmp	r3, #2
 8006702:	f200 80a1 	bhi.w	8006848 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d056      	beq.n	80067c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006712:	e099      	b.n	8006848 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006714:	4b88      	ldr	r3, [pc, #544]	@ (8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b00      	cmp	r3, #0
 800671e:	d02d      	beq.n	800677c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006720:	4b85      	ldr	r3, [pc, #532]	@ (8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	08db      	lsrs	r3, r3, #3
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	4a84      	ldr	r2, [pc, #528]	@ (800693c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
 8006730:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	ee07 3a90 	vmov	s15, r3
 8006738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674a:	4b7b      	ldr	r3, [pc, #492]	@ (8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800674c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675a:	ed97 6a03 	vldr	s12, [r7, #12]
 800675e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800676e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006776:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800677a:	e087      	b.n	800688c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006786:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006944 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800678a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800678e:	4b6a      	ldr	r3, [pc, #424]	@ (8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800679e:	ed97 6a03 	vldr	s12, [r7, #12]
 80067a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067be:	e065      	b.n	800688c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006948 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80067ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d2:	4b59      	ldr	r3, [pc, #356]	@ (8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006802:	e043      	b.n	800688c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800694c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006816:	4b48      	ldr	r3, [pc, #288]	@ (8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006826:	ed97 6a03 	vldr	s12, [r7, #12]
 800682a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800682e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800683a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800683e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006846:	e021      	b.n	800688c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006852:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006948 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800685a:	4b37      	ldr	r3, [pc, #220]	@ (8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800685c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800686a:	ed97 6a03 	vldr	s12, [r7, #12]
 800686e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800687a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800687e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800688a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800688c:	4b2a      	ldr	r3, [pc, #168]	@ (8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800688e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006890:	0a5b      	lsrs	r3, r3, #9
 8006892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80068aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b2:	ee17 2a90 	vmov	r2, s15
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80068ba:	4b1f      	ldr	r3, [pc, #124]	@ (8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068be:	0c1b      	lsrs	r3, r3, #16
 80068c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068c4:	ee07 3a90 	vmov	s15, r3
 80068c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80068d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068e0:	ee17 2a90 	vmov	r2, s15
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80068e8:	4b13      	ldr	r3, [pc, #76]	@ (8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ec:	0e1b      	lsrs	r3, r3, #24
 80068ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068f2:	ee07 3a90 	vmov	s15, r3
 80068f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006902:	edd7 6a07 	vldr	s13, [r7, #28]
 8006906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800690a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800690e:	ee17 2a90 	vmov	r2, s15
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006916:	e008      	b.n	800692a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	609a      	str	r2, [r3, #8]
}
 800692a:	bf00      	nop
 800692c:	3724      	adds	r7, #36	@ 0x24
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	58024400 	.word	0x58024400
 800693c:	03d09000 	.word	0x03d09000
 8006940:	46000000 	.word	0x46000000
 8006944:	4c742400 	.word	0x4c742400
 8006948:	4a742400 	.word	0x4a742400
 800694c:	4bbebc20 	.word	0x4bbebc20

08006950 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006950:	b480      	push	{r7}
 8006952:	b089      	sub	sp, #36	@ 0x24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006958:	4ba1      	ldr	r3, [pc, #644]	@ (8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800695a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695c:	f003 0303 	and.w	r3, r3, #3
 8006960:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006962:	4b9f      	ldr	r3, [pc, #636]	@ (8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006966:	0d1b      	lsrs	r3, r3, #20
 8006968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800696c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800696e:	4b9c      	ldr	r3, [pc, #624]	@ (8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006972:	0a1b      	lsrs	r3, r3, #8
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800697a:	4b99      	ldr	r3, [pc, #612]	@ (8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800697c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697e:	08db      	lsrs	r3, r3, #3
 8006980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	fb02 f303 	mul.w	r3, r2, r3
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 8111 	beq.w	8006bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	f000 8083 	beq.w	8006aac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	f200 80a1 	bhi.w	8006af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d056      	beq.n	8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80069ba:	e099      	b.n	8006af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069bc:	4b88      	ldr	r3, [pc, #544]	@ (8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d02d      	beq.n	8006a24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069c8:	4b85      	ldr	r3, [pc, #532]	@ (8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	08db      	lsrs	r3, r3, #3
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	4a84      	ldr	r2, [pc, #528]	@ (8006be4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80069d4:	fa22 f303 	lsr.w	r3, r2, r3
 80069d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	ee07 3a90 	vmov	s15, r3
 80069e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f2:	4b7b      	ldr	r3, [pc, #492]	@ (8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a22:	e087      	b.n	8006b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	ee07 3a90 	vmov	s15, r3
 8006a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006bec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a36:	4b6a      	ldr	r3, [pc, #424]	@ (8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a66:	e065      	b.n	8006b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7a:	4b59      	ldr	r3, [pc, #356]	@ (8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aaa:	e043      	b.n	8006b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006abe:	4b48      	ldr	r3, [pc, #288]	@ (8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ad2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aee:	e021      	b.n	8006b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b02:	4b37      	ldr	r3, [pc, #220]	@ (8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006b34:	4b2a      	ldr	r3, [pc, #168]	@ (8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b38:	0a5b      	lsrs	r3, r3, #9
 8006b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b5a:	ee17 2a90 	vmov	r2, s15
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006b62:	4b1f      	ldr	r3, [pc, #124]	@ (8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b66:	0c1b      	lsrs	r3, r3, #16
 8006b68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b6c:	ee07 3a90 	vmov	s15, r3
 8006b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b88:	ee17 2a90 	vmov	r2, s15
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006b90:	4b13      	ldr	r3, [pc, #76]	@ (8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b94:	0e1b      	lsrs	r3, r3, #24
 8006b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b9a:	ee07 3a90 	vmov	s15, r3
 8006b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006baa:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bb6:	ee17 2a90 	vmov	r2, s15
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	609a      	str	r2, [r3, #8]
}
 8006bd2:	bf00      	nop
 8006bd4:	3724      	adds	r7, #36	@ 0x24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	58024400 	.word	0x58024400
 8006be4:	03d09000 	.word	0x03d09000
 8006be8:	46000000 	.word	0x46000000
 8006bec:	4c742400 	.word	0x4c742400
 8006bf0:	4a742400 	.word	0x4a742400
 8006bf4:	4bbebc20 	.word	0x4bbebc20

08006bf8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c06:	4b53      	ldr	r3, [pc, #332]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d101      	bne.n	8006c16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e099      	b.n	8006d4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c16:	4b4f      	ldr	r3, [pc, #316]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a4e      	ldr	r2, [pc, #312]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006c1c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c22:	f7fc fe0d 	bl	8003840 <HAL_GetTick>
 8006c26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c28:	e008      	b.n	8006c3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c2a:	f7fc fe09 	bl	8003840 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d901      	bls.n	8006c3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e086      	b.n	8006d4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c3c:	4b45      	ldr	r3, [pc, #276]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1f0      	bne.n	8006c2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c48:	4b42      	ldr	r3, [pc, #264]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	031b      	lsls	r3, r3, #12
 8006c56:	493f      	ldr	r1, [pc, #252]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	025b      	lsls	r3, r3, #9
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	431a      	orrs	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	041b      	lsls	r3, r3, #16
 8006c7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	061b      	lsls	r3, r3, #24
 8006c88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c8c:	4931      	ldr	r1, [pc, #196]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c92:	4b30      	ldr	r3, [pc, #192]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	492d      	ldr	r1, [pc, #180]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca8:	f023 0220 	bic.w	r2, r3, #32
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	4928      	ldr	r1, [pc, #160]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006cb6:	4b27      	ldr	r3, [pc, #156]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cba:	4a26      	ldr	r2, [pc, #152]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006cbc:	f023 0310 	bic.w	r3, r3, #16
 8006cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006cc2:	4b24      	ldr	r3, [pc, #144]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006cc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cc6:	4b24      	ldr	r3, [pc, #144]	@ (8006d58 <RCCEx_PLL2_Config+0x160>)
 8006cc8:	4013      	ands	r3, r2
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	69d2      	ldr	r2, [r2, #28]
 8006cce:	00d2      	lsls	r2, r2, #3
 8006cd0:	4920      	ldr	r1, [pc, #128]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cda:	4a1e      	ldr	r2, [pc, #120]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006cdc:	f043 0310 	orr.w	r3, r3, #16
 8006ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d106      	bne.n	8006cf6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cec:	4a19      	ldr	r2, [pc, #100]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006cee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006cf4:	e00f      	b.n	8006d16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d106      	bne.n	8006d0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006cfc:	4b15      	ldr	r3, [pc, #84]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d00:	4a14      	ldr	r2, [pc, #80]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d08:	e005      	b.n	8006d16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d0a:	4b12      	ldr	r3, [pc, #72]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0e:	4a11      	ldr	r2, [pc, #68]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006d10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006d14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d16:	4b0f      	ldr	r3, [pc, #60]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a0e      	ldr	r2, [pc, #56]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006d1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d22:	f7fc fd8d 	bl	8003840 <HAL_GetTick>
 8006d26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d28:	e008      	b.n	8006d3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d2a:	f7fc fd89 	bl	8003840 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d901      	bls.n	8006d3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e006      	b.n	8006d4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d3c:	4b05      	ldr	r3, [pc, #20]	@ (8006d54 <RCCEx_PLL2_Config+0x15c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0f0      	beq.n	8006d2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	58024400 	.word	0x58024400
 8006d58:	ffff0007 	.word	0xffff0007

08006d5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d6a:	4b53      	ldr	r3, [pc, #332]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d101      	bne.n	8006d7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e099      	b.n	8006eae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a4e      	ldr	r2, [pc, #312]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006d80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d86:	f7fc fd5b 	bl	8003840 <HAL_GetTick>
 8006d8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d8c:	e008      	b.n	8006da0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d8e:	f7fc fd57 	bl	8003840 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d901      	bls.n	8006da0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e086      	b.n	8006eae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006da0:	4b45      	ldr	r3, [pc, #276]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1f0      	bne.n	8006d8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006dac:	4b42      	ldr	r3, [pc, #264]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	051b      	lsls	r3, r3, #20
 8006dba:	493f      	ldr	r1, [pc, #252]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	628b      	str	r3, [r1, #40]	@ 0x28
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	025b      	lsls	r3, r3, #9
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	041b      	lsls	r3, r3, #16
 8006dde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	061b      	lsls	r3, r3, #24
 8006dec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006df0:	4931      	ldr	r1, [pc, #196]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006df6:	4b30      	ldr	r3, [pc, #192]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	492d      	ldr	r1, [pc, #180]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e08:	4b2b      	ldr	r3, [pc, #172]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	4928      	ldr	r1, [pc, #160]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006e1a:	4b27      	ldr	r3, [pc, #156]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1e:	4a26      	ldr	r2, [pc, #152]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006e26:	4b24      	ldr	r3, [pc, #144]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e2a:	4b24      	ldr	r3, [pc, #144]	@ (8006ebc <RCCEx_PLL3_Config+0x160>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	69d2      	ldr	r2, [r2, #28]
 8006e32:	00d2      	lsls	r2, r2, #3
 8006e34:	4920      	ldr	r1, [pc, #128]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d106      	bne.n	8006e5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e50:	4a19      	ldr	r2, [pc, #100]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e58:	e00f      	b.n	8006e7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d106      	bne.n	8006e6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e60:	4b15      	ldr	r3, [pc, #84]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e64:	4a14      	ldr	r2, [pc, #80]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e6c:	e005      	b.n	8006e7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e6e:	4b12      	ldr	r3, [pc, #72]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e72:	4a11      	ldr	r2, [pc, #68]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e86:	f7fc fcdb 	bl	8003840 <HAL_GetTick>
 8006e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e8c:	e008      	b.n	8006ea0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e8e:	f7fc fcd7 	bl	8003840 <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d901      	bls.n	8006ea0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e006      	b.n	8006eae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ea0:	4b05      	ldr	r3, [pc, #20]	@ (8006eb8 <RCCEx_PLL3_Config+0x15c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d0f0      	beq.n	8006e8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	58024400 	.word	0x58024400
 8006ebc:	ffff0007 	.word	0xffff0007

08006ec0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e10f      	b.n	80070f2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a87      	ldr	r2, [pc, #540]	@ (80070fc <HAL_SPI_Init+0x23c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00f      	beq.n	8006f02 <HAL_SPI_Init+0x42>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a86      	ldr	r2, [pc, #536]	@ (8007100 <HAL_SPI_Init+0x240>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d00a      	beq.n	8006f02 <HAL_SPI_Init+0x42>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a84      	ldr	r2, [pc, #528]	@ (8007104 <HAL_SPI_Init+0x244>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d005      	beq.n	8006f02 <HAL_SPI_Init+0x42>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	2b0f      	cmp	r3, #15
 8006efc:	d901      	bls.n	8006f02 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e0f7      	b.n	80070f2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fe3c 	bl	8007b80 <SPI_GetPacketSize>
 8006f08:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a7b      	ldr	r2, [pc, #492]	@ (80070fc <HAL_SPI_Init+0x23c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00c      	beq.n	8006f2e <HAL_SPI_Init+0x6e>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a79      	ldr	r2, [pc, #484]	@ (8007100 <HAL_SPI_Init+0x240>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d007      	beq.n	8006f2e <HAL_SPI_Init+0x6e>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a78      	ldr	r2, [pc, #480]	@ (8007104 <HAL_SPI_Init+0x244>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d002      	beq.n	8006f2e <HAL_SPI_Init+0x6e>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b08      	cmp	r3, #8
 8006f2c:	d811      	bhi.n	8006f52 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f32:	4a72      	ldr	r2, [pc, #456]	@ (80070fc <HAL_SPI_Init+0x23c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d009      	beq.n	8006f4c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a70      	ldr	r2, [pc, #448]	@ (8007100 <HAL_SPI_Init+0x240>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d004      	beq.n	8006f4c <HAL_SPI_Init+0x8c>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a6f      	ldr	r2, [pc, #444]	@ (8007104 <HAL_SPI_Init+0x244>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d104      	bne.n	8006f56 <HAL_SPI_Init+0x96>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2b10      	cmp	r3, #16
 8006f50:	d901      	bls.n	8006f56 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e0cd      	b.n	80070f2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7f9 ffd2 	bl	8000f14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 0201 	bic.w	r2, r2, #1
 8006f86:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006f92:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f9c:	d119      	bne.n	8006fd2 <HAL_SPI_Init+0x112>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fa6:	d103      	bne.n	8006fb0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d008      	beq.n	8006fc2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10c      	bne.n	8006fd2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006fbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fc0:	d107      	bne.n	8006fd2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006fd0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00f      	beq.n	8006ffe <HAL_SPI_Init+0x13e>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	2b06      	cmp	r3, #6
 8006fe4:	d90b      	bls.n	8006ffe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	e007      	b.n	800700e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800700c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69da      	ldr	r2, [r3, #28]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007016:	431a      	orrs	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007020:	ea42 0103 	orr.w	r1, r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007038:	431a      	orrs	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	431a      	orrs	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	431a      	orrs	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	431a      	orrs	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	431a      	orrs	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007062:	431a      	orrs	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800706e:	ea42 0103 	orr.w	r1, r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d113      	bne.n	80070ae <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007098:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80070ac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0201 	bic.w	r2, r2, #1
 80070bc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40013000 	.word	0x40013000
 8007100:	40003800 	.word	0x40003800
 8007104:	40003c00 	.word	0x40003c00

08007108 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af02      	add	r7, sp, #8
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	4613      	mov	r3, r2
 8007116:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3320      	adds	r3, #32
 800711e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007120:	f7fc fb8e 	bl	8003840 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b01      	cmp	r3, #1
 8007130:	d001      	beq.n	8007136 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007132:	2302      	movs	r3, #2
 8007134:	e1d1      	b.n	80074da <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <HAL_SPI_Transmit+0x3a>
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e1c9      	b.n	80074da <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_SPI_Transmit+0x4c>
 8007150:	2302      	movs	r3, #2
 8007152:	e1c2      	b.n	80074da <HAL_SPI_Transmit+0x3d2>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2203      	movs	r2, #3
 8007160:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	88fa      	ldrh	r2, [r7, #6]
 8007176:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	88fa      	ldrh	r2, [r7, #6]
 800717e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80071ac:	d108      	bne.n	80071c0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	e009      	b.n	80071d4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80071d2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	4b96      	ldr	r3, [pc, #600]	@ (8007434 <HAL_SPI_Transmit+0x32c>)
 80071dc:	4013      	ands	r3, r2
 80071de:	88f9      	ldrh	r1, [r7, #6]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	430b      	orrs	r3, r1
 80071e6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0201 	orr.w	r2, r2, #1
 80071f6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007200:	d107      	bne.n	8007212 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007210:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	2b0f      	cmp	r3, #15
 8007218:	d947      	bls.n	80072aa <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800721a:	e03f      	b.n	800729c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b02      	cmp	r3, #2
 8007228:	d114      	bne.n	8007254 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6812      	ldr	r2, [r2, #0]
 8007234:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800723a:	1d1a      	adds	r2, r3, #4
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b01      	subs	r3, #1
 800724a:	b29a      	uxth	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007252:	e023      	b.n	800729c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007254:	f7fc faf4 	bl	8003840 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	429a      	cmp	r2, r3
 8007262:	d803      	bhi.n	800726c <HAL_SPI_Transmit+0x164>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726a:	d102      	bne.n	8007272 <HAL_SPI_Transmit+0x16a>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d114      	bne.n	800729c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 fbb6 	bl	80079e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800727e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e11e      	b.n	80074da <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1b9      	bne.n	800721c <HAL_SPI_Transmit+0x114>
 80072a8:	e0f1      	b.n	800748e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	2b07      	cmp	r3, #7
 80072b0:	f240 80e6 	bls.w	8007480 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80072b4:	e05d      	b.n	8007372 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d132      	bne.n	800732a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d918      	bls.n	8007302 <HAL_SPI_Transmit+0x1fa>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d014      	beq.n	8007302 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6812      	ldr	r2, [r2, #0]
 80072e2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072e8:	1d1a      	adds	r2, r3, #4
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	3b02      	subs	r3, #2
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007300:	e037      	b.n	8007372 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007306:	881a      	ldrh	r2, [r3, #0]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007310:	1c9a      	adds	r2, r3, #2
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007328:	e023      	b.n	8007372 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800732a:	f7fc fa89 	bl	8003840 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d803      	bhi.n	8007342 <HAL_SPI_Transmit+0x23a>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007340:	d102      	bne.n	8007348 <HAL_SPI_Transmit+0x240>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d114      	bne.n	8007372 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 fb4b 	bl	80079e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007354:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e0b3      	b.n	80074da <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007378:	b29b      	uxth	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d19b      	bne.n	80072b6 <HAL_SPI_Transmit+0x1ae>
 800737e:	e086      	b.n	800748e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b02      	cmp	r3, #2
 800738c:	d154      	bne.n	8007438 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007394:	b29b      	uxth	r3, r3
 8007396:	2b03      	cmp	r3, #3
 8007398:	d918      	bls.n	80073cc <HAL_SPI_Transmit+0x2c4>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800739e:	2b40      	cmp	r3, #64	@ 0x40
 80073a0:	d914      	bls.n	80073cc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b2:	1d1a      	adds	r2, r3, #4
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80073be:	b29b      	uxth	r3, r3
 80073c0:	3b04      	subs	r3, #4
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80073ca:	e059      	b.n	8007480 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d917      	bls.n	8007408 <HAL_SPI_Transmit+0x300>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d013      	beq.n	8007408 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073e4:	881a      	ldrh	r2, [r3, #0]
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073ee:	1c9a      	adds	r2, r3, #2
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	3b02      	subs	r3, #2
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007406:	e03b      	b.n	8007480 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3320      	adds	r3, #32
 8007412:	7812      	ldrb	r2, [r2, #0]
 8007414:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007426:	b29b      	uxth	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007432:	e025      	b.n	8007480 <HAL_SPI_Transmit+0x378>
 8007434:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007438:	f7fc fa02 	bl	8003840 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d803      	bhi.n	8007450 <HAL_SPI_Transmit+0x348>
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744e:	d102      	bne.n	8007456 <HAL_SPI_Transmit+0x34e>
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d114      	bne.n	8007480 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f000 fac4 	bl	80079e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007462:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e02c      	b.n	80074da <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007486:	b29b      	uxth	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	f47f af79 	bne.w	8007380 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2200      	movs	r2, #0
 8007496:	2108      	movs	r1, #8
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 fb43 	bl	8007b24 <SPI_WaitOnFlagUntilTimeout>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d007      	beq.n	80074b4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074aa:	f043 0220 	orr.w	r2, r3, #32
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 fa95 	bl	80079e4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e000      	b.n	80074da <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80074d8:	2300      	movs	r3, #0
  }
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop

080074e4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	4613      	mov	r3, r2
 80074f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f8:	095b      	lsrs	r3, r3, #5
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	3301      	adds	r3, #1
 80074fe:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3330      	adds	r3, #48	@ 0x30
 8007506:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007508:	f7fc f99a 	bl	8003840 <HAL_GetTick>
 800750c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b01      	cmp	r3, #1
 8007518:	d001      	beq.n	800751e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800751a:	2302      	movs	r3, #2
 800751c:	e250      	b.n	80079c0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <HAL_SPI_Receive+0x46>
 8007524:	88fb      	ldrh	r3, [r7, #6]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e248      	b.n	80079c0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <HAL_SPI_Receive+0x58>
 8007538:	2302      	movs	r3, #2
 800753a:	e241      	b.n	80079c0 <HAL_SPI_Receive+0x4dc>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2204      	movs	r2, #4
 8007548:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	88fa      	ldrh	r2, [r7, #6]
 800755e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	88fa      	ldrh	r2, [r7, #6]
 8007566:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007594:	d108      	bne.n	80075a8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	e009      	b.n	80075bc <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80075ba:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	4b95      	ldr	r3, [pc, #596]	@ (8007818 <HAL_SPI_Receive+0x334>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	88f9      	ldrh	r1, [r7, #6]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	6812      	ldr	r2, [r2, #0]
 80075cc:	430b      	orrs	r3, r1
 80075ce:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0201 	orr.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075e8:	d107      	bne.n	80075fa <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	2b0f      	cmp	r3, #15
 8007600:	d96c      	bls.n	80076dc <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007602:	e064      	b.n	80076ce <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b01      	cmp	r3, #1
 8007618:	d114      	bne.n	8007644 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007622:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007624:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800762a:	1d1a      	adds	r2, r3, #4
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007636:	b29b      	uxth	r3, r3
 8007638:	3b01      	subs	r3, #1
 800763a:	b29a      	uxth	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007642:	e044      	b.n	80076ce <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800764a:	b29b      	uxth	r3, r3
 800764c:	8bfa      	ldrh	r2, [r7, #30]
 800764e:	429a      	cmp	r2, r3
 8007650:	d919      	bls.n	8007686 <HAL_SPI_Receive+0x1a2>
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d014      	beq.n	8007686 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007664:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007666:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800766c:	1d1a      	adds	r2, r3, #4
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007684:	e023      	b.n	80076ce <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007686:	f7fc f8db 	bl	8003840 <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d803      	bhi.n	800769e <HAL_SPI_Receive+0x1ba>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769c:	d102      	bne.n	80076a4 <HAL_SPI_Receive+0x1c0>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d114      	bne.n	80076ce <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 f99d 	bl	80079e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e178      	b.n	80079c0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d194      	bne.n	8007604 <HAL_SPI_Receive+0x120>
 80076da:	e15e      	b.n	800799a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	2b07      	cmp	r3, #7
 80076e2:	f240 8153 	bls.w	800798c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80076e6:	e08f      	b.n	8007808 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d114      	bne.n	8007728 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	8812      	ldrh	r2, [r2, #0]
 8007706:	b292      	uxth	r2, r2
 8007708:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800770e:	1c9a      	adds	r2, r3, #2
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800771a:	b29b      	uxth	r3, r3
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007726:	e06f      	b.n	8007808 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800772e:	b29b      	uxth	r3, r3
 8007730:	8bfa      	ldrh	r2, [r7, #30]
 8007732:	429a      	cmp	r2, r3
 8007734:	d924      	bls.n	8007780 <HAL_SPI_Receive+0x29c>
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01f      	beq.n	8007780 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	8812      	ldrh	r2, [r2, #0]
 8007748:	b292      	uxth	r2, r2
 800774a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007750:	1c9a      	adds	r2, r3, #2
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	8812      	ldrh	r2, [r2, #0]
 800775e:	b292      	uxth	r2, r2
 8007760:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007766:	1c9a      	adds	r2, r3, #2
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007772:	b29b      	uxth	r3, r3
 8007774:	3b02      	subs	r3, #2
 8007776:	b29a      	uxth	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800777e:	e043      	b.n	8007808 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007786:	b29b      	uxth	r3, r3
 8007788:	2b01      	cmp	r3, #1
 800778a:	d119      	bne.n	80077c0 <HAL_SPI_Receive+0x2dc>
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d014      	beq.n	80077c0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	8812      	ldrh	r2, [r2, #0]
 800779e:	b292      	uxth	r2, r2
 80077a0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077a6:	1c9a      	adds	r2, r3, #2
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	3b01      	subs	r3, #1
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80077be:	e023      	b.n	8007808 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077c0:	f7fc f83e 	bl	8003840 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d803      	bhi.n	80077d8 <HAL_SPI_Receive+0x2f4>
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d6:	d102      	bne.n	80077de <HAL_SPI_Receive+0x2fa>
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d114      	bne.n	8007808 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 f900 	bl	80079e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e0db      	b.n	80079c0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800780e:	b29b      	uxth	r3, r3
 8007810:	2b00      	cmp	r3, #0
 8007812:	f47f af69 	bne.w	80076e8 <HAL_SPI_Receive+0x204>
 8007816:	e0c0      	b.n	800799a <HAL_SPI_Receive+0x4b6>
 8007818:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b01      	cmp	r3, #1
 8007830:	d117      	bne.n	8007862 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800783e:	7812      	ldrb	r2, [r2, #0]
 8007840:	b2d2      	uxtb	r2, r2
 8007842:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007854:	b29b      	uxth	r3, r3
 8007856:	3b01      	subs	r3, #1
 8007858:	b29a      	uxth	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007860:	e094      	b.n	800798c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007868:	b29b      	uxth	r3, r3
 800786a:	8bfa      	ldrh	r2, [r7, #30]
 800786c:	429a      	cmp	r2, r3
 800786e:	d946      	bls.n	80078fe <HAL_SPI_Receive+0x41a>
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d041      	beq.n	80078fe <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007886:	7812      	ldrb	r2, [r2, #0]
 8007888:	b2d2      	uxtb	r2, r2
 800788a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078a2:	7812      	ldrb	r2, [r2, #0]
 80078a4:	b2d2      	uxtb	r2, r2
 80078a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ac:	1c5a      	adds	r2, r3, #1
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078be:	7812      	ldrb	r2, [r2, #0]
 80078c0:	b2d2      	uxtb	r2, r2
 80078c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078da:	7812      	ldrb	r2, [r2, #0]
 80078dc:	b2d2      	uxtb	r2, r2
 80078de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	3b04      	subs	r3, #4
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80078fc:	e046      	b.n	800798c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b03      	cmp	r3, #3
 8007908:	d81c      	bhi.n	8007944 <HAL_SPI_Receive+0x460>
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d017      	beq.n	8007944 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007920:	7812      	ldrb	r2, [r2, #0]
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007936:	b29b      	uxth	r3, r3
 8007938:	3b01      	subs	r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007942:	e023      	b.n	800798c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007944:	f7fb ff7c 	bl	8003840 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	429a      	cmp	r2, r3
 8007952:	d803      	bhi.n	800795c <HAL_SPI_Receive+0x478>
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795a:	d102      	bne.n	8007962 <HAL_SPI_Receive+0x47e>
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d114      	bne.n	800798c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 f83e 	bl	80079e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800796e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e019      	b.n	80079c0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007992:	b29b      	uxth	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	f47f af41 	bne.w	800781c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 f822 	bl	80079e4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e000      	b.n	80079c0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80079be:	2300      	movs	r3, #0
  }
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3720      	adds	r7, #32
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80079d6:	b2db      	uxtb	r3, r3
}
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699a      	ldr	r2, [r3, #24]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f042 0208 	orr.w	r2, r2, #8
 8007a02:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699a      	ldr	r2, [r3, #24]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0210 	orr.w	r2, r2, #16
 8007a12:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f022 0201 	bic.w	r2, r2, #1
 8007a22:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6919      	ldr	r1, [r3, #16]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	4b3c      	ldr	r3, [pc, #240]	@ (8007b20 <SPI_CloseTransfer+0x13c>)
 8007a30:	400b      	ands	r3, r1
 8007a32:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007a42:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	d014      	beq.n	8007a7a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f003 0320 	and.w	r3, r3, #32
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00f      	beq.n	8007a7a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a60:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	699a      	ldr	r2, [r3, #24]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f042 0220 	orr.w	r2, r2, #32
 8007a78:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d014      	beq.n	8007ab0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00f      	beq.n	8007ab0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a96:	f043 0204 	orr.w	r2, r3, #4
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699a      	ldr	r2, [r3, #24]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007aae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00f      	beq.n	8007ada <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ac0:	f043 0201 	orr.w	r2, r3, #1
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	699a      	ldr	r2, [r3, #24]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ad8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00f      	beq.n	8007b04 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007aea:	f043 0208 	orr.w	r2, r3, #8
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699a      	ldr	r2, [r3, #24]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b02:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007b14:	bf00      	nop
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	fffffc90 	.word	0xfffffc90

08007b24 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	603b      	str	r3, [r7, #0]
 8007b30:	4613      	mov	r3, r2
 8007b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007b34:	e010      	b.n	8007b58 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b36:	f7fb fe83 	bl	8003840 <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d803      	bhi.n	8007b4e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4c:	d102      	bne.n	8007b54 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e00f      	b.n	8007b78 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	695a      	ldr	r2, [r3, #20]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	4013      	ands	r3, r2
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	bf0c      	ite	eq
 8007b68:	2301      	moveq	r3, #1
 8007b6a:	2300      	movne	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	461a      	mov	r2, r3
 8007b70:	79fb      	ldrb	r3, [r7, #7]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d0df      	beq.n	8007b36 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b8c:	095b      	lsrs	r3, r3, #5
 8007b8e:	3301      	adds	r3, #1
 8007b90:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	3301      	adds	r3, #1
 8007b98:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	3307      	adds	r3, #7
 8007b9e:	08db      	lsrs	r3, r3, #3
 8007ba0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	fb02 f303 	mul.w	r3, r2, r3
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b082      	sub	sp, #8
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e049      	b.n	8007c5c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d106      	bne.n	8007be2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7f9 fcb7 	bl	8001550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2202      	movs	r2, #2
 8007be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	f000 fa09 	bl	800800c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e049      	b.n	8007d0a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d106      	bne.n	8007c90 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f841 	bl	8007d12 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2202      	movs	r2, #2
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	f000 f9b2 	bl	800800c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
	...

08007d28 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d101      	bne.n	8007d46 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007d42:	2302      	movs	r3, #2
 8007d44:	e066      	b.n	8007e14 <HAL_TIM_OC_ConfigChannel+0xec>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b14      	cmp	r3, #20
 8007d52:	d857      	bhi.n	8007e04 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007d54:	a201      	add	r2, pc, #4	@ (adr r2, 8007d5c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5a:	bf00      	nop
 8007d5c:	08007db1 	.word	0x08007db1
 8007d60:	08007e05 	.word	0x08007e05
 8007d64:	08007e05 	.word	0x08007e05
 8007d68:	08007e05 	.word	0x08007e05
 8007d6c:	08007dbf 	.word	0x08007dbf
 8007d70:	08007e05 	.word	0x08007e05
 8007d74:	08007e05 	.word	0x08007e05
 8007d78:	08007e05 	.word	0x08007e05
 8007d7c:	08007dcd 	.word	0x08007dcd
 8007d80:	08007e05 	.word	0x08007e05
 8007d84:	08007e05 	.word	0x08007e05
 8007d88:	08007e05 	.word	0x08007e05
 8007d8c:	08007ddb 	.word	0x08007ddb
 8007d90:	08007e05 	.word	0x08007e05
 8007d94:	08007e05 	.word	0x08007e05
 8007d98:	08007e05 	.word	0x08007e05
 8007d9c:	08007de9 	.word	0x08007de9
 8007da0:	08007e05 	.word	0x08007e05
 8007da4:	08007e05 	.word	0x08007e05
 8007da8:	08007e05 	.word	0x08007e05
 8007dac:	08007df7 	.word	0x08007df7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68b9      	ldr	r1, [r7, #8]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 f9ce 	bl	8008158 <TIM_OC1_SetConfig>
      break;
 8007dbc:	e025      	b.n	8007e0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68b9      	ldr	r1, [r7, #8]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 fa57 	bl	8008278 <TIM_OC2_SetConfig>
      break;
 8007dca:	e01e      	b.n	8007e0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68b9      	ldr	r1, [r7, #8]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fada 	bl	800838c <TIM_OC3_SetConfig>
      break;
 8007dd8:	e017      	b.n	8007e0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 fb5b 	bl	800849c <TIM_OC4_SetConfig>
      break;
 8007de6:	e010      	b.n	8007e0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 fbbe 	bl	8008570 <TIM_OC5_SetConfig>
      break;
 8007df4:	e009      	b.n	8007e0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68b9      	ldr	r1, [r7, #8]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 fc1b 	bl	8008638 <TIM_OC6_SetConfig>
      break;
 8007e02:	e002      	b.n	8007e0a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	75fb      	strb	r3, [r7, #23]
      break;
 8007e08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d101      	bne.n	8007e38 <HAL_TIM_ConfigClockSource+0x1c>
 8007e34:	2302      	movs	r3, #2
 8007e36:	e0dc      	b.n	8007ff2 <HAL_TIM_ConfigClockSource+0x1d6>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2202      	movs	r2, #2
 8007e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	4b6a      	ldr	r3, [pc, #424]	@ (8007ffc <HAL_TIM_ConfigClockSource+0x1e0>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a64      	ldr	r2, [pc, #400]	@ (8008000 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	f000 80a9 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e74:	4a62      	ldr	r2, [pc, #392]	@ (8008000 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	f200 80ae 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e7c:	4a61      	ldr	r2, [pc, #388]	@ (8008004 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	f000 80a1 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e84:	4a5f      	ldr	r2, [pc, #380]	@ (8008004 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	f200 80a6 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e8c:	4a5e      	ldr	r2, [pc, #376]	@ (8008008 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	f000 8099 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e94:	4a5c      	ldr	r2, [pc, #368]	@ (8008008 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	f200 809e 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e9c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007ea0:	f000 8091 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ea4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007ea8:	f200 8096 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007eac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eb0:	f000 8089 	beq.w	8007fc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007eb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eb8:	f200 808e 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec0:	d03e      	beq.n	8007f40 <HAL_TIM_ConfigClockSource+0x124>
 8007ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec6:	f200 8087 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ece:	f000 8086 	beq.w	8007fde <HAL_TIM_ConfigClockSource+0x1c2>
 8007ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed6:	d87f      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ed8:	2b70      	cmp	r3, #112	@ 0x70
 8007eda:	d01a      	beq.n	8007f12 <HAL_TIM_ConfigClockSource+0xf6>
 8007edc:	2b70      	cmp	r3, #112	@ 0x70
 8007ede:	d87b      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ee0:	2b60      	cmp	r3, #96	@ 0x60
 8007ee2:	d050      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x16a>
 8007ee4:	2b60      	cmp	r3, #96	@ 0x60
 8007ee6:	d877      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ee8:	2b50      	cmp	r3, #80	@ 0x50
 8007eea:	d03c      	beq.n	8007f66 <HAL_TIM_ConfigClockSource+0x14a>
 8007eec:	2b50      	cmp	r3, #80	@ 0x50
 8007eee:	d873      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ef0:	2b40      	cmp	r3, #64	@ 0x40
 8007ef2:	d058      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x18a>
 8007ef4:	2b40      	cmp	r3, #64	@ 0x40
 8007ef6:	d86f      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ef8:	2b30      	cmp	r3, #48	@ 0x30
 8007efa:	d064      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007efc:	2b30      	cmp	r3, #48	@ 0x30
 8007efe:	d86b      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007f00:	2b20      	cmp	r3, #32
 8007f02:	d060      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d867      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d05c      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007f0c:	2b10      	cmp	r3, #16
 8007f0e:	d05a      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007f10:	e062      	b.n	8007fd8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f22:	f000 fc6d 	bl	8008800 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	609a      	str	r2, [r3, #8]
      break;
 8007f3e:	e04f      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f50:	f000 fc56 	bl	8008800 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f62:	609a      	str	r2, [r3, #8]
      break;
 8007f64:	e03c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f72:	461a      	mov	r2, r3
 8007f74:	f000 fbc6 	bl	8008704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2150      	movs	r1, #80	@ 0x50
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fc20 	bl	80087c4 <TIM_ITRx_SetConfig>
      break;
 8007f84:	e02c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f92:	461a      	mov	r2, r3
 8007f94:	f000 fbe5 	bl	8008762 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2160      	movs	r1, #96	@ 0x60
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fc10 	bl	80087c4 <TIM_ITRx_SetConfig>
      break;
 8007fa4:	e01c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f000 fba6 	bl	8008704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2140      	movs	r1, #64	@ 0x40
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 fc00 	bl	80087c4 <TIM_ITRx_SetConfig>
      break;
 8007fc4:	e00c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	f000 fbf7 	bl	80087c4 <TIM_ITRx_SetConfig>
      break;
 8007fd6:	e003      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	73fb      	strb	r3, [r7, #15]
      break;
 8007fdc:	e000      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	ffceff88 	.word	0xffceff88
 8008000:	00100040 	.word	0x00100040
 8008004:	00100030 	.word	0x00100030
 8008008:	00100020 	.word	0x00100020

0800800c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a46      	ldr	r2, [pc, #280]	@ (8008138 <TIM_Base_SetConfig+0x12c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d013      	beq.n	800804c <TIM_Base_SetConfig+0x40>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800802a:	d00f      	beq.n	800804c <TIM_Base_SetConfig+0x40>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a43      	ldr	r2, [pc, #268]	@ (800813c <TIM_Base_SetConfig+0x130>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d00b      	beq.n	800804c <TIM_Base_SetConfig+0x40>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a42      	ldr	r2, [pc, #264]	@ (8008140 <TIM_Base_SetConfig+0x134>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d007      	beq.n	800804c <TIM_Base_SetConfig+0x40>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a41      	ldr	r2, [pc, #260]	@ (8008144 <TIM_Base_SetConfig+0x138>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d003      	beq.n	800804c <TIM_Base_SetConfig+0x40>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a40      	ldr	r2, [pc, #256]	@ (8008148 <TIM_Base_SetConfig+0x13c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d108      	bne.n	800805e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a35      	ldr	r2, [pc, #212]	@ (8008138 <TIM_Base_SetConfig+0x12c>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d01f      	beq.n	80080a6 <TIM_Base_SetConfig+0x9a>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800806c:	d01b      	beq.n	80080a6 <TIM_Base_SetConfig+0x9a>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a32      	ldr	r2, [pc, #200]	@ (800813c <TIM_Base_SetConfig+0x130>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d017      	beq.n	80080a6 <TIM_Base_SetConfig+0x9a>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a31      	ldr	r2, [pc, #196]	@ (8008140 <TIM_Base_SetConfig+0x134>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d013      	beq.n	80080a6 <TIM_Base_SetConfig+0x9a>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a30      	ldr	r2, [pc, #192]	@ (8008144 <TIM_Base_SetConfig+0x138>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d00f      	beq.n	80080a6 <TIM_Base_SetConfig+0x9a>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a2f      	ldr	r2, [pc, #188]	@ (8008148 <TIM_Base_SetConfig+0x13c>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d00b      	beq.n	80080a6 <TIM_Base_SetConfig+0x9a>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a2e      	ldr	r2, [pc, #184]	@ (800814c <TIM_Base_SetConfig+0x140>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d007      	beq.n	80080a6 <TIM_Base_SetConfig+0x9a>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a2d      	ldr	r2, [pc, #180]	@ (8008150 <TIM_Base_SetConfig+0x144>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d003      	beq.n	80080a6 <TIM_Base_SetConfig+0x9a>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a2c      	ldr	r2, [pc, #176]	@ (8008154 <TIM_Base_SetConfig+0x148>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d108      	bne.n	80080b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a16      	ldr	r2, [pc, #88]	@ (8008138 <TIM_Base_SetConfig+0x12c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d00f      	beq.n	8008104 <TIM_Base_SetConfig+0xf8>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a18      	ldr	r2, [pc, #96]	@ (8008148 <TIM_Base_SetConfig+0x13c>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d00b      	beq.n	8008104 <TIM_Base_SetConfig+0xf8>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a17      	ldr	r2, [pc, #92]	@ (800814c <TIM_Base_SetConfig+0x140>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d007      	beq.n	8008104 <TIM_Base_SetConfig+0xf8>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a16      	ldr	r2, [pc, #88]	@ (8008150 <TIM_Base_SetConfig+0x144>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d003      	beq.n	8008104 <TIM_Base_SetConfig+0xf8>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a15      	ldr	r2, [pc, #84]	@ (8008154 <TIM_Base_SetConfig+0x148>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d103      	bne.n	800810c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	691a      	ldr	r2, [r3, #16]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b01      	cmp	r3, #1
 800811c:	d105      	bne.n	800812a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	f023 0201 	bic.w	r2, r3, #1
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	611a      	str	r2, [r3, #16]
  }
}
 800812a:	bf00      	nop
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	40010000 	.word	0x40010000
 800813c:	40000400 	.word	0x40000400
 8008140:	40000800 	.word	0x40000800
 8008144:	40000c00 	.word	0x40000c00
 8008148:	40010400 	.word	0x40010400
 800814c:	40014000 	.word	0x40014000
 8008150:	40014400 	.word	0x40014400
 8008154:	40014800 	.word	0x40014800

08008158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	f023 0201 	bic.w	r2, r3, #1
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4b37      	ldr	r3, [pc, #220]	@ (8008260 <TIM_OC1_SetConfig+0x108>)
 8008184:	4013      	ands	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 0303 	bic.w	r3, r3, #3
 800818e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	4313      	orrs	r3, r2
 8008198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f023 0302 	bic.w	r3, r3, #2
 80081a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a2d      	ldr	r2, [pc, #180]	@ (8008264 <TIM_OC1_SetConfig+0x10c>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d00f      	beq.n	80081d4 <TIM_OC1_SetConfig+0x7c>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a2c      	ldr	r2, [pc, #176]	@ (8008268 <TIM_OC1_SetConfig+0x110>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d00b      	beq.n	80081d4 <TIM_OC1_SetConfig+0x7c>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a2b      	ldr	r2, [pc, #172]	@ (800826c <TIM_OC1_SetConfig+0x114>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d007      	beq.n	80081d4 <TIM_OC1_SetConfig+0x7c>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a2a      	ldr	r2, [pc, #168]	@ (8008270 <TIM_OC1_SetConfig+0x118>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d003      	beq.n	80081d4 <TIM_OC1_SetConfig+0x7c>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a29      	ldr	r2, [pc, #164]	@ (8008274 <TIM_OC1_SetConfig+0x11c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d10c      	bne.n	80081ee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f023 0308 	bic.w	r3, r3, #8
 80081da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f023 0304 	bic.w	r3, r3, #4
 80081ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008264 <TIM_OC1_SetConfig+0x10c>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d00f      	beq.n	8008216 <TIM_OC1_SetConfig+0xbe>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008268 <TIM_OC1_SetConfig+0x110>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00b      	beq.n	8008216 <TIM_OC1_SetConfig+0xbe>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a1a      	ldr	r2, [pc, #104]	@ (800826c <TIM_OC1_SetConfig+0x114>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d007      	beq.n	8008216 <TIM_OC1_SetConfig+0xbe>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a19      	ldr	r2, [pc, #100]	@ (8008270 <TIM_OC1_SetConfig+0x118>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d003      	beq.n	8008216 <TIM_OC1_SetConfig+0xbe>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a18      	ldr	r2, [pc, #96]	@ (8008274 <TIM_OC1_SetConfig+0x11c>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d111      	bne.n	800823a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800821c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	4313      	orrs	r3, r2
 800822e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	4313      	orrs	r3, r2
 8008238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	621a      	str	r2, [r3, #32]
}
 8008254:	bf00      	nop
 8008256:	371c      	adds	r7, #28
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	fffeff8f 	.word	0xfffeff8f
 8008264:	40010000 	.word	0x40010000
 8008268:	40010400 	.word	0x40010400
 800826c:	40014000 	.word	0x40014000
 8008270:	40014400 	.word	0x40014400
 8008274:	40014800 	.word	0x40014800

08008278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	f023 0210 	bic.w	r2, r3, #16
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4b34      	ldr	r3, [pc, #208]	@ (8008374 <TIM_OC2_SetConfig+0xfc>)
 80082a4:	4013      	ands	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	021b      	lsls	r3, r3, #8
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	f023 0320 	bic.w	r3, r3, #32
 80082c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	011b      	lsls	r3, r3, #4
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a29      	ldr	r2, [pc, #164]	@ (8008378 <TIM_OC2_SetConfig+0x100>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d003      	beq.n	80082e0 <TIM_OC2_SetConfig+0x68>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a28      	ldr	r2, [pc, #160]	@ (800837c <TIM_OC2_SetConfig+0x104>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d10d      	bne.n	80082fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	011b      	lsls	r3, r3, #4
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008378 <TIM_OC2_SetConfig+0x100>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d00f      	beq.n	8008324 <TIM_OC2_SetConfig+0xac>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a1d      	ldr	r2, [pc, #116]	@ (800837c <TIM_OC2_SetConfig+0x104>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00b      	beq.n	8008324 <TIM_OC2_SetConfig+0xac>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a1c      	ldr	r2, [pc, #112]	@ (8008380 <TIM_OC2_SetConfig+0x108>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d007      	beq.n	8008324 <TIM_OC2_SetConfig+0xac>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a1b      	ldr	r2, [pc, #108]	@ (8008384 <TIM_OC2_SetConfig+0x10c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d003      	beq.n	8008324 <TIM_OC2_SetConfig+0xac>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a1a      	ldr	r2, [pc, #104]	@ (8008388 <TIM_OC2_SetConfig+0x110>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d113      	bne.n	800834c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800832a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008332:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4313      	orrs	r3, r2
 800833e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4313      	orrs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	621a      	str	r2, [r3, #32]
}
 8008366:	bf00      	nop
 8008368:	371c      	adds	r7, #28
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	feff8fff 	.word	0xfeff8fff
 8008378:	40010000 	.word	0x40010000
 800837c:	40010400 	.word	0x40010400
 8008380:	40014000 	.word	0x40014000
 8008384:	40014400 	.word	0x40014400
 8008388:	40014800 	.word	0x40014800

0800838c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800838c:	b480      	push	{r7}
 800838e:	b087      	sub	sp, #28
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a1b      	ldr	r3, [r3, #32]
 80083a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4b33      	ldr	r3, [pc, #204]	@ (8008484 <TIM_OC3_SetConfig+0xf8>)
 80083b8:	4013      	ands	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 0303 	bic.w	r3, r3, #3
 80083c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	021b      	lsls	r3, r3, #8
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	4313      	orrs	r3, r2
 80083e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a28      	ldr	r2, [pc, #160]	@ (8008488 <TIM_OC3_SetConfig+0xfc>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d003      	beq.n	80083f2 <TIM_OC3_SetConfig+0x66>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a27      	ldr	r2, [pc, #156]	@ (800848c <TIM_OC3_SetConfig+0x100>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d10d      	bne.n	800840e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	021b      	lsls	r3, r3, #8
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	4313      	orrs	r3, r2
 8008404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800840c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a1d      	ldr	r2, [pc, #116]	@ (8008488 <TIM_OC3_SetConfig+0xfc>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00f      	beq.n	8008436 <TIM_OC3_SetConfig+0xaa>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a1c      	ldr	r2, [pc, #112]	@ (800848c <TIM_OC3_SetConfig+0x100>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d00b      	beq.n	8008436 <TIM_OC3_SetConfig+0xaa>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a1b      	ldr	r2, [pc, #108]	@ (8008490 <TIM_OC3_SetConfig+0x104>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d007      	beq.n	8008436 <TIM_OC3_SetConfig+0xaa>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a1a      	ldr	r2, [pc, #104]	@ (8008494 <TIM_OC3_SetConfig+0x108>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d003      	beq.n	8008436 <TIM_OC3_SetConfig+0xaa>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a19      	ldr	r2, [pc, #100]	@ (8008498 <TIM_OC3_SetConfig+0x10c>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d113      	bne.n	800845e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800843c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	011b      	lsls	r3, r3, #4
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	4313      	orrs	r3, r2
 8008450:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	011b      	lsls	r3, r3, #4
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	4313      	orrs	r3, r2
 800845c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	685a      	ldr	r2, [r3, #4]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	621a      	str	r2, [r3, #32]
}
 8008478:	bf00      	nop
 800847a:	371c      	adds	r7, #28
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	fffeff8f 	.word	0xfffeff8f
 8008488:	40010000 	.word	0x40010000
 800848c:	40010400 	.word	0x40010400
 8008490:	40014000 	.word	0x40014000
 8008494:	40014400 	.word	0x40014400
 8008498:	40014800 	.word	0x40014800

0800849c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a1b      	ldr	r3, [r3, #32]
 80084b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	4b24      	ldr	r3, [pc, #144]	@ (8008558 <TIM_OC4_SetConfig+0xbc>)
 80084c8:	4013      	ands	r3, r2
 80084ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	021b      	lsls	r3, r3, #8
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	4313      	orrs	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	031b      	lsls	r3, r3, #12
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a19      	ldr	r2, [pc, #100]	@ (800855c <TIM_OC4_SetConfig+0xc0>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d00f      	beq.n	800851c <TIM_OC4_SetConfig+0x80>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a18      	ldr	r2, [pc, #96]	@ (8008560 <TIM_OC4_SetConfig+0xc4>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d00b      	beq.n	800851c <TIM_OC4_SetConfig+0x80>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a17      	ldr	r2, [pc, #92]	@ (8008564 <TIM_OC4_SetConfig+0xc8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d007      	beq.n	800851c <TIM_OC4_SetConfig+0x80>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a16      	ldr	r2, [pc, #88]	@ (8008568 <TIM_OC4_SetConfig+0xcc>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d003      	beq.n	800851c <TIM_OC4_SetConfig+0x80>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a15      	ldr	r2, [pc, #84]	@ (800856c <TIM_OC4_SetConfig+0xd0>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d109      	bne.n	8008530 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	695b      	ldr	r3, [r3, #20]
 8008528:	019b      	lsls	r3, r3, #6
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	4313      	orrs	r3, r2
 800852e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	621a      	str	r2, [r3, #32]
}
 800854a:	bf00      	nop
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	feff8fff 	.word	0xfeff8fff
 800855c:	40010000 	.word	0x40010000
 8008560:	40010400 	.word	0x40010400
 8008564:	40014000 	.word	0x40014000
 8008568:	40014400 	.word	0x40014400
 800856c:	40014800 	.word	0x40014800

08008570 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a1b      	ldr	r3, [r3, #32]
 8008584:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	4b21      	ldr	r3, [pc, #132]	@ (8008620 <TIM_OC5_SetConfig+0xb0>)
 800859c:	4013      	ands	r3, r2
 800859e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80085b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	041b      	lsls	r3, r3, #16
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a18      	ldr	r2, [pc, #96]	@ (8008624 <TIM_OC5_SetConfig+0xb4>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d00f      	beq.n	80085e6 <TIM_OC5_SetConfig+0x76>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a17      	ldr	r2, [pc, #92]	@ (8008628 <TIM_OC5_SetConfig+0xb8>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d00b      	beq.n	80085e6 <TIM_OC5_SetConfig+0x76>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a16      	ldr	r2, [pc, #88]	@ (800862c <TIM_OC5_SetConfig+0xbc>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d007      	beq.n	80085e6 <TIM_OC5_SetConfig+0x76>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a15      	ldr	r2, [pc, #84]	@ (8008630 <TIM_OC5_SetConfig+0xc0>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d003      	beq.n	80085e6 <TIM_OC5_SetConfig+0x76>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a14      	ldr	r2, [pc, #80]	@ (8008634 <TIM_OC5_SetConfig+0xc4>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d109      	bne.n	80085fa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	021b      	lsls	r3, r3, #8
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	685a      	ldr	r2, [r3, #4]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	621a      	str	r2, [r3, #32]
}
 8008614:	bf00      	nop
 8008616:	371c      	adds	r7, #28
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr
 8008620:	fffeff8f 	.word	0xfffeff8f
 8008624:	40010000 	.word	0x40010000
 8008628:	40010400 	.word	0x40010400
 800862c:	40014000 	.word	0x40014000
 8008630:	40014400 	.word	0x40014400
 8008634:	40014800 	.word	0x40014800

08008638 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800865e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	4b22      	ldr	r3, [pc, #136]	@ (80086ec <TIM_OC6_SetConfig+0xb4>)
 8008664:	4013      	ands	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	4313      	orrs	r3, r2
 8008672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800867a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	051b      	lsls	r3, r3, #20
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	4313      	orrs	r3, r2
 8008686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a19      	ldr	r2, [pc, #100]	@ (80086f0 <TIM_OC6_SetConfig+0xb8>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d00f      	beq.n	80086b0 <TIM_OC6_SetConfig+0x78>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a18      	ldr	r2, [pc, #96]	@ (80086f4 <TIM_OC6_SetConfig+0xbc>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d00b      	beq.n	80086b0 <TIM_OC6_SetConfig+0x78>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a17      	ldr	r2, [pc, #92]	@ (80086f8 <TIM_OC6_SetConfig+0xc0>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d007      	beq.n	80086b0 <TIM_OC6_SetConfig+0x78>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a16      	ldr	r2, [pc, #88]	@ (80086fc <TIM_OC6_SetConfig+0xc4>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d003      	beq.n	80086b0 <TIM_OC6_SetConfig+0x78>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a15      	ldr	r2, [pc, #84]	@ (8008700 <TIM_OC6_SetConfig+0xc8>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d109      	bne.n	80086c4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	029b      	lsls	r3, r3, #10
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	621a      	str	r2, [r3, #32]
}
 80086de:	bf00      	nop
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	feff8fff 	.word	0xfeff8fff
 80086f0:	40010000 	.word	0x40010000
 80086f4:	40010400 	.word	0x40010400
 80086f8:	40014000 	.word	0x40014000
 80086fc:	40014400 	.word	0x40014400
 8008700:	40014800 	.word	0x40014800

08008704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	f023 0201 	bic.w	r2, r3, #1
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800872e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	011b      	lsls	r3, r3, #4
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	4313      	orrs	r3, r2
 8008738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f023 030a 	bic.w	r3, r3, #10
 8008740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	4313      	orrs	r3, r2
 8008748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	621a      	str	r2, [r3, #32]
}
 8008756:	bf00      	nop
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008762:	b480      	push	{r7}
 8008764:	b087      	sub	sp, #28
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	f023 0210 	bic.w	r2, r3, #16
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800878c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	031b      	lsls	r3, r3, #12
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	4313      	orrs	r3, r2
 8008796:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800879e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	621a      	str	r2, [r3, #32]
}
 80087b6:	bf00      	nop
 80087b8:	371c      	adds	r7, #28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
	...

080087c4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	4b09      	ldr	r3, [pc, #36]	@ (80087fc <TIM_ITRx_SetConfig+0x38>)
 80087d8:	4013      	ands	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087dc:	683a      	ldr	r2, [r7, #0]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	f043 0307 	orr.w	r3, r3, #7
 80087e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	609a      	str	r2, [r3, #8]
}
 80087ee:	bf00      	nop
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	ffcfff8f 	.word	0xffcfff8f

08008800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800881a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	021a      	lsls	r2, r3, #8
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	431a      	orrs	r2, r3
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	4313      	orrs	r3, r2
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	4313      	orrs	r3, r2
 800882c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	609a      	str	r2, [r3, #8]
}
 8008834:	bf00      	nop
 8008836:	371c      	adds	r7, #28
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008850:	2b01      	cmp	r3, #1
 8008852:	d101      	bne.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008854:	2302      	movs	r3, #2
 8008856:	e06d      	b.n	8008934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a30      	ldr	r2, [pc, #192]	@ (8008940 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d004      	beq.n	800888c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a2f      	ldr	r2, [pc, #188]	@ (8008944 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d108      	bne.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008892:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	4313      	orrs	r3, r2
 800889c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a20      	ldr	r2, [pc, #128]	@ (8008940 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d022      	beq.n	8008908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ca:	d01d      	beq.n	8008908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008948 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d018      	beq.n	8008908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a1c      	ldr	r2, [pc, #112]	@ (800894c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d013      	beq.n	8008908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a1a      	ldr	r2, [pc, #104]	@ (8008950 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d00e      	beq.n	8008908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a15      	ldr	r2, [pc, #84]	@ (8008944 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d009      	beq.n	8008908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a16      	ldr	r2, [pc, #88]	@ (8008954 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d004      	beq.n	8008908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a15      	ldr	r2, [pc, #84]	@ (8008958 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d10c      	bne.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800890e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	4313      	orrs	r3, r2
 8008918:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	40010000 	.word	0x40010000
 8008944:	40010400 	.word	0x40010400
 8008948:	40000400 	.word	0x40000400
 800894c:	40000800 	.word	0x40000800
 8008950:	40000c00 	.word	0x40000c00
 8008954:	40001800 	.word	0x40001800
 8008958:	40014000 	.word	0x40014000

0800895c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e042      	b.n	80089f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008974:	2b00      	cmp	r3, #0
 8008976:	d106      	bne.n	8008986 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7f8 fec9 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2224      	movs	r2, #36	@ 0x24
 800898a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0201 	bic.w	r2, r2, #1
 800899c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fe1e 	bl	80095e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f8b3 	bl	8008b18 <UART_SetConfig>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e01b      	b.n	80089f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689a      	ldr	r2, [r3, #8]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f042 0201 	orr.w	r2, r2, #1
 80089ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fe9d 	bl	800972c <UART_CheckIdleState>
 80089f2:	4603      	mov	r3, r0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b08a      	sub	sp, #40	@ 0x28
 8008a00:	af02      	add	r7, sp, #8
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	603b      	str	r3, [r7, #0]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a12:	2b20      	cmp	r3, #32
 8008a14:	d17b      	bne.n	8008b0e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <HAL_UART_Transmit+0x26>
 8008a1c:	88fb      	ldrh	r3, [r7, #6]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e074      	b.n	8008b10 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2221      	movs	r2, #33	@ 0x21
 8008a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a36:	f7fa ff03 	bl	8003840 <HAL_GetTick>
 8008a3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	88fa      	ldrh	r2, [r7, #6]
 8008a40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	88fa      	ldrh	r2, [r7, #6]
 8008a48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a54:	d108      	bne.n	8008a68 <HAL_UART_Transmit+0x6c>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d104      	bne.n	8008a68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	61bb      	str	r3, [r7, #24]
 8008a66:	e003      	b.n	8008a70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a70:	e030      	b.n	8008ad4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2180      	movs	r1, #128	@ 0x80
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 feff 	bl	8009880 <UART_WaitOnFlagUntilTimeout>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e03d      	b.n	8008b10 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10b      	bne.n	8008ab2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aa8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	3302      	adds	r3, #2
 8008aae:	61bb      	str	r3, [r7, #24]
 8008ab0:	e007      	b.n	8008ac2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	781a      	ldrb	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	3b01      	subs	r3, #1
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1c8      	bne.n	8008a72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2140      	movs	r1, #64	@ 0x40
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f000 fec8 	bl	8009880 <UART_WaitOnFlagUntilTimeout>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2220      	movs	r2, #32
 8008afa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e006      	b.n	8008b10 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2220      	movs	r2, #32
 8008b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	e000      	b.n	8008b10 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008b0e:	2302      	movs	r3, #2
  }
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3720      	adds	r7, #32
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b1c:	b092      	sub	sp, #72	@ 0x48
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	431a      	orrs	r2, r3
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	431a      	orrs	r2, r3
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	4bbe      	ldr	r3, [pc, #760]	@ (8008e40 <UART_SetConfig+0x328>)
 8008b48:	4013      	ands	r3, r2
 8008b4a:	697a      	ldr	r2, [r7, #20]
 8008b4c:	6812      	ldr	r2, [r2, #0]
 8008b4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b50:	430b      	orrs	r3, r1
 8008b52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	68da      	ldr	r2, [r3, #12]
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	430a      	orrs	r2, r1
 8008b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4ab3      	ldr	r2, [pc, #716]	@ (8008e44 <UART_SetConfig+0x32c>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d004      	beq.n	8008b84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b80:	4313      	orrs	r3, r2
 8008b82:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	689a      	ldr	r2, [r3, #8]
 8008b8a:	4baf      	ldr	r3, [pc, #700]	@ (8008e48 <UART_SetConfig+0x330>)
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	6812      	ldr	r2, [r2, #0]
 8008b92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b94:	430b      	orrs	r3, r1
 8008b96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9e:	f023 010f 	bic.w	r1, r3, #15
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4aa6      	ldr	r2, [pc, #664]	@ (8008e4c <UART_SetConfig+0x334>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d177      	bne.n	8008ca8 <UART_SetConfig+0x190>
 8008bb8:	4ba5      	ldr	r3, [pc, #660]	@ (8008e50 <UART_SetConfig+0x338>)
 8008bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bc0:	2b28      	cmp	r3, #40	@ 0x28
 8008bc2:	d86d      	bhi.n	8008ca0 <UART_SetConfig+0x188>
 8008bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8008bcc <UART_SetConfig+0xb4>)
 8008bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bca:	bf00      	nop
 8008bcc:	08008c71 	.word	0x08008c71
 8008bd0:	08008ca1 	.word	0x08008ca1
 8008bd4:	08008ca1 	.word	0x08008ca1
 8008bd8:	08008ca1 	.word	0x08008ca1
 8008bdc:	08008ca1 	.word	0x08008ca1
 8008be0:	08008ca1 	.word	0x08008ca1
 8008be4:	08008ca1 	.word	0x08008ca1
 8008be8:	08008ca1 	.word	0x08008ca1
 8008bec:	08008c79 	.word	0x08008c79
 8008bf0:	08008ca1 	.word	0x08008ca1
 8008bf4:	08008ca1 	.word	0x08008ca1
 8008bf8:	08008ca1 	.word	0x08008ca1
 8008bfc:	08008ca1 	.word	0x08008ca1
 8008c00:	08008ca1 	.word	0x08008ca1
 8008c04:	08008ca1 	.word	0x08008ca1
 8008c08:	08008ca1 	.word	0x08008ca1
 8008c0c:	08008c81 	.word	0x08008c81
 8008c10:	08008ca1 	.word	0x08008ca1
 8008c14:	08008ca1 	.word	0x08008ca1
 8008c18:	08008ca1 	.word	0x08008ca1
 8008c1c:	08008ca1 	.word	0x08008ca1
 8008c20:	08008ca1 	.word	0x08008ca1
 8008c24:	08008ca1 	.word	0x08008ca1
 8008c28:	08008ca1 	.word	0x08008ca1
 8008c2c:	08008c89 	.word	0x08008c89
 8008c30:	08008ca1 	.word	0x08008ca1
 8008c34:	08008ca1 	.word	0x08008ca1
 8008c38:	08008ca1 	.word	0x08008ca1
 8008c3c:	08008ca1 	.word	0x08008ca1
 8008c40:	08008ca1 	.word	0x08008ca1
 8008c44:	08008ca1 	.word	0x08008ca1
 8008c48:	08008ca1 	.word	0x08008ca1
 8008c4c:	08008c91 	.word	0x08008c91
 8008c50:	08008ca1 	.word	0x08008ca1
 8008c54:	08008ca1 	.word	0x08008ca1
 8008c58:	08008ca1 	.word	0x08008ca1
 8008c5c:	08008ca1 	.word	0x08008ca1
 8008c60:	08008ca1 	.word	0x08008ca1
 8008c64:	08008ca1 	.word	0x08008ca1
 8008c68:	08008ca1 	.word	0x08008ca1
 8008c6c:	08008c99 	.word	0x08008c99
 8008c70:	2301      	movs	r3, #1
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c76:	e222      	b.n	80090be <UART_SetConfig+0x5a6>
 8008c78:	2304      	movs	r3, #4
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7e:	e21e      	b.n	80090be <UART_SetConfig+0x5a6>
 8008c80:	2308      	movs	r3, #8
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c86:	e21a      	b.n	80090be <UART_SetConfig+0x5a6>
 8008c88:	2310      	movs	r3, #16
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8e:	e216      	b.n	80090be <UART_SetConfig+0x5a6>
 8008c90:	2320      	movs	r3, #32
 8008c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c96:	e212      	b.n	80090be <UART_SetConfig+0x5a6>
 8008c98:	2340      	movs	r3, #64	@ 0x40
 8008c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9e:	e20e      	b.n	80090be <UART_SetConfig+0x5a6>
 8008ca0:	2380      	movs	r3, #128	@ 0x80
 8008ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca6:	e20a      	b.n	80090be <UART_SetConfig+0x5a6>
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a69      	ldr	r2, [pc, #420]	@ (8008e54 <UART_SetConfig+0x33c>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d130      	bne.n	8008d14 <UART_SetConfig+0x1fc>
 8008cb2:	4b67      	ldr	r3, [pc, #412]	@ (8008e50 <UART_SetConfig+0x338>)
 8008cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	2b05      	cmp	r3, #5
 8008cbc:	d826      	bhi.n	8008d0c <UART_SetConfig+0x1f4>
 8008cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008cc4 <UART_SetConfig+0x1ac>)
 8008cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc4:	08008cdd 	.word	0x08008cdd
 8008cc8:	08008ce5 	.word	0x08008ce5
 8008ccc:	08008ced 	.word	0x08008ced
 8008cd0:	08008cf5 	.word	0x08008cf5
 8008cd4:	08008cfd 	.word	0x08008cfd
 8008cd8:	08008d05 	.word	0x08008d05
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce2:	e1ec      	b.n	80090be <UART_SetConfig+0x5a6>
 8008ce4:	2304      	movs	r3, #4
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e1e8      	b.n	80090be <UART_SetConfig+0x5a6>
 8008cec:	2308      	movs	r3, #8
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e1e4      	b.n	80090be <UART_SetConfig+0x5a6>
 8008cf4:	2310      	movs	r3, #16
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfa:	e1e0      	b.n	80090be <UART_SetConfig+0x5a6>
 8008cfc:	2320      	movs	r3, #32
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d02:	e1dc      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d04:	2340      	movs	r3, #64	@ 0x40
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0a:	e1d8      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d0c:	2380      	movs	r3, #128	@ 0x80
 8008d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d12:	e1d4      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a4f      	ldr	r2, [pc, #316]	@ (8008e58 <UART_SetConfig+0x340>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d130      	bne.n	8008d80 <UART_SetConfig+0x268>
 8008d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8008e50 <UART_SetConfig+0x338>)
 8008d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d22:	f003 0307 	and.w	r3, r3, #7
 8008d26:	2b05      	cmp	r3, #5
 8008d28:	d826      	bhi.n	8008d78 <UART_SetConfig+0x260>
 8008d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d30 <UART_SetConfig+0x218>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d49 	.word	0x08008d49
 8008d34:	08008d51 	.word	0x08008d51
 8008d38:	08008d59 	.word	0x08008d59
 8008d3c:	08008d61 	.word	0x08008d61
 8008d40:	08008d69 	.word	0x08008d69
 8008d44:	08008d71 	.word	0x08008d71
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4e:	e1b6      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d50:	2304      	movs	r3, #4
 8008d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d56:	e1b2      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d58:	2308      	movs	r3, #8
 8008d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5e:	e1ae      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d60:	2310      	movs	r3, #16
 8008d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d66:	e1aa      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d68:	2320      	movs	r3, #32
 8008d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6e:	e1a6      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d70:	2340      	movs	r3, #64	@ 0x40
 8008d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d76:	e1a2      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d78:	2380      	movs	r3, #128	@ 0x80
 8008d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7e:	e19e      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a35      	ldr	r2, [pc, #212]	@ (8008e5c <UART_SetConfig+0x344>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d130      	bne.n	8008dec <UART_SetConfig+0x2d4>
 8008d8a:	4b31      	ldr	r3, [pc, #196]	@ (8008e50 <UART_SetConfig+0x338>)
 8008d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8e:	f003 0307 	and.w	r3, r3, #7
 8008d92:	2b05      	cmp	r3, #5
 8008d94:	d826      	bhi.n	8008de4 <UART_SetConfig+0x2cc>
 8008d96:	a201      	add	r2, pc, #4	@ (adr r2, 8008d9c <UART_SetConfig+0x284>)
 8008d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9c:	08008db5 	.word	0x08008db5
 8008da0:	08008dbd 	.word	0x08008dbd
 8008da4:	08008dc5 	.word	0x08008dc5
 8008da8:	08008dcd 	.word	0x08008dcd
 8008dac:	08008dd5 	.word	0x08008dd5
 8008db0:	08008ddd 	.word	0x08008ddd
 8008db4:	2300      	movs	r3, #0
 8008db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dba:	e180      	b.n	80090be <UART_SetConfig+0x5a6>
 8008dbc:	2304      	movs	r3, #4
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc2:	e17c      	b.n	80090be <UART_SetConfig+0x5a6>
 8008dc4:	2308      	movs	r3, #8
 8008dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dca:	e178      	b.n	80090be <UART_SetConfig+0x5a6>
 8008dcc:	2310      	movs	r3, #16
 8008dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dd2:	e174      	b.n	80090be <UART_SetConfig+0x5a6>
 8008dd4:	2320      	movs	r3, #32
 8008dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dda:	e170      	b.n	80090be <UART_SetConfig+0x5a6>
 8008ddc:	2340      	movs	r3, #64	@ 0x40
 8008dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de2:	e16c      	b.n	80090be <UART_SetConfig+0x5a6>
 8008de4:	2380      	movs	r3, #128	@ 0x80
 8008de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dea:	e168      	b.n	80090be <UART_SetConfig+0x5a6>
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a1b      	ldr	r2, [pc, #108]	@ (8008e60 <UART_SetConfig+0x348>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d142      	bne.n	8008e7c <UART_SetConfig+0x364>
 8008df6:	4b16      	ldr	r3, [pc, #88]	@ (8008e50 <UART_SetConfig+0x338>)
 8008df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	2b05      	cmp	r3, #5
 8008e00:	d838      	bhi.n	8008e74 <UART_SetConfig+0x35c>
 8008e02:	a201      	add	r2, pc, #4	@ (adr r2, 8008e08 <UART_SetConfig+0x2f0>)
 8008e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e08:	08008e21 	.word	0x08008e21
 8008e0c:	08008e29 	.word	0x08008e29
 8008e10:	08008e31 	.word	0x08008e31
 8008e14:	08008e39 	.word	0x08008e39
 8008e18:	08008e65 	.word	0x08008e65
 8008e1c:	08008e6d 	.word	0x08008e6d
 8008e20:	2300      	movs	r3, #0
 8008e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e26:	e14a      	b.n	80090be <UART_SetConfig+0x5a6>
 8008e28:	2304      	movs	r3, #4
 8008e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2e:	e146      	b.n	80090be <UART_SetConfig+0x5a6>
 8008e30:	2308      	movs	r3, #8
 8008e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e36:	e142      	b.n	80090be <UART_SetConfig+0x5a6>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3e:	e13e      	b.n	80090be <UART_SetConfig+0x5a6>
 8008e40:	cfff69f3 	.word	0xcfff69f3
 8008e44:	58000c00 	.word	0x58000c00
 8008e48:	11fff4ff 	.word	0x11fff4ff
 8008e4c:	40011000 	.word	0x40011000
 8008e50:	58024400 	.word	0x58024400
 8008e54:	40004400 	.word	0x40004400
 8008e58:	40004800 	.word	0x40004800
 8008e5c:	40004c00 	.word	0x40004c00
 8008e60:	40005000 	.word	0x40005000
 8008e64:	2320      	movs	r3, #32
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6a:	e128      	b.n	80090be <UART_SetConfig+0x5a6>
 8008e6c:	2340      	movs	r3, #64	@ 0x40
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e72:	e124      	b.n	80090be <UART_SetConfig+0x5a6>
 8008e74:	2380      	movs	r3, #128	@ 0x80
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7a:	e120      	b.n	80090be <UART_SetConfig+0x5a6>
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4acb      	ldr	r2, [pc, #812]	@ (80091b0 <UART_SetConfig+0x698>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d176      	bne.n	8008f74 <UART_SetConfig+0x45c>
 8008e86:	4bcb      	ldr	r3, [pc, #812]	@ (80091b4 <UART_SetConfig+0x69c>)
 8008e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e8e:	2b28      	cmp	r3, #40	@ 0x28
 8008e90:	d86c      	bhi.n	8008f6c <UART_SetConfig+0x454>
 8008e92:	a201      	add	r2, pc, #4	@ (adr r2, 8008e98 <UART_SetConfig+0x380>)
 8008e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e98:	08008f3d 	.word	0x08008f3d
 8008e9c:	08008f6d 	.word	0x08008f6d
 8008ea0:	08008f6d 	.word	0x08008f6d
 8008ea4:	08008f6d 	.word	0x08008f6d
 8008ea8:	08008f6d 	.word	0x08008f6d
 8008eac:	08008f6d 	.word	0x08008f6d
 8008eb0:	08008f6d 	.word	0x08008f6d
 8008eb4:	08008f6d 	.word	0x08008f6d
 8008eb8:	08008f45 	.word	0x08008f45
 8008ebc:	08008f6d 	.word	0x08008f6d
 8008ec0:	08008f6d 	.word	0x08008f6d
 8008ec4:	08008f6d 	.word	0x08008f6d
 8008ec8:	08008f6d 	.word	0x08008f6d
 8008ecc:	08008f6d 	.word	0x08008f6d
 8008ed0:	08008f6d 	.word	0x08008f6d
 8008ed4:	08008f6d 	.word	0x08008f6d
 8008ed8:	08008f4d 	.word	0x08008f4d
 8008edc:	08008f6d 	.word	0x08008f6d
 8008ee0:	08008f6d 	.word	0x08008f6d
 8008ee4:	08008f6d 	.word	0x08008f6d
 8008ee8:	08008f6d 	.word	0x08008f6d
 8008eec:	08008f6d 	.word	0x08008f6d
 8008ef0:	08008f6d 	.word	0x08008f6d
 8008ef4:	08008f6d 	.word	0x08008f6d
 8008ef8:	08008f55 	.word	0x08008f55
 8008efc:	08008f6d 	.word	0x08008f6d
 8008f00:	08008f6d 	.word	0x08008f6d
 8008f04:	08008f6d 	.word	0x08008f6d
 8008f08:	08008f6d 	.word	0x08008f6d
 8008f0c:	08008f6d 	.word	0x08008f6d
 8008f10:	08008f6d 	.word	0x08008f6d
 8008f14:	08008f6d 	.word	0x08008f6d
 8008f18:	08008f5d 	.word	0x08008f5d
 8008f1c:	08008f6d 	.word	0x08008f6d
 8008f20:	08008f6d 	.word	0x08008f6d
 8008f24:	08008f6d 	.word	0x08008f6d
 8008f28:	08008f6d 	.word	0x08008f6d
 8008f2c:	08008f6d 	.word	0x08008f6d
 8008f30:	08008f6d 	.word	0x08008f6d
 8008f34:	08008f6d 	.word	0x08008f6d
 8008f38:	08008f65 	.word	0x08008f65
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f42:	e0bc      	b.n	80090be <UART_SetConfig+0x5a6>
 8008f44:	2304      	movs	r3, #4
 8008f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4a:	e0b8      	b.n	80090be <UART_SetConfig+0x5a6>
 8008f4c:	2308      	movs	r3, #8
 8008f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f52:	e0b4      	b.n	80090be <UART_SetConfig+0x5a6>
 8008f54:	2310      	movs	r3, #16
 8008f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5a:	e0b0      	b.n	80090be <UART_SetConfig+0x5a6>
 8008f5c:	2320      	movs	r3, #32
 8008f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f62:	e0ac      	b.n	80090be <UART_SetConfig+0x5a6>
 8008f64:	2340      	movs	r3, #64	@ 0x40
 8008f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6a:	e0a8      	b.n	80090be <UART_SetConfig+0x5a6>
 8008f6c:	2380      	movs	r3, #128	@ 0x80
 8008f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f72:	e0a4      	b.n	80090be <UART_SetConfig+0x5a6>
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a8f      	ldr	r2, [pc, #572]	@ (80091b8 <UART_SetConfig+0x6a0>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d130      	bne.n	8008fe0 <UART_SetConfig+0x4c8>
 8008f7e:	4b8d      	ldr	r3, [pc, #564]	@ (80091b4 <UART_SetConfig+0x69c>)
 8008f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f82:	f003 0307 	and.w	r3, r3, #7
 8008f86:	2b05      	cmp	r3, #5
 8008f88:	d826      	bhi.n	8008fd8 <UART_SetConfig+0x4c0>
 8008f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f90 <UART_SetConfig+0x478>)
 8008f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f90:	08008fa9 	.word	0x08008fa9
 8008f94:	08008fb1 	.word	0x08008fb1
 8008f98:	08008fb9 	.word	0x08008fb9
 8008f9c:	08008fc1 	.word	0x08008fc1
 8008fa0:	08008fc9 	.word	0x08008fc9
 8008fa4:	08008fd1 	.word	0x08008fd1
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fae:	e086      	b.n	80090be <UART_SetConfig+0x5a6>
 8008fb0:	2304      	movs	r3, #4
 8008fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb6:	e082      	b.n	80090be <UART_SetConfig+0x5a6>
 8008fb8:	2308      	movs	r3, #8
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fbe:	e07e      	b.n	80090be <UART_SetConfig+0x5a6>
 8008fc0:	2310      	movs	r3, #16
 8008fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc6:	e07a      	b.n	80090be <UART_SetConfig+0x5a6>
 8008fc8:	2320      	movs	r3, #32
 8008fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fce:	e076      	b.n	80090be <UART_SetConfig+0x5a6>
 8008fd0:	2340      	movs	r3, #64	@ 0x40
 8008fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd6:	e072      	b.n	80090be <UART_SetConfig+0x5a6>
 8008fd8:	2380      	movs	r3, #128	@ 0x80
 8008fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fde:	e06e      	b.n	80090be <UART_SetConfig+0x5a6>
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a75      	ldr	r2, [pc, #468]	@ (80091bc <UART_SetConfig+0x6a4>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d130      	bne.n	800904c <UART_SetConfig+0x534>
 8008fea:	4b72      	ldr	r3, [pc, #456]	@ (80091b4 <UART_SetConfig+0x69c>)
 8008fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fee:	f003 0307 	and.w	r3, r3, #7
 8008ff2:	2b05      	cmp	r3, #5
 8008ff4:	d826      	bhi.n	8009044 <UART_SetConfig+0x52c>
 8008ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ffc <UART_SetConfig+0x4e4>)
 8008ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffc:	08009015 	.word	0x08009015
 8009000:	0800901d 	.word	0x0800901d
 8009004:	08009025 	.word	0x08009025
 8009008:	0800902d 	.word	0x0800902d
 800900c:	08009035 	.word	0x08009035
 8009010:	0800903d 	.word	0x0800903d
 8009014:	2300      	movs	r3, #0
 8009016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901a:	e050      	b.n	80090be <UART_SetConfig+0x5a6>
 800901c:	2304      	movs	r3, #4
 800901e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009022:	e04c      	b.n	80090be <UART_SetConfig+0x5a6>
 8009024:	2308      	movs	r3, #8
 8009026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902a:	e048      	b.n	80090be <UART_SetConfig+0x5a6>
 800902c:	2310      	movs	r3, #16
 800902e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009032:	e044      	b.n	80090be <UART_SetConfig+0x5a6>
 8009034:	2320      	movs	r3, #32
 8009036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903a:	e040      	b.n	80090be <UART_SetConfig+0x5a6>
 800903c:	2340      	movs	r3, #64	@ 0x40
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009042:	e03c      	b.n	80090be <UART_SetConfig+0x5a6>
 8009044:	2380      	movs	r3, #128	@ 0x80
 8009046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800904a:	e038      	b.n	80090be <UART_SetConfig+0x5a6>
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a5b      	ldr	r2, [pc, #364]	@ (80091c0 <UART_SetConfig+0x6a8>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d130      	bne.n	80090b8 <UART_SetConfig+0x5a0>
 8009056:	4b57      	ldr	r3, [pc, #348]	@ (80091b4 <UART_SetConfig+0x69c>)
 8009058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	2b05      	cmp	r3, #5
 8009060:	d826      	bhi.n	80090b0 <UART_SetConfig+0x598>
 8009062:	a201      	add	r2, pc, #4	@ (adr r2, 8009068 <UART_SetConfig+0x550>)
 8009064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009068:	08009081 	.word	0x08009081
 800906c:	08009089 	.word	0x08009089
 8009070:	08009091 	.word	0x08009091
 8009074:	08009099 	.word	0x08009099
 8009078:	080090a1 	.word	0x080090a1
 800907c:	080090a9 	.word	0x080090a9
 8009080:	2302      	movs	r3, #2
 8009082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009086:	e01a      	b.n	80090be <UART_SetConfig+0x5a6>
 8009088:	2304      	movs	r3, #4
 800908a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908e:	e016      	b.n	80090be <UART_SetConfig+0x5a6>
 8009090:	2308      	movs	r3, #8
 8009092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009096:	e012      	b.n	80090be <UART_SetConfig+0x5a6>
 8009098:	2310      	movs	r3, #16
 800909a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909e:	e00e      	b.n	80090be <UART_SetConfig+0x5a6>
 80090a0:	2320      	movs	r3, #32
 80090a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090a6:	e00a      	b.n	80090be <UART_SetConfig+0x5a6>
 80090a8:	2340      	movs	r3, #64	@ 0x40
 80090aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ae:	e006      	b.n	80090be <UART_SetConfig+0x5a6>
 80090b0:	2380      	movs	r3, #128	@ 0x80
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b6:	e002      	b.n	80090be <UART_SetConfig+0x5a6>
 80090b8:	2380      	movs	r3, #128	@ 0x80
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a3f      	ldr	r2, [pc, #252]	@ (80091c0 <UART_SetConfig+0x6a8>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	f040 80f8 	bne.w	80092ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80090ce:	2b20      	cmp	r3, #32
 80090d0:	dc46      	bgt.n	8009160 <UART_SetConfig+0x648>
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	f2c0 8082 	blt.w	80091dc <UART_SetConfig+0x6c4>
 80090d8:	3b02      	subs	r3, #2
 80090da:	2b1e      	cmp	r3, #30
 80090dc:	d87e      	bhi.n	80091dc <UART_SetConfig+0x6c4>
 80090de:	a201      	add	r2, pc, #4	@ (adr r2, 80090e4 <UART_SetConfig+0x5cc>)
 80090e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e4:	08009167 	.word	0x08009167
 80090e8:	080091dd 	.word	0x080091dd
 80090ec:	0800916f 	.word	0x0800916f
 80090f0:	080091dd 	.word	0x080091dd
 80090f4:	080091dd 	.word	0x080091dd
 80090f8:	080091dd 	.word	0x080091dd
 80090fc:	0800917f 	.word	0x0800917f
 8009100:	080091dd 	.word	0x080091dd
 8009104:	080091dd 	.word	0x080091dd
 8009108:	080091dd 	.word	0x080091dd
 800910c:	080091dd 	.word	0x080091dd
 8009110:	080091dd 	.word	0x080091dd
 8009114:	080091dd 	.word	0x080091dd
 8009118:	080091dd 	.word	0x080091dd
 800911c:	0800918f 	.word	0x0800918f
 8009120:	080091dd 	.word	0x080091dd
 8009124:	080091dd 	.word	0x080091dd
 8009128:	080091dd 	.word	0x080091dd
 800912c:	080091dd 	.word	0x080091dd
 8009130:	080091dd 	.word	0x080091dd
 8009134:	080091dd 	.word	0x080091dd
 8009138:	080091dd 	.word	0x080091dd
 800913c:	080091dd 	.word	0x080091dd
 8009140:	080091dd 	.word	0x080091dd
 8009144:	080091dd 	.word	0x080091dd
 8009148:	080091dd 	.word	0x080091dd
 800914c:	080091dd 	.word	0x080091dd
 8009150:	080091dd 	.word	0x080091dd
 8009154:	080091dd 	.word	0x080091dd
 8009158:	080091dd 	.word	0x080091dd
 800915c:	080091cf 	.word	0x080091cf
 8009160:	2b40      	cmp	r3, #64	@ 0x40
 8009162:	d037      	beq.n	80091d4 <UART_SetConfig+0x6bc>
 8009164:	e03a      	b.n	80091dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009166:	f7fd fa89 	bl	800667c <HAL_RCCEx_GetD3PCLK1Freq>
 800916a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800916c:	e03c      	b.n	80091e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800916e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009172:	4618      	mov	r0, r3
 8009174:	f7fd fa98 	bl	80066a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800917c:	e034      	b.n	80091e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800917e:	f107 0318 	add.w	r3, r7, #24
 8009182:	4618      	mov	r0, r3
 8009184:	f7fd fbe4 	bl	8006950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800918c:	e02c      	b.n	80091e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800918e:	4b09      	ldr	r3, [pc, #36]	@ (80091b4 <UART_SetConfig+0x69c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0320 	and.w	r3, r3, #32
 8009196:	2b00      	cmp	r3, #0
 8009198:	d016      	beq.n	80091c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800919a:	4b06      	ldr	r3, [pc, #24]	@ (80091b4 <UART_SetConfig+0x69c>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	08db      	lsrs	r3, r3, #3
 80091a0:	f003 0303 	and.w	r3, r3, #3
 80091a4:	4a07      	ldr	r2, [pc, #28]	@ (80091c4 <UART_SetConfig+0x6ac>)
 80091a6:	fa22 f303 	lsr.w	r3, r2, r3
 80091aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091ac:	e01c      	b.n	80091e8 <UART_SetConfig+0x6d0>
 80091ae:	bf00      	nop
 80091b0:	40011400 	.word	0x40011400
 80091b4:	58024400 	.word	0x58024400
 80091b8:	40007800 	.word	0x40007800
 80091bc:	40007c00 	.word	0x40007c00
 80091c0:	58000c00 	.word	0x58000c00
 80091c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80091c8:	4b9d      	ldr	r3, [pc, #628]	@ (8009440 <UART_SetConfig+0x928>)
 80091ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091cc:	e00c      	b.n	80091e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091ce:	4b9d      	ldr	r3, [pc, #628]	@ (8009444 <UART_SetConfig+0x92c>)
 80091d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091d2:	e009      	b.n	80091e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091da:	e005      	b.n	80091e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80091dc:	2300      	movs	r3, #0
 80091de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80091e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 81de 	beq.w	80095ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f4:	4a94      	ldr	r2, [pc, #592]	@ (8009448 <UART_SetConfig+0x930>)
 80091f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091fa:	461a      	mov	r2, r3
 80091fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009202:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	4613      	mov	r3, r2
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	4413      	add	r3, r2
 800920e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009210:	429a      	cmp	r2, r3
 8009212:	d305      	bcc.n	8009220 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800921a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800921c:	429a      	cmp	r2, r3
 800921e:	d903      	bls.n	8009228 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009226:	e1c1      	b.n	80095ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800922a:	2200      	movs	r2, #0
 800922c:	60bb      	str	r3, [r7, #8]
 800922e:	60fa      	str	r2, [r7, #12]
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009234:	4a84      	ldr	r2, [pc, #528]	@ (8009448 <UART_SetConfig+0x930>)
 8009236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800923a:	b29b      	uxth	r3, r3
 800923c:	2200      	movs	r2, #0
 800923e:	603b      	str	r3, [r7, #0]
 8009240:	607a      	str	r2, [r7, #4]
 8009242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009246:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800924a:	f7f7 f8a1 	bl	8000390 <__aeabi_uldivmod>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4610      	mov	r0, r2
 8009254:	4619      	mov	r1, r3
 8009256:	f04f 0200 	mov.w	r2, #0
 800925a:	f04f 0300 	mov.w	r3, #0
 800925e:	020b      	lsls	r3, r1, #8
 8009260:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009264:	0202      	lsls	r2, r0, #8
 8009266:	6979      	ldr	r1, [r7, #20]
 8009268:	6849      	ldr	r1, [r1, #4]
 800926a:	0849      	lsrs	r1, r1, #1
 800926c:	2000      	movs	r0, #0
 800926e:	460c      	mov	r4, r1
 8009270:	4605      	mov	r5, r0
 8009272:	eb12 0804 	adds.w	r8, r2, r4
 8009276:	eb43 0905 	adc.w	r9, r3, r5
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	469a      	mov	sl, r3
 8009282:	4693      	mov	fp, r2
 8009284:	4652      	mov	r2, sl
 8009286:	465b      	mov	r3, fp
 8009288:	4640      	mov	r0, r8
 800928a:	4649      	mov	r1, r9
 800928c:	f7f7 f880 	bl	8000390 <__aeabi_uldivmod>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4613      	mov	r3, r2
 8009296:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800929e:	d308      	bcc.n	80092b2 <UART_SetConfig+0x79a>
 80092a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092a6:	d204      	bcs.n	80092b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092ae:	60da      	str	r2, [r3, #12]
 80092b0:	e17c      	b.n	80095ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80092b8:	e178      	b.n	80095ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092c2:	f040 80c5 	bne.w	8009450 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80092c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80092ca:	2b20      	cmp	r3, #32
 80092cc:	dc48      	bgt.n	8009360 <UART_SetConfig+0x848>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	db7b      	blt.n	80093ca <UART_SetConfig+0x8b2>
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	d879      	bhi.n	80093ca <UART_SetConfig+0x8b2>
 80092d6:	a201      	add	r2, pc, #4	@ (adr r2, 80092dc <UART_SetConfig+0x7c4>)
 80092d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092dc:	08009367 	.word	0x08009367
 80092e0:	0800936f 	.word	0x0800936f
 80092e4:	080093cb 	.word	0x080093cb
 80092e8:	080093cb 	.word	0x080093cb
 80092ec:	08009377 	.word	0x08009377
 80092f0:	080093cb 	.word	0x080093cb
 80092f4:	080093cb 	.word	0x080093cb
 80092f8:	080093cb 	.word	0x080093cb
 80092fc:	08009387 	.word	0x08009387
 8009300:	080093cb 	.word	0x080093cb
 8009304:	080093cb 	.word	0x080093cb
 8009308:	080093cb 	.word	0x080093cb
 800930c:	080093cb 	.word	0x080093cb
 8009310:	080093cb 	.word	0x080093cb
 8009314:	080093cb 	.word	0x080093cb
 8009318:	080093cb 	.word	0x080093cb
 800931c:	08009397 	.word	0x08009397
 8009320:	080093cb 	.word	0x080093cb
 8009324:	080093cb 	.word	0x080093cb
 8009328:	080093cb 	.word	0x080093cb
 800932c:	080093cb 	.word	0x080093cb
 8009330:	080093cb 	.word	0x080093cb
 8009334:	080093cb 	.word	0x080093cb
 8009338:	080093cb 	.word	0x080093cb
 800933c:	080093cb 	.word	0x080093cb
 8009340:	080093cb 	.word	0x080093cb
 8009344:	080093cb 	.word	0x080093cb
 8009348:	080093cb 	.word	0x080093cb
 800934c:	080093cb 	.word	0x080093cb
 8009350:	080093cb 	.word	0x080093cb
 8009354:	080093cb 	.word	0x080093cb
 8009358:	080093cb 	.word	0x080093cb
 800935c:	080093bd 	.word	0x080093bd
 8009360:	2b40      	cmp	r3, #64	@ 0x40
 8009362:	d02e      	beq.n	80093c2 <UART_SetConfig+0x8aa>
 8009364:	e031      	b.n	80093ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009366:	f7fb ff53 	bl	8005210 <HAL_RCC_GetPCLK1Freq>
 800936a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800936c:	e033      	b.n	80093d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800936e:	f7fb ff65 	bl	800523c <HAL_RCC_GetPCLK2Freq>
 8009372:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009374:	e02f      	b.n	80093d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800937a:	4618      	mov	r0, r3
 800937c:	f7fd f994 	bl	80066a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009384:	e027      	b.n	80093d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009386:	f107 0318 	add.w	r3, r7, #24
 800938a:	4618      	mov	r0, r3
 800938c:	f7fd fae0 	bl	8006950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009394:	e01f      	b.n	80093d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009396:	4b2d      	ldr	r3, [pc, #180]	@ (800944c <UART_SetConfig+0x934>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0320 	and.w	r3, r3, #32
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d009      	beq.n	80093b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093a2:	4b2a      	ldr	r3, [pc, #168]	@ (800944c <UART_SetConfig+0x934>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	08db      	lsrs	r3, r3, #3
 80093a8:	f003 0303 	and.w	r3, r3, #3
 80093ac:	4a24      	ldr	r2, [pc, #144]	@ (8009440 <UART_SetConfig+0x928>)
 80093ae:	fa22 f303 	lsr.w	r3, r2, r3
 80093b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093b4:	e00f      	b.n	80093d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80093b6:	4b22      	ldr	r3, [pc, #136]	@ (8009440 <UART_SetConfig+0x928>)
 80093b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ba:	e00c      	b.n	80093d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093bc:	4b21      	ldr	r3, [pc, #132]	@ (8009444 <UART_SetConfig+0x92c>)
 80093be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c0:	e009      	b.n	80093d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c8:	e005      	b.n	80093d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80093d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 80e7 	beq.w	80095ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e2:	4a19      	ldr	r2, [pc, #100]	@ (8009448 <UART_SetConfig+0x930>)
 80093e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093e8:	461a      	mov	r2, r3
 80093ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80093f0:	005a      	lsls	r2, r3, #1
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	085b      	lsrs	r3, r3, #1
 80093f8:	441a      	add	r2, r3
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009402:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009406:	2b0f      	cmp	r3, #15
 8009408:	d916      	bls.n	8009438 <UART_SetConfig+0x920>
 800940a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009410:	d212      	bcs.n	8009438 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009414:	b29b      	uxth	r3, r3
 8009416:	f023 030f 	bic.w	r3, r3, #15
 800941a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800941c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941e:	085b      	lsrs	r3, r3, #1
 8009420:	b29b      	uxth	r3, r3
 8009422:	f003 0307 	and.w	r3, r3, #7
 8009426:	b29a      	uxth	r2, r3
 8009428:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800942a:	4313      	orrs	r3, r2
 800942c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009434:	60da      	str	r2, [r3, #12]
 8009436:	e0b9      	b.n	80095ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800943e:	e0b5      	b.n	80095ac <UART_SetConfig+0xa94>
 8009440:	03d09000 	.word	0x03d09000
 8009444:	003d0900 	.word	0x003d0900
 8009448:	0800c8ac 	.word	0x0800c8ac
 800944c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009450:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009454:	2b20      	cmp	r3, #32
 8009456:	dc49      	bgt.n	80094ec <UART_SetConfig+0x9d4>
 8009458:	2b00      	cmp	r3, #0
 800945a:	db7c      	blt.n	8009556 <UART_SetConfig+0xa3e>
 800945c:	2b20      	cmp	r3, #32
 800945e:	d87a      	bhi.n	8009556 <UART_SetConfig+0xa3e>
 8009460:	a201      	add	r2, pc, #4	@ (adr r2, 8009468 <UART_SetConfig+0x950>)
 8009462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009466:	bf00      	nop
 8009468:	080094f3 	.word	0x080094f3
 800946c:	080094fb 	.word	0x080094fb
 8009470:	08009557 	.word	0x08009557
 8009474:	08009557 	.word	0x08009557
 8009478:	08009503 	.word	0x08009503
 800947c:	08009557 	.word	0x08009557
 8009480:	08009557 	.word	0x08009557
 8009484:	08009557 	.word	0x08009557
 8009488:	08009513 	.word	0x08009513
 800948c:	08009557 	.word	0x08009557
 8009490:	08009557 	.word	0x08009557
 8009494:	08009557 	.word	0x08009557
 8009498:	08009557 	.word	0x08009557
 800949c:	08009557 	.word	0x08009557
 80094a0:	08009557 	.word	0x08009557
 80094a4:	08009557 	.word	0x08009557
 80094a8:	08009523 	.word	0x08009523
 80094ac:	08009557 	.word	0x08009557
 80094b0:	08009557 	.word	0x08009557
 80094b4:	08009557 	.word	0x08009557
 80094b8:	08009557 	.word	0x08009557
 80094bc:	08009557 	.word	0x08009557
 80094c0:	08009557 	.word	0x08009557
 80094c4:	08009557 	.word	0x08009557
 80094c8:	08009557 	.word	0x08009557
 80094cc:	08009557 	.word	0x08009557
 80094d0:	08009557 	.word	0x08009557
 80094d4:	08009557 	.word	0x08009557
 80094d8:	08009557 	.word	0x08009557
 80094dc:	08009557 	.word	0x08009557
 80094e0:	08009557 	.word	0x08009557
 80094e4:	08009557 	.word	0x08009557
 80094e8:	08009549 	.word	0x08009549
 80094ec:	2b40      	cmp	r3, #64	@ 0x40
 80094ee:	d02e      	beq.n	800954e <UART_SetConfig+0xa36>
 80094f0:	e031      	b.n	8009556 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094f2:	f7fb fe8d 	bl	8005210 <HAL_RCC_GetPCLK1Freq>
 80094f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80094f8:	e033      	b.n	8009562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094fa:	f7fb fe9f 	bl	800523c <HAL_RCC_GetPCLK2Freq>
 80094fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009500:	e02f      	b.n	8009562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009506:	4618      	mov	r0, r3
 8009508:	f7fd f8ce 	bl	80066a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800950c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009510:	e027      	b.n	8009562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009512:	f107 0318 	add.w	r3, r7, #24
 8009516:	4618      	mov	r0, r3
 8009518:	f7fd fa1a 	bl	8006950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009520:	e01f      	b.n	8009562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009522:	4b2d      	ldr	r3, [pc, #180]	@ (80095d8 <UART_SetConfig+0xac0>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0320 	and.w	r3, r3, #32
 800952a:	2b00      	cmp	r3, #0
 800952c:	d009      	beq.n	8009542 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800952e:	4b2a      	ldr	r3, [pc, #168]	@ (80095d8 <UART_SetConfig+0xac0>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	08db      	lsrs	r3, r3, #3
 8009534:	f003 0303 	and.w	r3, r3, #3
 8009538:	4a28      	ldr	r2, [pc, #160]	@ (80095dc <UART_SetConfig+0xac4>)
 800953a:	fa22 f303 	lsr.w	r3, r2, r3
 800953e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009540:	e00f      	b.n	8009562 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009542:	4b26      	ldr	r3, [pc, #152]	@ (80095dc <UART_SetConfig+0xac4>)
 8009544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009546:	e00c      	b.n	8009562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009548:	4b25      	ldr	r3, [pc, #148]	@ (80095e0 <UART_SetConfig+0xac8>)
 800954a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800954c:	e009      	b.n	8009562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800954e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009554:	e005      	b.n	8009562 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009560:	bf00      	nop
    }

    if (pclk != 0U)
 8009562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009564:	2b00      	cmp	r3, #0
 8009566:	d021      	beq.n	80095ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800956c:	4a1d      	ldr	r2, [pc, #116]	@ (80095e4 <UART_SetConfig+0xacc>)
 800956e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009572:	461a      	mov	r2, r3
 8009574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009576:	fbb3 f2f2 	udiv	r2, r3, r2
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	085b      	lsrs	r3, r3, #1
 8009580:	441a      	add	r2, r3
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	fbb2 f3f3 	udiv	r3, r2, r3
 800958a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800958c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958e:	2b0f      	cmp	r3, #15
 8009590:	d909      	bls.n	80095a6 <UART_SetConfig+0xa8e>
 8009592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009598:	d205      	bcs.n	80095a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800959a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959c:	b29a      	uxth	r2, r3
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60da      	str	r2, [r3, #12]
 80095a4:	e002      	b.n	80095ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	2200      	movs	r2, #0
 80095c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2200      	movs	r2, #0
 80095c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80095c8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3748      	adds	r7, #72	@ 0x48
 80095d0:	46bd      	mov	sp, r7
 80095d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095d6:	bf00      	nop
 80095d8:	58024400 	.word	0x58024400
 80095dc:	03d09000 	.word	0x03d09000
 80095e0:	003d0900 	.word	0x003d0900
 80095e4:	0800c8ac 	.word	0x0800c8ac

080095e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f4:	f003 0308 	and.w	r3, r3, #8
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00a      	beq.n	8009612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00a      	beq.n	8009634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	430a      	orrs	r2, r1
 8009632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009638:	f003 0302 	and.w	r3, r3, #2
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00a      	beq.n	8009656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800965a:	f003 0304 	and.w	r3, r3, #4
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00a      	beq.n	8009678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	430a      	orrs	r2, r1
 8009676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800967c:	f003 0310 	and.w	r3, r3, #16
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00a      	beq.n	800969a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	430a      	orrs	r2, r1
 8009698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969e:	f003 0320 	and.w	r3, r3, #32
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d01a      	beq.n	80096fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	430a      	orrs	r2, r1
 80096dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096e6:	d10a      	bne.n	80096fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	430a      	orrs	r2, r1
 80096fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00a      	beq.n	8009720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	430a      	orrs	r2, r1
 800971e:	605a      	str	r2, [r3, #4]
  }
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b098      	sub	sp, #96	@ 0x60
 8009730:	af02      	add	r7, sp, #8
 8009732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800973c:	f7fa f880 	bl	8003840 <HAL_GetTick>
 8009740:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0308 	and.w	r3, r3, #8
 800974c:	2b08      	cmp	r3, #8
 800974e:	d12f      	bne.n	80097b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009750:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009758:	2200      	movs	r2, #0
 800975a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f88e 	bl	8009880 <UART_WaitOnFlagUntilTimeout>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d022      	beq.n	80097b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009772:	e853 3f00 	ldrex	r3, [r3]
 8009776:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800977a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800977e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	461a      	mov	r2, r3
 8009786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009788:	647b      	str	r3, [r7, #68]	@ 0x44
 800978a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800978e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009790:	e841 2300 	strex	r3, r2, [r1]
 8009794:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e6      	bne.n	800976a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2220      	movs	r2, #32
 80097a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e063      	b.n	8009878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0304 	and.w	r3, r3, #4
 80097ba:	2b04      	cmp	r3, #4
 80097bc:	d149      	bne.n	8009852 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097c6:	2200      	movs	r2, #0
 80097c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f857 	bl	8009880 <UART_WaitOnFlagUntilTimeout>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d03c      	beq.n	8009852 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e0:	e853 3f00 	ldrex	r3, [r3]
 80097e4:	623b      	str	r3, [r7, #32]
   return(result);
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	461a      	mov	r2, r3
 80097f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80097f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097fe:	e841 2300 	strex	r3, r2, [r1]
 8009802:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1e6      	bne.n	80097d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	3308      	adds	r3, #8
 8009810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	e853 3f00 	ldrex	r3, [r3]
 8009818:	60fb      	str	r3, [r7, #12]
   return(result);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f023 0301 	bic.w	r3, r3, #1
 8009820:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	3308      	adds	r3, #8
 8009828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800982a:	61fa      	str	r2, [r7, #28]
 800982c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982e:	69b9      	ldr	r1, [r7, #24]
 8009830:	69fa      	ldr	r2, [r7, #28]
 8009832:	e841 2300 	strex	r3, r2, [r1]
 8009836:	617b      	str	r3, [r7, #20]
   return(result);
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1e5      	bne.n	800980a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2220      	movs	r2, #32
 8009842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e012      	b.n	8009878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2220      	movs	r2, #32
 8009856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2220      	movs	r2, #32
 800985e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3758      	adds	r7, #88	@ 0x58
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	603b      	str	r3, [r7, #0]
 800988c:	4613      	mov	r3, r2
 800988e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009890:	e04f      	b.n	8009932 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009898:	d04b      	beq.n	8009932 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800989a:	f7f9 ffd1 	bl	8003840 <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	69ba      	ldr	r2, [r7, #24]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d302      	bcc.n	80098b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e04e      	b.n	8009952 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d037      	beq.n	8009932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2b80      	cmp	r3, #128	@ 0x80
 80098c6:	d034      	beq.n	8009932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	2b40      	cmp	r3, #64	@ 0x40
 80098cc:	d031      	beq.n	8009932 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	69db      	ldr	r3, [r3, #28]
 80098d4:	f003 0308 	and.w	r3, r3, #8
 80098d8:	2b08      	cmp	r3, #8
 80098da:	d110      	bne.n	80098fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2208      	movs	r2, #8
 80098e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 f839 	bl	800995c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2208      	movs	r2, #8
 80098ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e029      	b.n	8009952 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800990c:	d111      	bne.n	8009932 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f000 f81f 	bl	800995c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2220      	movs	r2, #32
 8009922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	e00f      	b.n	8009952 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	69da      	ldr	r2, [r3, #28]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	4013      	ands	r3, r2
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	429a      	cmp	r2, r3
 8009940:	bf0c      	ite	eq
 8009942:	2301      	moveq	r3, #1
 8009944:	2300      	movne	r3, #0
 8009946:	b2db      	uxtb	r3, r3
 8009948:	461a      	mov	r2, r3
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	429a      	cmp	r2, r3
 800994e:	d0a0      	beq.n	8009892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
	...

0800995c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800995c:	b480      	push	{r7}
 800995e:	b095      	sub	sp, #84	@ 0x54
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009978:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	461a      	mov	r2, r3
 8009980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009982:	643b      	str	r3, [r7, #64]	@ 0x40
 8009984:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009986:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009988:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800998a:	e841 2300 	strex	r3, r2, [r1]
 800998e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1e6      	bne.n	8009964 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	3308      	adds	r3, #8
 800999c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	e853 3f00 	ldrex	r3, [r3]
 80099a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	4b1e      	ldr	r3, [pc, #120]	@ (8009a24 <UART_EndRxTransfer+0xc8>)
 80099aa:	4013      	ands	r3, r2
 80099ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3308      	adds	r3, #8
 80099b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099be:	e841 2300 	strex	r3, r2, [r1]
 80099c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1e5      	bne.n	8009996 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d118      	bne.n	8009a04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	e853 3f00 	ldrex	r3, [r3]
 80099de:	60bb      	str	r3, [r7, #8]
   return(result);
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	f023 0310 	bic.w	r3, r3, #16
 80099e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	461a      	mov	r2, r3
 80099ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099f0:	61bb      	str	r3, [r7, #24]
 80099f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f4:	6979      	ldr	r1, [r7, #20]
 80099f6:	69ba      	ldr	r2, [r7, #24]
 80099f8:	e841 2300 	strex	r3, r2, [r1]
 80099fc:	613b      	str	r3, [r7, #16]
   return(result);
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1e6      	bne.n	80099d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2220      	movs	r2, #32
 8009a08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009a18:	bf00      	nop
 8009a1a:	3754      	adds	r7, #84	@ 0x54
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	effffffe 	.word	0xeffffffe

08009a28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d101      	bne.n	8009a3e <HAL_UARTEx_DisableFifoMode+0x16>
 8009a3a:	2302      	movs	r3, #2
 8009a3c:	e027      	b.n	8009a8e <HAL_UARTEx_DisableFifoMode+0x66>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2224      	movs	r2, #36	@ 0x24
 8009a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 0201 	bic.w	r2, r2, #1
 8009a64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009a6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d101      	bne.n	8009ab2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009aae:	2302      	movs	r3, #2
 8009ab0:	e02d      	b.n	8009b0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2224      	movs	r2, #36	@ 0x24
 8009abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f022 0201 	bic.w	r2, r2, #1
 8009ad8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	430a      	orrs	r2, r1
 8009aec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f850 	bl	8009b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2220      	movs	r2, #32
 8009b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b084      	sub	sp, #16
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d101      	bne.n	8009b2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	e02d      	b.n	8009b8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2224      	movs	r2, #36	@ 0x24
 8009b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 0201 	bic.w	r2, r2, #1
 8009b54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	683a      	ldr	r2, [r7, #0]
 8009b66:	430a      	orrs	r2, r1
 8009b68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f812 	bl	8009b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
	...

08009b94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d108      	bne.n	8009bb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bb4:	e031      	b.n	8009c1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bb6:	2310      	movs	r3, #16
 8009bb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009bba:	2310      	movs	r3, #16
 8009bbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	0e5b      	lsrs	r3, r3, #25
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	f003 0307 	and.w	r3, r3, #7
 8009bcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	0f5b      	lsrs	r3, r3, #29
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	f003 0307 	and.w	r3, r3, #7
 8009bdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bde:	7bbb      	ldrb	r3, [r7, #14]
 8009be0:	7b3a      	ldrb	r2, [r7, #12]
 8009be2:	4911      	ldr	r1, [pc, #68]	@ (8009c28 <UARTEx_SetNbDataToProcess+0x94>)
 8009be4:	5c8a      	ldrb	r2, [r1, r2]
 8009be6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009bea:	7b3a      	ldrb	r2, [r7, #12]
 8009bec:	490f      	ldr	r1, [pc, #60]	@ (8009c2c <UARTEx_SetNbDataToProcess+0x98>)
 8009bee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
 8009bfe:	7b7a      	ldrb	r2, [r7, #13]
 8009c00:	4909      	ldr	r1, [pc, #36]	@ (8009c28 <UARTEx_SetNbDataToProcess+0x94>)
 8009c02:	5c8a      	ldrb	r2, [r1, r2]
 8009c04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c08:	7b7a      	ldrb	r2, [r7, #13]
 8009c0a:	4908      	ldr	r1, [pc, #32]	@ (8009c2c <UARTEx_SetNbDataToProcess+0x98>)
 8009c0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009c1a:	bf00      	nop
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	0800c8c4 	.word	0x0800c8c4
 8009c2c:	0800c8cc 	.word	0x0800c8cc

08009c30 <__cvt>:
 8009c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c32:	ed2d 8b02 	vpush	{d8}
 8009c36:	eeb0 8b40 	vmov.f64	d8, d0
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	4617      	mov	r7, r2
 8009c3e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009c40:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c42:	ee18 2a90 	vmov	r2, s17
 8009c46:	f025 0520 	bic.w	r5, r5, #32
 8009c4a:	2a00      	cmp	r2, #0
 8009c4c:	bfb6      	itet	lt
 8009c4e:	222d      	movlt	r2, #45	@ 0x2d
 8009c50:	2200      	movge	r2, #0
 8009c52:	eeb1 8b40 	vneglt.f64	d8, d0
 8009c56:	2d46      	cmp	r5, #70	@ 0x46
 8009c58:	460c      	mov	r4, r1
 8009c5a:	701a      	strb	r2, [r3, #0]
 8009c5c:	d004      	beq.n	8009c68 <__cvt+0x38>
 8009c5e:	2d45      	cmp	r5, #69	@ 0x45
 8009c60:	d100      	bne.n	8009c64 <__cvt+0x34>
 8009c62:	3401      	adds	r4, #1
 8009c64:	2102      	movs	r1, #2
 8009c66:	e000      	b.n	8009c6a <__cvt+0x3a>
 8009c68:	2103      	movs	r1, #3
 8009c6a:	ab03      	add	r3, sp, #12
 8009c6c:	9301      	str	r3, [sp, #4]
 8009c6e:	ab02      	add	r3, sp, #8
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	4622      	mov	r2, r4
 8009c74:	4633      	mov	r3, r6
 8009c76:	eeb0 0b48 	vmov.f64	d0, d8
 8009c7a:	f000 fe31 	bl	800a8e0 <_dtoa_r>
 8009c7e:	2d47      	cmp	r5, #71	@ 0x47
 8009c80:	d114      	bne.n	8009cac <__cvt+0x7c>
 8009c82:	07fb      	lsls	r3, r7, #31
 8009c84:	d50a      	bpl.n	8009c9c <__cvt+0x6c>
 8009c86:	1902      	adds	r2, r0, r4
 8009c88:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c90:	bf08      	it	eq
 8009c92:	9203      	streq	r2, [sp, #12]
 8009c94:	2130      	movs	r1, #48	@ 0x30
 8009c96:	9b03      	ldr	r3, [sp, #12]
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d319      	bcc.n	8009cd0 <__cvt+0xa0>
 8009c9c:	9b03      	ldr	r3, [sp, #12]
 8009c9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ca0:	1a1b      	subs	r3, r3, r0
 8009ca2:	6013      	str	r3, [r2, #0]
 8009ca4:	b005      	add	sp, #20
 8009ca6:	ecbd 8b02 	vpop	{d8}
 8009caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cac:	2d46      	cmp	r5, #70	@ 0x46
 8009cae:	eb00 0204 	add.w	r2, r0, r4
 8009cb2:	d1e9      	bne.n	8009c88 <__cvt+0x58>
 8009cb4:	7803      	ldrb	r3, [r0, #0]
 8009cb6:	2b30      	cmp	r3, #48	@ 0x30
 8009cb8:	d107      	bne.n	8009cca <__cvt+0x9a>
 8009cba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc2:	bf1c      	itt	ne
 8009cc4:	f1c4 0401 	rsbne	r4, r4, #1
 8009cc8:	6034      	strne	r4, [r6, #0]
 8009cca:	6833      	ldr	r3, [r6, #0]
 8009ccc:	441a      	add	r2, r3
 8009cce:	e7db      	b.n	8009c88 <__cvt+0x58>
 8009cd0:	1c5c      	adds	r4, r3, #1
 8009cd2:	9403      	str	r4, [sp, #12]
 8009cd4:	7019      	strb	r1, [r3, #0]
 8009cd6:	e7de      	b.n	8009c96 <__cvt+0x66>

08009cd8 <__exponent>:
 8009cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cda:	2900      	cmp	r1, #0
 8009cdc:	bfba      	itte	lt
 8009cde:	4249      	neglt	r1, r1
 8009ce0:	232d      	movlt	r3, #45	@ 0x2d
 8009ce2:	232b      	movge	r3, #43	@ 0x2b
 8009ce4:	2909      	cmp	r1, #9
 8009ce6:	7002      	strb	r2, [r0, #0]
 8009ce8:	7043      	strb	r3, [r0, #1]
 8009cea:	dd29      	ble.n	8009d40 <__exponent+0x68>
 8009cec:	f10d 0307 	add.w	r3, sp, #7
 8009cf0:	461d      	mov	r5, r3
 8009cf2:	270a      	movs	r7, #10
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	fbb1 f6f7 	udiv	r6, r1, r7
 8009cfa:	fb07 1416 	mls	r4, r7, r6, r1
 8009cfe:	3430      	adds	r4, #48	@ 0x30
 8009d00:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009d04:	460c      	mov	r4, r1
 8009d06:	2c63      	cmp	r4, #99	@ 0x63
 8009d08:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	dcf1      	bgt.n	8009cf4 <__exponent+0x1c>
 8009d10:	3130      	adds	r1, #48	@ 0x30
 8009d12:	1e94      	subs	r4, r2, #2
 8009d14:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d18:	1c41      	adds	r1, r0, #1
 8009d1a:	4623      	mov	r3, r4
 8009d1c:	42ab      	cmp	r3, r5
 8009d1e:	d30a      	bcc.n	8009d36 <__exponent+0x5e>
 8009d20:	f10d 0309 	add.w	r3, sp, #9
 8009d24:	1a9b      	subs	r3, r3, r2
 8009d26:	42ac      	cmp	r4, r5
 8009d28:	bf88      	it	hi
 8009d2a:	2300      	movhi	r3, #0
 8009d2c:	3302      	adds	r3, #2
 8009d2e:	4403      	add	r3, r0
 8009d30:	1a18      	subs	r0, r3, r0
 8009d32:	b003      	add	sp, #12
 8009d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d36:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009d3a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009d3e:	e7ed      	b.n	8009d1c <__exponent+0x44>
 8009d40:	2330      	movs	r3, #48	@ 0x30
 8009d42:	3130      	adds	r1, #48	@ 0x30
 8009d44:	7083      	strb	r3, [r0, #2]
 8009d46:	70c1      	strb	r1, [r0, #3]
 8009d48:	1d03      	adds	r3, r0, #4
 8009d4a:	e7f1      	b.n	8009d30 <__exponent+0x58>
 8009d4c:	0000      	movs	r0, r0
	...

08009d50 <_printf_float>:
 8009d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	b08d      	sub	sp, #52	@ 0x34
 8009d56:	460c      	mov	r4, r1
 8009d58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009d5c:	4616      	mov	r6, r2
 8009d5e:	461f      	mov	r7, r3
 8009d60:	4605      	mov	r5, r0
 8009d62:	f000 fcbd 	bl	800a6e0 <_localeconv_r>
 8009d66:	f8d0 b000 	ldr.w	fp, [r0]
 8009d6a:	4658      	mov	r0, fp
 8009d6c:	f7f6 fb08 	bl	8000380 <strlen>
 8009d70:	2300      	movs	r3, #0
 8009d72:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d74:	f8d8 3000 	ldr.w	r3, [r8]
 8009d78:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009d7c:	6822      	ldr	r2, [r4, #0]
 8009d7e:	9005      	str	r0, [sp, #20]
 8009d80:	3307      	adds	r3, #7
 8009d82:	f023 0307 	bic.w	r3, r3, #7
 8009d86:	f103 0108 	add.w	r1, r3, #8
 8009d8a:	f8c8 1000 	str.w	r1, [r8]
 8009d8e:	ed93 0b00 	vldr	d0, [r3]
 8009d92:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009ff0 <_printf_float+0x2a0>
 8009d96:	eeb0 7bc0 	vabs.f64	d7, d0
 8009d9a:	eeb4 7b46 	vcmp.f64	d7, d6
 8009d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009da6:	dd24      	ble.n	8009df2 <_printf_float+0xa2>
 8009da8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db0:	d502      	bpl.n	8009db8 <_printf_float+0x68>
 8009db2:	232d      	movs	r3, #45	@ 0x2d
 8009db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009db8:	498f      	ldr	r1, [pc, #572]	@ (8009ff8 <_printf_float+0x2a8>)
 8009dba:	4b90      	ldr	r3, [pc, #576]	@ (8009ffc <_printf_float+0x2ac>)
 8009dbc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009dc0:	bf94      	ite	ls
 8009dc2:	4688      	movls	r8, r1
 8009dc4:	4698      	movhi	r8, r3
 8009dc6:	f022 0204 	bic.w	r2, r2, #4
 8009dca:	2303      	movs	r3, #3
 8009dcc:	6123      	str	r3, [r4, #16]
 8009dce:	6022      	str	r2, [r4, #0]
 8009dd0:	f04f 0a00 	mov.w	sl, #0
 8009dd4:	9700      	str	r7, [sp, #0]
 8009dd6:	4633      	mov	r3, r6
 8009dd8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009dda:	4621      	mov	r1, r4
 8009ddc:	4628      	mov	r0, r5
 8009dde:	f000 f9d1 	bl	800a184 <_printf_common>
 8009de2:	3001      	adds	r0, #1
 8009de4:	f040 8089 	bne.w	8009efa <_printf_float+0x1aa>
 8009de8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dec:	b00d      	add	sp, #52	@ 0x34
 8009dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df2:	eeb4 0b40 	vcmp.f64	d0, d0
 8009df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfa:	d709      	bvc.n	8009e10 <_printf_float+0xc0>
 8009dfc:	ee10 3a90 	vmov	r3, s1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	bfbc      	itt	lt
 8009e04:	232d      	movlt	r3, #45	@ 0x2d
 8009e06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009e0a:	497d      	ldr	r1, [pc, #500]	@ (800a000 <_printf_float+0x2b0>)
 8009e0c:	4b7d      	ldr	r3, [pc, #500]	@ (800a004 <_printf_float+0x2b4>)
 8009e0e:	e7d5      	b.n	8009dbc <_printf_float+0x6c>
 8009e10:	6863      	ldr	r3, [r4, #4]
 8009e12:	1c59      	adds	r1, r3, #1
 8009e14:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009e18:	d139      	bne.n	8009e8e <_printf_float+0x13e>
 8009e1a:	2306      	movs	r3, #6
 8009e1c:	6063      	str	r3, [r4, #4]
 8009e1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009e22:	2300      	movs	r3, #0
 8009e24:	6022      	str	r2, [r4, #0]
 8009e26:	9303      	str	r3, [sp, #12]
 8009e28:	ab0a      	add	r3, sp, #40	@ 0x28
 8009e2a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009e2e:	ab09      	add	r3, sp, #36	@ 0x24
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	6861      	ldr	r1, [r4, #4]
 8009e34:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009e38:	4628      	mov	r0, r5
 8009e3a:	f7ff fef9 	bl	8009c30 <__cvt>
 8009e3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e44:	4680      	mov	r8, r0
 8009e46:	d129      	bne.n	8009e9c <_printf_float+0x14c>
 8009e48:	1cc8      	adds	r0, r1, #3
 8009e4a:	db02      	blt.n	8009e52 <_printf_float+0x102>
 8009e4c:	6863      	ldr	r3, [r4, #4]
 8009e4e:	4299      	cmp	r1, r3
 8009e50:	dd41      	ble.n	8009ed6 <_printf_float+0x186>
 8009e52:	f1a9 0902 	sub.w	r9, r9, #2
 8009e56:	fa5f f989 	uxtb.w	r9, r9
 8009e5a:	3901      	subs	r1, #1
 8009e5c:	464a      	mov	r2, r9
 8009e5e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009e62:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e64:	f7ff ff38 	bl	8009cd8 <__exponent>
 8009e68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e6a:	1813      	adds	r3, r2, r0
 8009e6c:	2a01      	cmp	r2, #1
 8009e6e:	4682      	mov	sl, r0
 8009e70:	6123      	str	r3, [r4, #16]
 8009e72:	dc02      	bgt.n	8009e7a <_printf_float+0x12a>
 8009e74:	6822      	ldr	r2, [r4, #0]
 8009e76:	07d2      	lsls	r2, r2, #31
 8009e78:	d501      	bpl.n	8009e7e <_printf_float+0x12e>
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	6123      	str	r3, [r4, #16]
 8009e7e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d0a6      	beq.n	8009dd4 <_printf_float+0x84>
 8009e86:	232d      	movs	r3, #45	@ 0x2d
 8009e88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e8c:	e7a2      	b.n	8009dd4 <_printf_float+0x84>
 8009e8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e92:	d1c4      	bne.n	8009e1e <_printf_float+0xce>
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1c2      	bne.n	8009e1e <_printf_float+0xce>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e7bf      	b.n	8009e1c <_printf_float+0xcc>
 8009e9c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009ea0:	d9db      	bls.n	8009e5a <_printf_float+0x10a>
 8009ea2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009ea6:	d118      	bne.n	8009eda <_printf_float+0x18a>
 8009ea8:	2900      	cmp	r1, #0
 8009eaa:	6863      	ldr	r3, [r4, #4]
 8009eac:	dd0b      	ble.n	8009ec6 <_printf_float+0x176>
 8009eae:	6121      	str	r1, [r4, #16]
 8009eb0:	b913      	cbnz	r3, 8009eb8 <_printf_float+0x168>
 8009eb2:	6822      	ldr	r2, [r4, #0]
 8009eb4:	07d0      	lsls	r0, r2, #31
 8009eb6:	d502      	bpl.n	8009ebe <_printf_float+0x16e>
 8009eb8:	3301      	adds	r3, #1
 8009eba:	440b      	add	r3, r1
 8009ebc:	6123      	str	r3, [r4, #16]
 8009ebe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009ec0:	f04f 0a00 	mov.w	sl, #0
 8009ec4:	e7db      	b.n	8009e7e <_printf_float+0x12e>
 8009ec6:	b913      	cbnz	r3, 8009ece <_printf_float+0x17e>
 8009ec8:	6822      	ldr	r2, [r4, #0]
 8009eca:	07d2      	lsls	r2, r2, #31
 8009ecc:	d501      	bpl.n	8009ed2 <_printf_float+0x182>
 8009ece:	3302      	adds	r3, #2
 8009ed0:	e7f4      	b.n	8009ebc <_printf_float+0x16c>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e7f2      	b.n	8009ebc <_printf_float+0x16c>
 8009ed6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009eda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009edc:	4299      	cmp	r1, r3
 8009ede:	db05      	blt.n	8009eec <_printf_float+0x19c>
 8009ee0:	6823      	ldr	r3, [r4, #0]
 8009ee2:	6121      	str	r1, [r4, #16]
 8009ee4:	07d8      	lsls	r0, r3, #31
 8009ee6:	d5ea      	bpl.n	8009ebe <_printf_float+0x16e>
 8009ee8:	1c4b      	adds	r3, r1, #1
 8009eea:	e7e7      	b.n	8009ebc <_printf_float+0x16c>
 8009eec:	2900      	cmp	r1, #0
 8009eee:	bfd4      	ite	le
 8009ef0:	f1c1 0202 	rsble	r2, r1, #2
 8009ef4:	2201      	movgt	r2, #1
 8009ef6:	4413      	add	r3, r2
 8009ef8:	e7e0      	b.n	8009ebc <_printf_float+0x16c>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	055a      	lsls	r2, r3, #21
 8009efe:	d407      	bmi.n	8009f10 <_printf_float+0x1c0>
 8009f00:	6923      	ldr	r3, [r4, #16]
 8009f02:	4642      	mov	r2, r8
 8009f04:	4631      	mov	r1, r6
 8009f06:	4628      	mov	r0, r5
 8009f08:	47b8      	blx	r7
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	d12a      	bne.n	8009f64 <_printf_float+0x214>
 8009f0e:	e76b      	b.n	8009de8 <_printf_float+0x98>
 8009f10:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009f14:	f240 80e0 	bls.w	800a0d8 <_printf_float+0x388>
 8009f18:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009f1c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f24:	d133      	bne.n	8009f8e <_printf_float+0x23e>
 8009f26:	4a38      	ldr	r2, [pc, #224]	@ (800a008 <_printf_float+0x2b8>)
 8009f28:	2301      	movs	r3, #1
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	47b8      	blx	r7
 8009f30:	3001      	adds	r0, #1
 8009f32:	f43f af59 	beq.w	8009de8 <_printf_float+0x98>
 8009f36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009f3a:	4543      	cmp	r3, r8
 8009f3c:	db02      	blt.n	8009f44 <_printf_float+0x1f4>
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	07d8      	lsls	r0, r3, #31
 8009f42:	d50f      	bpl.n	8009f64 <_printf_float+0x214>
 8009f44:	9b05      	ldr	r3, [sp, #20]
 8009f46:	465a      	mov	r2, fp
 8009f48:	4631      	mov	r1, r6
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	47b8      	blx	r7
 8009f4e:	3001      	adds	r0, #1
 8009f50:	f43f af4a 	beq.w	8009de8 <_printf_float+0x98>
 8009f54:	f04f 0900 	mov.w	r9, #0
 8009f58:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f5c:	f104 0a1a 	add.w	sl, r4, #26
 8009f60:	45c8      	cmp	r8, r9
 8009f62:	dc09      	bgt.n	8009f78 <_printf_float+0x228>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	079b      	lsls	r3, r3, #30
 8009f68:	f100 8107 	bmi.w	800a17a <_printf_float+0x42a>
 8009f6c:	68e0      	ldr	r0, [r4, #12]
 8009f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f70:	4298      	cmp	r0, r3
 8009f72:	bfb8      	it	lt
 8009f74:	4618      	movlt	r0, r3
 8009f76:	e739      	b.n	8009dec <_printf_float+0x9c>
 8009f78:	2301      	movs	r3, #1
 8009f7a:	4652      	mov	r2, sl
 8009f7c:	4631      	mov	r1, r6
 8009f7e:	4628      	mov	r0, r5
 8009f80:	47b8      	blx	r7
 8009f82:	3001      	adds	r0, #1
 8009f84:	f43f af30 	beq.w	8009de8 <_printf_float+0x98>
 8009f88:	f109 0901 	add.w	r9, r9, #1
 8009f8c:	e7e8      	b.n	8009f60 <_printf_float+0x210>
 8009f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	dc3b      	bgt.n	800a00c <_printf_float+0x2bc>
 8009f94:	4a1c      	ldr	r2, [pc, #112]	@ (800a008 <_printf_float+0x2b8>)
 8009f96:	2301      	movs	r3, #1
 8009f98:	4631      	mov	r1, r6
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	47b8      	blx	r7
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	f43f af22 	beq.w	8009de8 <_printf_float+0x98>
 8009fa4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009fa8:	ea59 0303 	orrs.w	r3, r9, r3
 8009fac:	d102      	bne.n	8009fb4 <_printf_float+0x264>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	07d9      	lsls	r1, r3, #31
 8009fb2:	d5d7      	bpl.n	8009f64 <_printf_float+0x214>
 8009fb4:	9b05      	ldr	r3, [sp, #20]
 8009fb6:	465a      	mov	r2, fp
 8009fb8:	4631      	mov	r1, r6
 8009fba:	4628      	mov	r0, r5
 8009fbc:	47b8      	blx	r7
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	f43f af12 	beq.w	8009de8 <_printf_float+0x98>
 8009fc4:	f04f 0a00 	mov.w	sl, #0
 8009fc8:	f104 0b1a 	add.w	fp, r4, #26
 8009fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fce:	425b      	negs	r3, r3
 8009fd0:	4553      	cmp	r3, sl
 8009fd2:	dc01      	bgt.n	8009fd8 <_printf_float+0x288>
 8009fd4:	464b      	mov	r3, r9
 8009fd6:	e794      	b.n	8009f02 <_printf_float+0x1b2>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	465a      	mov	r2, fp
 8009fdc:	4631      	mov	r1, r6
 8009fde:	4628      	mov	r0, r5
 8009fe0:	47b8      	blx	r7
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	f43f af00 	beq.w	8009de8 <_printf_float+0x98>
 8009fe8:	f10a 0a01 	add.w	sl, sl, #1
 8009fec:	e7ee      	b.n	8009fcc <_printf_float+0x27c>
 8009fee:	bf00      	nop
 8009ff0:	ffffffff 	.word	0xffffffff
 8009ff4:	7fefffff 	.word	0x7fefffff
 8009ff8:	0800c8d4 	.word	0x0800c8d4
 8009ffc:	0800c8d8 	.word	0x0800c8d8
 800a000:	0800c8dc 	.word	0x0800c8dc
 800a004:	0800c8e0 	.word	0x0800c8e0
 800a008:	0800c8e4 	.word	0x0800c8e4
 800a00c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a00e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a012:	4553      	cmp	r3, sl
 800a014:	bfa8      	it	ge
 800a016:	4653      	movge	r3, sl
 800a018:	2b00      	cmp	r3, #0
 800a01a:	4699      	mov	r9, r3
 800a01c:	dc37      	bgt.n	800a08e <_printf_float+0x33e>
 800a01e:	2300      	movs	r3, #0
 800a020:	9307      	str	r3, [sp, #28]
 800a022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a026:	f104 021a 	add.w	r2, r4, #26
 800a02a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a02c:	9907      	ldr	r1, [sp, #28]
 800a02e:	9306      	str	r3, [sp, #24]
 800a030:	eba3 0309 	sub.w	r3, r3, r9
 800a034:	428b      	cmp	r3, r1
 800a036:	dc31      	bgt.n	800a09c <_printf_float+0x34c>
 800a038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a03a:	459a      	cmp	sl, r3
 800a03c:	dc3b      	bgt.n	800a0b6 <_printf_float+0x366>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	07da      	lsls	r2, r3, #31
 800a042:	d438      	bmi.n	800a0b6 <_printf_float+0x366>
 800a044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a046:	ebaa 0903 	sub.w	r9, sl, r3
 800a04a:	9b06      	ldr	r3, [sp, #24]
 800a04c:	ebaa 0303 	sub.w	r3, sl, r3
 800a050:	4599      	cmp	r9, r3
 800a052:	bfa8      	it	ge
 800a054:	4699      	movge	r9, r3
 800a056:	f1b9 0f00 	cmp.w	r9, #0
 800a05a:	dc34      	bgt.n	800a0c6 <_printf_float+0x376>
 800a05c:	f04f 0800 	mov.w	r8, #0
 800a060:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a064:	f104 0b1a 	add.w	fp, r4, #26
 800a068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a06a:	ebaa 0303 	sub.w	r3, sl, r3
 800a06e:	eba3 0309 	sub.w	r3, r3, r9
 800a072:	4543      	cmp	r3, r8
 800a074:	f77f af76 	ble.w	8009f64 <_printf_float+0x214>
 800a078:	2301      	movs	r3, #1
 800a07a:	465a      	mov	r2, fp
 800a07c:	4631      	mov	r1, r6
 800a07e:	4628      	mov	r0, r5
 800a080:	47b8      	blx	r7
 800a082:	3001      	adds	r0, #1
 800a084:	f43f aeb0 	beq.w	8009de8 <_printf_float+0x98>
 800a088:	f108 0801 	add.w	r8, r8, #1
 800a08c:	e7ec      	b.n	800a068 <_printf_float+0x318>
 800a08e:	4642      	mov	r2, r8
 800a090:	4631      	mov	r1, r6
 800a092:	4628      	mov	r0, r5
 800a094:	47b8      	blx	r7
 800a096:	3001      	adds	r0, #1
 800a098:	d1c1      	bne.n	800a01e <_printf_float+0x2ce>
 800a09a:	e6a5      	b.n	8009de8 <_printf_float+0x98>
 800a09c:	2301      	movs	r3, #1
 800a09e:	4631      	mov	r1, r6
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	9206      	str	r2, [sp, #24]
 800a0a4:	47b8      	blx	r7
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	f43f ae9e 	beq.w	8009de8 <_printf_float+0x98>
 800a0ac:	9b07      	ldr	r3, [sp, #28]
 800a0ae:	9a06      	ldr	r2, [sp, #24]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	9307      	str	r3, [sp, #28]
 800a0b4:	e7b9      	b.n	800a02a <_printf_float+0x2da>
 800a0b6:	9b05      	ldr	r3, [sp, #20]
 800a0b8:	465a      	mov	r2, fp
 800a0ba:	4631      	mov	r1, r6
 800a0bc:	4628      	mov	r0, r5
 800a0be:	47b8      	blx	r7
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	d1bf      	bne.n	800a044 <_printf_float+0x2f4>
 800a0c4:	e690      	b.n	8009de8 <_printf_float+0x98>
 800a0c6:	9a06      	ldr	r2, [sp, #24]
 800a0c8:	464b      	mov	r3, r9
 800a0ca:	4442      	add	r2, r8
 800a0cc:	4631      	mov	r1, r6
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	47b8      	blx	r7
 800a0d2:	3001      	adds	r0, #1
 800a0d4:	d1c2      	bne.n	800a05c <_printf_float+0x30c>
 800a0d6:	e687      	b.n	8009de8 <_printf_float+0x98>
 800a0d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a0dc:	f1b9 0f01 	cmp.w	r9, #1
 800a0e0:	dc01      	bgt.n	800a0e6 <_printf_float+0x396>
 800a0e2:	07db      	lsls	r3, r3, #31
 800a0e4:	d536      	bpl.n	800a154 <_printf_float+0x404>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	4642      	mov	r2, r8
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	47b8      	blx	r7
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	f43f ae79 	beq.w	8009de8 <_printf_float+0x98>
 800a0f6:	9b05      	ldr	r3, [sp, #20]
 800a0f8:	465a      	mov	r2, fp
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	47b8      	blx	r7
 800a100:	3001      	adds	r0, #1
 800a102:	f43f ae71 	beq.w	8009de8 <_printf_float+0x98>
 800a106:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a10a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a112:	f109 39ff 	add.w	r9, r9, #4294967295
 800a116:	d018      	beq.n	800a14a <_printf_float+0x3fa>
 800a118:	464b      	mov	r3, r9
 800a11a:	f108 0201 	add.w	r2, r8, #1
 800a11e:	4631      	mov	r1, r6
 800a120:	4628      	mov	r0, r5
 800a122:	47b8      	blx	r7
 800a124:	3001      	adds	r0, #1
 800a126:	d10c      	bne.n	800a142 <_printf_float+0x3f2>
 800a128:	e65e      	b.n	8009de8 <_printf_float+0x98>
 800a12a:	2301      	movs	r3, #1
 800a12c:	465a      	mov	r2, fp
 800a12e:	4631      	mov	r1, r6
 800a130:	4628      	mov	r0, r5
 800a132:	47b8      	blx	r7
 800a134:	3001      	adds	r0, #1
 800a136:	f43f ae57 	beq.w	8009de8 <_printf_float+0x98>
 800a13a:	f108 0801 	add.w	r8, r8, #1
 800a13e:	45c8      	cmp	r8, r9
 800a140:	dbf3      	blt.n	800a12a <_printf_float+0x3da>
 800a142:	4653      	mov	r3, sl
 800a144:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a148:	e6dc      	b.n	8009f04 <_printf_float+0x1b4>
 800a14a:	f04f 0800 	mov.w	r8, #0
 800a14e:	f104 0b1a 	add.w	fp, r4, #26
 800a152:	e7f4      	b.n	800a13e <_printf_float+0x3ee>
 800a154:	2301      	movs	r3, #1
 800a156:	4642      	mov	r2, r8
 800a158:	e7e1      	b.n	800a11e <_printf_float+0x3ce>
 800a15a:	2301      	movs	r3, #1
 800a15c:	464a      	mov	r2, r9
 800a15e:	4631      	mov	r1, r6
 800a160:	4628      	mov	r0, r5
 800a162:	47b8      	blx	r7
 800a164:	3001      	adds	r0, #1
 800a166:	f43f ae3f 	beq.w	8009de8 <_printf_float+0x98>
 800a16a:	f108 0801 	add.w	r8, r8, #1
 800a16e:	68e3      	ldr	r3, [r4, #12]
 800a170:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a172:	1a5b      	subs	r3, r3, r1
 800a174:	4543      	cmp	r3, r8
 800a176:	dcf0      	bgt.n	800a15a <_printf_float+0x40a>
 800a178:	e6f8      	b.n	8009f6c <_printf_float+0x21c>
 800a17a:	f04f 0800 	mov.w	r8, #0
 800a17e:	f104 0919 	add.w	r9, r4, #25
 800a182:	e7f4      	b.n	800a16e <_printf_float+0x41e>

0800a184 <_printf_common>:
 800a184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a188:	4616      	mov	r6, r2
 800a18a:	4698      	mov	r8, r3
 800a18c:	688a      	ldr	r2, [r1, #8]
 800a18e:	690b      	ldr	r3, [r1, #16]
 800a190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a194:	4293      	cmp	r3, r2
 800a196:	bfb8      	it	lt
 800a198:	4613      	movlt	r3, r2
 800a19a:	6033      	str	r3, [r6, #0]
 800a19c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1a0:	4607      	mov	r7, r0
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	b10a      	cbz	r2, 800a1aa <_printf_common+0x26>
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	6033      	str	r3, [r6, #0]
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	0699      	lsls	r1, r3, #26
 800a1ae:	bf42      	ittt	mi
 800a1b0:	6833      	ldrmi	r3, [r6, #0]
 800a1b2:	3302      	addmi	r3, #2
 800a1b4:	6033      	strmi	r3, [r6, #0]
 800a1b6:	6825      	ldr	r5, [r4, #0]
 800a1b8:	f015 0506 	ands.w	r5, r5, #6
 800a1bc:	d106      	bne.n	800a1cc <_printf_common+0x48>
 800a1be:	f104 0a19 	add.w	sl, r4, #25
 800a1c2:	68e3      	ldr	r3, [r4, #12]
 800a1c4:	6832      	ldr	r2, [r6, #0]
 800a1c6:	1a9b      	subs	r3, r3, r2
 800a1c8:	42ab      	cmp	r3, r5
 800a1ca:	dc26      	bgt.n	800a21a <_printf_common+0x96>
 800a1cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a1d0:	6822      	ldr	r2, [r4, #0]
 800a1d2:	3b00      	subs	r3, #0
 800a1d4:	bf18      	it	ne
 800a1d6:	2301      	movne	r3, #1
 800a1d8:	0692      	lsls	r2, r2, #26
 800a1da:	d42b      	bmi.n	800a234 <_printf_common+0xb0>
 800a1dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a1e0:	4641      	mov	r1, r8
 800a1e2:	4638      	mov	r0, r7
 800a1e4:	47c8      	blx	r9
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	d01e      	beq.n	800a228 <_printf_common+0xa4>
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	6922      	ldr	r2, [r4, #16]
 800a1ee:	f003 0306 	and.w	r3, r3, #6
 800a1f2:	2b04      	cmp	r3, #4
 800a1f4:	bf02      	ittt	eq
 800a1f6:	68e5      	ldreq	r5, [r4, #12]
 800a1f8:	6833      	ldreq	r3, [r6, #0]
 800a1fa:	1aed      	subeq	r5, r5, r3
 800a1fc:	68a3      	ldr	r3, [r4, #8]
 800a1fe:	bf0c      	ite	eq
 800a200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a204:	2500      	movne	r5, #0
 800a206:	4293      	cmp	r3, r2
 800a208:	bfc4      	itt	gt
 800a20a:	1a9b      	subgt	r3, r3, r2
 800a20c:	18ed      	addgt	r5, r5, r3
 800a20e:	2600      	movs	r6, #0
 800a210:	341a      	adds	r4, #26
 800a212:	42b5      	cmp	r5, r6
 800a214:	d11a      	bne.n	800a24c <_printf_common+0xc8>
 800a216:	2000      	movs	r0, #0
 800a218:	e008      	b.n	800a22c <_printf_common+0xa8>
 800a21a:	2301      	movs	r3, #1
 800a21c:	4652      	mov	r2, sl
 800a21e:	4641      	mov	r1, r8
 800a220:	4638      	mov	r0, r7
 800a222:	47c8      	blx	r9
 800a224:	3001      	adds	r0, #1
 800a226:	d103      	bne.n	800a230 <_printf_common+0xac>
 800a228:	f04f 30ff 	mov.w	r0, #4294967295
 800a22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a230:	3501      	adds	r5, #1
 800a232:	e7c6      	b.n	800a1c2 <_printf_common+0x3e>
 800a234:	18e1      	adds	r1, r4, r3
 800a236:	1c5a      	adds	r2, r3, #1
 800a238:	2030      	movs	r0, #48	@ 0x30
 800a23a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a23e:	4422      	add	r2, r4
 800a240:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a248:	3302      	adds	r3, #2
 800a24a:	e7c7      	b.n	800a1dc <_printf_common+0x58>
 800a24c:	2301      	movs	r3, #1
 800a24e:	4622      	mov	r2, r4
 800a250:	4641      	mov	r1, r8
 800a252:	4638      	mov	r0, r7
 800a254:	47c8      	blx	r9
 800a256:	3001      	adds	r0, #1
 800a258:	d0e6      	beq.n	800a228 <_printf_common+0xa4>
 800a25a:	3601      	adds	r6, #1
 800a25c:	e7d9      	b.n	800a212 <_printf_common+0x8e>
	...

0800a260 <_printf_i>:
 800a260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a264:	7e0f      	ldrb	r7, [r1, #24]
 800a266:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a268:	2f78      	cmp	r7, #120	@ 0x78
 800a26a:	4691      	mov	r9, r2
 800a26c:	4680      	mov	r8, r0
 800a26e:	460c      	mov	r4, r1
 800a270:	469a      	mov	sl, r3
 800a272:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a276:	d807      	bhi.n	800a288 <_printf_i+0x28>
 800a278:	2f62      	cmp	r7, #98	@ 0x62
 800a27a:	d80a      	bhi.n	800a292 <_printf_i+0x32>
 800a27c:	2f00      	cmp	r7, #0
 800a27e:	f000 80d2 	beq.w	800a426 <_printf_i+0x1c6>
 800a282:	2f58      	cmp	r7, #88	@ 0x58
 800a284:	f000 80b9 	beq.w	800a3fa <_printf_i+0x19a>
 800a288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a28c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a290:	e03a      	b.n	800a308 <_printf_i+0xa8>
 800a292:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a296:	2b15      	cmp	r3, #21
 800a298:	d8f6      	bhi.n	800a288 <_printf_i+0x28>
 800a29a:	a101      	add	r1, pc, #4	@ (adr r1, 800a2a0 <_printf_i+0x40>)
 800a29c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2a0:	0800a2f9 	.word	0x0800a2f9
 800a2a4:	0800a30d 	.word	0x0800a30d
 800a2a8:	0800a289 	.word	0x0800a289
 800a2ac:	0800a289 	.word	0x0800a289
 800a2b0:	0800a289 	.word	0x0800a289
 800a2b4:	0800a289 	.word	0x0800a289
 800a2b8:	0800a30d 	.word	0x0800a30d
 800a2bc:	0800a289 	.word	0x0800a289
 800a2c0:	0800a289 	.word	0x0800a289
 800a2c4:	0800a289 	.word	0x0800a289
 800a2c8:	0800a289 	.word	0x0800a289
 800a2cc:	0800a40d 	.word	0x0800a40d
 800a2d0:	0800a337 	.word	0x0800a337
 800a2d4:	0800a3c7 	.word	0x0800a3c7
 800a2d8:	0800a289 	.word	0x0800a289
 800a2dc:	0800a289 	.word	0x0800a289
 800a2e0:	0800a42f 	.word	0x0800a42f
 800a2e4:	0800a289 	.word	0x0800a289
 800a2e8:	0800a337 	.word	0x0800a337
 800a2ec:	0800a289 	.word	0x0800a289
 800a2f0:	0800a289 	.word	0x0800a289
 800a2f4:	0800a3cf 	.word	0x0800a3cf
 800a2f8:	6833      	ldr	r3, [r6, #0]
 800a2fa:	1d1a      	adds	r2, r3, #4
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	6032      	str	r2, [r6, #0]
 800a300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a304:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a308:	2301      	movs	r3, #1
 800a30a:	e09d      	b.n	800a448 <_printf_i+0x1e8>
 800a30c:	6833      	ldr	r3, [r6, #0]
 800a30e:	6820      	ldr	r0, [r4, #0]
 800a310:	1d19      	adds	r1, r3, #4
 800a312:	6031      	str	r1, [r6, #0]
 800a314:	0606      	lsls	r6, r0, #24
 800a316:	d501      	bpl.n	800a31c <_printf_i+0xbc>
 800a318:	681d      	ldr	r5, [r3, #0]
 800a31a:	e003      	b.n	800a324 <_printf_i+0xc4>
 800a31c:	0645      	lsls	r5, r0, #25
 800a31e:	d5fb      	bpl.n	800a318 <_printf_i+0xb8>
 800a320:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a324:	2d00      	cmp	r5, #0
 800a326:	da03      	bge.n	800a330 <_printf_i+0xd0>
 800a328:	232d      	movs	r3, #45	@ 0x2d
 800a32a:	426d      	negs	r5, r5
 800a32c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a330:	4859      	ldr	r0, [pc, #356]	@ (800a498 <_printf_i+0x238>)
 800a332:	230a      	movs	r3, #10
 800a334:	e011      	b.n	800a35a <_printf_i+0xfa>
 800a336:	6821      	ldr	r1, [r4, #0]
 800a338:	6833      	ldr	r3, [r6, #0]
 800a33a:	0608      	lsls	r0, r1, #24
 800a33c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a340:	d402      	bmi.n	800a348 <_printf_i+0xe8>
 800a342:	0649      	lsls	r1, r1, #25
 800a344:	bf48      	it	mi
 800a346:	b2ad      	uxthmi	r5, r5
 800a348:	2f6f      	cmp	r7, #111	@ 0x6f
 800a34a:	4853      	ldr	r0, [pc, #332]	@ (800a498 <_printf_i+0x238>)
 800a34c:	6033      	str	r3, [r6, #0]
 800a34e:	bf14      	ite	ne
 800a350:	230a      	movne	r3, #10
 800a352:	2308      	moveq	r3, #8
 800a354:	2100      	movs	r1, #0
 800a356:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a35a:	6866      	ldr	r6, [r4, #4]
 800a35c:	60a6      	str	r6, [r4, #8]
 800a35e:	2e00      	cmp	r6, #0
 800a360:	bfa2      	ittt	ge
 800a362:	6821      	ldrge	r1, [r4, #0]
 800a364:	f021 0104 	bicge.w	r1, r1, #4
 800a368:	6021      	strge	r1, [r4, #0]
 800a36a:	b90d      	cbnz	r5, 800a370 <_printf_i+0x110>
 800a36c:	2e00      	cmp	r6, #0
 800a36e:	d04b      	beq.n	800a408 <_printf_i+0x1a8>
 800a370:	4616      	mov	r6, r2
 800a372:	fbb5 f1f3 	udiv	r1, r5, r3
 800a376:	fb03 5711 	mls	r7, r3, r1, r5
 800a37a:	5dc7      	ldrb	r7, [r0, r7]
 800a37c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a380:	462f      	mov	r7, r5
 800a382:	42bb      	cmp	r3, r7
 800a384:	460d      	mov	r5, r1
 800a386:	d9f4      	bls.n	800a372 <_printf_i+0x112>
 800a388:	2b08      	cmp	r3, #8
 800a38a:	d10b      	bne.n	800a3a4 <_printf_i+0x144>
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	07df      	lsls	r7, r3, #31
 800a390:	d508      	bpl.n	800a3a4 <_printf_i+0x144>
 800a392:	6923      	ldr	r3, [r4, #16]
 800a394:	6861      	ldr	r1, [r4, #4]
 800a396:	4299      	cmp	r1, r3
 800a398:	bfde      	ittt	le
 800a39a:	2330      	movle	r3, #48	@ 0x30
 800a39c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a3a4:	1b92      	subs	r2, r2, r6
 800a3a6:	6122      	str	r2, [r4, #16]
 800a3a8:	f8cd a000 	str.w	sl, [sp]
 800a3ac:	464b      	mov	r3, r9
 800a3ae:	aa03      	add	r2, sp, #12
 800a3b0:	4621      	mov	r1, r4
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	f7ff fee6 	bl	800a184 <_printf_common>
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	d14a      	bne.n	800a452 <_printf_i+0x1f2>
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c0:	b004      	add	sp, #16
 800a3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	f043 0320 	orr.w	r3, r3, #32
 800a3cc:	6023      	str	r3, [r4, #0]
 800a3ce:	4833      	ldr	r0, [pc, #204]	@ (800a49c <_printf_i+0x23c>)
 800a3d0:	2778      	movs	r7, #120	@ 0x78
 800a3d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	6831      	ldr	r1, [r6, #0]
 800a3da:	061f      	lsls	r7, r3, #24
 800a3dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800a3e0:	d402      	bmi.n	800a3e8 <_printf_i+0x188>
 800a3e2:	065f      	lsls	r7, r3, #25
 800a3e4:	bf48      	it	mi
 800a3e6:	b2ad      	uxthmi	r5, r5
 800a3e8:	6031      	str	r1, [r6, #0]
 800a3ea:	07d9      	lsls	r1, r3, #31
 800a3ec:	bf44      	itt	mi
 800a3ee:	f043 0320 	orrmi.w	r3, r3, #32
 800a3f2:	6023      	strmi	r3, [r4, #0]
 800a3f4:	b11d      	cbz	r5, 800a3fe <_printf_i+0x19e>
 800a3f6:	2310      	movs	r3, #16
 800a3f8:	e7ac      	b.n	800a354 <_printf_i+0xf4>
 800a3fa:	4827      	ldr	r0, [pc, #156]	@ (800a498 <_printf_i+0x238>)
 800a3fc:	e7e9      	b.n	800a3d2 <_printf_i+0x172>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	f023 0320 	bic.w	r3, r3, #32
 800a404:	6023      	str	r3, [r4, #0]
 800a406:	e7f6      	b.n	800a3f6 <_printf_i+0x196>
 800a408:	4616      	mov	r6, r2
 800a40a:	e7bd      	b.n	800a388 <_printf_i+0x128>
 800a40c:	6833      	ldr	r3, [r6, #0]
 800a40e:	6825      	ldr	r5, [r4, #0]
 800a410:	6961      	ldr	r1, [r4, #20]
 800a412:	1d18      	adds	r0, r3, #4
 800a414:	6030      	str	r0, [r6, #0]
 800a416:	062e      	lsls	r6, r5, #24
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	d501      	bpl.n	800a420 <_printf_i+0x1c0>
 800a41c:	6019      	str	r1, [r3, #0]
 800a41e:	e002      	b.n	800a426 <_printf_i+0x1c6>
 800a420:	0668      	lsls	r0, r5, #25
 800a422:	d5fb      	bpl.n	800a41c <_printf_i+0x1bc>
 800a424:	8019      	strh	r1, [r3, #0]
 800a426:	2300      	movs	r3, #0
 800a428:	6123      	str	r3, [r4, #16]
 800a42a:	4616      	mov	r6, r2
 800a42c:	e7bc      	b.n	800a3a8 <_printf_i+0x148>
 800a42e:	6833      	ldr	r3, [r6, #0]
 800a430:	1d1a      	adds	r2, r3, #4
 800a432:	6032      	str	r2, [r6, #0]
 800a434:	681e      	ldr	r6, [r3, #0]
 800a436:	6862      	ldr	r2, [r4, #4]
 800a438:	2100      	movs	r1, #0
 800a43a:	4630      	mov	r0, r6
 800a43c:	f7f5 ff50 	bl	80002e0 <memchr>
 800a440:	b108      	cbz	r0, 800a446 <_printf_i+0x1e6>
 800a442:	1b80      	subs	r0, r0, r6
 800a444:	6060      	str	r0, [r4, #4]
 800a446:	6863      	ldr	r3, [r4, #4]
 800a448:	6123      	str	r3, [r4, #16]
 800a44a:	2300      	movs	r3, #0
 800a44c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a450:	e7aa      	b.n	800a3a8 <_printf_i+0x148>
 800a452:	6923      	ldr	r3, [r4, #16]
 800a454:	4632      	mov	r2, r6
 800a456:	4649      	mov	r1, r9
 800a458:	4640      	mov	r0, r8
 800a45a:	47d0      	blx	sl
 800a45c:	3001      	adds	r0, #1
 800a45e:	d0ad      	beq.n	800a3bc <_printf_i+0x15c>
 800a460:	6823      	ldr	r3, [r4, #0]
 800a462:	079b      	lsls	r3, r3, #30
 800a464:	d413      	bmi.n	800a48e <_printf_i+0x22e>
 800a466:	68e0      	ldr	r0, [r4, #12]
 800a468:	9b03      	ldr	r3, [sp, #12]
 800a46a:	4298      	cmp	r0, r3
 800a46c:	bfb8      	it	lt
 800a46e:	4618      	movlt	r0, r3
 800a470:	e7a6      	b.n	800a3c0 <_printf_i+0x160>
 800a472:	2301      	movs	r3, #1
 800a474:	4632      	mov	r2, r6
 800a476:	4649      	mov	r1, r9
 800a478:	4640      	mov	r0, r8
 800a47a:	47d0      	blx	sl
 800a47c:	3001      	adds	r0, #1
 800a47e:	d09d      	beq.n	800a3bc <_printf_i+0x15c>
 800a480:	3501      	adds	r5, #1
 800a482:	68e3      	ldr	r3, [r4, #12]
 800a484:	9903      	ldr	r1, [sp, #12]
 800a486:	1a5b      	subs	r3, r3, r1
 800a488:	42ab      	cmp	r3, r5
 800a48a:	dcf2      	bgt.n	800a472 <_printf_i+0x212>
 800a48c:	e7eb      	b.n	800a466 <_printf_i+0x206>
 800a48e:	2500      	movs	r5, #0
 800a490:	f104 0619 	add.w	r6, r4, #25
 800a494:	e7f5      	b.n	800a482 <_printf_i+0x222>
 800a496:	bf00      	nop
 800a498:	0800c8e6 	.word	0x0800c8e6
 800a49c:	0800c8f7 	.word	0x0800c8f7

0800a4a0 <std>:
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	b510      	push	{r4, lr}
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	e9c0 3300 	strd	r3, r3, [r0]
 800a4aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4ae:	6083      	str	r3, [r0, #8]
 800a4b0:	8181      	strh	r1, [r0, #12]
 800a4b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a4b4:	81c2      	strh	r2, [r0, #14]
 800a4b6:	6183      	str	r3, [r0, #24]
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	2208      	movs	r2, #8
 800a4bc:	305c      	adds	r0, #92	@ 0x5c
 800a4be:	f000 f906 	bl	800a6ce <memset>
 800a4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f8 <std+0x58>)
 800a4c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a4c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a4fc <std+0x5c>)
 800a4c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a4ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a500 <std+0x60>)
 800a4cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a504 <std+0x64>)
 800a4d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a508 <std+0x68>)
 800a4d4:	6224      	str	r4, [r4, #32]
 800a4d6:	429c      	cmp	r4, r3
 800a4d8:	d006      	beq.n	800a4e8 <std+0x48>
 800a4da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a4de:	4294      	cmp	r4, r2
 800a4e0:	d002      	beq.n	800a4e8 <std+0x48>
 800a4e2:	33d0      	adds	r3, #208	@ 0xd0
 800a4e4:	429c      	cmp	r4, r3
 800a4e6:	d105      	bne.n	800a4f4 <std+0x54>
 800a4e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4f0:	f000 b96a 	b.w	800a7c8 <__retarget_lock_init_recursive>
 800a4f4:	bd10      	pop	{r4, pc}
 800a4f6:	bf00      	nop
 800a4f8:	0800a649 	.word	0x0800a649
 800a4fc:	0800a66b 	.word	0x0800a66b
 800a500:	0800a6a3 	.word	0x0800a6a3
 800a504:	0800a6c7 	.word	0x0800a6c7
 800a508:	24000b30 	.word	0x24000b30

0800a50c <stdio_exit_handler>:
 800a50c:	4a02      	ldr	r2, [pc, #8]	@ (800a518 <stdio_exit_handler+0xc>)
 800a50e:	4903      	ldr	r1, [pc, #12]	@ (800a51c <stdio_exit_handler+0x10>)
 800a510:	4803      	ldr	r0, [pc, #12]	@ (800a520 <stdio_exit_handler+0x14>)
 800a512:	f000 b869 	b.w	800a5e8 <_fwalk_sglue>
 800a516:	bf00      	nop
 800a518:	24000020 	.word	0x24000020
 800a51c:	0800c01d 	.word	0x0800c01d
 800a520:	24000030 	.word	0x24000030

0800a524 <cleanup_stdio>:
 800a524:	6841      	ldr	r1, [r0, #4]
 800a526:	4b0c      	ldr	r3, [pc, #48]	@ (800a558 <cleanup_stdio+0x34>)
 800a528:	4299      	cmp	r1, r3
 800a52a:	b510      	push	{r4, lr}
 800a52c:	4604      	mov	r4, r0
 800a52e:	d001      	beq.n	800a534 <cleanup_stdio+0x10>
 800a530:	f001 fd74 	bl	800c01c <_fflush_r>
 800a534:	68a1      	ldr	r1, [r4, #8]
 800a536:	4b09      	ldr	r3, [pc, #36]	@ (800a55c <cleanup_stdio+0x38>)
 800a538:	4299      	cmp	r1, r3
 800a53a:	d002      	beq.n	800a542 <cleanup_stdio+0x1e>
 800a53c:	4620      	mov	r0, r4
 800a53e:	f001 fd6d 	bl	800c01c <_fflush_r>
 800a542:	68e1      	ldr	r1, [r4, #12]
 800a544:	4b06      	ldr	r3, [pc, #24]	@ (800a560 <cleanup_stdio+0x3c>)
 800a546:	4299      	cmp	r1, r3
 800a548:	d004      	beq.n	800a554 <cleanup_stdio+0x30>
 800a54a:	4620      	mov	r0, r4
 800a54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a550:	f001 bd64 	b.w	800c01c <_fflush_r>
 800a554:	bd10      	pop	{r4, pc}
 800a556:	bf00      	nop
 800a558:	24000b30 	.word	0x24000b30
 800a55c:	24000b98 	.word	0x24000b98
 800a560:	24000c00 	.word	0x24000c00

0800a564 <global_stdio_init.part.0>:
 800a564:	b510      	push	{r4, lr}
 800a566:	4b0b      	ldr	r3, [pc, #44]	@ (800a594 <global_stdio_init.part.0+0x30>)
 800a568:	4c0b      	ldr	r4, [pc, #44]	@ (800a598 <global_stdio_init.part.0+0x34>)
 800a56a:	4a0c      	ldr	r2, [pc, #48]	@ (800a59c <global_stdio_init.part.0+0x38>)
 800a56c:	601a      	str	r2, [r3, #0]
 800a56e:	4620      	mov	r0, r4
 800a570:	2200      	movs	r2, #0
 800a572:	2104      	movs	r1, #4
 800a574:	f7ff ff94 	bl	800a4a0 <std>
 800a578:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a57c:	2201      	movs	r2, #1
 800a57e:	2109      	movs	r1, #9
 800a580:	f7ff ff8e 	bl	800a4a0 <std>
 800a584:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a588:	2202      	movs	r2, #2
 800a58a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a58e:	2112      	movs	r1, #18
 800a590:	f7ff bf86 	b.w	800a4a0 <std>
 800a594:	24000c68 	.word	0x24000c68
 800a598:	24000b30 	.word	0x24000b30
 800a59c:	0800a50d 	.word	0x0800a50d

0800a5a0 <__sfp_lock_acquire>:
 800a5a0:	4801      	ldr	r0, [pc, #4]	@ (800a5a8 <__sfp_lock_acquire+0x8>)
 800a5a2:	f000 b912 	b.w	800a7ca <__retarget_lock_acquire_recursive>
 800a5a6:	bf00      	nop
 800a5a8:	24000c71 	.word	0x24000c71

0800a5ac <__sfp_lock_release>:
 800a5ac:	4801      	ldr	r0, [pc, #4]	@ (800a5b4 <__sfp_lock_release+0x8>)
 800a5ae:	f000 b90d 	b.w	800a7cc <__retarget_lock_release_recursive>
 800a5b2:	bf00      	nop
 800a5b4:	24000c71 	.word	0x24000c71

0800a5b8 <__sinit>:
 800a5b8:	b510      	push	{r4, lr}
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	f7ff fff0 	bl	800a5a0 <__sfp_lock_acquire>
 800a5c0:	6a23      	ldr	r3, [r4, #32]
 800a5c2:	b11b      	cbz	r3, 800a5cc <__sinit+0x14>
 800a5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5c8:	f7ff bff0 	b.w	800a5ac <__sfp_lock_release>
 800a5cc:	4b04      	ldr	r3, [pc, #16]	@ (800a5e0 <__sinit+0x28>)
 800a5ce:	6223      	str	r3, [r4, #32]
 800a5d0:	4b04      	ldr	r3, [pc, #16]	@ (800a5e4 <__sinit+0x2c>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1f5      	bne.n	800a5c4 <__sinit+0xc>
 800a5d8:	f7ff ffc4 	bl	800a564 <global_stdio_init.part.0>
 800a5dc:	e7f2      	b.n	800a5c4 <__sinit+0xc>
 800a5de:	bf00      	nop
 800a5e0:	0800a525 	.word	0x0800a525
 800a5e4:	24000c68 	.word	0x24000c68

0800a5e8 <_fwalk_sglue>:
 800a5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5ec:	4607      	mov	r7, r0
 800a5ee:	4688      	mov	r8, r1
 800a5f0:	4614      	mov	r4, r2
 800a5f2:	2600      	movs	r6, #0
 800a5f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5f8:	f1b9 0901 	subs.w	r9, r9, #1
 800a5fc:	d505      	bpl.n	800a60a <_fwalk_sglue+0x22>
 800a5fe:	6824      	ldr	r4, [r4, #0]
 800a600:	2c00      	cmp	r4, #0
 800a602:	d1f7      	bne.n	800a5f4 <_fwalk_sglue+0xc>
 800a604:	4630      	mov	r0, r6
 800a606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a60a:	89ab      	ldrh	r3, [r5, #12]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d907      	bls.n	800a620 <_fwalk_sglue+0x38>
 800a610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a614:	3301      	adds	r3, #1
 800a616:	d003      	beq.n	800a620 <_fwalk_sglue+0x38>
 800a618:	4629      	mov	r1, r5
 800a61a:	4638      	mov	r0, r7
 800a61c:	47c0      	blx	r8
 800a61e:	4306      	orrs	r6, r0
 800a620:	3568      	adds	r5, #104	@ 0x68
 800a622:	e7e9      	b.n	800a5f8 <_fwalk_sglue+0x10>

0800a624 <iprintf>:
 800a624:	b40f      	push	{r0, r1, r2, r3}
 800a626:	b507      	push	{r0, r1, r2, lr}
 800a628:	4906      	ldr	r1, [pc, #24]	@ (800a644 <iprintf+0x20>)
 800a62a:	ab04      	add	r3, sp, #16
 800a62c:	6808      	ldr	r0, [r1, #0]
 800a62e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a632:	6881      	ldr	r1, [r0, #8]
 800a634:	9301      	str	r3, [sp, #4]
 800a636:	f001 fb55 	bl	800bce4 <_vfiprintf_r>
 800a63a:	b003      	add	sp, #12
 800a63c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a640:	b004      	add	sp, #16
 800a642:	4770      	bx	lr
 800a644:	2400002c 	.word	0x2400002c

0800a648 <__sread>:
 800a648:	b510      	push	{r4, lr}
 800a64a:	460c      	mov	r4, r1
 800a64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a650:	f000 f86c 	bl	800a72c <_read_r>
 800a654:	2800      	cmp	r0, #0
 800a656:	bfab      	itete	ge
 800a658:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a65a:	89a3      	ldrhlt	r3, [r4, #12]
 800a65c:	181b      	addge	r3, r3, r0
 800a65e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a662:	bfac      	ite	ge
 800a664:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a666:	81a3      	strhlt	r3, [r4, #12]
 800a668:	bd10      	pop	{r4, pc}

0800a66a <__swrite>:
 800a66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a66e:	461f      	mov	r7, r3
 800a670:	898b      	ldrh	r3, [r1, #12]
 800a672:	05db      	lsls	r3, r3, #23
 800a674:	4605      	mov	r5, r0
 800a676:	460c      	mov	r4, r1
 800a678:	4616      	mov	r6, r2
 800a67a:	d505      	bpl.n	800a688 <__swrite+0x1e>
 800a67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a680:	2302      	movs	r3, #2
 800a682:	2200      	movs	r2, #0
 800a684:	f000 f840 	bl	800a708 <_lseek_r>
 800a688:	89a3      	ldrh	r3, [r4, #12]
 800a68a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a68e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a692:	81a3      	strh	r3, [r4, #12]
 800a694:	4632      	mov	r2, r6
 800a696:	463b      	mov	r3, r7
 800a698:	4628      	mov	r0, r5
 800a69a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a69e:	f000 b857 	b.w	800a750 <_write_r>

0800a6a2 <__sseek>:
 800a6a2:	b510      	push	{r4, lr}
 800a6a4:	460c      	mov	r4, r1
 800a6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6aa:	f000 f82d 	bl	800a708 <_lseek_r>
 800a6ae:	1c43      	adds	r3, r0, #1
 800a6b0:	89a3      	ldrh	r3, [r4, #12]
 800a6b2:	bf15      	itete	ne
 800a6b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a6b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a6ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6be:	81a3      	strheq	r3, [r4, #12]
 800a6c0:	bf18      	it	ne
 800a6c2:	81a3      	strhne	r3, [r4, #12]
 800a6c4:	bd10      	pop	{r4, pc}

0800a6c6 <__sclose>:
 800a6c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ca:	f000 b80d 	b.w	800a6e8 <_close_r>

0800a6ce <memset>:
 800a6ce:	4402      	add	r2, r0
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d100      	bne.n	800a6d8 <memset+0xa>
 800a6d6:	4770      	bx	lr
 800a6d8:	f803 1b01 	strb.w	r1, [r3], #1
 800a6dc:	e7f9      	b.n	800a6d2 <memset+0x4>
	...

0800a6e0 <_localeconv_r>:
 800a6e0:	4800      	ldr	r0, [pc, #0]	@ (800a6e4 <_localeconv_r+0x4>)
 800a6e2:	4770      	bx	lr
 800a6e4:	2400016c 	.word	0x2400016c

0800a6e8 <_close_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d06      	ldr	r5, [pc, #24]	@ (800a704 <_close_r+0x1c>)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	602b      	str	r3, [r5, #0]
 800a6f4:	f7f6 fd69 	bl	80011ca <_close>
 800a6f8:	1c43      	adds	r3, r0, #1
 800a6fa:	d102      	bne.n	800a702 <_close_r+0x1a>
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	b103      	cbz	r3, 800a702 <_close_r+0x1a>
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	bd38      	pop	{r3, r4, r5, pc}
 800a704:	24000c6c 	.word	0x24000c6c

0800a708 <_lseek_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4d07      	ldr	r5, [pc, #28]	@ (800a728 <_lseek_r+0x20>)
 800a70c:	4604      	mov	r4, r0
 800a70e:	4608      	mov	r0, r1
 800a710:	4611      	mov	r1, r2
 800a712:	2200      	movs	r2, #0
 800a714:	602a      	str	r2, [r5, #0]
 800a716:	461a      	mov	r2, r3
 800a718:	f7f6 fd7e 	bl	8001218 <_lseek>
 800a71c:	1c43      	adds	r3, r0, #1
 800a71e:	d102      	bne.n	800a726 <_lseek_r+0x1e>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	b103      	cbz	r3, 800a726 <_lseek_r+0x1e>
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	24000c6c 	.word	0x24000c6c

0800a72c <_read_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	4d07      	ldr	r5, [pc, #28]	@ (800a74c <_read_r+0x20>)
 800a730:	4604      	mov	r4, r0
 800a732:	4608      	mov	r0, r1
 800a734:	4611      	mov	r1, r2
 800a736:	2200      	movs	r2, #0
 800a738:	602a      	str	r2, [r5, #0]
 800a73a:	461a      	mov	r2, r3
 800a73c:	f7f6 fd28 	bl	8001190 <_read>
 800a740:	1c43      	adds	r3, r0, #1
 800a742:	d102      	bne.n	800a74a <_read_r+0x1e>
 800a744:	682b      	ldr	r3, [r5, #0]
 800a746:	b103      	cbz	r3, 800a74a <_read_r+0x1e>
 800a748:	6023      	str	r3, [r4, #0]
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	24000c6c 	.word	0x24000c6c

0800a750 <_write_r>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	4d07      	ldr	r5, [pc, #28]	@ (800a770 <_write_r+0x20>)
 800a754:	4604      	mov	r4, r0
 800a756:	4608      	mov	r0, r1
 800a758:	4611      	mov	r1, r2
 800a75a:	2200      	movs	r2, #0
 800a75c:	602a      	str	r2, [r5, #0]
 800a75e:	461a      	mov	r2, r3
 800a760:	f7f7 f842 	bl	80017e8 <_write>
 800a764:	1c43      	adds	r3, r0, #1
 800a766:	d102      	bne.n	800a76e <_write_r+0x1e>
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	b103      	cbz	r3, 800a76e <_write_r+0x1e>
 800a76c:	6023      	str	r3, [r4, #0]
 800a76e:	bd38      	pop	{r3, r4, r5, pc}
 800a770:	24000c6c 	.word	0x24000c6c

0800a774 <__errno>:
 800a774:	4b01      	ldr	r3, [pc, #4]	@ (800a77c <__errno+0x8>)
 800a776:	6818      	ldr	r0, [r3, #0]
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	2400002c 	.word	0x2400002c

0800a780 <__libc_init_array>:
 800a780:	b570      	push	{r4, r5, r6, lr}
 800a782:	4d0d      	ldr	r5, [pc, #52]	@ (800a7b8 <__libc_init_array+0x38>)
 800a784:	4c0d      	ldr	r4, [pc, #52]	@ (800a7bc <__libc_init_array+0x3c>)
 800a786:	1b64      	subs	r4, r4, r5
 800a788:	10a4      	asrs	r4, r4, #2
 800a78a:	2600      	movs	r6, #0
 800a78c:	42a6      	cmp	r6, r4
 800a78e:	d109      	bne.n	800a7a4 <__libc_init_array+0x24>
 800a790:	4d0b      	ldr	r5, [pc, #44]	@ (800a7c0 <__libc_init_array+0x40>)
 800a792:	4c0c      	ldr	r4, [pc, #48]	@ (800a7c4 <__libc_init_array+0x44>)
 800a794:	f002 f810 	bl	800c7b8 <_init>
 800a798:	1b64      	subs	r4, r4, r5
 800a79a:	10a4      	asrs	r4, r4, #2
 800a79c:	2600      	movs	r6, #0
 800a79e:	42a6      	cmp	r6, r4
 800a7a0:	d105      	bne.n	800a7ae <__libc_init_array+0x2e>
 800a7a2:	bd70      	pop	{r4, r5, r6, pc}
 800a7a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7a8:	4798      	blx	r3
 800a7aa:	3601      	adds	r6, #1
 800a7ac:	e7ee      	b.n	800a78c <__libc_init_array+0xc>
 800a7ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7b2:	4798      	blx	r3
 800a7b4:	3601      	adds	r6, #1
 800a7b6:	e7f2      	b.n	800a79e <__libc_init_array+0x1e>
 800a7b8:	0800cc88 	.word	0x0800cc88
 800a7bc:	0800cc88 	.word	0x0800cc88
 800a7c0:	0800cc88 	.word	0x0800cc88
 800a7c4:	0800cc8c 	.word	0x0800cc8c

0800a7c8 <__retarget_lock_init_recursive>:
 800a7c8:	4770      	bx	lr

0800a7ca <__retarget_lock_acquire_recursive>:
 800a7ca:	4770      	bx	lr

0800a7cc <__retarget_lock_release_recursive>:
 800a7cc:	4770      	bx	lr

0800a7ce <quorem>:
 800a7ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d2:	6903      	ldr	r3, [r0, #16]
 800a7d4:	690c      	ldr	r4, [r1, #16]
 800a7d6:	42a3      	cmp	r3, r4
 800a7d8:	4607      	mov	r7, r0
 800a7da:	db7e      	blt.n	800a8da <quorem+0x10c>
 800a7dc:	3c01      	subs	r4, #1
 800a7de:	f101 0814 	add.w	r8, r1, #20
 800a7e2:	00a3      	lsls	r3, r4, #2
 800a7e4:	f100 0514 	add.w	r5, r0, #20
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7ee:	9301      	str	r3, [sp, #4]
 800a7f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a800:	fbb2 f6f3 	udiv	r6, r2, r3
 800a804:	d32e      	bcc.n	800a864 <quorem+0x96>
 800a806:	f04f 0a00 	mov.w	sl, #0
 800a80a:	46c4      	mov	ip, r8
 800a80c:	46ae      	mov	lr, r5
 800a80e:	46d3      	mov	fp, sl
 800a810:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a814:	b298      	uxth	r0, r3
 800a816:	fb06 a000 	mla	r0, r6, r0, sl
 800a81a:	0c02      	lsrs	r2, r0, #16
 800a81c:	0c1b      	lsrs	r3, r3, #16
 800a81e:	fb06 2303 	mla	r3, r6, r3, r2
 800a822:	f8de 2000 	ldr.w	r2, [lr]
 800a826:	b280      	uxth	r0, r0
 800a828:	b292      	uxth	r2, r2
 800a82a:	1a12      	subs	r2, r2, r0
 800a82c:	445a      	add	r2, fp
 800a82e:	f8de 0000 	ldr.w	r0, [lr]
 800a832:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a836:	b29b      	uxth	r3, r3
 800a838:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a83c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a840:	b292      	uxth	r2, r2
 800a842:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a846:	45e1      	cmp	r9, ip
 800a848:	f84e 2b04 	str.w	r2, [lr], #4
 800a84c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a850:	d2de      	bcs.n	800a810 <quorem+0x42>
 800a852:	9b00      	ldr	r3, [sp, #0]
 800a854:	58eb      	ldr	r3, [r5, r3]
 800a856:	b92b      	cbnz	r3, 800a864 <quorem+0x96>
 800a858:	9b01      	ldr	r3, [sp, #4]
 800a85a:	3b04      	subs	r3, #4
 800a85c:	429d      	cmp	r5, r3
 800a85e:	461a      	mov	r2, r3
 800a860:	d32f      	bcc.n	800a8c2 <quorem+0xf4>
 800a862:	613c      	str	r4, [r7, #16]
 800a864:	4638      	mov	r0, r7
 800a866:	f001 f90b 	bl	800ba80 <__mcmp>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	db25      	blt.n	800a8ba <quorem+0xec>
 800a86e:	4629      	mov	r1, r5
 800a870:	2000      	movs	r0, #0
 800a872:	f858 2b04 	ldr.w	r2, [r8], #4
 800a876:	f8d1 c000 	ldr.w	ip, [r1]
 800a87a:	fa1f fe82 	uxth.w	lr, r2
 800a87e:	fa1f f38c 	uxth.w	r3, ip
 800a882:	eba3 030e 	sub.w	r3, r3, lr
 800a886:	4403      	add	r3, r0
 800a888:	0c12      	lsrs	r2, r2, #16
 800a88a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a88e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a892:	b29b      	uxth	r3, r3
 800a894:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a898:	45c1      	cmp	r9, r8
 800a89a:	f841 3b04 	str.w	r3, [r1], #4
 800a89e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a8a2:	d2e6      	bcs.n	800a872 <quorem+0xa4>
 800a8a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8ac:	b922      	cbnz	r2, 800a8b8 <quorem+0xea>
 800a8ae:	3b04      	subs	r3, #4
 800a8b0:	429d      	cmp	r5, r3
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	d30b      	bcc.n	800a8ce <quorem+0x100>
 800a8b6:	613c      	str	r4, [r7, #16]
 800a8b8:	3601      	adds	r6, #1
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	b003      	add	sp, #12
 800a8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c2:	6812      	ldr	r2, [r2, #0]
 800a8c4:	3b04      	subs	r3, #4
 800a8c6:	2a00      	cmp	r2, #0
 800a8c8:	d1cb      	bne.n	800a862 <quorem+0x94>
 800a8ca:	3c01      	subs	r4, #1
 800a8cc:	e7c6      	b.n	800a85c <quorem+0x8e>
 800a8ce:	6812      	ldr	r2, [r2, #0]
 800a8d0:	3b04      	subs	r3, #4
 800a8d2:	2a00      	cmp	r2, #0
 800a8d4:	d1ef      	bne.n	800a8b6 <quorem+0xe8>
 800a8d6:	3c01      	subs	r4, #1
 800a8d8:	e7ea      	b.n	800a8b0 <quorem+0xe2>
 800a8da:	2000      	movs	r0, #0
 800a8dc:	e7ee      	b.n	800a8bc <quorem+0xee>
	...

0800a8e0 <_dtoa_r>:
 800a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	ed2d 8b02 	vpush	{d8}
 800a8e8:	69c7      	ldr	r7, [r0, #28]
 800a8ea:	b091      	sub	sp, #68	@ 0x44
 800a8ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a8f0:	ec55 4b10 	vmov	r4, r5, d0
 800a8f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a8f6:	9107      	str	r1, [sp, #28]
 800a8f8:	4681      	mov	r9, r0
 800a8fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8fc:	930d      	str	r3, [sp, #52]	@ 0x34
 800a8fe:	b97f      	cbnz	r7, 800a920 <_dtoa_r+0x40>
 800a900:	2010      	movs	r0, #16
 800a902:	f000 fd8d 	bl	800b420 <malloc>
 800a906:	4602      	mov	r2, r0
 800a908:	f8c9 001c 	str.w	r0, [r9, #28]
 800a90c:	b920      	cbnz	r0, 800a918 <_dtoa_r+0x38>
 800a90e:	4ba0      	ldr	r3, [pc, #640]	@ (800ab90 <_dtoa_r+0x2b0>)
 800a910:	21ef      	movs	r1, #239	@ 0xef
 800a912:	48a0      	ldr	r0, [pc, #640]	@ (800ab94 <_dtoa_r+0x2b4>)
 800a914:	f001 fc5c 	bl	800c1d0 <__assert_func>
 800a918:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a91c:	6007      	str	r7, [r0, #0]
 800a91e:	60c7      	str	r7, [r0, #12]
 800a920:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a924:	6819      	ldr	r1, [r3, #0]
 800a926:	b159      	cbz	r1, 800a940 <_dtoa_r+0x60>
 800a928:	685a      	ldr	r2, [r3, #4]
 800a92a:	604a      	str	r2, [r1, #4]
 800a92c:	2301      	movs	r3, #1
 800a92e:	4093      	lsls	r3, r2
 800a930:	608b      	str	r3, [r1, #8]
 800a932:	4648      	mov	r0, r9
 800a934:	f000 fe6a 	bl	800b60c <_Bfree>
 800a938:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a93c:	2200      	movs	r2, #0
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	1e2b      	subs	r3, r5, #0
 800a942:	bfbb      	ittet	lt
 800a944:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a948:	9303      	strlt	r3, [sp, #12]
 800a94a:	2300      	movge	r3, #0
 800a94c:	2201      	movlt	r2, #1
 800a94e:	bfac      	ite	ge
 800a950:	6033      	strge	r3, [r6, #0]
 800a952:	6032      	strlt	r2, [r6, #0]
 800a954:	4b90      	ldr	r3, [pc, #576]	@ (800ab98 <_dtoa_r+0x2b8>)
 800a956:	9e03      	ldr	r6, [sp, #12]
 800a958:	43b3      	bics	r3, r6
 800a95a:	d110      	bne.n	800a97e <_dtoa_r+0x9e>
 800a95c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a95e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a962:	6013      	str	r3, [r2, #0]
 800a964:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a968:	4323      	orrs	r3, r4
 800a96a:	f000 84de 	beq.w	800b32a <_dtoa_r+0xa4a>
 800a96e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a970:	4f8a      	ldr	r7, [pc, #552]	@ (800ab9c <_dtoa_r+0x2bc>)
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 84e0 	beq.w	800b338 <_dtoa_r+0xa58>
 800a978:	1cfb      	adds	r3, r7, #3
 800a97a:	f000 bcdb 	b.w	800b334 <_dtoa_r+0xa54>
 800a97e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a982:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a98a:	d10a      	bne.n	800a9a2 <_dtoa_r+0xc2>
 800a98c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a98e:	2301      	movs	r3, #1
 800a990:	6013      	str	r3, [r2, #0]
 800a992:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a994:	b113      	cbz	r3, 800a99c <_dtoa_r+0xbc>
 800a996:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a998:	4b81      	ldr	r3, [pc, #516]	@ (800aba0 <_dtoa_r+0x2c0>)
 800a99a:	6013      	str	r3, [r2, #0]
 800a99c:	4f81      	ldr	r7, [pc, #516]	@ (800aba4 <_dtoa_r+0x2c4>)
 800a99e:	f000 bccb 	b.w	800b338 <_dtoa_r+0xa58>
 800a9a2:	aa0e      	add	r2, sp, #56	@ 0x38
 800a9a4:	a90f      	add	r1, sp, #60	@ 0x3c
 800a9a6:	4648      	mov	r0, r9
 800a9a8:	eeb0 0b48 	vmov.f64	d0, d8
 800a9ac:	f001 f918 	bl	800bbe0 <__d2b>
 800a9b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a9b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9b6:	9001      	str	r0, [sp, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d045      	beq.n	800aa48 <_dtoa_r+0x168>
 800a9bc:	eeb0 7b48 	vmov.f64	d7, d8
 800a9c0:	ee18 1a90 	vmov	r1, s17
 800a9c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a9c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a9cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a9d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a9d4:	2500      	movs	r5, #0
 800a9d6:	ee07 1a90 	vmov	s15, r1
 800a9da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a9de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ab78 <_dtoa_r+0x298>
 800a9e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a9e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ab80 <_dtoa_r+0x2a0>
 800a9ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a9ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ab88 <_dtoa_r+0x2a8>
 800a9f2:	ee07 3a90 	vmov	s15, r3
 800a9f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a9fa:	eeb0 7b46 	vmov.f64	d7, d6
 800a9fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 800aa02:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800aa06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800aa0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa0e:	ee16 8a90 	vmov	r8, s13
 800aa12:	d508      	bpl.n	800aa26 <_dtoa_r+0x146>
 800aa14:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800aa18:	eeb4 6b47 	vcmp.f64	d6, d7
 800aa1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa20:	bf18      	it	ne
 800aa22:	f108 38ff 	addne.w	r8, r8, #4294967295
 800aa26:	f1b8 0f16 	cmp.w	r8, #22
 800aa2a:	d82b      	bhi.n	800aa84 <_dtoa_r+0x1a4>
 800aa2c:	495e      	ldr	r1, [pc, #376]	@ (800aba8 <_dtoa_r+0x2c8>)
 800aa2e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800aa32:	ed91 7b00 	vldr	d7, [r1]
 800aa36:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800aa3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa3e:	d501      	bpl.n	800aa44 <_dtoa_r+0x164>
 800aa40:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa44:	2100      	movs	r1, #0
 800aa46:	e01e      	b.n	800aa86 <_dtoa_r+0x1a6>
 800aa48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa4a:	4413      	add	r3, r2
 800aa4c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800aa50:	2920      	cmp	r1, #32
 800aa52:	bfc1      	itttt	gt
 800aa54:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800aa58:	408e      	lslgt	r6, r1
 800aa5a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800aa5e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800aa62:	bfd6      	itet	le
 800aa64:	f1c1 0120 	rsble	r1, r1, #32
 800aa68:	4331      	orrgt	r1, r6
 800aa6a:	fa04 f101 	lslle.w	r1, r4, r1
 800aa6e:	ee07 1a90 	vmov	s15, r1
 800aa72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800aa76:	3b01      	subs	r3, #1
 800aa78:	ee17 1a90 	vmov	r1, s15
 800aa7c:	2501      	movs	r5, #1
 800aa7e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800aa82:	e7a8      	b.n	800a9d6 <_dtoa_r+0xf6>
 800aa84:	2101      	movs	r1, #1
 800aa86:	1ad2      	subs	r2, r2, r3
 800aa88:	1e53      	subs	r3, r2, #1
 800aa8a:	9306      	str	r3, [sp, #24]
 800aa8c:	bf45      	ittet	mi
 800aa8e:	f1c2 0301 	rsbmi	r3, r2, #1
 800aa92:	9305      	strmi	r3, [sp, #20]
 800aa94:	2300      	movpl	r3, #0
 800aa96:	2300      	movmi	r3, #0
 800aa98:	bf4c      	ite	mi
 800aa9a:	9306      	strmi	r3, [sp, #24]
 800aa9c:	9305      	strpl	r3, [sp, #20]
 800aa9e:	f1b8 0f00 	cmp.w	r8, #0
 800aaa2:	910c      	str	r1, [sp, #48]	@ 0x30
 800aaa4:	db18      	blt.n	800aad8 <_dtoa_r+0x1f8>
 800aaa6:	9b06      	ldr	r3, [sp, #24]
 800aaa8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800aaac:	4443      	add	r3, r8
 800aaae:	9306      	str	r3, [sp, #24]
 800aab0:	2300      	movs	r3, #0
 800aab2:	9a07      	ldr	r2, [sp, #28]
 800aab4:	2a09      	cmp	r2, #9
 800aab6:	d849      	bhi.n	800ab4c <_dtoa_r+0x26c>
 800aab8:	2a05      	cmp	r2, #5
 800aaba:	bfc4      	itt	gt
 800aabc:	3a04      	subgt	r2, #4
 800aabe:	9207      	strgt	r2, [sp, #28]
 800aac0:	9a07      	ldr	r2, [sp, #28]
 800aac2:	f1a2 0202 	sub.w	r2, r2, #2
 800aac6:	bfcc      	ite	gt
 800aac8:	2400      	movgt	r4, #0
 800aaca:	2401      	movle	r4, #1
 800aacc:	2a03      	cmp	r2, #3
 800aace:	d848      	bhi.n	800ab62 <_dtoa_r+0x282>
 800aad0:	e8df f002 	tbb	[pc, r2]
 800aad4:	3a2c2e0b 	.word	0x3a2c2e0b
 800aad8:	9b05      	ldr	r3, [sp, #20]
 800aada:	2200      	movs	r2, #0
 800aadc:	eba3 0308 	sub.w	r3, r3, r8
 800aae0:	9305      	str	r3, [sp, #20]
 800aae2:	920a      	str	r2, [sp, #40]	@ 0x28
 800aae4:	f1c8 0300 	rsb	r3, r8, #0
 800aae8:	e7e3      	b.n	800aab2 <_dtoa_r+0x1d2>
 800aaea:	2200      	movs	r2, #0
 800aaec:	9208      	str	r2, [sp, #32]
 800aaee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aaf0:	2a00      	cmp	r2, #0
 800aaf2:	dc39      	bgt.n	800ab68 <_dtoa_r+0x288>
 800aaf4:	f04f 0b01 	mov.w	fp, #1
 800aaf8:	46da      	mov	sl, fp
 800aafa:	465a      	mov	r2, fp
 800aafc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ab00:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ab04:	2100      	movs	r1, #0
 800ab06:	2004      	movs	r0, #4
 800ab08:	f100 0614 	add.w	r6, r0, #20
 800ab0c:	4296      	cmp	r6, r2
 800ab0e:	d930      	bls.n	800ab72 <_dtoa_r+0x292>
 800ab10:	6079      	str	r1, [r7, #4]
 800ab12:	4648      	mov	r0, r9
 800ab14:	9304      	str	r3, [sp, #16]
 800ab16:	f000 fd39 	bl	800b58c <_Balloc>
 800ab1a:	9b04      	ldr	r3, [sp, #16]
 800ab1c:	4607      	mov	r7, r0
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d146      	bne.n	800abb0 <_dtoa_r+0x2d0>
 800ab22:	4b22      	ldr	r3, [pc, #136]	@ (800abac <_dtoa_r+0x2cc>)
 800ab24:	4602      	mov	r2, r0
 800ab26:	f240 11af 	movw	r1, #431	@ 0x1af
 800ab2a:	e6f2      	b.n	800a912 <_dtoa_r+0x32>
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	e7dd      	b.n	800aaec <_dtoa_r+0x20c>
 800ab30:	2200      	movs	r2, #0
 800ab32:	9208      	str	r2, [sp, #32]
 800ab34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab36:	eb08 0b02 	add.w	fp, r8, r2
 800ab3a:	f10b 0a01 	add.w	sl, fp, #1
 800ab3e:	4652      	mov	r2, sl
 800ab40:	2a01      	cmp	r2, #1
 800ab42:	bfb8      	it	lt
 800ab44:	2201      	movlt	r2, #1
 800ab46:	e7db      	b.n	800ab00 <_dtoa_r+0x220>
 800ab48:	2201      	movs	r2, #1
 800ab4a:	e7f2      	b.n	800ab32 <_dtoa_r+0x252>
 800ab4c:	2401      	movs	r4, #1
 800ab4e:	2200      	movs	r2, #0
 800ab50:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ab54:	f04f 3bff 	mov.w	fp, #4294967295
 800ab58:	2100      	movs	r1, #0
 800ab5a:	46da      	mov	sl, fp
 800ab5c:	2212      	movs	r2, #18
 800ab5e:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab60:	e7ce      	b.n	800ab00 <_dtoa_r+0x220>
 800ab62:	2201      	movs	r2, #1
 800ab64:	9208      	str	r2, [sp, #32]
 800ab66:	e7f5      	b.n	800ab54 <_dtoa_r+0x274>
 800ab68:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ab6c:	46da      	mov	sl, fp
 800ab6e:	465a      	mov	r2, fp
 800ab70:	e7c6      	b.n	800ab00 <_dtoa_r+0x220>
 800ab72:	3101      	adds	r1, #1
 800ab74:	0040      	lsls	r0, r0, #1
 800ab76:	e7c7      	b.n	800ab08 <_dtoa_r+0x228>
 800ab78:	636f4361 	.word	0x636f4361
 800ab7c:	3fd287a7 	.word	0x3fd287a7
 800ab80:	8b60c8b3 	.word	0x8b60c8b3
 800ab84:	3fc68a28 	.word	0x3fc68a28
 800ab88:	509f79fb 	.word	0x509f79fb
 800ab8c:	3fd34413 	.word	0x3fd34413
 800ab90:	0800c915 	.word	0x0800c915
 800ab94:	0800c92c 	.word	0x0800c92c
 800ab98:	7ff00000 	.word	0x7ff00000
 800ab9c:	0800c911 	.word	0x0800c911
 800aba0:	0800c8e5 	.word	0x0800c8e5
 800aba4:	0800c8e4 	.word	0x0800c8e4
 800aba8:	0800ca28 	.word	0x0800ca28
 800abac:	0800c984 	.word	0x0800c984
 800abb0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800abb4:	f1ba 0f0e 	cmp.w	sl, #14
 800abb8:	6010      	str	r0, [r2, #0]
 800abba:	d86f      	bhi.n	800ac9c <_dtoa_r+0x3bc>
 800abbc:	2c00      	cmp	r4, #0
 800abbe:	d06d      	beq.n	800ac9c <_dtoa_r+0x3bc>
 800abc0:	f1b8 0f00 	cmp.w	r8, #0
 800abc4:	f340 80c2 	ble.w	800ad4c <_dtoa_r+0x46c>
 800abc8:	4aca      	ldr	r2, [pc, #808]	@ (800aef4 <_dtoa_r+0x614>)
 800abca:	f008 010f 	and.w	r1, r8, #15
 800abce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800abd2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800abd6:	ed92 7b00 	vldr	d7, [r2]
 800abda:	ea4f 1128 	mov.w	r1, r8, asr #4
 800abde:	f000 80a9 	beq.w	800ad34 <_dtoa_r+0x454>
 800abe2:	4ac5      	ldr	r2, [pc, #788]	@ (800aef8 <_dtoa_r+0x618>)
 800abe4:	ed92 6b08 	vldr	d6, [r2, #32]
 800abe8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800abec:	ed8d 6b02 	vstr	d6, [sp, #8]
 800abf0:	f001 010f 	and.w	r1, r1, #15
 800abf4:	2203      	movs	r2, #3
 800abf6:	48c0      	ldr	r0, [pc, #768]	@ (800aef8 <_dtoa_r+0x618>)
 800abf8:	2900      	cmp	r1, #0
 800abfa:	f040 809d 	bne.w	800ad38 <_dtoa_r+0x458>
 800abfe:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ac02:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ac06:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac0a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac10:	2900      	cmp	r1, #0
 800ac12:	f000 80c1 	beq.w	800ad98 <_dtoa_r+0x4b8>
 800ac16:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ac1a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ac1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac22:	f140 80b9 	bpl.w	800ad98 <_dtoa_r+0x4b8>
 800ac26:	f1ba 0f00 	cmp.w	sl, #0
 800ac2a:	f000 80b5 	beq.w	800ad98 <_dtoa_r+0x4b8>
 800ac2e:	f1bb 0f00 	cmp.w	fp, #0
 800ac32:	dd31      	ble.n	800ac98 <_dtoa_r+0x3b8>
 800ac34:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ac38:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac40:	f108 31ff 	add.w	r1, r8, #4294967295
 800ac44:	9104      	str	r1, [sp, #16]
 800ac46:	3201      	adds	r2, #1
 800ac48:	465c      	mov	r4, fp
 800ac4a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ac4e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ac52:	ee07 2a90 	vmov	s15, r2
 800ac56:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ac5a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ac5e:	ee15 2a90 	vmov	r2, s11
 800ac62:	ec51 0b15 	vmov	r0, r1, d5
 800ac66:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ac6a:	2c00      	cmp	r4, #0
 800ac6c:	f040 8098 	bne.w	800ada0 <_dtoa_r+0x4c0>
 800ac70:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ac74:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ac78:	ec41 0b17 	vmov	d7, r0, r1
 800ac7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac84:	f300 8261 	bgt.w	800b14a <_dtoa_r+0x86a>
 800ac88:	eeb1 7b47 	vneg.f64	d7, d7
 800ac8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac94:	f100 80f5 	bmi.w	800ae82 <_dtoa_r+0x5a2>
 800ac98:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ac9c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ac9e:	2a00      	cmp	r2, #0
 800aca0:	f2c0 812c 	blt.w	800aefc <_dtoa_r+0x61c>
 800aca4:	f1b8 0f0e 	cmp.w	r8, #14
 800aca8:	f300 8128 	bgt.w	800aefc <_dtoa_r+0x61c>
 800acac:	4b91      	ldr	r3, [pc, #580]	@ (800aef4 <_dtoa_r+0x614>)
 800acae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800acb2:	ed93 6b00 	vldr	d6, [r3]
 800acb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acb8:	2b00      	cmp	r3, #0
 800acba:	da03      	bge.n	800acc4 <_dtoa_r+0x3e4>
 800acbc:	f1ba 0f00 	cmp.w	sl, #0
 800acc0:	f340 80d2 	ble.w	800ae68 <_dtoa_r+0x588>
 800acc4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800acc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800accc:	463e      	mov	r6, r7
 800acce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800acd2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800acd6:	ee15 3a10 	vmov	r3, s10
 800acda:	3330      	adds	r3, #48	@ 0x30
 800acdc:	f806 3b01 	strb.w	r3, [r6], #1
 800ace0:	1bf3      	subs	r3, r6, r7
 800ace2:	459a      	cmp	sl, r3
 800ace4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ace8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800acec:	f040 80f8 	bne.w	800aee0 <_dtoa_r+0x600>
 800acf0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800acf4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800acf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acfc:	f300 80dd 	bgt.w	800aeba <_dtoa_r+0x5da>
 800ad00:	eeb4 7b46 	vcmp.f64	d7, d6
 800ad04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad08:	d104      	bne.n	800ad14 <_dtoa_r+0x434>
 800ad0a:	ee15 3a10 	vmov	r3, s10
 800ad0e:	07db      	lsls	r3, r3, #31
 800ad10:	f100 80d3 	bmi.w	800aeba <_dtoa_r+0x5da>
 800ad14:	9901      	ldr	r1, [sp, #4]
 800ad16:	4648      	mov	r0, r9
 800ad18:	f000 fc78 	bl	800b60c <_Bfree>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad20:	7033      	strb	r3, [r6, #0]
 800ad22:	f108 0301 	add.w	r3, r8, #1
 800ad26:	6013      	str	r3, [r2, #0]
 800ad28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f000 8304 	beq.w	800b338 <_dtoa_r+0xa58>
 800ad30:	601e      	str	r6, [r3, #0]
 800ad32:	e301      	b.n	800b338 <_dtoa_r+0xa58>
 800ad34:	2202      	movs	r2, #2
 800ad36:	e75e      	b.n	800abf6 <_dtoa_r+0x316>
 800ad38:	07cc      	lsls	r4, r1, #31
 800ad3a:	d504      	bpl.n	800ad46 <_dtoa_r+0x466>
 800ad3c:	ed90 6b00 	vldr	d6, [r0]
 800ad40:	3201      	adds	r2, #1
 800ad42:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad46:	1049      	asrs	r1, r1, #1
 800ad48:	3008      	adds	r0, #8
 800ad4a:	e755      	b.n	800abf8 <_dtoa_r+0x318>
 800ad4c:	d022      	beq.n	800ad94 <_dtoa_r+0x4b4>
 800ad4e:	f1c8 0100 	rsb	r1, r8, #0
 800ad52:	4a68      	ldr	r2, [pc, #416]	@ (800aef4 <_dtoa_r+0x614>)
 800ad54:	f001 000f 	and.w	r0, r1, #15
 800ad58:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ad5c:	ed92 7b00 	vldr	d7, [r2]
 800ad60:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ad64:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad68:	4863      	ldr	r0, [pc, #396]	@ (800aef8 <_dtoa_r+0x618>)
 800ad6a:	1109      	asrs	r1, r1, #4
 800ad6c:	2400      	movs	r4, #0
 800ad6e:	2202      	movs	r2, #2
 800ad70:	b929      	cbnz	r1, 800ad7e <_dtoa_r+0x49e>
 800ad72:	2c00      	cmp	r4, #0
 800ad74:	f43f af49 	beq.w	800ac0a <_dtoa_r+0x32a>
 800ad78:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad7c:	e745      	b.n	800ac0a <_dtoa_r+0x32a>
 800ad7e:	07ce      	lsls	r6, r1, #31
 800ad80:	d505      	bpl.n	800ad8e <_dtoa_r+0x4ae>
 800ad82:	ed90 6b00 	vldr	d6, [r0]
 800ad86:	3201      	adds	r2, #1
 800ad88:	2401      	movs	r4, #1
 800ad8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad8e:	1049      	asrs	r1, r1, #1
 800ad90:	3008      	adds	r0, #8
 800ad92:	e7ed      	b.n	800ad70 <_dtoa_r+0x490>
 800ad94:	2202      	movs	r2, #2
 800ad96:	e738      	b.n	800ac0a <_dtoa_r+0x32a>
 800ad98:	f8cd 8010 	str.w	r8, [sp, #16]
 800ad9c:	4654      	mov	r4, sl
 800ad9e:	e754      	b.n	800ac4a <_dtoa_r+0x36a>
 800ada0:	4a54      	ldr	r2, [pc, #336]	@ (800aef4 <_dtoa_r+0x614>)
 800ada2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ada6:	ed12 4b02 	vldr	d4, [r2, #-8]
 800adaa:	9a08      	ldr	r2, [sp, #32]
 800adac:	ec41 0b17 	vmov	d7, r0, r1
 800adb0:	443c      	add	r4, r7
 800adb2:	b34a      	cbz	r2, 800ae08 <_dtoa_r+0x528>
 800adb4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800adb8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800adbc:	463e      	mov	r6, r7
 800adbe:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800adc2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800adc6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800adca:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800adce:	ee14 2a90 	vmov	r2, s9
 800add2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800add6:	3230      	adds	r2, #48	@ 0x30
 800add8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800addc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ade0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade4:	f806 2b01 	strb.w	r2, [r6], #1
 800ade8:	d438      	bmi.n	800ae5c <_dtoa_r+0x57c>
 800adea:	ee32 5b46 	vsub.f64	d5, d2, d6
 800adee:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800adf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf6:	d462      	bmi.n	800aebe <_dtoa_r+0x5de>
 800adf8:	42a6      	cmp	r6, r4
 800adfa:	f43f af4d 	beq.w	800ac98 <_dtoa_r+0x3b8>
 800adfe:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ae02:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ae06:	e7e0      	b.n	800adca <_dtoa_r+0x4ea>
 800ae08:	4621      	mov	r1, r4
 800ae0a:	463e      	mov	r6, r7
 800ae0c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ae10:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ae14:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ae18:	ee14 2a90 	vmov	r2, s9
 800ae1c:	3230      	adds	r2, #48	@ 0x30
 800ae1e:	f806 2b01 	strb.w	r2, [r6], #1
 800ae22:	42a6      	cmp	r6, r4
 800ae24:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ae28:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ae2c:	d119      	bne.n	800ae62 <_dtoa_r+0x582>
 800ae2e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800ae32:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ae36:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ae3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae3e:	dc3e      	bgt.n	800aebe <_dtoa_r+0x5de>
 800ae40:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ae44:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ae48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae4c:	f57f af24 	bpl.w	800ac98 <_dtoa_r+0x3b8>
 800ae50:	460e      	mov	r6, r1
 800ae52:	3901      	subs	r1, #1
 800ae54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae58:	2b30      	cmp	r3, #48	@ 0x30
 800ae5a:	d0f9      	beq.n	800ae50 <_dtoa_r+0x570>
 800ae5c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ae60:	e758      	b.n	800ad14 <_dtoa_r+0x434>
 800ae62:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ae66:	e7d5      	b.n	800ae14 <_dtoa_r+0x534>
 800ae68:	d10b      	bne.n	800ae82 <_dtoa_r+0x5a2>
 800ae6a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ae6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ae72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ae7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae7e:	f2c0 8161 	blt.w	800b144 <_dtoa_r+0x864>
 800ae82:	2400      	movs	r4, #0
 800ae84:	4625      	mov	r5, r4
 800ae86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae88:	43db      	mvns	r3, r3
 800ae8a:	9304      	str	r3, [sp, #16]
 800ae8c:	463e      	mov	r6, r7
 800ae8e:	f04f 0800 	mov.w	r8, #0
 800ae92:	4621      	mov	r1, r4
 800ae94:	4648      	mov	r0, r9
 800ae96:	f000 fbb9 	bl	800b60c <_Bfree>
 800ae9a:	2d00      	cmp	r5, #0
 800ae9c:	d0de      	beq.n	800ae5c <_dtoa_r+0x57c>
 800ae9e:	f1b8 0f00 	cmp.w	r8, #0
 800aea2:	d005      	beq.n	800aeb0 <_dtoa_r+0x5d0>
 800aea4:	45a8      	cmp	r8, r5
 800aea6:	d003      	beq.n	800aeb0 <_dtoa_r+0x5d0>
 800aea8:	4641      	mov	r1, r8
 800aeaa:	4648      	mov	r0, r9
 800aeac:	f000 fbae 	bl	800b60c <_Bfree>
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	4648      	mov	r0, r9
 800aeb4:	f000 fbaa 	bl	800b60c <_Bfree>
 800aeb8:	e7d0      	b.n	800ae5c <_dtoa_r+0x57c>
 800aeba:	f8cd 8010 	str.w	r8, [sp, #16]
 800aebe:	4633      	mov	r3, r6
 800aec0:	461e      	mov	r6, r3
 800aec2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aec6:	2a39      	cmp	r2, #57	@ 0x39
 800aec8:	d106      	bne.n	800aed8 <_dtoa_r+0x5f8>
 800aeca:	429f      	cmp	r7, r3
 800aecc:	d1f8      	bne.n	800aec0 <_dtoa_r+0x5e0>
 800aece:	9a04      	ldr	r2, [sp, #16]
 800aed0:	3201      	adds	r2, #1
 800aed2:	9204      	str	r2, [sp, #16]
 800aed4:	2230      	movs	r2, #48	@ 0x30
 800aed6:	703a      	strb	r2, [r7, #0]
 800aed8:	781a      	ldrb	r2, [r3, #0]
 800aeda:	3201      	adds	r2, #1
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	e7bd      	b.n	800ae5c <_dtoa_r+0x57c>
 800aee0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aee4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeec:	f47f aeef 	bne.w	800acce <_dtoa_r+0x3ee>
 800aef0:	e710      	b.n	800ad14 <_dtoa_r+0x434>
 800aef2:	bf00      	nop
 800aef4:	0800ca28 	.word	0x0800ca28
 800aef8:	0800ca00 	.word	0x0800ca00
 800aefc:	9908      	ldr	r1, [sp, #32]
 800aefe:	2900      	cmp	r1, #0
 800af00:	f000 80e3 	beq.w	800b0ca <_dtoa_r+0x7ea>
 800af04:	9907      	ldr	r1, [sp, #28]
 800af06:	2901      	cmp	r1, #1
 800af08:	f300 80c8 	bgt.w	800b09c <_dtoa_r+0x7bc>
 800af0c:	2d00      	cmp	r5, #0
 800af0e:	f000 80c1 	beq.w	800b094 <_dtoa_r+0x7b4>
 800af12:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800af16:	9e05      	ldr	r6, [sp, #20]
 800af18:	461c      	mov	r4, r3
 800af1a:	9304      	str	r3, [sp, #16]
 800af1c:	9b05      	ldr	r3, [sp, #20]
 800af1e:	4413      	add	r3, r2
 800af20:	9305      	str	r3, [sp, #20]
 800af22:	9b06      	ldr	r3, [sp, #24]
 800af24:	2101      	movs	r1, #1
 800af26:	4413      	add	r3, r2
 800af28:	4648      	mov	r0, r9
 800af2a:	9306      	str	r3, [sp, #24]
 800af2c:	f000 fc22 	bl	800b774 <__i2b>
 800af30:	9b04      	ldr	r3, [sp, #16]
 800af32:	4605      	mov	r5, r0
 800af34:	b166      	cbz	r6, 800af50 <_dtoa_r+0x670>
 800af36:	9a06      	ldr	r2, [sp, #24]
 800af38:	2a00      	cmp	r2, #0
 800af3a:	dd09      	ble.n	800af50 <_dtoa_r+0x670>
 800af3c:	42b2      	cmp	r2, r6
 800af3e:	9905      	ldr	r1, [sp, #20]
 800af40:	bfa8      	it	ge
 800af42:	4632      	movge	r2, r6
 800af44:	1a89      	subs	r1, r1, r2
 800af46:	9105      	str	r1, [sp, #20]
 800af48:	9906      	ldr	r1, [sp, #24]
 800af4a:	1ab6      	subs	r6, r6, r2
 800af4c:	1a8a      	subs	r2, r1, r2
 800af4e:	9206      	str	r2, [sp, #24]
 800af50:	b1fb      	cbz	r3, 800af92 <_dtoa_r+0x6b2>
 800af52:	9a08      	ldr	r2, [sp, #32]
 800af54:	2a00      	cmp	r2, #0
 800af56:	f000 80bc 	beq.w	800b0d2 <_dtoa_r+0x7f2>
 800af5a:	b19c      	cbz	r4, 800af84 <_dtoa_r+0x6a4>
 800af5c:	4629      	mov	r1, r5
 800af5e:	4622      	mov	r2, r4
 800af60:	4648      	mov	r0, r9
 800af62:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af64:	f000 fcc6 	bl	800b8f4 <__pow5mult>
 800af68:	9a01      	ldr	r2, [sp, #4]
 800af6a:	4601      	mov	r1, r0
 800af6c:	4605      	mov	r5, r0
 800af6e:	4648      	mov	r0, r9
 800af70:	f000 fc16 	bl	800b7a0 <__multiply>
 800af74:	9901      	ldr	r1, [sp, #4]
 800af76:	9004      	str	r0, [sp, #16]
 800af78:	4648      	mov	r0, r9
 800af7a:	f000 fb47 	bl	800b60c <_Bfree>
 800af7e:	9a04      	ldr	r2, [sp, #16]
 800af80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af82:	9201      	str	r2, [sp, #4]
 800af84:	1b1a      	subs	r2, r3, r4
 800af86:	d004      	beq.n	800af92 <_dtoa_r+0x6b2>
 800af88:	9901      	ldr	r1, [sp, #4]
 800af8a:	4648      	mov	r0, r9
 800af8c:	f000 fcb2 	bl	800b8f4 <__pow5mult>
 800af90:	9001      	str	r0, [sp, #4]
 800af92:	2101      	movs	r1, #1
 800af94:	4648      	mov	r0, r9
 800af96:	f000 fbed 	bl	800b774 <__i2b>
 800af9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af9c:	4604      	mov	r4, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 81d0 	beq.w	800b344 <_dtoa_r+0xa64>
 800afa4:	461a      	mov	r2, r3
 800afa6:	4601      	mov	r1, r0
 800afa8:	4648      	mov	r0, r9
 800afaa:	f000 fca3 	bl	800b8f4 <__pow5mult>
 800afae:	9b07      	ldr	r3, [sp, #28]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	4604      	mov	r4, r0
 800afb4:	f300 8095 	bgt.w	800b0e2 <_dtoa_r+0x802>
 800afb8:	9b02      	ldr	r3, [sp, #8]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f040 808b 	bne.w	800b0d6 <_dtoa_r+0x7f6>
 800afc0:	9b03      	ldr	r3, [sp, #12]
 800afc2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800afc6:	2a00      	cmp	r2, #0
 800afc8:	f040 8087 	bne.w	800b0da <_dtoa_r+0x7fa>
 800afcc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800afd0:	0d12      	lsrs	r2, r2, #20
 800afd2:	0512      	lsls	r2, r2, #20
 800afd4:	2a00      	cmp	r2, #0
 800afd6:	f000 8082 	beq.w	800b0de <_dtoa_r+0x7fe>
 800afda:	9b05      	ldr	r3, [sp, #20]
 800afdc:	3301      	adds	r3, #1
 800afde:	9305      	str	r3, [sp, #20]
 800afe0:	9b06      	ldr	r3, [sp, #24]
 800afe2:	3301      	adds	r3, #1
 800afe4:	9306      	str	r3, [sp, #24]
 800afe6:	2301      	movs	r3, #1
 800afe8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afec:	2b00      	cmp	r3, #0
 800afee:	f000 81af 	beq.w	800b350 <_dtoa_r+0xa70>
 800aff2:	6922      	ldr	r2, [r4, #16]
 800aff4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aff8:	6910      	ldr	r0, [r2, #16]
 800affa:	f000 fb6f 	bl	800b6dc <__hi0bits>
 800affe:	f1c0 0020 	rsb	r0, r0, #32
 800b002:	9b06      	ldr	r3, [sp, #24]
 800b004:	4418      	add	r0, r3
 800b006:	f010 001f 	ands.w	r0, r0, #31
 800b00a:	d076      	beq.n	800b0fa <_dtoa_r+0x81a>
 800b00c:	f1c0 0220 	rsb	r2, r0, #32
 800b010:	2a04      	cmp	r2, #4
 800b012:	dd69      	ble.n	800b0e8 <_dtoa_r+0x808>
 800b014:	9b05      	ldr	r3, [sp, #20]
 800b016:	f1c0 001c 	rsb	r0, r0, #28
 800b01a:	4403      	add	r3, r0
 800b01c:	9305      	str	r3, [sp, #20]
 800b01e:	9b06      	ldr	r3, [sp, #24]
 800b020:	4406      	add	r6, r0
 800b022:	4403      	add	r3, r0
 800b024:	9306      	str	r3, [sp, #24]
 800b026:	9b05      	ldr	r3, [sp, #20]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	dd05      	ble.n	800b038 <_dtoa_r+0x758>
 800b02c:	9901      	ldr	r1, [sp, #4]
 800b02e:	461a      	mov	r2, r3
 800b030:	4648      	mov	r0, r9
 800b032:	f000 fcb9 	bl	800b9a8 <__lshift>
 800b036:	9001      	str	r0, [sp, #4]
 800b038:	9b06      	ldr	r3, [sp, #24]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	dd05      	ble.n	800b04a <_dtoa_r+0x76a>
 800b03e:	4621      	mov	r1, r4
 800b040:	461a      	mov	r2, r3
 800b042:	4648      	mov	r0, r9
 800b044:	f000 fcb0 	bl	800b9a8 <__lshift>
 800b048:	4604      	mov	r4, r0
 800b04a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d056      	beq.n	800b0fe <_dtoa_r+0x81e>
 800b050:	9801      	ldr	r0, [sp, #4]
 800b052:	4621      	mov	r1, r4
 800b054:	f000 fd14 	bl	800ba80 <__mcmp>
 800b058:	2800      	cmp	r0, #0
 800b05a:	da50      	bge.n	800b0fe <_dtoa_r+0x81e>
 800b05c:	f108 33ff 	add.w	r3, r8, #4294967295
 800b060:	9304      	str	r3, [sp, #16]
 800b062:	9901      	ldr	r1, [sp, #4]
 800b064:	2300      	movs	r3, #0
 800b066:	220a      	movs	r2, #10
 800b068:	4648      	mov	r0, r9
 800b06a:	f000 faf1 	bl	800b650 <__multadd>
 800b06e:	9b08      	ldr	r3, [sp, #32]
 800b070:	9001      	str	r0, [sp, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	f000 816e 	beq.w	800b354 <_dtoa_r+0xa74>
 800b078:	4629      	mov	r1, r5
 800b07a:	2300      	movs	r3, #0
 800b07c:	220a      	movs	r2, #10
 800b07e:	4648      	mov	r0, r9
 800b080:	f000 fae6 	bl	800b650 <__multadd>
 800b084:	f1bb 0f00 	cmp.w	fp, #0
 800b088:	4605      	mov	r5, r0
 800b08a:	dc64      	bgt.n	800b156 <_dtoa_r+0x876>
 800b08c:	9b07      	ldr	r3, [sp, #28]
 800b08e:	2b02      	cmp	r3, #2
 800b090:	dc3e      	bgt.n	800b110 <_dtoa_r+0x830>
 800b092:	e060      	b.n	800b156 <_dtoa_r+0x876>
 800b094:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b096:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b09a:	e73c      	b.n	800af16 <_dtoa_r+0x636>
 800b09c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b0a0:	42a3      	cmp	r3, r4
 800b0a2:	bfbf      	itttt	lt
 800b0a4:	1ae2      	sublt	r2, r4, r3
 800b0a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b0a8:	189b      	addlt	r3, r3, r2
 800b0aa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800b0ac:	bfae      	itee	ge
 800b0ae:	1b1c      	subge	r4, r3, r4
 800b0b0:	4623      	movlt	r3, r4
 800b0b2:	2400      	movlt	r4, #0
 800b0b4:	f1ba 0f00 	cmp.w	sl, #0
 800b0b8:	bfb5      	itete	lt
 800b0ba:	9a05      	ldrlt	r2, [sp, #20]
 800b0bc:	9e05      	ldrge	r6, [sp, #20]
 800b0be:	eba2 060a 	sublt.w	r6, r2, sl
 800b0c2:	4652      	movge	r2, sl
 800b0c4:	bfb8      	it	lt
 800b0c6:	2200      	movlt	r2, #0
 800b0c8:	e727      	b.n	800af1a <_dtoa_r+0x63a>
 800b0ca:	9e05      	ldr	r6, [sp, #20]
 800b0cc:	9d08      	ldr	r5, [sp, #32]
 800b0ce:	461c      	mov	r4, r3
 800b0d0:	e730      	b.n	800af34 <_dtoa_r+0x654>
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	e758      	b.n	800af88 <_dtoa_r+0x6a8>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	e786      	b.n	800afe8 <_dtoa_r+0x708>
 800b0da:	9b02      	ldr	r3, [sp, #8]
 800b0dc:	e784      	b.n	800afe8 <_dtoa_r+0x708>
 800b0de:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b0e0:	e783      	b.n	800afea <_dtoa_r+0x70a>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0e6:	e784      	b.n	800aff2 <_dtoa_r+0x712>
 800b0e8:	d09d      	beq.n	800b026 <_dtoa_r+0x746>
 800b0ea:	9b05      	ldr	r3, [sp, #20]
 800b0ec:	321c      	adds	r2, #28
 800b0ee:	4413      	add	r3, r2
 800b0f0:	9305      	str	r3, [sp, #20]
 800b0f2:	9b06      	ldr	r3, [sp, #24]
 800b0f4:	4416      	add	r6, r2
 800b0f6:	4413      	add	r3, r2
 800b0f8:	e794      	b.n	800b024 <_dtoa_r+0x744>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	e7f5      	b.n	800b0ea <_dtoa_r+0x80a>
 800b0fe:	f1ba 0f00 	cmp.w	sl, #0
 800b102:	f8cd 8010 	str.w	r8, [sp, #16]
 800b106:	46d3      	mov	fp, sl
 800b108:	dc21      	bgt.n	800b14e <_dtoa_r+0x86e>
 800b10a:	9b07      	ldr	r3, [sp, #28]
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	dd1e      	ble.n	800b14e <_dtoa_r+0x86e>
 800b110:	f1bb 0f00 	cmp.w	fp, #0
 800b114:	f47f aeb7 	bne.w	800ae86 <_dtoa_r+0x5a6>
 800b118:	4621      	mov	r1, r4
 800b11a:	465b      	mov	r3, fp
 800b11c:	2205      	movs	r2, #5
 800b11e:	4648      	mov	r0, r9
 800b120:	f000 fa96 	bl	800b650 <__multadd>
 800b124:	4601      	mov	r1, r0
 800b126:	4604      	mov	r4, r0
 800b128:	9801      	ldr	r0, [sp, #4]
 800b12a:	f000 fca9 	bl	800ba80 <__mcmp>
 800b12e:	2800      	cmp	r0, #0
 800b130:	f77f aea9 	ble.w	800ae86 <_dtoa_r+0x5a6>
 800b134:	463e      	mov	r6, r7
 800b136:	2331      	movs	r3, #49	@ 0x31
 800b138:	f806 3b01 	strb.w	r3, [r6], #1
 800b13c:	9b04      	ldr	r3, [sp, #16]
 800b13e:	3301      	adds	r3, #1
 800b140:	9304      	str	r3, [sp, #16]
 800b142:	e6a4      	b.n	800ae8e <_dtoa_r+0x5ae>
 800b144:	f8cd 8010 	str.w	r8, [sp, #16]
 800b148:	4654      	mov	r4, sl
 800b14a:	4625      	mov	r5, r4
 800b14c:	e7f2      	b.n	800b134 <_dtoa_r+0x854>
 800b14e:	9b08      	ldr	r3, [sp, #32]
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 8103 	beq.w	800b35c <_dtoa_r+0xa7c>
 800b156:	2e00      	cmp	r6, #0
 800b158:	dd05      	ble.n	800b166 <_dtoa_r+0x886>
 800b15a:	4629      	mov	r1, r5
 800b15c:	4632      	mov	r2, r6
 800b15e:	4648      	mov	r0, r9
 800b160:	f000 fc22 	bl	800b9a8 <__lshift>
 800b164:	4605      	mov	r5, r0
 800b166:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d058      	beq.n	800b21e <_dtoa_r+0x93e>
 800b16c:	6869      	ldr	r1, [r5, #4]
 800b16e:	4648      	mov	r0, r9
 800b170:	f000 fa0c 	bl	800b58c <_Balloc>
 800b174:	4606      	mov	r6, r0
 800b176:	b928      	cbnz	r0, 800b184 <_dtoa_r+0x8a4>
 800b178:	4b82      	ldr	r3, [pc, #520]	@ (800b384 <_dtoa_r+0xaa4>)
 800b17a:	4602      	mov	r2, r0
 800b17c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b180:	f7ff bbc7 	b.w	800a912 <_dtoa_r+0x32>
 800b184:	692a      	ldr	r2, [r5, #16]
 800b186:	3202      	adds	r2, #2
 800b188:	0092      	lsls	r2, r2, #2
 800b18a:	f105 010c 	add.w	r1, r5, #12
 800b18e:	300c      	adds	r0, #12
 800b190:	f001 f810 	bl	800c1b4 <memcpy>
 800b194:	2201      	movs	r2, #1
 800b196:	4631      	mov	r1, r6
 800b198:	4648      	mov	r0, r9
 800b19a:	f000 fc05 	bl	800b9a8 <__lshift>
 800b19e:	1c7b      	adds	r3, r7, #1
 800b1a0:	9305      	str	r3, [sp, #20]
 800b1a2:	eb07 030b 	add.w	r3, r7, fp
 800b1a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1a8:	9b02      	ldr	r3, [sp, #8]
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	46a8      	mov	r8, r5
 800b1b0:	9308      	str	r3, [sp, #32]
 800b1b2:	4605      	mov	r5, r0
 800b1b4:	9b05      	ldr	r3, [sp, #20]
 800b1b6:	9801      	ldr	r0, [sp, #4]
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	f103 3bff 	add.w	fp, r3, #4294967295
 800b1be:	f7ff fb06 	bl	800a7ce <quorem>
 800b1c2:	4641      	mov	r1, r8
 800b1c4:	9002      	str	r0, [sp, #8]
 800b1c6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b1ca:	9801      	ldr	r0, [sp, #4]
 800b1cc:	f000 fc58 	bl	800ba80 <__mcmp>
 800b1d0:	462a      	mov	r2, r5
 800b1d2:	9006      	str	r0, [sp, #24]
 800b1d4:	4621      	mov	r1, r4
 800b1d6:	4648      	mov	r0, r9
 800b1d8:	f000 fc6e 	bl	800bab8 <__mdiff>
 800b1dc:	68c2      	ldr	r2, [r0, #12]
 800b1de:	4606      	mov	r6, r0
 800b1e0:	b9fa      	cbnz	r2, 800b222 <_dtoa_r+0x942>
 800b1e2:	4601      	mov	r1, r0
 800b1e4:	9801      	ldr	r0, [sp, #4]
 800b1e6:	f000 fc4b 	bl	800ba80 <__mcmp>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	4648      	mov	r0, r9
 800b1f0:	920a      	str	r2, [sp, #40]	@ 0x28
 800b1f2:	f000 fa0b 	bl	800b60c <_Bfree>
 800b1f6:	9b07      	ldr	r3, [sp, #28]
 800b1f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1fa:	9e05      	ldr	r6, [sp, #20]
 800b1fc:	ea43 0102 	orr.w	r1, r3, r2
 800b200:	9b08      	ldr	r3, [sp, #32]
 800b202:	4319      	orrs	r1, r3
 800b204:	d10f      	bne.n	800b226 <_dtoa_r+0x946>
 800b206:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b20a:	d028      	beq.n	800b25e <_dtoa_r+0x97e>
 800b20c:	9b06      	ldr	r3, [sp, #24]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	dd02      	ble.n	800b218 <_dtoa_r+0x938>
 800b212:	9b02      	ldr	r3, [sp, #8]
 800b214:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b218:	f88b a000 	strb.w	sl, [fp]
 800b21c:	e639      	b.n	800ae92 <_dtoa_r+0x5b2>
 800b21e:	4628      	mov	r0, r5
 800b220:	e7bd      	b.n	800b19e <_dtoa_r+0x8be>
 800b222:	2201      	movs	r2, #1
 800b224:	e7e2      	b.n	800b1ec <_dtoa_r+0x90c>
 800b226:	9b06      	ldr	r3, [sp, #24]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	db04      	blt.n	800b236 <_dtoa_r+0x956>
 800b22c:	9907      	ldr	r1, [sp, #28]
 800b22e:	430b      	orrs	r3, r1
 800b230:	9908      	ldr	r1, [sp, #32]
 800b232:	430b      	orrs	r3, r1
 800b234:	d120      	bne.n	800b278 <_dtoa_r+0x998>
 800b236:	2a00      	cmp	r2, #0
 800b238:	ddee      	ble.n	800b218 <_dtoa_r+0x938>
 800b23a:	9901      	ldr	r1, [sp, #4]
 800b23c:	2201      	movs	r2, #1
 800b23e:	4648      	mov	r0, r9
 800b240:	f000 fbb2 	bl	800b9a8 <__lshift>
 800b244:	4621      	mov	r1, r4
 800b246:	9001      	str	r0, [sp, #4]
 800b248:	f000 fc1a 	bl	800ba80 <__mcmp>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	dc03      	bgt.n	800b258 <_dtoa_r+0x978>
 800b250:	d1e2      	bne.n	800b218 <_dtoa_r+0x938>
 800b252:	f01a 0f01 	tst.w	sl, #1
 800b256:	d0df      	beq.n	800b218 <_dtoa_r+0x938>
 800b258:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b25c:	d1d9      	bne.n	800b212 <_dtoa_r+0x932>
 800b25e:	2339      	movs	r3, #57	@ 0x39
 800b260:	f88b 3000 	strb.w	r3, [fp]
 800b264:	4633      	mov	r3, r6
 800b266:	461e      	mov	r6, r3
 800b268:	3b01      	subs	r3, #1
 800b26a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b26e:	2a39      	cmp	r2, #57	@ 0x39
 800b270:	d053      	beq.n	800b31a <_dtoa_r+0xa3a>
 800b272:	3201      	adds	r2, #1
 800b274:	701a      	strb	r2, [r3, #0]
 800b276:	e60c      	b.n	800ae92 <_dtoa_r+0x5b2>
 800b278:	2a00      	cmp	r2, #0
 800b27a:	dd07      	ble.n	800b28c <_dtoa_r+0x9ac>
 800b27c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b280:	d0ed      	beq.n	800b25e <_dtoa_r+0x97e>
 800b282:	f10a 0301 	add.w	r3, sl, #1
 800b286:	f88b 3000 	strb.w	r3, [fp]
 800b28a:	e602      	b.n	800ae92 <_dtoa_r+0x5b2>
 800b28c:	9b05      	ldr	r3, [sp, #20]
 800b28e:	9a05      	ldr	r2, [sp, #20]
 800b290:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b296:	4293      	cmp	r3, r2
 800b298:	d029      	beq.n	800b2ee <_dtoa_r+0xa0e>
 800b29a:	9901      	ldr	r1, [sp, #4]
 800b29c:	2300      	movs	r3, #0
 800b29e:	220a      	movs	r2, #10
 800b2a0:	4648      	mov	r0, r9
 800b2a2:	f000 f9d5 	bl	800b650 <__multadd>
 800b2a6:	45a8      	cmp	r8, r5
 800b2a8:	9001      	str	r0, [sp, #4]
 800b2aa:	f04f 0300 	mov.w	r3, #0
 800b2ae:	f04f 020a 	mov.w	r2, #10
 800b2b2:	4641      	mov	r1, r8
 800b2b4:	4648      	mov	r0, r9
 800b2b6:	d107      	bne.n	800b2c8 <_dtoa_r+0x9e8>
 800b2b8:	f000 f9ca 	bl	800b650 <__multadd>
 800b2bc:	4680      	mov	r8, r0
 800b2be:	4605      	mov	r5, r0
 800b2c0:	9b05      	ldr	r3, [sp, #20]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	9305      	str	r3, [sp, #20]
 800b2c6:	e775      	b.n	800b1b4 <_dtoa_r+0x8d4>
 800b2c8:	f000 f9c2 	bl	800b650 <__multadd>
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	4680      	mov	r8, r0
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	220a      	movs	r2, #10
 800b2d4:	4648      	mov	r0, r9
 800b2d6:	f000 f9bb 	bl	800b650 <__multadd>
 800b2da:	4605      	mov	r5, r0
 800b2dc:	e7f0      	b.n	800b2c0 <_dtoa_r+0x9e0>
 800b2de:	f1bb 0f00 	cmp.w	fp, #0
 800b2e2:	bfcc      	ite	gt
 800b2e4:	465e      	movgt	r6, fp
 800b2e6:	2601      	movle	r6, #1
 800b2e8:	443e      	add	r6, r7
 800b2ea:	f04f 0800 	mov.w	r8, #0
 800b2ee:	9901      	ldr	r1, [sp, #4]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	4648      	mov	r0, r9
 800b2f4:	f000 fb58 	bl	800b9a8 <__lshift>
 800b2f8:	4621      	mov	r1, r4
 800b2fa:	9001      	str	r0, [sp, #4]
 800b2fc:	f000 fbc0 	bl	800ba80 <__mcmp>
 800b300:	2800      	cmp	r0, #0
 800b302:	dcaf      	bgt.n	800b264 <_dtoa_r+0x984>
 800b304:	d102      	bne.n	800b30c <_dtoa_r+0xa2c>
 800b306:	f01a 0f01 	tst.w	sl, #1
 800b30a:	d1ab      	bne.n	800b264 <_dtoa_r+0x984>
 800b30c:	4633      	mov	r3, r6
 800b30e:	461e      	mov	r6, r3
 800b310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b314:	2a30      	cmp	r2, #48	@ 0x30
 800b316:	d0fa      	beq.n	800b30e <_dtoa_r+0xa2e>
 800b318:	e5bb      	b.n	800ae92 <_dtoa_r+0x5b2>
 800b31a:	429f      	cmp	r7, r3
 800b31c:	d1a3      	bne.n	800b266 <_dtoa_r+0x986>
 800b31e:	9b04      	ldr	r3, [sp, #16]
 800b320:	3301      	adds	r3, #1
 800b322:	9304      	str	r3, [sp, #16]
 800b324:	2331      	movs	r3, #49	@ 0x31
 800b326:	703b      	strb	r3, [r7, #0]
 800b328:	e5b3      	b.n	800ae92 <_dtoa_r+0x5b2>
 800b32a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b32c:	4f16      	ldr	r7, [pc, #88]	@ (800b388 <_dtoa_r+0xaa8>)
 800b32e:	b11b      	cbz	r3, 800b338 <_dtoa_r+0xa58>
 800b330:	f107 0308 	add.w	r3, r7, #8
 800b334:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b336:	6013      	str	r3, [r2, #0]
 800b338:	4638      	mov	r0, r7
 800b33a:	b011      	add	sp, #68	@ 0x44
 800b33c:	ecbd 8b02 	vpop	{d8}
 800b340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b344:	9b07      	ldr	r3, [sp, #28]
 800b346:	2b01      	cmp	r3, #1
 800b348:	f77f ae36 	ble.w	800afb8 <_dtoa_r+0x6d8>
 800b34c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b34e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b350:	2001      	movs	r0, #1
 800b352:	e656      	b.n	800b002 <_dtoa_r+0x722>
 800b354:	f1bb 0f00 	cmp.w	fp, #0
 800b358:	f77f aed7 	ble.w	800b10a <_dtoa_r+0x82a>
 800b35c:	463e      	mov	r6, r7
 800b35e:	9801      	ldr	r0, [sp, #4]
 800b360:	4621      	mov	r1, r4
 800b362:	f7ff fa34 	bl	800a7ce <quorem>
 800b366:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b36a:	f806 ab01 	strb.w	sl, [r6], #1
 800b36e:	1bf2      	subs	r2, r6, r7
 800b370:	4593      	cmp	fp, r2
 800b372:	ddb4      	ble.n	800b2de <_dtoa_r+0x9fe>
 800b374:	9901      	ldr	r1, [sp, #4]
 800b376:	2300      	movs	r3, #0
 800b378:	220a      	movs	r2, #10
 800b37a:	4648      	mov	r0, r9
 800b37c:	f000 f968 	bl	800b650 <__multadd>
 800b380:	9001      	str	r0, [sp, #4]
 800b382:	e7ec      	b.n	800b35e <_dtoa_r+0xa7e>
 800b384:	0800c984 	.word	0x0800c984
 800b388:	0800c908 	.word	0x0800c908

0800b38c <_free_r>:
 800b38c:	b538      	push	{r3, r4, r5, lr}
 800b38e:	4605      	mov	r5, r0
 800b390:	2900      	cmp	r1, #0
 800b392:	d041      	beq.n	800b418 <_free_r+0x8c>
 800b394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b398:	1f0c      	subs	r4, r1, #4
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	bfb8      	it	lt
 800b39e:	18e4      	addlt	r4, r4, r3
 800b3a0:	f000 f8e8 	bl	800b574 <__malloc_lock>
 800b3a4:	4a1d      	ldr	r2, [pc, #116]	@ (800b41c <_free_r+0x90>)
 800b3a6:	6813      	ldr	r3, [r2, #0]
 800b3a8:	b933      	cbnz	r3, 800b3b8 <_free_r+0x2c>
 800b3aa:	6063      	str	r3, [r4, #4]
 800b3ac:	6014      	str	r4, [r2, #0]
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3b4:	f000 b8e4 	b.w	800b580 <__malloc_unlock>
 800b3b8:	42a3      	cmp	r3, r4
 800b3ba:	d908      	bls.n	800b3ce <_free_r+0x42>
 800b3bc:	6820      	ldr	r0, [r4, #0]
 800b3be:	1821      	adds	r1, r4, r0
 800b3c0:	428b      	cmp	r3, r1
 800b3c2:	bf01      	itttt	eq
 800b3c4:	6819      	ldreq	r1, [r3, #0]
 800b3c6:	685b      	ldreq	r3, [r3, #4]
 800b3c8:	1809      	addeq	r1, r1, r0
 800b3ca:	6021      	streq	r1, [r4, #0]
 800b3cc:	e7ed      	b.n	800b3aa <_free_r+0x1e>
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	b10b      	cbz	r3, 800b3d8 <_free_r+0x4c>
 800b3d4:	42a3      	cmp	r3, r4
 800b3d6:	d9fa      	bls.n	800b3ce <_free_r+0x42>
 800b3d8:	6811      	ldr	r1, [r2, #0]
 800b3da:	1850      	adds	r0, r2, r1
 800b3dc:	42a0      	cmp	r0, r4
 800b3de:	d10b      	bne.n	800b3f8 <_free_r+0x6c>
 800b3e0:	6820      	ldr	r0, [r4, #0]
 800b3e2:	4401      	add	r1, r0
 800b3e4:	1850      	adds	r0, r2, r1
 800b3e6:	4283      	cmp	r3, r0
 800b3e8:	6011      	str	r1, [r2, #0]
 800b3ea:	d1e0      	bne.n	800b3ae <_free_r+0x22>
 800b3ec:	6818      	ldr	r0, [r3, #0]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	6053      	str	r3, [r2, #4]
 800b3f2:	4408      	add	r0, r1
 800b3f4:	6010      	str	r0, [r2, #0]
 800b3f6:	e7da      	b.n	800b3ae <_free_r+0x22>
 800b3f8:	d902      	bls.n	800b400 <_free_r+0x74>
 800b3fa:	230c      	movs	r3, #12
 800b3fc:	602b      	str	r3, [r5, #0]
 800b3fe:	e7d6      	b.n	800b3ae <_free_r+0x22>
 800b400:	6820      	ldr	r0, [r4, #0]
 800b402:	1821      	adds	r1, r4, r0
 800b404:	428b      	cmp	r3, r1
 800b406:	bf04      	itt	eq
 800b408:	6819      	ldreq	r1, [r3, #0]
 800b40a:	685b      	ldreq	r3, [r3, #4]
 800b40c:	6063      	str	r3, [r4, #4]
 800b40e:	bf04      	itt	eq
 800b410:	1809      	addeq	r1, r1, r0
 800b412:	6021      	streq	r1, [r4, #0]
 800b414:	6054      	str	r4, [r2, #4]
 800b416:	e7ca      	b.n	800b3ae <_free_r+0x22>
 800b418:	bd38      	pop	{r3, r4, r5, pc}
 800b41a:	bf00      	nop
 800b41c:	24000c78 	.word	0x24000c78

0800b420 <malloc>:
 800b420:	4b02      	ldr	r3, [pc, #8]	@ (800b42c <malloc+0xc>)
 800b422:	4601      	mov	r1, r0
 800b424:	6818      	ldr	r0, [r3, #0]
 800b426:	f000 b825 	b.w	800b474 <_malloc_r>
 800b42a:	bf00      	nop
 800b42c:	2400002c 	.word	0x2400002c

0800b430 <sbrk_aligned>:
 800b430:	b570      	push	{r4, r5, r6, lr}
 800b432:	4e0f      	ldr	r6, [pc, #60]	@ (800b470 <sbrk_aligned+0x40>)
 800b434:	460c      	mov	r4, r1
 800b436:	6831      	ldr	r1, [r6, #0]
 800b438:	4605      	mov	r5, r0
 800b43a:	b911      	cbnz	r1, 800b442 <sbrk_aligned+0x12>
 800b43c:	f000 feaa 	bl	800c194 <_sbrk_r>
 800b440:	6030      	str	r0, [r6, #0]
 800b442:	4621      	mov	r1, r4
 800b444:	4628      	mov	r0, r5
 800b446:	f000 fea5 	bl	800c194 <_sbrk_r>
 800b44a:	1c43      	adds	r3, r0, #1
 800b44c:	d103      	bne.n	800b456 <sbrk_aligned+0x26>
 800b44e:	f04f 34ff 	mov.w	r4, #4294967295
 800b452:	4620      	mov	r0, r4
 800b454:	bd70      	pop	{r4, r5, r6, pc}
 800b456:	1cc4      	adds	r4, r0, #3
 800b458:	f024 0403 	bic.w	r4, r4, #3
 800b45c:	42a0      	cmp	r0, r4
 800b45e:	d0f8      	beq.n	800b452 <sbrk_aligned+0x22>
 800b460:	1a21      	subs	r1, r4, r0
 800b462:	4628      	mov	r0, r5
 800b464:	f000 fe96 	bl	800c194 <_sbrk_r>
 800b468:	3001      	adds	r0, #1
 800b46a:	d1f2      	bne.n	800b452 <sbrk_aligned+0x22>
 800b46c:	e7ef      	b.n	800b44e <sbrk_aligned+0x1e>
 800b46e:	bf00      	nop
 800b470:	24000c74 	.word	0x24000c74

0800b474 <_malloc_r>:
 800b474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b478:	1ccd      	adds	r5, r1, #3
 800b47a:	f025 0503 	bic.w	r5, r5, #3
 800b47e:	3508      	adds	r5, #8
 800b480:	2d0c      	cmp	r5, #12
 800b482:	bf38      	it	cc
 800b484:	250c      	movcc	r5, #12
 800b486:	2d00      	cmp	r5, #0
 800b488:	4606      	mov	r6, r0
 800b48a:	db01      	blt.n	800b490 <_malloc_r+0x1c>
 800b48c:	42a9      	cmp	r1, r5
 800b48e:	d904      	bls.n	800b49a <_malloc_r+0x26>
 800b490:	230c      	movs	r3, #12
 800b492:	6033      	str	r3, [r6, #0]
 800b494:	2000      	movs	r0, #0
 800b496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b49a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b570 <_malloc_r+0xfc>
 800b49e:	f000 f869 	bl	800b574 <__malloc_lock>
 800b4a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b4a6:	461c      	mov	r4, r3
 800b4a8:	bb44      	cbnz	r4, 800b4fc <_malloc_r+0x88>
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	f7ff ffbf 	bl	800b430 <sbrk_aligned>
 800b4b2:	1c43      	adds	r3, r0, #1
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	d158      	bne.n	800b56a <_malloc_r+0xf6>
 800b4b8:	f8d8 4000 	ldr.w	r4, [r8]
 800b4bc:	4627      	mov	r7, r4
 800b4be:	2f00      	cmp	r7, #0
 800b4c0:	d143      	bne.n	800b54a <_malloc_r+0xd6>
 800b4c2:	2c00      	cmp	r4, #0
 800b4c4:	d04b      	beq.n	800b55e <_malloc_r+0xea>
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	4639      	mov	r1, r7
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	eb04 0903 	add.w	r9, r4, r3
 800b4d0:	f000 fe60 	bl	800c194 <_sbrk_r>
 800b4d4:	4581      	cmp	r9, r0
 800b4d6:	d142      	bne.n	800b55e <_malloc_r+0xea>
 800b4d8:	6821      	ldr	r1, [r4, #0]
 800b4da:	1a6d      	subs	r5, r5, r1
 800b4dc:	4629      	mov	r1, r5
 800b4de:	4630      	mov	r0, r6
 800b4e0:	f7ff ffa6 	bl	800b430 <sbrk_aligned>
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d03a      	beq.n	800b55e <_malloc_r+0xea>
 800b4e8:	6823      	ldr	r3, [r4, #0]
 800b4ea:	442b      	add	r3, r5
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	bb62      	cbnz	r2, 800b550 <_malloc_r+0xdc>
 800b4f6:	f8c8 7000 	str.w	r7, [r8]
 800b4fa:	e00f      	b.n	800b51c <_malloc_r+0xa8>
 800b4fc:	6822      	ldr	r2, [r4, #0]
 800b4fe:	1b52      	subs	r2, r2, r5
 800b500:	d420      	bmi.n	800b544 <_malloc_r+0xd0>
 800b502:	2a0b      	cmp	r2, #11
 800b504:	d917      	bls.n	800b536 <_malloc_r+0xc2>
 800b506:	1961      	adds	r1, r4, r5
 800b508:	42a3      	cmp	r3, r4
 800b50a:	6025      	str	r5, [r4, #0]
 800b50c:	bf18      	it	ne
 800b50e:	6059      	strne	r1, [r3, #4]
 800b510:	6863      	ldr	r3, [r4, #4]
 800b512:	bf08      	it	eq
 800b514:	f8c8 1000 	streq.w	r1, [r8]
 800b518:	5162      	str	r2, [r4, r5]
 800b51a:	604b      	str	r3, [r1, #4]
 800b51c:	4630      	mov	r0, r6
 800b51e:	f000 f82f 	bl	800b580 <__malloc_unlock>
 800b522:	f104 000b 	add.w	r0, r4, #11
 800b526:	1d23      	adds	r3, r4, #4
 800b528:	f020 0007 	bic.w	r0, r0, #7
 800b52c:	1ac2      	subs	r2, r0, r3
 800b52e:	bf1c      	itt	ne
 800b530:	1a1b      	subne	r3, r3, r0
 800b532:	50a3      	strne	r3, [r4, r2]
 800b534:	e7af      	b.n	800b496 <_malloc_r+0x22>
 800b536:	6862      	ldr	r2, [r4, #4]
 800b538:	42a3      	cmp	r3, r4
 800b53a:	bf0c      	ite	eq
 800b53c:	f8c8 2000 	streq.w	r2, [r8]
 800b540:	605a      	strne	r2, [r3, #4]
 800b542:	e7eb      	b.n	800b51c <_malloc_r+0xa8>
 800b544:	4623      	mov	r3, r4
 800b546:	6864      	ldr	r4, [r4, #4]
 800b548:	e7ae      	b.n	800b4a8 <_malloc_r+0x34>
 800b54a:	463c      	mov	r4, r7
 800b54c:	687f      	ldr	r7, [r7, #4]
 800b54e:	e7b6      	b.n	800b4be <_malloc_r+0x4a>
 800b550:	461a      	mov	r2, r3
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	42a3      	cmp	r3, r4
 800b556:	d1fb      	bne.n	800b550 <_malloc_r+0xdc>
 800b558:	2300      	movs	r3, #0
 800b55a:	6053      	str	r3, [r2, #4]
 800b55c:	e7de      	b.n	800b51c <_malloc_r+0xa8>
 800b55e:	230c      	movs	r3, #12
 800b560:	6033      	str	r3, [r6, #0]
 800b562:	4630      	mov	r0, r6
 800b564:	f000 f80c 	bl	800b580 <__malloc_unlock>
 800b568:	e794      	b.n	800b494 <_malloc_r+0x20>
 800b56a:	6005      	str	r5, [r0, #0]
 800b56c:	e7d6      	b.n	800b51c <_malloc_r+0xa8>
 800b56e:	bf00      	nop
 800b570:	24000c78 	.word	0x24000c78

0800b574 <__malloc_lock>:
 800b574:	4801      	ldr	r0, [pc, #4]	@ (800b57c <__malloc_lock+0x8>)
 800b576:	f7ff b928 	b.w	800a7ca <__retarget_lock_acquire_recursive>
 800b57a:	bf00      	nop
 800b57c:	24000c70 	.word	0x24000c70

0800b580 <__malloc_unlock>:
 800b580:	4801      	ldr	r0, [pc, #4]	@ (800b588 <__malloc_unlock+0x8>)
 800b582:	f7ff b923 	b.w	800a7cc <__retarget_lock_release_recursive>
 800b586:	bf00      	nop
 800b588:	24000c70 	.word	0x24000c70

0800b58c <_Balloc>:
 800b58c:	b570      	push	{r4, r5, r6, lr}
 800b58e:	69c6      	ldr	r6, [r0, #28]
 800b590:	4604      	mov	r4, r0
 800b592:	460d      	mov	r5, r1
 800b594:	b976      	cbnz	r6, 800b5b4 <_Balloc+0x28>
 800b596:	2010      	movs	r0, #16
 800b598:	f7ff ff42 	bl	800b420 <malloc>
 800b59c:	4602      	mov	r2, r0
 800b59e:	61e0      	str	r0, [r4, #28]
 800b5a0:	b920      	cbnz	r0, 800b5ac <_Balloc+0x20>
 800b5a2:	4b18      	ldr	r3, [pc, #96]	@ (800b604 <_Balloc+0x78>)
 800b5a4:	4818      	ldr	r0, [pc, #96]	@ (800b608 <_Balloc+0x7c>)
 800b5a6:	216b      	movs	r1, #107	@ 0x6b
 800b5a8:	f000 fe12 	bl	800c1d0 <__assert_func>
 800b5ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5b0:	6006      	str	r6, [r0, #0]
 800b5b2:	60c6      	str	r6, [r0, #12]
 800b5b4:	69e6      	ldr	r6, [r4, #28]
 800b5b6:	68f3      	ldr	r3, [r6, #12]
 800b5b8:	b183      	cbz	r3, 800b5dc <_Balloc+0x50>
 800b5ba:	69e3      	ldr	r3, [r4, #28]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5c2:	b9b8      	cbnz	r0, 800b5f4 <_Balloc+0x68>
 800b5c4:	2101      	movs	r1, #1
 800b5c6:	fa01 f605 	lsl.w	r6, r1, r5
 800b5ca:	1d72      	adds	r2, r6, #5
 800b5cc:	0092      	lsls	r2, r2, #2
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f000 fe1c 	bl	800c20c <_calloc_r>
 800b5d4:	b160      	cbz	r0, 800b5f0 <_Balloc+0x64>
 800b5d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5da:	e00e      	b.n	800b5fa <_Balloc+0x6e>
 800b5dc:	2221      	movs	r2, #33	@ 0x21
 800b5de:	2104      	movs	r1, #4
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f000 fe13 	bl	800c20c <_calloc_r>
 800b5e6:	69e3      	ldr	r3, [r4, #28]
 800b5e8:	60f0      	str	r0, [r6, #12]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1e4      	bne.n	800b5ba <_Balloc+0x2e>
 800b5f0:	2000      	movs	r0, #0
 800b5f2:	bd70      	pop	{r4, r5, r6, pc}
 800b5f4:	6802      	ldr	r2, [r0, #0]
 800b5f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b600:	e7f7      	b.n	800b5f2 <_Balloc+0x66>
 800b602:	bf00      	nop
 800b604:	0800c915 	.word	0x0800c915
 800b608:	0800c995 	.word	0x0800c995

0800b60c <_Bfree>:
 800b60c:	b570      	push	{r4, r5, r6, lr}
 800b60e:	69c6      	ldr	r6, [r0, #28]
 800b610:	4605      	mov	r5, r0
 800b612:	460c      	mov	r4, r1
 800b614:	b976      	cbnz	r6, 800b634 <_Bfree+0x28>
 800b616:	2010      	movs	r0, #16
 800b618:	f7ff ff02 	bl	800b420 <malloc>
 800b61c:	4602      	mov	r2, r0
 800b61e:	61e8      	str	r0, [r5, #28]
 800b620:	b920      	cbnz	r0, 800b62c <_Bfree+0x20>
 800b622:	4b09      	ldr	r3, [pc, #36]	@ (800b648 <_Bfree+0x3c>)
 800b624:	4809      	ldr	r0, [pc, #36]	@ (800b64c <_Bfree+0x40>)
 800b626:	218f      	movs	r1, #143	@ 0x8f
 800b628:	f000 fdd2 	bl	800c1d0 <__assert_func>
 800b62c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b630:	6006      	str	r6, [r0, #0]
 800b632:	60c6      	str	r6, [r0, #12]
 800b634:	b13c      	cbz	r4, 800b646 <_Bfree+0x3a>
 800b636:	69eb      	ldr	r3, [r5, #28]
 800b638:	6862      	ldr	r2, [r4, #4]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b640:	6021      	str	r1, [r4, #0]
 800b642:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b646:	bd70      	pop	{r4, r5, r6, pc}
 800b648:	0800c915 	.word	0x0800c915
 800b64c:	0800c995 	.word	0x0800c995

0800b650 <__multadd>:
 800b650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b654:	690d      	ldr	r5, [r1, #16]
 800b656:	4607      	mov	r7, r0
 800b658:	460c      	mov	r4, r1
 800b65a:	461e      	mov	r6, r3
 800b65c:	f101 0c14 	add.w	ip, r1, #20
 800b660:	2000      	movs	r0, #0
 800b662:	f8dc 3000 	ldr.w	r3, [ip]
 800b666:	b299      	uxth	r1, r3
 800b668:	fb02 6101 	mla	r1, r2, r1, r6
 800b66c:	0c1e      	lsrs	r6, r3, #16
 800b66e:	0c0b      	lsrs	r3, r1, #16
 800b670:	fb02 3306 	mla	r3, r2, r6, r3
 800b674:	b289      	uxth	r1, r1
 800b676:	3001      	adds	r0, #1
 800b678:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b67c:	4285      	cmp	r5, r0
 800b67e:	f84c 1b04 	str.w	r1, [ip], #4
 800b682:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b686:	dcec      	bgt.n	800b662 <__multadd+0x12>
 800b688:	b30e      	cbz	r6, 800b6ce <__multadd+0x7e>
 800b68a:	68a3      	ldr	r3, [r4, #8]
 800b68c:	42ab      	cmp	r3, r5
 800b68e:	dc19      	bgt.n	800b6c4 <__multadd+0x74>
 800b690:	6861      	ldr	r1, [r4, #4]
 800b692:	4638      	mov	r0, r7
 800b694:	3101      	adds	r1, #1
 800b696:	f7ff ff79 	bl	800b58c <_Balloc>
 800b69a:	4680      	mov	r8, r0
 800b69c:	b928      	cbnz	r0, 800b6aa <__multadd+0x5a>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b6d4 <__multadd+0x84>)
 800b6a2:	480d      	ldr	r0, [pc, #52]	@ (800b6d8 <__multadd+0x88>)
 800b6a4:	21ba      	movs	r1, #186	@ 0xba
 800b6a6:	f000 fd93 	bl	800c1d0 <__assert_func>
 800b6aa:	6922      	ldr	r2, [r4, #16]
 800b6ac:	3202      	adds	r2, #2
 800b6ae:	f104 010c 	add.w	r1, r4, #12
 800b6b2:	0092      	lsls	r2, r2, #2
 800b6b4:	300c      	adds	r0, #12
 800b6b6:	f000 fd7d 	bl	800c1b4 <memcpy>
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	4638      	mov	r0, r7
 800b6be:	f7ff ffa5 	bl	800b60c <_Bfree>
 800b6c2:	4644      	mov	r4, r8
 800b6c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6c8:	3501      	adds	r5, #1
 800b6ca:	615e      	str	r6, [r3, #20]
 800b6cc:	6125      	str	r5, [r4, #16]
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d4:	0800c984 	.word	0x0800c984
 800b6d8:	0800c995 	.word	0x0800c995

0800b6dc <__hi0bits>:
 800b6dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	bf36      	itet	cc
 800b6e4:	0403      	lslcc	r3, r0, #16
 800b6e6:	2000      	movcs	r0, #0
 800b6e8:	2010      	movcc	r0, #16
 800b6ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b6ee:	bf3c      	itt	cc
 800b6f0:	021b      	lslcc	r3, r3, #8
 800b6f2:	3008      	addcc	r0, #8
 800b6f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6f8:	bf3c      	itt	cc
 800b6fa:	011b      	lslcc	r3, r3, #4
 800b6fc:	3004      	addcc	r0, #4
 800b6fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b702:	bf3c      	itt	cc
 800b704:	009b      	lslcc	r3, r3, #2
 800b706:	3002      	addcc	r0, #2
 800b708:	2b00      	cmp	r3, #0
 800b70a:	db05      	blt.n	800b718 <__hi0bits+0x3c>
 800b70c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b710:	f100 0001 	add.w	r0, r0, #1
 800b714:	bf08      	it	eq
 800b716:	2020      	moveq	r0, #32
 800b718:	4770      	bx	lr

0800b71a <__lo0bits>:
 800b71a:	6803      	ldr	r3, [r0, #0]
 800b71c:	4602      	mov	r2, r0
 800b71e:	f013 0007 	ands.w	r0, r3, #7
 800b722:	d00b      	beq.n	800b73c <__lo0bits+0x22>
 800b724:	07d9      	lsls	r1, r3, #31
 800b726:	d421      	bmi.n	800b76c <__lo0bits+0x52>
 800b728:	0798      	lsls	r0, r3, #30
 800b72a:	bf49      	itett	mi
 800b72c:	085b      	lsrmi	r3, r3, #1
 800b72e:	089b      	lsrpl	r3, r3, #2
 800b730:	2001      	movmi	r0, #1
 800b732:	6013      	strmi	r3, [r2, #0]
 800b734:	bf5c      	itt	pl
 800b736:	6013      	strpl	r3, [r2, #0]
 800b738:	2002      	movpl	r0, #2
 800b73a:	4770      	bx	lr
 800b73c:	b299      	uxth	r1, r3
 800b73e:	b909      	cbnz	r1, 800b744 <__lo0bits+0x2a>
 800b740:	0c1b      	lsrs	r3, r3, #16
 800b742:	2010      	movs	r0, #16
 800b744:	b2d9      	uxtb	r1, r3
 800b746:	b909      	cbnz	r1, 800b74c <__lo0bits+0x32>
 800b748:	3008      	adds	r0, #8
 800b74a:	0a1b      	lsrs	r3, r3, #8
 800b74c:	0719      	lsls	r1, r3, #28
 800b74e:	bf04      	itt	eq
 800b750:	091b      	lsreq	r3, r3, #4
 800b752:	3004      	addeq	r0, #4
 800b754:	0799      	lsls	r1, r3, #30
 800b756:	bf04      	itt	eq
 800b758:	089b      	lsreq	r3, r3, #2
 800b75a:	3002      	addeq	r0, #2
 800b75c:	07d9      	lsls	r1, r3, #31
 800b75e:	d403      	bmi.n	800b768 <__lo0bits+0x4e>
 800b760:	085b      	lsrs	r3, r3, #1
 800b762:	f100 0001 	add.w	r0, r0, #1
 800b766:	d003      	beq.n	800b770 <__lo0bits+0x56>
 800b768:	6013      	str	r3, [r2, #0]
 800b76a:	4770      	bx	lr
 800b76c:	2000      	movs	r0, #0
 800b76e:	4770      	bx	lr
 800b770:	2020      	movs	r0, #32
 800b772:	4770      	bx	lr

0800b774 <__i2b>:
 800b774:	b510      	push	{r4, lr}
 800b776:	460c      	mov	r4, r1
 800b778:	2101      	movs	r1, #1
 800b77a:	f7ff ff07 	bl	800b58c <_Balloc>
 800b77e:	4602      	mov	r2, r0
 800b780:	b928      	cbnz	r0, 800b78e <__i2b+0x1a>
 800b782:	4b05      	ldr	r3, [pc, #20]	@ (800b798 <__i2b+0x24>)
 800b784:	4805      	ldr	r0, [pc, #20]	@ (800b79c <__i2b+0x28>)
 800b786:	f240 1145 	movw	r1, #325	@ 0x145
 800b78a:	f000 fd21 	bl	800c1d0 <__assert_func>
 800b78e:	2301      	movs	r3, #1
 800b790:	6144      	str	r4, [r0, #20]
 800b792:	6103      	str	r3, [r0, #16]
 800b794:	bd10      	pop	{r4, pc}
 800b796:	bf00      	nop
 800b798:	0800c984 	.word	0x0800c984
 800b79c:	0800c995 	.word	0x0800c995

0800b7a0 <__multiply>:
 800b7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a4:	4614      	mov	r4, r2
 800b7a6:	690a      	ldr	r2, [r1, #16]
 800b7a8:	6923      	ldr	r3, [r4, #16]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	bfa8      	it	ge
 800b7ae:	4623      	movge	r3, r4
 800b7b0:	460f      	mov	r7, r1
 800b7b2:	bfa4      	itt	ge
 800b7b4:	460c      	movge	r4, r1
 800b7b6:	461f      	movge	r7, r3
 800b7b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b7bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b7c0:	68a3      	ldr	r3, [r4, #8]
 800b7c2:	6861      	ldr	r1, [r4, #4]
 800b7c4:	eb0a 0609 	add.w	r6, sl, r9
 800b7c8:	42b3      	cmp	r3, r6
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	bfb8      	it	lt
 800b7ce:	3101      	addlt	r1, #1
 800b7d0:	f7ff fedc 	bl	800b58c <_Balloc>
 800b7d4:	b930      	cbnz	r0, 800b7e4 <__multiply+0x44>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	4b44      	ldr	r3, [pc, #272]	@ (800b8ec <__multiply+0x14c>)
 800b7da:	4845      	ldr	r0, [pc, #276]	@ (800b8f0 <__multiply+0x150>)
 800b7dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b7e0:	f000 fcf6 	bl	800c1d0 <__assert_func>
 800b7e4:	f100 0514 	add.w	r5, r0, #20
 800b7e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7ec:	462b      	mov	r3, r5
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	4543      	cmp	r3, r8
 800b7f2:	d321      	bcc.n	800b838 <__multiply+0x98>
 800b7f4:	f107 0114 	add.w	r1, r7, #20
 800b7f8:	f104 0214 	add.w	r2, r4, #20
 800b7fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b800:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b804:	9302      	str	r3, [sp, #8]
 800b806:	1b13      	subs	r3, r2, r4
 800b808:	3b15      	subs	r3, #21
 800b80a:	f023 0303 	bic.w	r3, r3, #3
 800b80e:	3304      	adds	r3, #4
 800b810:	f104 0715 	add.w	r7, r4, #21
 800b814:	42ba      	cmp	r2, r7
 800b816:	bf38      	it	cc
 800b818:	2304      	movcc	r3, #4
 800b81a:	9301      	str	r3, [sp, #4]
 800b81c:	9b02      	ldr	r3, [sp, #8]
 800b81e:	9103      	str	r1, [sp, #12]
 800b820:	428b      	cmp	r3, r1
 800b822:	d80c      	bhi.n	800b83e <__multiply+0x9e>
 800b824:	2e00      	cmp	r6, #0
 800b826:	dd03      	ble.n	800b830 <__multiply+0x90>
 800b828:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d05b      	beq.n	800b8e8 <__multiply+0x148>
 800b830:	6106      	str	r6, [r0, #16]
 800b832:	b005      	add	sp, #20
 800b834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b838:	f843 2b04 	str.w	r2, [r3], #4
 800b83c:	e7d8      	b.n	800b7f0 <__multiply+0x50>
 800b83e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b842:	f1ba 0f00 	cmp.w	sl, #0
 800b846:	d024      	beq.n	800b892 <__multiply+0xf2>
 800b848:	f104 0e14 	add.w	lr, r4, #20
 800b84c:	46a9      	mov	r9, r5
 800b84e:	f04f 0c00 	mov.w	ip, #0
 800b852:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b856:	f8d9 3000 	ldr.w	r3, [r9]
 800b85a:	fa1f fb87 	uxth.w	fp, r7
 800b85e:	b29b      	uxth	r3, r3
 800b860:	fb0a 330b 	mla	r3, sl, fp, r3
 800b864:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b868:	f8d9 7000 	ldr.w	r7, [r9]
 800b86c:	4463      	add	r3, ip
 800b86e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b872:	fb0a c70b 	mla	r7, sl, fp, ip
 800b876:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b880:	4572      	cmp	r2, lr
 800b882:	f849 3b04 	str.w	r3, [r9], #4
 800b886:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b88a:	d8e2      	bhi.n	800b852 <__multiply+0xb2>
 800b88c:	9b01      	ldr	r3, [sp, #4]
 800b88e:	f845 c003 	str.w	ip, [r5, r3]
 800b892:	9b03      	ldr	r3, [sp, #12]
 800b894:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b898:	3104      	adds	r1, #4
 800b89a:	f1b9 0f00 	cmp.w	r9, #0
 800b89e:	d021      	beq.n	800b8e4 <__multiply+0x144>
 800b8a0:	682b      	ldr	r3, [r5, #0]
 800b8a2:	f104 0c14 	add.w	ip, r4, #20
 800b8a6:	46ae      	mov	lr, r5
 800b8a8:	f04f 0a00 	mov.w	sl, #0
 800b8ac:	f8bc b000 	ldrh.w	fp, [ip]
 800b8b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b8b4:	fb09 770b 	mla	r7, r9, fp, r7
 800b8b8:	4457      	add	r7, sl
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b8c0:	f84e 3b04 	str.w	r3, [lr], #4
 800b8c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b8c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8cc:	f8be 3000 	ldrh.w	r3, [lr]
 800b8d0:	fb09 330a 	mla	r3, r9, sl, r3
 800b8d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b8d8:	4562      	cmp	r2, ip
 800b8da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8de:	d8e5      	bhi.n	800b8ac <__multiply+0x10c>
 800b8e0:	9f01      	ldr	r7, [sp, #4]
 800b8e2:	51eb      	str	r3, [r5, r7]
 800b8e4:	3504      	adds	r5, #4
 800b8e6:	e799      	b.n	800b81c <__multiply+0x7c>
 800b8e8:	3e01      	subs	r6, #1
 800b8ea:	e79b      	b.n	800b824 <__multiply+0x84>
 800b8ec:	0800c984 	.word	0x0800c984
 800b8f0:	0800c995 	.word	0x0800c995

0800b8f4 <__pow5mult>:
 800b8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8f8:	4615      	mov	r5, r2
 800b8fa:	f012 0203 	ands.w	r2, r2, #3
 800b8fe:	4607      	mov	r7, r0
 800b900:	460e      	mov	r6, r1
 800b902:	d007      	beq.n	800b914 <__pow5mult+0x20>
 800b904:	4c25      	ldr	r4, [pc, #148]	@ (800b99c <__pow5mult+0xa8>)
 800b906:	3a01      	subs	r2, #1
 800b908:	2300      	movs	r3, #0
 800b90a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b90e:	f7ff fe9f 	bl	800b650 <__multadd>
 800b912:	4606      	mov	r6, r0
 800b914:	10ad      	asrs	r5, r5, #2
 800b916:	d03d      	beq.n	800b994 <__pow5mult+0xa0>
 800b918:	69fc      	ldr	r4, [r7, #28]
 800b91a:	b97c      	cbnz	r4, 800b93c <__pow5mult+0x48>
 800b91c:	2010      	movs	r0, #16
 800b91e:	f7ff fd7f 	bl	800b420 <malloc>
 800b922:	4602      	mov	r2, r0
 800b924:	61f8      	str	r0, [r7, #28]
 800b926:	b928      	cbnz	r0, 800b934 <__pow5mult+0x40>
 800b928:	4b1d      	ldr	r3, [pc, #116]	@ (800b9a0 <__pow5mult+0xac>)
 800b92a:	481e      	ldr	r0, [pc, #120]	@ (800b9a4 <__pow5mult+0xb0>)
 800b92c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b930:	f000 fc4e 	bl	800c1d0 <__assert_func>
 800b934:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b938:	6004      	str	r4, [r0, #0]
 800b93a:	60c4      	str	r4, [r0, #12]
 800b93c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b940:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b944:	b94c      	cbnz	r4, 800b95a <__pow5mult+0x66>
 800b946:	f240 2171 	movw	r1, #625	@ 0x271
 800b94a:	4638      	mov	r0, r7
 800b94c:	f7ff ff12 	bl	800b774 <__i2b>
 800b950:	2300      	movs	r3, #0
 800b952:	f8c8 0008 	str.w	r0, [r8, #8]
 800b956:	4604      	mov	r4, r0
 800b958:	6003      	str	r3, [r0, #0]
 800b95a:	f04f 0900 	mov.w	r9, #0
 800b95e:	07eb      	lsls	r3, r5, #31
 800b960:	d50a      	bpl.n	800b978 <__pow5mult+0x84>
 800b962:	4631      	mov	r1, r6
 800b964:	4622      	mov	r2, r4
 800b966:	4638      	mov	r0, r7
 800b968:	f7ff ff1a 	bl	800b7a0 <__multiply>
 800b96c:	4631      	mov	r1, r6
 800b96e:	4680      	mov	r8, r0
 800b970:	4638      	mov	r0, r7
 800b972:	f7ff fe4b 	bl	800b60c <_Bfree>
 800b976:	4646      	mov	r6, r8
 800b978:	106d      	asrs	r5, r5, #1
 800b97a:	d00b      	beq.n	800b994 <__pow5mult+0xa0>
 800b97c:	6820      	ldr	r0, [r4, #0]
 800b97e:	b938      	cbnz	r0, 800b990 <__pow5mult+0x9c>
 800b980:	4622      	mov	r2, r4
 800b982:	4621      	mov	r1, r4
 800b984:	4638      	mov	r0, r7
 800b986:	f7ff ff0b 	bl	800b7a0 <__multiply>
 800b98a:	6020      	str	r0, [r4, #0]
 800b98c:	f8c0 9000 	str.w	r9, [r0]
 800b990:	4604      	mov	r4, r0
 800b992:	e7e4      	b.n	800b95e <__pow5mult+0x6a>
 800b994:	4630      	mov	r0, r6
 800b996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b99a:	bf00      	nop
 800b99c:	0800c9f0 	.word	0x0800c9f0
 800b9a0:	0800c915 	.word	0x0800c915
 800b9a4:	0800c995 	.word	0x0800c995

0800b9a8 <__lshift>:
 800b9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9ac:	460c      	mov	r4, r1
 800b9ae:	6849      	ldr	r1, [r1, #4]
 800b9b0:	6923      	ldr	r3, [r4, #16]
 800b9b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9b6:	68a3      	ldr	r3, [r4, #8]
 800b9b8:	4607      	mov	r7, r0
 800b9ba:	4691      	mov	r9, r2
 800b9bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9c0:	f108 0601 	add.w	r6, r8, #1
 800b9c4:	42b3      	cmp	r3, r6
 800b9c6:	db0b      	blt.n	800b9e0 <__lshift+0x38>
 800b9c8:	4638      	mov	r0, r7
 800b9ca:	f7ff fddf 	bl	800b58c <_Balloc>
 800b9ce:	4605      	mov	r5, r0
 800b9d0:	b948      	cbnz	r0, 800b9e6 <__lshift+0x3e>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	4b28      	ldr	r3, [pc, #160]	@ (800ba78 <__lshift+0xd0>)
 800b9d6:	4829      	ldr	r0, [pc, #164]	@ (800ba7c <__lshift+0xd4>)
 800b9d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b9dc:	f000 fbf8 	bl	800c1d0 <__assert_func>
 800b9e0:	3101      	adds	r1, #1
 800b9e2:	005b      	lsls	r3, r3, #1
 800b9e4:	e7ee      	b.n	800b9c4 <__lshift+0x1c>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	f100 0114 	add.w	r1, r0, #20
 800b9ec:	f100 0210 	add.w	r2, r0, #16
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	4553      	cmp	r3, sl
 800b9f4:	db33      	blt.n	800ba5e <__lshift+0xb6>
 800b9f6:	6920      	ldr	r0, [r4, #16]
 800b9f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9fc:	f104 0314 	add.w	r3, r4, #20
 800ba00:	f019 091f 	ands.w	r9, r9, #31
 800ba04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba0c:	d02b      	beq.n	800ba66 <__lshift+0xbe>
 800ba0e:	f1c9 0e20 	rsb	lr, r9, #32
 800ba12:	468a      	mov	sl, r1
 800ba14:	2200      	movs	r2, #0
 800ba16:	6818      	ldr	r0, [r3, #0]
 800ba18:	fa00 f009 	lsl.w	r0, r0, r9
 800ba1c:	4310      	orrs	r0, r2
 800ba1e:	f84a 0b04 	str.w	r0, [sl], #4
 800ba22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba26:	459c      	cmp	ip, r3
 800ba28:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba2c:	d8f3      	bhi.n	800ba16 <__lshift+0x6e>
 800ba2e:	ebac 0304 	sub.w	r3, ip, r4
 800ba32:	3b15      	subs	r3, #21
 800ba34:	f023 0303 	bic.w	r3, r3, #3
 800ba38:	3304      	adds	r3, #4
 800ba3a:	f104 0015 	add.w	r0, r4, #21
 800ba3e:	4584      	cmp	ip, r0
 800ba40:	bf38      	it	cc
 800ba42:	2304      	movcc	r3, #4
 800ba44:	50ca      	str	r2, [r1, r3]
 800ba46:	b10a      	cbz	r2, 800ba4c <__lshift+0xa4>
 800ba48:	f108 0602 	add.w	r6, r8, #2
 800ba4c:	3e01      	subs	r6, #1
 800ba4e:	4638      	mov	r0, r7
 800ba50:	612e      	str	r6, [r5, #16]
 800ba52:	4621      	mov	r1, r4
 800ba54:	f7ff fdda 	bl	800b60c <_Bfree>
 800ba58:	4628      	mov	r0, r5
 800ba5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba62:	3301      	adds	r3, #1
 800ba64:	e7c5      	b.n	800b9f2 <__lshift+0x4a>
 800ba66:	3904      	subs	r1, #4
 800ba68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba6c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba70:	459c      	cmp	ip, r3
 800ba72:	d8f9      	bhi.n	800ba68 <__lshift+0xc0>
 800ba74:	e7ea      	b.n	800ba4c <__lshift+0xa4>
 800ba76:	bf00      	nop
 800ba78:	0800c984 	.word	0x0800c984
 800ba7c:	0800c995 	.word	0x0800c995

0800ba80 <__mcmp>:
 800ba80:	690a      	ldr	r2, [r1, #16]
 800ba82:	4603      	mov	r3, r0
 800ba84:	6900      	ldr	r0, [r0, #16]
 800ba86:	1a80      	subs	r0, r0, r2
 800ba88:	b530      	push	{r4, r5, lr}
 800ba8a:	d10e      	bne.n	800baaa <__mcmp+0x2a>
 800ba8c:	3314      	adds	r3, #20
 800ba8e:	3114      	adds	r1, #20
 800ba90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ba94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800baa0:	4295      	cmp	r5, r2
 800baa2:	d003      	beq.n	800baac <__mcmp+0x2c>
 800baa4:	d205      	bcs.n	800bab2 <__mcmp+0x32>
 800baa6:	f04f 30ff 	mov.w	r0, #4294967295
 800baaa:	bd30      	pop	{r4, r5, pc}
 800baac:	42a3      	cmp	r3, r4
 800baae:	d3f3      	bcc.n	800ba98 <__mcmp+0x18>
 800bab0:	e7fb      	b.n	800baaa <__mcmp+0x2a>
 800bab2:	2001      	movs	r0, #1
 800bab4:	e7f9      	b.n	800baaa <__mcmp+0x2a>
	...

0800bab8 <__mdiff>:
 800bab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800babc:	4689      	mov	r9, r1
 800babe:	4606      	mov	r6, r0
 800bac0:	4611      	mov	r1, r2
 800bac2:	4648      	mov	r0, r9
 800bac4:	4614      	mov	r4, r2
 800bac6:	f7ff ffdb 	bl	800ba80 <__mcmp>
 800baca:	1e05      	subs	r5, r0, #0
 800bacc:	d112      	bne.n	800baf4 <__mdiff+0x3c>
 800bace:	4629      	mov	r1, r5
 800bad0:	4630      	mov	r0, r6
 800bad2:	f7ff fd5b 	bl	800b58c <_Balloc>
 800bad6:	4602      	mov	r2, r0
 800bad8:	b928      	cbnz	r0, 800bae6 <__mdiff+0x2e>
 800bada:	4b3f      	ldr	r3, [pc, #252]	@ (800bbd8 <__mdiff+0x120>)
 800badc:	f240 2137 	movw	r1, #567	@ 0x237
 800bae0:	483e      	ldr	r0, [pc, #248]	@ (800bbdc <__mdiff+0x124>)
 800bae2:	f000 fb75 	bl	800c1d0 <__assert_func>
 800bae6:	2301      	movs	r3, #1
 800bae8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800baec:	4610      	mov	r0, r2
 800baee:	b003      	add	sp, #12
 800baf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf4:	bfbc      	itt	lt
 800baf6:	464b      	movlt	r3, r9
 800baf8:	46a1      	movlt	r9, r4
 800bafa:	4630      	mov	r0, r6
 800bafc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bb00:	bfba      	itte	lt
 800bb02:	461c      	movlt	r4, r3
 800bb04:	2501      	movlt	r5, #1
 800bb06:	2500      	movge	r5, #0
 800bb08:	f7ff fd40 	bl	800b58c <_Balloc>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	b918      	cbnz	r0, 800bb18 <__mdiff+0x60>
 800bb10:	4b31      	ldr	r3, [pc, #196]	@ (800bbd8 <__mdiff+0x120>)
 800bb12:	f240 2145 	movw	r1, #581	@ 0x245
 800bb16:	e7e3      	b.n	800bae0 <__mdiff+0x28>
 800bb18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bb1c:	6926      	ldr	r6, [r4, #16]
 800bb1e:	60c5      	str	r5, [r0, #12]
 800bb20:	f109 0310 	add.w	r3, r9, #16
 800bb24:	f109 0514 	add.w	r5, r9, #20
 800bb28:	f104 0e14 	add.w	lr, r4, #20
 800bb2c:	f100 0b14 	add.w	fp, r0, #20
 800bb30:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bb34:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	46d9      	mov	r9, fp
 800bb3c:	f04f 0c00 	mov.w	ip, #0
 800bb40:	9b01      	ldr	r3, [sp, #4]
 800bb42:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bb46:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bb4a:	9301      	str	r3, [sp, #4]
 800bb4c:	fa1f f38a 	uxth.w	r3, sl
 800bb50:	4619      	mov	r1, r3
 800bb52:	b283      	uxth	r3, r0
 800bb54:	1acb      	subs	r3, r1, r3
 800bb56:	0c00      	lsrs	r0, r0, #16
 800bb58:	4463      	add	r3, ip
 800bb5a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bb5e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bb68:	4576      	cmp	r6, lr
 800bb6a:	f849 3b04 	str.w	r3, [r9], #4
 800bb6e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb72:	d8e5      	bhi.n	800bb40 <__mdiff+0x88>
 800bb74:	1b33      	subs	r3, r6, r4
 800bb76:	3b15      	subs	r3, #21
 800bb78:	f023 0303 	bic.w	r3, r3, #3
 800bb7c:	3415      	adds	r4, #21
 800bb7e:	3304      	adds	r3, #4
 800bb80:	42a6      	cmp	r6, r4
 800bb82:	bf38      	it	cc
 800bb84:	2304      	movcc	r3, #4
 800bb86:	441d      	add	r5, r3
 800bb88:	445b      	add	r3, fp
 800bb8a:	461e      	mov	r6, r3
 800bb8c:	462c      	mov	r4, r5
 800bb8e:	4544      	cmp	r4, r8
 800bb90:	d30e      	bcc.n	800bbb0 <__mdiff+0xf8>
 800bb92:	f108 0103 	add.w	r1, r8, #3
 800bb96:	1b49      	subs	r1, r1, r5
 800bb98:	f021 0103 	bic.w	r1, r1, #3
 800bb9c:	3d03      	subs	r5, #3
 800bb9e:	45a8      	cmp	r8, r5
 800bba0:	bf38      	it	cc
 800bba2:	2100      	movcc	r1, #0
 800bba4:	440b      	add	r3, r1
 800bba6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bbaa:	b191      	cbz	r1, 800bbd2 <__mdiff+0x11a>
 800bbac:	6117      	str	r7, [r2, #16]
 800bbae:	e79d      	b.n	800baec <__mdiff+0x34>
 800bbb0:	f854 1b04 	ldr.w	r1, [r4], #4
 800bbb4:	46e6      	mov	lr, ip
 800bbb6:	0c08      	lsrs	r0, r1, #16
 800bbb8:	fa1c fc81 	uxtah	ip, ip, r1
 800bbbc:	4471      	add	r1, lr
 800bbbe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bbc2:	b289      	uxth	r1, r1
 800bbc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bbc8:	f846 1b04 	str.w	r1, [r6], #4
 800bbcc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bbd0:	e7dd      	b.n	800bb8e <__mdiff+0xd6>
 800bbd2:	3f01      	subs	r7, #1
 800bbd4:	e7e7      	b.n	800bba6 <__mdiff+0xee>
 800bbd6:	bf00      	nop
 800bbd8:	0800c984 	.word	0x0800c984
 800bbdc:	0800c995 	.word	0x0800c995

0800bbe0 <__d2b>:
 800bbe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bbe4:	460f      	mov	r7, r1
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	ec59 8b10 	vmov	r8, r9, d0
 800bbec:	4616      	mov	r6, r2
 800bbee:	f7ff fccd 	bl	800b58c <_Balloc>
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	b930      	cbnz	r0, 800bc04 <__d2b+0x24>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	4b23      	ldr	r3, [pc, #140]	@ (800bc88 <__d2b+0xa8>)
 800bbfa:	4824      	ldr	r0, [pc, #144]	@ (800bc8c <__d2b+0xac>)
 800bbfc:	f240 310f 	movw	r1, #783	@ 0x30f
 800bc00:	f000 fae6 	bl	800c1d0 <__assert_func>
 800bc04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bc08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc0c:	b10d      	cbz	r5, 800bc12 <__d2b+0x32>
 800bc0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc12:	9301      	str	r3, [sp, #4]
 800bc14:	f1b8 0300 	subs.w	r3, r8, #0
 800bc18:	d023      	beq.n	800bc62 <__d2b+0x82>
 800bc1a:	4668      	mov	r0, sp
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	f7ff fd7c 	bl	800b71a <__lo0bits>
 800bc22:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bc26:	b1d0      	cbz	r0, 800bc5e <__d2b+0x7e>
 800bc28:	f1c0 0320 	rsb	r3, r0, #32
 800bc2c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc30:	430b      	orrs	r3, r1
 800bc32:	40c2      	lsrs	r2, r0
 800bc34:	6163      	str	r3, [r4, #20]
 800bc36:	9201      	str	r2, [sp, #4]
 800bc38:	9b01      	ldr	r3, [sp, #4]
 800bc3a:	61a3      	str	r3, [r4, #24]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	bf0c      	ite	eq
 800bc40:	2201      	moveq	r2, #1
 800bc42:	2202      	movne	r2, #2
 800bc44:	6122      	str	r2, [r4, #16]
 800bc46:	b1a5      	cbz	r5, 800bc72 <__d2b+0x92>
 800bc48:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bc4c:	4405      	add	r5, r0
 800bc4e:	603d      	str	r5, [r7, #0]
 800bc50:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bc54:	6030      	str	r0, [r6, #0]
 800bc56:	4620      	mov	r0, r4
 800bc58:	b003      	add	sp, #12
 800bc5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc5e:	6161      	str	r1, [r4, #20]
 800bc60:	e7ea      	b.n	800bc38 <__d2b+0x58>
 800bc62:	a801      	add	r0, sp, #4
 800bc64:	f7ff fd59 	bl	800b71a <__lo0bits>
 800bc68:	9b01      	ldr	r3, [sp, #4]
 800bc6a:	6163      	str	r3, [r4, #20]
 800bc6c:	3020      	adds	r0, #32
 800bc6e:	2201      	movs	r2, #1
 800bc70:	e7e8      	b.n	800bc44 <__d2b+0x64>
 800bc72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bc7a:	6038      	str	r0, [r7, #0]
 800bc7c:	6918      	ldr	r0, [r3, #16]
 800bc7e:	f7ff fd2d 	bl	800b6dc <__hi0bits>
 800bc82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc86:	e7e5      	b.n	800bc54 <__d2b+0x74>
 800bc88:	0800c984 	.word	0x0800c984
 800bc8c:	0800c995 	.word	0x0800c995

0800bc90 <__sfputc_r>:
 800bc90:	6893      	ldr	r3, [r2, #8]
 800bc92:	3b01      	subs	r3, #1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	b410      	push	{r4}
 800bc98:	6093      	str	r3, [r2, #8]
 800bc9a:	da08      	bge.n	800bcae <__sfputc_r+0x1e>
 800bc9c:	6994      	ldr	r4, [r2, #24]
 800bc9e:	42a3      	cmp	r3, r4
 800bca0:	db01      	blt.n	800bca6 <__sfputc_r+0x16>
 800bca2:	290a      	cmp	r1, #10
 800bca4:	d103      	bne.n	800bcae <__sfputc_r+0x1e>
 800bca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcaa:	f000 b9df 	b.w	800c06c <__swbuf_r>
 800bcae:	6813      	ldr	r3, [r2, #0]
 800bcb0:	1c58      	adds	r0, r3, #1
 800bcb2:	6010      	str	r0, [r2, #0]
 800bcb4:	7019      	strb	r1, [r3, #0]
 800bcb6:	4608      	mov	r0, r1
 800bcb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <__sfputs_r>:
 800bcbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	460f      	mov	r7, r1
 800bcc4:	4614      	mov	r4, r2
 800bcc6:	18d5      	adds	r5, r2, r3
 800bcc8:	42ac      	cmp	r4, r5
 800bcca:	d101      	bne.n	800bcd0 <__sfputs_r+0x12>
 800bccc:	2000      	movs	r0, #0
 800bcce:	e007      	b.n	800bce0 <__sfputs_r+0x22>
 800bcd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcd4:	463a      	mov	r2, r7
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	f7ff ffda 	bl	800bc90 <__sfputc_r>
 800bcdc:	1c43      	adds	r3, r0, #1
 800bcde:	d1f3      	bne.n	800bcc8 <__sfputs_r+0xa>
 800bce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bce4 <_vfiprintf_r>:
 800bce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce8:	460d      	mov	r5, r1
 800bcea:	b09d      	sub	sp, #116	@ 0x74
 800bcec:	4614      	mov	r4, r2
 800bcee:	4698      	mov	r8, r3
 800bcf0:	4606      	mov	r6, r0
 800bcf2:	b118      	cbz	r0, 800bcfc <_vfiprintf_r+0x18>
 800bcf4:	6a03      	ldr	r3, [r0, #32]
 800bcf6:	b90b      	cbnz	r3, 800bcfc <_vfiprintf_r+0x18>
 800bcf8:	f7fe fc5e 	bl	800a5b8 <__sinit>
 800bcfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcfe:	07d9      	lsls	r1, r3, #31
 800bd00:	d405      	bmi.n	800bd0e <_vfiprintf_r+0x2a>
 800bd02:	89ab      	ldrh	r3, [r5, #12]
 800bd04:	059a      	lsls	r2, r3, #22
 800bd06:	d402      	bmi.n	800bd0e <_vfiprintf_r+0x2a>
 800bd08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd0a:	f7fe fd5e 	bl	800a7ca <__retarget_lock_acquire_recursive>
 800bd0e:	89ab      	ldrh	r3, [r5, #12]
 800bd10:	071b      	lsls	r3, r3, #28
 800bd12:	d501      	bpl.n	800bd18 <_vfiprintf_r+0x34>
 800bd14:	692b      	ldr	r3, [r5, #16]
 800bd16:	b99b      	cbnz	r3, 800bd40 <_vfiprintf_r+0x5c>
 800bd18:	4629      	mov	r1, r5
 800bd1a:	4630      	mov	r0, r6
 800bd1c:	f000 f9e4 	bl	800c0e8 <__swsetup_r>
 800bd20:	b170      	cbz	r0, 800bd40 <_vfiprintf_r+0x5c>
 800bd22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd24:	07dc      	lsls	r4, r3, #31
 800bd26:	d504      	bpl.n	800bd32 <_vfiprintf_r+0x4e>
 800bd28:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2c:	b01d      	add	sp, #116	@ 0x74
 800bd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd32:	89ab      	ldrh	r3, [r5, #12]
 800bd34:	0598      	lsls	r0, r3, #22
 800bd36:	d4f7      	bmi.n	800bd28 <_vfiprintf_r+0x44>
 800bd38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd3a:	f7fe fd47 	bl	800a7cc <__retarget_lock_release_recursive>
 800bd3e:	e7f3      	b.n	800bd28 <_vfiprintf_r+0x44>
 800bd40:	2300      	movs	r3, #0
 800bd42:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd44:	2320      	movs	r3, #32
 800bd46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd4e:	2330      	movs	r3, #48	@ 0x30
 800bd50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf00 <_vfiprintf_r+0x21c>
 800bd54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd58:	f04f 0901 	mov.w	r9, #1
 800bd5c:	4623      	mov	r3, r4
 800bd5e:	469a      	mov	sl, r3
 800bd60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd64:	b10a      	cbz	r2, 800bd6a <_vfiprintf_r+0x86>
 800bd66:	2a25      	cmp	r2, #37	@ 0x25
 800bd68:	d1f9      	bne.n	800bd5e <_vfiprintf_r+0x7a>
 800bd6a:	ebba 0b04 	subs.w	fp, sl, r4
 800bd6e:	d00b      	beq.n	800bd88 <_vfiprintf_r+0xa4>
 800bd70:	465b      	mov	r3, fp
 800bd72:	4622      	mov	r2, r4
 800bd74:	4629      	mov	r1, r5
 800bd76:	4630      	mov	r0, r6
 800bd78:	f7ff ffa1 	bl	800bcbe <__sfputs_r>
 800bd7c:	3001      	adds	r0, #1
 800bd7e:	f000 80a7 	beq.w	800bed0 <_vfiprintf_r+0x1ec>
 800bd82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd84:	445a      	add	r2, fp
 800bd86:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd88:	f89a 3000 	ldrb.w	r3, [sl]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f000 809f 	beq.w	800bed0 <_vfiprintf_r+0x1ec>
 800bd92:	2300      	movs	r3, #0
 800bd94:	f04f 32ff 	mov.w	r2, #4294967295
 800bd98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd9c:	f10a 0a01 	add.w	sl, sl, #1
 800bda0:	9304      	str	r3, [sp, #16]
 800bda2:	9307      	str	r3, [sp, #28]
 800bda4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bda8:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdaa:	4654      	mov	r4, sl
 800bdac:	2205      	movs	r2, #5
 800bdae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb2:	4853      	ldr	r0, [pc, #332]	@ (800bf00 <_vfiprintf_r+0x21c>)
 800bdb4:	f7f4 fa94 	bl	80002e0 <memchr>
 800bdb8:	9a04      	ldr	r2, [sp, #16]
 800bdba:	b9d8      	cbnz	r0, 800bdf4 <_vfiprintf_r+0x110>
 800bdbc:	06d1      	lsls	r1, r2, #27
 800bdbe:	bf44      	itt	mi
 800bdc0:	2320      	movmi	r3, #32
 800bdc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdc6:	0713      	lsls	r3, r2, #28
 800bdc8:	bf44      	itt	mi
 800bdca:	232b      	movmi	r3, #43	@ 0x2b
 800bdcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdd0:	f89a 3000 	ldrb.w	r3, [sl]
 800bdd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdd6:	d015      	beq.n	800be04 <_vfiprintf_r+0x120>
 800bdd8:	9a07      	ldr	r2, [sp, #28]
 800bdda:	4654      	mov	r4, sl
 800bddc:	2000      	movs	r0, #0
 800bdde:	f04f 0c0a 	mov.w	ip, #10
 800bde2:	4621      	mov	r1, r4
 800bde4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bde8:	3b30      	subs	r3, #48	@ 0x30
 800bdea:	2b09      	cmp	r3, #9
 800bdec:	d94b      	bls.n	800be86 <_vfiprintf_r+0x1a2>
 800bdee:	b1b0      	cbz	r0, 800be1e <_vfiprintf_r+0x13a>
 800bdf0:	9207      	str	r2, [sp, #28]
 800bdf2:	e014      	b.n	800be1e <_vfiprintf_r+0x13a>
 800bdf4:	eba0 0308 	sub.w	r3, r0, r8
 800bdf8:	fa09 f303 	lsl.w	r3, r9, r3
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	9304      	str	r3, [sp, #16]
 800be00:	46a2      	mov	sl, r4
 800be02:	e7d2      	b.n	800bdaa <_vfiprintf_r+0xc6>
 800be04:	9b03      	ldr	r3, [sp, #12]
 800be06:	1d19      	adds	r1, r3, #4
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	9103      	str	r1, [sp, #12]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	bfbb      	ittet	lt
 800be10:	425b      	neglt	r3, r3
 800be12:	f042 0202 	orrlt.w	r2, r2, #2
 800be16:	9307      	strge	r3, [sp, #28]
 800be18:	9307      	strlt	r3, [sp, #28]
 800be1a:	bfb8      	it	lt
 800be1c:	9204      	strlt	r2, [sp, #16]
 800be1e:	7823      	ldrb	r3, [r4, #0]
 800be20:	2b2e      	cmp	r3, #46	@ 0x2e
 800be22:	d10a      	bne.n	800be3a <_vfiprintf_r+0x156>
 800be24:	7863      	ldrb	r3, [r4, #1]
 800be26:	2b2a      	cmp	r3, #42	@ 0x2a
 800be28:	d132      	bne.n	800be90 <_vfiprintf_r+0x1ac>
 800be2a:	9b03      	ldr	r3, [sp, #12]
 800be2c:	1d1a      	adds	r2, r3, #4
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	9203      	str	r2, [sp, #12]
 800be32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be36:	3402      	adds	r4, #2
 800be38:	9305      	str	r3, [sp, #20]
 800be3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf10 <_vfiprintf_r+0x22c>
 800be3e:	7821      	ldrb	r1, [r4, #0]
 800be40:	2203      	movs	r2, #3
 800be42:	4650      	mov	r0, sl
 800be44:	f7f4 fa4c 	bl	80002e0 <memchr>
 800be48:	b138      	cbz	r0, 800be5a <_vfiprintf_r+0x176>
 800be4a:	9b04      	ldr	r3, [sp, #16]
 800be4c:	eba0 000a 	sub.w	r0, r0, sl
 800be50:	2240      	movs	r2, #64	@ 0x40
 800be52:	4082      	lsls	r2, r0
 800be54:	4313      	orrs	r3, r2
 800be56:	3401      	adds	r4, #1
 800be58:	9304      	str	r3, [sp, #16]
 800be5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be5e:	4829      	ldr	r0, [pc, #164]	@ (800bf04 <_vfiprintf_r+0x220>)
 800be60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be64:	2206      	movs	r2, #6
 800be66:	f7f4 fa3b 	bl	80002e0 <memchr>
 800be6a:	2800      	cmp	r0, #0
 800be6c:	d03f      	beq.n	800beee <_vfiprintf_r+0x20a>
 800be6e:	4b26      	ldr	r3, [pc, #152]	@ (800bf08 <_vfiprintf_r+0x224>)
 800be70:	bb1b      	cbnz	r3, 800beba <_vfiprintf_r+0x1d6>
 800be72:	9b03      	ldr	r3, [sp, #12]
 800be74:	3307      	adds	r3, #7
 800be76:	f023 0307 	bic.w	r3, r3, #7
 800be7a:	3308      	adds	r3, #8
 800be7c:	9303      	str	r3, [sp, #12]
 800be7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be80:	443b      	add	r3, r7
 800be82:	9309      	str	r3, [sp, #36]	@ 0x24
 800be84:	e76a      	b.n	800bd5c <_vfiprintf_r+0x78>
 800be86:	fb0c 3202 	mla	r2, ip, r2, r3
 800be8a:	460c      	mov	r4, r1
 800be8c:	2001      	movs	r0, #1
 800be8e:	e7a8      	b.n	800bde2 <_vfiprintf_r+0xfe>
 800be90:	2300      	movs	r3, #0
 800be92:	3401      	adds	r4, #1
 800be94:	9305      	str	r3, [sp, #20]
 800be96:	4619      	mov	r1, r3
 800be98:	f04f 0c0a 	mov.w	ip, #10
 800be9c:	4620      	mov	r0, r4
 800be9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bea2:	3a30      	subs	r2, #48	@ 0x30
 800bea4:	2a09      	cmp	r2, #9
 800bea6:	d903      	bls.n	800beb0 <_vfiprintf_r+0x1cc>
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d0c6      	beq.n	800be3a <_vfiprintf_r+0x156>
 800beac:	9105      	str	r1, [sp, #20]
 800beae:	e7c4      	b.n	800be3a <_vfiprintf_r+0x156>
 800beb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800beb4:	4604      	mov	r4, r0
 800beb6:	2301      	movs	r3, #1
 800beb8:	e7f0      	b.n	800be9c <_vfiprintf_r+0x1b8>
 800beba:	ab03      	add	r3, sp, #12
 800bebc:	9300      	str	r3, [sp, #0]
 800bebe:	462a      	mov	r2, r5
 800bec0:	4b12      	ldr	r3, [pc, #72]	@ (800bf0c <_vfiprintf_r+0x228>)
 800bec2:	a904      	add	r1, sp, #16
 800bec4:	4630      	mov	r0, r6
 800bec6:	f7fd ff43 	bl	8009d50 <_printf_float>
 800beca:	4607      	mov	r7, r0
 800becc:	1c78      	adds	r0, r7, #1
 800bece:	d1d6      	bne.n	800be7e <_vfiprintf_r+0x19a>
 800bed0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bed2:	07d9      	lsls	r1, r3, #31
 800bed4:	d405      	bmi.n	800bee2 <_vfiprintf_r+0x1fe>
 800bed6:	89ab      	ldrh	r3, [r5, #12]
 800bed8:	059a      	lsls	r2, r3, #22
 800beda:	d402      	bmi.n	800bee2 <_vfiprintf_r+0x1fe>
 800bedc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bede:	f7fe fc75 	bl	800a7cc <__retarget_lock_release_recursive>
 800bee2:	89ab      	ldrh	r3, [r5, #12]
 800bee4:	065b      	lsls	r3, r3, #25
 800bee6:	f53f af1f 	bmi.w	800bd28 <_vfiprintf_r+0x44>
 800beea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800beec:	e71e      	b.n	800bd2c <_vfiprintf_r+0x48>
 800beee:	ab03      	add	r3, sp, #12
 800bef0:	9300      	str	r3, [sp, #0]
 800bef2:	462a      	mov	r2, r5
 800bef4:	4b05      	ldr	r3, [pc, #20]	@ (800bf0c <_vfiprintf_r+0x228>)
 800bef6:	a904      	add	r1, sp, #16
 800bef8:	4630      	mov	r0, r6
 800befa:	f7fe f9b1 	bl	800a260 <_printf_i>
 800befe:	e7e4      	b.n	800beca <_vfiprintf_r+0x1e6>
 800bf00:	0800caf0 	.word	0x0800caf0
 800bf04:	0800cafa 	.word	0x0800cafa
 800bf08:	08009d51 	.word	0x08009d51
 800bf0c:	0800bcbf 	.word	0x0800bcbf
 800bf10:	0800caf6 	.word	0x0800caf6

0800bf14 <__sflush_r>:
 800bf14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf1c:	0716      	lsls	r6, r2, #28
 800bf1e:	4605      	mov	r5, r0
 800bf20:	460c      	mov	r4, r1
 800bf22:	d454      	bmi.n	800bfce <__sflush_r+0xba>
 800bf24:	684b      	ldr	r3, [r1, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	dc02      	bgt.n	800bf30 <__sflush_r+0x1c>
 800bf2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	dd48      	ble.n	800bfc2 <__sflush_r+0xae>
 800bf30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf32:	2e00      	cmp	r6, #0
 800bf34:	d045      	beq.n	800bfc2 <__sflush_r+0xae>
 800bf36:	2300      	movs	r3, #0
 800bf38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bf3c:	682f      	ldr	r7, [r5, #0]
 800bf3e:	6a21      	ldr	r1, [r4, #32]
 800bf40:	602b      	str	r3, [r5, #0]
 800bf42:	d030      	beq.n	800bfa6 <__sflush_r+0x92>
 800bf44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bf46:	89a3      	ldrh	r3, [r4, #12]
 800bf48:	0759      	lsls	r1, r3, #29
 800bf4a:	d505      	bpl.n	800bf58 <__sflush_r+0x44>
 800bf4c:	6863      	ldr	r3, [r4, #4]
 800bf4e:	1ad2      	subs	r2, r2, r3
 800bf50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf52:	b10b      	cbz	r3, 800bf58 <__sflush_r+0x44>
 800bf54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf56:	1ad2      	subs	r2, r2, r3
 800bf58:	2300      	movs	r3, #0
 800bf5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf5c:	6a21      	ldr	r1, [r4, #32]
 800bf5e:	4628      	mov	r0, r5
 800bf60:	47b0      	blx	r6
 800bf62:	1c43      	adds	r3, r0, #1
 800bf64:	89a3      	ldrh	r3, [r4, #12]
 800bf66:	d106      	bne.n	800bf76 <__sflush_r+0x62>
 800bf68:	6829      	ldr	r1, [r5, #0]
 800bf6a:	291d      	cmp	r1, #29
 800bf6c:	d82b      	bhi.n	800bfc6 <__sflush_r+0xb2>
 800bf6e:	4a2a      	ldr	r2, [pc, #168]	@ (800c018 <__sflush_r+0x104>)
 800bf70:	410a      	asrs	r2, r1
 800bf72:	07d6      	lsls	r6, r2, #31
 800bf74:	d427      	bmi.n	800bfc6 <__sflush_r+0xb2>
 800bf76:	2200      	movs	r2, #0
 800bf78:	6062      	str	r2, [r4, #4]
 800bf7a:	04d9      	lsls	r1, r3, #19
 800bf7c:	6922      	ldr	r2, [r4, #16]
 800bf7e:	6022      	str	r2, [r4, #0]
 800bf80:	d504      	bpl.n	800bf8c <__sflush_r+0x78>
 800bf82:	1c42      	adds	r2, r0, #1
 800bf84:	d101      	bne.n	800bf8a <__sflush_r+0x76>
 800bf86:	682b      	ldr	r3, [r5, #0]
 800bf88:	b903      	cbnz	r3, 800bf8c <__sflush_r+0x78>
 800bf8a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bf8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf8e:	602f      	str	r7, [r5, #0]
 800bf90:	b1b9      	cbz	r1, 800bfc2 <__sflush_r+0xae>
 800bf92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf96:	4299      	cmp	r1, r3
 800bf98:	d002      	beq.n	800bfa0 <__sflush_r+0x8c>
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	f7ff f9f6 	bl	800b38c <_free_r>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfa4:	e00d      	b.n	800bfc2 <__sflush_r+0xae>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	47b0      	blx	r6
 800bfac:	4602      	mov	r2, r0
 800bfae:	1c50      	adds	r0, r2, #1
 800bfb0:	d1c9      	bne.n	800bf46 <__sflush_r+0x32>
 800bfb2:	682b      	ldr	r3, [r5, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d0c6      	beq.n	800bf46 <__sflush_r+0x32>
 800bfb8:	2b1d      	cmp	r3, #29
 800bfba:	d001      	beq.n	800bfc0 <__sflush_r+0xac>
 800bfbc:	2b16      	cmp	r3, #22
 800bfbe:	d11e      	bne.n	800bffe <__sflush_r+0xea>
 800bfc0:	602f      	str	r7, [r5, #0]
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	e022      	b.n	800c00c <__sflush_r+0xf8>
 800bfc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfca:	b21b      	sxth	r3, r3
 800bfcc:	e01b      	b.n	800c006 <__sflush_r+0xf2>
 800bfce:	690f      	ldr	r7, [r1, #16]
 800bfd0:	2f00      	cmp	r7, #0
 800bfd2:	d0f6      	beq.n	800bfc2 <__sflush_r+0xae>
 800bfd4:	0793      	lsls	r3, r2, #30
 800bfd6:	680e      	ldr	r6, [r1, #0]
 800bfd8:	bf08      	it	eq
 800bfda:	694b      	ldreq	r3, [r1, #20]
 800bfdc:	600f      	str	r7, [r1, #0]
 800bfde:	bf18      	it	ne
 800bfe0:	2300      	movne	r3, #0
 800bfe2:	eba6 0807 	sub.w	r8, r6, r7
 800bfe6:	608b      	str	r3, [r1, #8]
 800bfe8:	f1b8 0f00 	cmp.w	r8, #0
 800bfec:	dde9      	ble.n	800bfc2 <__sflush_r+0xae>
 800bfee:	6a21      	ldr	r1, [r4, #32]
 800bff0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bff2:	4643      	mov	r3, r8
 800bff4:	463a      	mov	r2, r7
 800bff6:	4628      	mov	r0, r5
 800bff8:	47b0      	blx	r6
 800bffa:	2800      	cmp	r0, #0
 800bffc:	dc08      	bgt.n	800c010 <__sflush_r+0xfc>
 800bffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c006:	81a3      	strh	r3, [r4, #12]
 800c008:	f04f 30ff 	mov.w	r0, #4294967295
 800c00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c010:	4407      	add	r7, r0
 800c012:	eba8 0800 	sub.w	r8, r8, r0
 800c016:	e7e7      	b.n	800bfe8 <__sflush_r+0xd4>
 800c018:	dfbffffe 	.word	0xdfbffffe

0800c01c <_fflush_r>:
 800c01c:	b538      	push	{r3, r4, r5, lr}
 800c01e:	690b      	ldr	r3, [r1, #16]
 800c020:	4605      	mov	r5, r0
 800c022:	460c      	mov	r4, r1
 800c024:	b913      	cbnz	r3, 800c02c <_fflush_r+0x10>
 800c026:	2500      	movs	r5, #0
 800c028:	4628      	mov	r0, r5
 800c02a:	bd38      	pop	{r3, r4, r5, pc}
 800c02c:	b118      	cbz	r0, 800c036 <_fflush_r+0x1a>
 800c02e:	6a03      	ldr	r3, [r0, #32]
 800c030:	b90b      	cbnz	r3, 800c036 <_fflush_r+0x1a>
 800c032:	f7fe fac1 	bl	800a5b8 <__sinit>
 800c036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d0f3      	beq.n	800c026 <_fflush_r+0xa>
 800c03e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c040:	07d0      	lsls	r0, r2, #31
 800c042:	d404      	bmi.n	800c04e <_fflush_r+0x32>
 800c044:	0599      	lsls	r1, r3, #22
 800c046:	d402      	bmi.n	800c04e <_fflush_r+0x32>
 800c048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c04a:	f7fe fbbe 	bl	800a7ca <__retarget_lock_acquire_recursive>
 800c04e:	4628      	mov	r0, r5
 800c050:	4621      	mov	r1, r4
 800c052:	f7ff ff5f 	bl	800bf14 <__sflush_r>
 800c056:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c058:	07da      	lsls	r2, r3, #31
 800c05a:	4605      	mov	r5, r0
 800c05c:	d4e4      	bmi.n	800c028 <_fflush_r+0xc>
 800c05e:	89a3      	ldrh	r3, [r4, #12]
 800c060:	059b      	lsls	r3, r3, #22
 800c062:	d4e1      	bmi.n	800c028 <_fflush_r+0xc>
 800c064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c066:	f7fe fbb1 	bl	800a7cc <__retarget_lock_release_recursive>
 800c06a:	e7dd      	b.n	800c028 <_fflush_r+0xc>

0800c06c <__swbuf_r>:
 800c06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06e:	460e      	mov	r6, r1
 800c070:	4614      	mov	r4, r2
 800c072:	4605      	mov	r5, r0
 800c074:	b118      	cbz	r0, 800c07e <__swbuf_r+0x12>
 800c076:	6a03      	ldr	r3, [r0, #32]
 800c078:	b90b      	cbnz	r3, 800c07e <__swbuf_r+0x12>
 800c07a:	f7fe fa9d 	bl	800a5b8 <__sinit>
 800c07e:	69a3      	ldr	r3, [r4, #24]
 800c080:	60a3      	str	r3, [r4, #8]
 800c082:	89a3      	ldrh	r3, [r4, #12]
 800c084:	071a      	lsls	r2, r3, #28
 800c086:	d501      	bpl.n	800c08c <__swbuf_r+0x20>
 800c088:	6923      	ldr	r3, [r4, #16]
 800c08a:	b943      	cbnz	r3, 800c09e <__swbuf_r+0x32>
 800c08c:	4621      	mov	r1, r4
 800c08e:	4628      	mov	r0, r5
 800c090:	f000 f82a 	bl	800c0e8 <__swsetup_r>
 800c094:	b118      	cbz	r0, 800c09e <__swbuf_r+0x32>
 800c096:	f04f 37ff 	mov.w	r7, #4294967295
 800c09a:	4638      	mov	r0, r7
 800c09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	6922      	ldr	r2, [r4, #16]
 800c0a2:	1a98      	subs	r0, r3, r2
 800c0a4:	6963      	ldr	r3, [r4, #20]
 800c0a6:	b2f6      	uxtb	r6, r6
 800c0a8:	4283      	cmp	r3, r0
 800c0aa:	4637      	mov	r7, r6
 800c0ac:	dc05      	bgt.n	800c0ba <__swbuf_r+0x4e>
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	f7ff ffb3 	bl	800c01c <_fflush_r>
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	d1ed      	bne.n	800c096 <__swbuf_r+0x2a>
 800c0ba:	68a3      	ldr	r3, [r4, #8]
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	60a3      	str	r3, [r4, #8]
 800c0c0:	6823      	ldr	r3, [r4, #0]
 800c0c2:	1c5a      	adds	r2, r3, #1
 800c0c4:	6022      	str	r2, [r4, #0]
 800c0c6:	701e      	strb	r6, [r3, #0]
 800c0c8:	6962      	ldr	r2, [r4, #20]
 800c0ca:	1c43      	adds	r3, r0, #1
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d004      	beq.n	800c0da <__swbuf_r+0x6e>
 800c0d0:	89a3      	ldrh	r3, [r4, #12]
 800c0d2:	07db      	lsls	r3, r3, #31
 800c0d4:	d5e1      	bpl.n	800c09a <__swbuf_r+0x2e>
 800c0d6:	2e0a      	cmp	r6, #10
 800c0d8:	d1df      	bne.n	800c09a <__swbuf_r+0x2e>
 800c0da:	4621      	mov	r1, r4
 800c0dc:	4628      	mov	r0, r5
 800c0de:	f7ff ff9d 	bl	800c01c <_fflush_r>
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d0d9      	beq.n	800c09a <__swbuf_r+0x2e>
 800c0e6:	e7d6      	b.n	800c096 <__swbuf_r+0x2a>

0800c0e8 <__swsetup_r>:
 800c0e8:	b538      	push	{r3, r4, r5, lr}
 800c0ea:	4b29      	ldr	r3, [pc, #164]	@ (800c190 <__swsetup_r+0xa8>)
 800c0ec:	4605      	mov	r5, r0
 800c0ee:	6818      	ldr	r0, [r3, #0]
 800c0f0:	460c      	mov	r4, r1
 800c0f2:	b118      	cbz	r0, 800c0fc <__swsetup_r+0x14>
 800c0f4:	6a03      	ldr	r3, [r0, #32]
 800c0f6:	b90b      	cbnz	r3, 800c0fc <__swsetup_r+0x14>
 800c0f8:	f7fe fa5e 	bl	800a5b8 <__sinit>
 800c0fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c100:	0719      	lsls	r1, r3, #28
 800c102:	d422      	bmi.n	800c14a <__swsetup_r+0x62>
 800c104:	06da      	lsls	r2, r3, #27
 800c106:	d407      	bmi.n	800c118 <__swsetup_r+0x30>
 800c108:	2209      	movs	r2, #9
 800c10a:	602a      	str	r2, [r5, #0]
 800c10c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c110:	81a3      	strh	r3, [r4, #12]
 800c112:	f04f 30ff 	mov.w	r0, #4294967295
 800c116:	e033      	b.n	800c180 <__swsetup_r+0x98>
 800c118:	0758      	lsls	r0, r3, #29
 800c11a:	d512      	bpl.n	800c142 <__swsetup_r+0x5a>
 800c11c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c11e:	b141      	cbz	r1, 800c132 <__swsetup_r+0x4a>
 800c120:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c124:	4299      	cmp	r1, r3
 800c126:	d002      	beq.n	800c12e <__swsetup_r+0x46>
 800c128:	4628      	mov	r0, r5
 800c12a:	f7ff f92f 	bl	800b38c <_free_r>
 800c12e:	2300      	movs	r3, #0
 800c130:	6363      	str	r3, [r4, #52]	@ 0x34
 800c132:	89a3      	ldrh	r3, [r4, #12]
 800c134:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c138:	81a3      	strh	r3, [r4, #12]
 800c13a:	2300      	movs	r3, #0
 800c13c:	6063      	str	r3, [r4, #4]
 800c13e:	6923      	ldr	r3, [r4, #16]
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	89a3      	ldrh	r3, [r4, #12]
 800c144:	f043 0308 	orr.w	r3, r3, #8
 800c148:	81a3      	strh	r3, [r4, #12]
 800c14a:	6923      	ldr	r3, [r4, #16]
 800c14c:	b94b      	cbnz	r3, 800c162 <__swsetup_r+0x7a>
 800c14e:	89a3      	ldrh	r3, [r4, #12]
 800c150:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c158:	d003      	beq.n	800c162 <__swsetup_r+0x7a>
 800c15a:	4621      	mov	r1, r4
 800c15c:	4628      	mov	r0, r5
 800c15e:	f000 f8c1 	bl	800c2e4 <__smakebuf_r>
 800c162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c166:	f013 0201 	ands.w	r2, r3, #1
 800c16a:	d00a      	beq.n	800c182 <__swsetup_r+0x9a>
 800c16c:	2200      	movs	r2, #0
 800c16e:	60a2      	str	r2, [r4, #8]
 800c170:	6962      	ldr	r2, [r4, #20]
 800c172:	4252      	negs	r2, r2
 800c174:	61a2      	str	r2, [r4, #24]
 800c176:	6922      	ldr	r2, [r4, #16]
 800c178:	b942      	cbnz	r2, 800c18c <__swsetup_r+0xa4>
 800c17a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c17e:	d1c5      	bne.n	800c10c <__swsetup_r+0x24>
 800c180:	bd38      	pop	{r3, r4, r5, pc}
 800c182:	0799      	lsls	r1, r3, #30
 800c184:	bf58      	it	pl
 800c186:	6962      	ldrpl	r2, [r4, #20]
 800c188:	60a2      	str	r2, [r4, #8]
 800c18a:	e7f4      	b.n	800c176 <__swsetup_r+0x8e>
 800c18c:	2000      	movs	r0, #0
 800c18e:	e7f7      	b.n	800c180 <__swsetup_r+0x98>
 800c190:	2400002c 	.word	0x2400002c

0800c194 <_sbrk_r>:
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	4d06      	ldr	r5, [pc, #24]	@ (800c1b0 <_sbrk_r+0x1c>)
 800c198:	2300      	movs	r3, #0
 800c19a:	4604      	mov	r4, r0
 800c19c:	4608      	mov	r0, r1
 800c19e:	602b      	str	r3, [r5, #0]
 800c1a0:	f7f5 f848 	bl	8001234 <_sbrk>
 800c1a4:	1c43      	adds	r3, r0, #1
 800c1a6:	d102      	bne.n	800c1ae <_sbrk_r+0x1a>
 800c1a8:	682b      	ldr	r3, [r5, #0]
 800c1aa:	b103      	cbz	r3, 800c1ae <_sbrk_r+0x1a>
 800c1ac:	6023      	str	r3, [r4, #0]
 800c1ae:	bd38      	pop	{r3, r4, r5, pc}
 800c1b0:	24000c6c 	.word	0x24000c6c

0800c1b4 <memcpy>:
 800c1b4:	440a      	add	r2, r1
 800c1b6:	4291      	cmp	r1, r2
 800c1b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1bc:	d100      	bne.n	800c1c0 <memcpy+0xc>
 800c1be:	4770      	bx	lr
 800c1c0:	b510      	push	{r4, lr}
 800c1c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1ca:	4291      	cmp	r1, r2
 800c1cc:	d1f9      	bne.n	800c1c2 <memcpy+0xe>
 800c1ce:	bd10      	pop	{r4, pc}

0800c1d0 <__assert_func>:
 800c1d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1d2:	4614      	mov	r4, r2
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	4b09      	ldr	r3, [pc, #36]	@ (800c1fc <__assert_func+0x2c>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4605      	mov	r5, r0
 800c1dc:	68d8      	ldr	r0, [r3, #12]
 800c1de:	b954      	cbnz	r4, 800c1f6 <__assert_func+0x26>
 800c1e0:	4b07      	ldr	r3, [pc, #28]	@ (800c200 <__assert_func+0x30>)
 800c1e2:	461c      	mov	r4, r3
 800c1e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1e8:	9100      	str	r1, [sp, #0]
 800c1ea:	462b      	mov	r3, r5
 800c1ec:	4905      	ldr	r1, [pc, #20]	@ (800c204 <__assert_func+0x34>)
 800c1ee:	f000 f841 	bl	800c274 <fiprintf>
 800c1f2:	f000 f8d5 	bl	800c3a0 <abort>
 800c1f6:	4b04      	ldr	r3, [pc, #16]	@ (800c208 <__assert_func+0x38>)
 800c1f8:	e7f4      	b.n	800c1e4 <__assert_func+0x14>
 800c1fa:	bf00      	nop
 800c1fc:	2400002c 	.word	0x2400002c
 800c200:	0800cb46 	.word	0x0800cb46
 800c204:	0800cb18 	.word	0x0800cb18
 800c208:	0800cb0b 	.word	0x0800cb0b

0800c20c <_calloc_r>:
 800c20c:	b570      	push	{r4, r5, r6, lr}
 800c20e:	fba1 5402 	umull	r5, r4, r1, r2
 800c212:	b93c      	cbnz	r4, 800c224 <_calloc_r+0x18>
 800c214:	4629      	mov	r1, r5
 800c216:	f7ff f92d 	bl	800b474 <_malloc_r>
 800c21a:	4606      	mov	r6, r0
 800c21c:	b928      	cbnz	r0, 800c22a <_calloc_r+0x1e>
 800c21e:	2600      	movs	r6, #0
 800c220:	4630      	mov	r0, r6
 800c222:	bd70      	pop	{r4, r5, r6, pc}
 800c224:	220c      	movs	r2, #12
 800c226:	6002      	str	r2, [r0, #0]
 800c228:	e7f9      	b.n	800c21e <_calloc_r+0x12>
 800c22a:	462a      	mov	r2, r5
 800c22c:	4621      	mov	r1, r4
 800c22e:	f7fe fa4e 	bl	800a6ce <memset>
 800c232:	e7f5      	b.n	800c220 <_calloc_r+0x14>

0800c234 <__ascii_mbtowc>:
 800c234:	b082      	sub	sp, #8
 800c236:	b901      	cbnz	r1, 800c23a <__ascii_mbtowc+0x6>
 800c238:	a901      	add	r1, sp, #4
 800c23a:	b142      	cbz	r2, 800c24e <__ascii_mbtowc+0x1a>
 800c23c:	b14b      	cbz	r3, 800c252 <__ascii_mbtowc+0x1e>
 800c23e:	7813      	ldrb	r3, [r2, #0]
 800c240:	600b      	str	r3, [r1, #0]
 800c242:	7812      	ldrb	r2, [r2, #0]
 800c244:	1e10      	subs	r0, r2, #0
 800c246:	bf18      	it	ne
 800c248:	2001      	movne	r0, #1
 800c24a:	b002      	add	sp, #8
 800c24c:	4770      	bx	lr
 800c24e:	4610      	mov	r0, r2
 800c250:	e7fb      	b.n	800c24a <__ascii_mbtowc+0x16>
 800c252:	f06f 0001 	mvn.w	r0, #1
 800c256:	e7f8      	b.n	800c24a <__ascii_mbtowc+0x16>

0800c258 <__ascii_wctomb>:
 800c258:	4603      	mov	r3, r0
 800c25a:	4608      	mov	r0, r1
 800c25c:	b141      	cbz	r1, 800c270 <__ascii_wctomb+0x18>
 800c25e:	2aff      	cmp	r2, #255	@ 0xff
 800c260:	d904      	bls.n	800c26c <__ascii_wctomb+0x14>
 800c262:	228a      	movs	r2, #138	@ 0x8a
 800c264:	601a      	str	r2, [r3, #0]
 800c266:	f04f 30ff 	mov.w	r0, #4294967295
 800c26a:	4770      	bx	lr
 800c26c:	700a      	strb	r2, [r1, #0]
 800c26e:	2001      	movs	r0, #1
 800c270:	4770      	bx	lr
	...

0800c274 <fiprintf>:
 800c274:	b40e      	push	{r1, r2, r3}
 800c276:	b503      	push	{r0, r1, lr}
 800c278:	4601      	mov	r1, r0
 800c27a:	ab03      	add	r3, sp, #12
 800c27c:	4805      	ldr	r0, [pc, #20]	@ (800c294 <fiprintf+0x20>)
 800c27e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c282:	6800      	ldr	r0, [r0, #0]
 800c284:	9301      	str	r3, [sp, #4]
 800c286:	f7ff fd2d 	bl	800bce4 <_vfiprintf_r>
 800c28a:	b002      	add	sp, #8
 800c28c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c290:	b003      	add	sp, #12
 800c292:	4770      	bx	lr
 800c294:	2400002c 	.word	0x2400002c

0800c298 <__swhatbuf_r>:
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	460c      	mov	r4, r1
 800c29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2a0:	2900      	cmp	r1, #0
 800c2a2:	b096      	sub	sp, #88	@ 0x58
 800c2a4:	4615      	mov	r5, r2
 800c2a6:	461e      	mov	r6, r3
 800c2a8:	da0d      	bge.n	800c2c6 <__swhatbuf_r+0x2e>
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c2b0:	f04f 0100 	mov.w	r1, #0
 800c2b4:	bf14      	ite	ne
 800c2b6:	2340      	movne	r3, #64	@ 0x40
 800c2b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c2bc:	2000      	movs	r0, #0
 800c2be:	6031      	str	r1, [r6, #0]
 800c2c0:	602b      	str	r3, [r5, #0]
 800c2c2:	b016      	add	sp, #88	@ 0x58
 800c2c4:	bd70      	pop	{r4, r5, r6, pc}
 800c2c6:	466a      	mov	r2, sp
 800c2c8:	f000 f848 	bl	800c35c <_fstat_r>
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	dbec      	blt.n	800c2aa <__swhatbuf_r+0x12>
 800c2d0:	9901      	ldr	r1, [sp, #4]
 800c2d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c2d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c2da:	4259      	negs	r1, r3
 800c2dc:	4159      	adcs	r1, r3
 800c2de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2e2:	e7eb      	b.n	800c2bc <__swhatbuf_r+0x24>

0800c2e4 <__smakebuf_r>:
 800c2e4:	898b      	ldrh	r3, [r1, #12]
 800c2e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2e8:	079d      	lsls	r5, r3, #30
 800c2ea:	4606      	mov	r6, r0
 800c2ec:	460c      	mov	r4, r1
 800c2ee:	d507      	bpl.n	800c300 <__smakebuf_r+0x1c>
 800c2f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c2f4:	6023      	str	r3, [r4, #0]
 800c2f6:	6123      	str	r3, [r4, #16]
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	6163      	str	r3, [r4, #20]
 800c2fc:	b003      	add	sp, #12
 800c2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c300:	ab01      	add	r3, sp, #4
 800c302:	466a      	mov	r2, sp
 800c304:	f7ff ffc8 	bl	800c298 <__swhatbuf_r>
 800c308:	9f00      	ldr	r7, [sp, #0]
 800c30a:	4605      	mov	r5, r0
 800c30c:	4639      	mov	r1, r7
 800c30e:	4630      	mov	r0, r6
 800c310:	f7ff f8b0 	bl	800b474 <_malloc_r>
 800c314:	b948      	cbnz	r0, 800c32a <__smakebuf_r+0x46>
 800c316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c31a:	059a      	lsls	r2, r3, #22
 800c31c:	d4ee      	bmi.n	800c2fc <__smakebuf_r+0x18>
 800c31e:	f023 0303 	bic.w	r3, r3, #3
 800c322:	f043 0302 	orr.w	r3, r3, #2
 800c326:	81a3      	strh	r3, [r4, #12]
 800c328:	e7e2      	b.n	800c2f0 <__smakebuf_r+0xc>
 800c32a:	89a3      	ldrh	r3, [r4, #12]
 800c32c:	6020      	str	r0, [r4, #0]
 800c32e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c332:	81a3      	strh	r3, [r4, #12]
 800c334:	9b01      	ldr	r3, [sp, #4]
 800c336:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c33a:	b15b      	cbz	r3, 800c354 <__smakebuf_r+0x70>
 800c33c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c340:	4630      	mov	r0, r6
 800c342:	f000 f81d 	bl	800c380 <_isatty_r>
 800c346:	b128      	cbz	r0, 800c354 <__smakebuf_r+0x70>
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	f023 0303 	bic.w	r3, r3, #3
 800c34e:	f043 0301 	orr.w	r3, r3, #1
 800c352:	81a3      	strh	r3, [r4, #12]
 800c354:	89a3      	ldrh	r3, [r4, #12]
 800c356:	431d      	orrs	r5, r3
 800c358:	81a5      	strh	r5, [r4, #12]
 800c35a:	e7cf      	b.n	800c2fc <__smakebuf_r+0x18>

0800c35c <_fstat_r>:
 800c35c:	b538      	push	{r3, r4, r5, lr}
 800c35e:	4d07      	ldr	r5, [pc, #28]	@ (800c37c <_fstat_r+0x20>)
 800c360:	2300      	movs	r3, #0
 800c362:	4604      	mov	r4, r0
 800c364:	4608      	mov	r0, r1
 800c366:	4611      	mov	r1, r2
 800c368:	602b      	str	r3, [r5, #0]
 800c36a:	f7f4 ff3a 	bl	80011e2 <_fstat>
 800c36e:	1c43      	adds	r3, r0, #1
 800c370:	d102      	bne.n	800c378 <_fstat_r+0x1c>
 800c372:	682b      	ldr	r3, [r5, #0]
 800c374:	b103      	cbz	r3, 800c378 <_fstat_r+0x1c>
 800c376:	6023      	str	r3, [r4, #0]
 800c378:	bd38      	pop	{r3, r4, r5, pc}
 800c37a:	bf00      	nop
 800c37c:	24000c6c 	.word	0x24000c6c

0800c380 <_isatty_r>:
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	4d06      	ldr	r5, [pc, #24]	@ (800c39c <_isatty_r+0x1c>)
 800c384:	2300      	movs	r3, #0
 800c386:	4604      	mov	r4, r0
 800c388:	4608      	mov	r0, r1
 800c38a:	602b      	str	r3, [r5, #0]
 800c38c:	f7f4 ff39 	bl	8001202 <_isatty>
 800c390:	1c43      	adds	r3, r0, #1
 800c392:	d102      	bne.n	800c39a <_isatty_r+0x1a>
 800c394:	682b      	ldr	r3, [r5, #0]
 800c396:	b103      	cbz	r3, 800c39a <_isatty_r+0x1a>
 800c398:	6023      	str	r3, [r4, #0]
 800c39a:	bd38      	pop	{r3, r4, r5, pc}
 800c39c:	24000c6c 	.word	0x24000c6c

0800c3a0 <abort>:
 800c3a0:	b508      	push	{r3, lr}
 800c3a2:	2006      	movs	r0, #6
 800c3a4:	f000 f82c 	bl	800c400 <raise>
 800c3a8:	2001      	movs	r0, #1
 800c3aa:	f7f4 fee6 	bl	800117a <_exit>

0800c3ae <_raise_r>:
 800c3ae:	291f      	cmp	r1, #31
 800c3b0:	b538      	push	{r3, r4, r5, lr}
 800c3b2:	4605      	mov	r5, r0
 800c3b4:	460c      	mov	r4, r1
 800c3b6:	d904      	bls.n	800c3c2 <_raise_r+0x14>
 800c3b8:	2316      	movs	r3, #22
 800c3ba:	6003      	str	r3, [r0, #0]
 800c3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c0:	bd38      	pop	{r3, r4, r5, pc}
 800c3c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c3c4:	b112      	cbz	r2, 800c3cc <_raise_r+0x1e>
 800c3c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3ca:	b94b      	cbnz	r3, 800c3e0 <_raise_r+0x32>
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	f000 f831 	bl	800c434 <_getpid_r>
 800c3d2:	4622      	mov	r2, r4
 800c3d4:	4601      	mov	r1, r0
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3dc:	f000 b818 	b.w	800c410 <_kill_r>
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d00a      	beq.n	800c3fa <_raise_r+0x4c>
 800c3e4:	1c59      	adds	r1, r3, #1
 800c3e6:	d103      	bne.n	800c3f0 <_raise_r+0x42>
 800c3e8:	2316      	movs	r3, #22
 800c3ea:	6003      	str	r3, [r0, #0]
 800c3ec:	2001      	movs	r0, #1
 800c3ee:	e7e7      	b.n	800c3c0 <_raise_r+0x12>
 800c3f0:	2100      	movs	r1, #0
 800c3f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	4798      	blx	r3
 800c3fa:	2000      	movs	r0, #0
 800c3fc:	e7e0      	b.n	800c3c0 <_raise_r+0x12>
	...

0800c400 <raise>:
 800c400:	4b02      	ldr	r3, [pc, #8]	@ (800c40c <raise+0xc>)
 800c402:	4601      	mov	r1, r0
 800c404:	6818      	ldr	r0, [r3, #0]
 800c406:	f7ff bfd2 	b.w	800c3ae <_raise_r>
 800c40a:	bf00      	nop
 800c40c:	2400002c 	.word	0x2400002c

0800c410 <_kill_r>:
 800c410:	b538      	push	{r3, r4, r5, lr}
 800c412:	4d07      	ldr	r5, [pc, #28]	@ (800c430 <_kill_r+0x20>)
 800c414:	2300      	movs	r3, #0
 800c416:	4604      	mov	r4, r0
 800c418:	4608      	mov	r0, r1
 800c41a:	4611      	mov	r1, r2
 800c41c:	602b      	str	r3, [r5, #0]
 800c41e:	f7f4 fe9c 	bl	800115a <_kill>
 800c422:	1c43      	adds	r3, r0, #1
 800c424:	d102      	bne.n	800c42c <_kill_r+0x1c>
 800c426:	682b      	ldr	r3, [r5, #0]
 800c428:	b103      	cbz	r3, 800c42c <_kill_r+0x1c>
 800c42a:	6023      	str	r3, [r4, #0]
 800c42c:	bd38      	pop	{r3, r4, r5, pc}
 800c42e:	bf00      	nop
 800c430:	24000c6c 	.word	0x24000c6c

0800c434 <_getpid_r>:
 800c434:	f7f4 be89 	b.w	800114a <_getpid>

0800c438 <atan2f>:
 800c438:	f000 b844 	b.w	800c4c4 <__ieee754_atan2f>

0800c43c <round>:
 800c43c:	ee10 3a90 	vmov	r3, s1
 800c440:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800c444:	f2a1 32ff 	subw	r2, r1, #1023	@ 0x3ff
 800c448:	2a13      	cmp	r2, #19
 800c44a:	b510      	push	{r4, lr}
 800c44c:	ee10 4a10 	vmov	r4, s0
 800c450:	dc1d      	bgt.n	800c48e <round+0x52>
 800c452:	2a00      	cmp	r2, #0
 800c454:	da0d      	bge.n	800c472 <round+0x36>
 800c456:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c45a:	3201      	adds	r2, #1
 800c45c:	bf04      	itt	eq
 800c45e:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800c462:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800c466:	2200      	movs	r2, #0
 800c468:	4619      	mov	r1, r3
 800c46a:	4610      	mov	r0, r2
 800c46c:	ec41 0b10 	vmov	d0, r0, r1
 800c470:	e014      	b.n	800c49c <round+0x60>
 800c472:	4813      	ldr	r0, [pc, #76]	@ (800c4c0 <round+0x84>)
 800c474:	4110      	asrs	r0, r2
 800c476:	ea00 0103 	and.w	r1, r0, r3
 800c47a:	4321      	orrs	r1, r4
 800c47c:	d00e      	beq.n	800c49c <round+0x60>
 800c47e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800c482:	fa41 f202 	asr.w	r2, r1, r2
 800c486:	4413      	add	r3, r2
 800c488:	ea23 0300 	bic.w	r3, r3, r0
 800c48c:	e7eb      	b.n	800c466 <round+0x2a>
 800c48e:	2a33      	cmp	r2, #51	@ 0x33
 800c490:	dd05      	ble.n	800c49e <round+0x62>
 800c492:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800c496:	d101      	bne.n	800c49c <round+0x60>
 800c498:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c49c:	bd10      	pop	{r4, pc}
 800c49e:	f2a1 4113 	subw	r1, r1, #1043	@ 0x413
 800c4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a6:	40c8      	lsrs	r0, r1
 800c4a8:	4220      	tst	r0, r4
 800c4aa:	d0f7      	beq.n	800c49c <round+0x60>
 800c4ac:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	408a      	lsls	r2, r1
 800c4b4:	1912      	adds	r2, r2, r4
 800c4b6:	bf28      	it	cs
 800c4b8:	3301      	addcs	r3, #1
 800c4ba:	ea22 0200 	bic.w	r2, r2, r0
 800c4be:	e7d3      	b.n	800c468 <round+0x2c>
 800c4c0:	000fffff 	.word	0x000fffff

0800c4c4 <__ieee754_atan2f>:
 800c4c4:	ee10 2a90 	vmov	r2, s1
 800c4c8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c4cc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c4d0:	b510      	push	{r4, lr}
 800c4d2:	eef0 7a40 	vmov.f32	s15, s0
 800c4d6:	d806      	bhi.n	800c4e6 <__ieee754_atan2f+0x22>
 800c4d8:	ee10 0a10 	vmov	r0, s0
 800c4dc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c4e0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c4e4:	d904      	bls.n	800c4f0 <__ieee754_atan2f+0x2c>
 800c4e6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c4ea:	eeb0 0a67 	vmov.f32	s0, s15
 800c4ee:	bd10      	pop	{r4, pc}
 800c4f0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c4f4:	d103      	bne.n	800c4fe <__ieee754_atan2f+0x3a>
 800c4f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4fa:	f000 b881 	b.w	800c600 <atanf>
 800c4fe:	1794      	asrs	r4, r2, #30
 800c500:	f004 0402 	and.w	r4, r4, #2
 800c504:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c508:	b93b      	cbnz	r3, 800c51a <__ieee754_atan2f+0x56>
 800c50a:	2c02      	cmp	r4, #2
 800c50c:	d05c      	beq.n	800c5c8 <__ieee754_atan2f+0x104>
 800c50e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800c5dc <__ieee754_atan2f+0x118>
 800c512:	2c03      	cmp	r4, #3
 800c514:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800c518:	e7e7      	b.n	800c4ea <__ieee754_atan2f+0x26>
 800c51a:	b939      	cbnz	r1, 800c52c <__ieee754_atan2f+0x68>
 800c51c:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800c5e0 <__ieee754_atan2f+0x11c>
 800c520:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800c5e4 <__ieee754_atan2f+0x120>
 800c524:	2800      	cmp	r0, #0
 800c526:	fe67 7a87 	vselge.f32	s15, s15, s14
 800c52a:	e7de      	b.n	800c4ea <__ieee754_atan2f+0x26>
 800c52c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c530:	d110      	bne.n	800c554 <__ieee754_atan2f+0x90>
 800c532:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c536:	f104 34ff 	add.w	r4, r4, #4294967295
 800c53a:	d107      	bne.n	800c54c <__ieee754_atan2f+0x88>
 800c53c:	2c02      	cmp	r4, #2
 800c53e:	d846      	bhi.n	800c5ce <__ieee754_atan2f+0x10a>
 800c540:	4b29      	ldr	r3, [pc, #164]	@ (800c5e8 <__ieee754_atan2f+0x124>)
 800c542:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c546:	edd3 7a00 	vldr	s15, [r3]
 800c54a:	e7ce      	b.n	800c4ea <__ieee754_atan2f+0x26>
 800c54c:	2c02      	cmp	r4, #2
 800c54e:	d841      	bhi.n	800c5d4 <__ieee754_atan2f+0x110>
 800c550:	4b26      	ldr	r3, [pc, #152]	@ (800c5ec <__ieee754_atan2f+0x128>)
 800c552:	e7f6      	b.n	800c542 <__ieee754_atan2f+0x7e>
 800c554:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c558:	d0e0      	beq.n	800c51c <__ieee754_atan2f+0x58>
 800c55a:	1a5b      	subs	r3, r3, r1
 800c55c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c560:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c564:	da1a      	bge.n	800c59c <__ieee754_atan2f+0xd8>
 800c566:	2a00      	cmp	r2, #0
 800c568:	da01      	bge.n	800c56e <__ieee754_atan2f+0xaa>
 800c56a:	313c      	adds	r1, #60	@ 0x3c
 800c56c:	db19      	blt.n	800c5a2 <__ieee754_atan2f+0xde>
 800c56e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c572:	f000 f919 	bl	800c7a8 <fabsf>
 800c576:	f000 f843 	bl	800c600 <atanf>
 800c57a:	eef0 7a40 	vmov.f32	s15, s0
 800c57e:	2c01      	cmp	r4, #1
 800c580:	d012      	beq.n	800c5a8 <__ieee754_atan2f+0xe4>
 800c582:	2c02      	cmp	r4, #2
 800c584:	d017      	beq.n	800c5b6 <__ieee754_atan2f+0xf2>
 800c586:	2c00      	cmp	r4, #0
 800c588:	d0af      	beq.n	800c4ea <__ieee754_atan2f+0x26>
 800c58a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c5f0 <__ieee754_atan2f+0x12c>
 800c58e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c592:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800c5f4 <__ieee754_atan2f+0x130>
 800c596:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c59a:	e7a6      	b.n	800c4ea <__ieee754_atan2f+0x26>
 800c59c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800c5e0 <__ieee754_atan2f+0x11c>
 800c5a0:	e7ed      	b.n	800c57e <__ieee754_atan2f+0xba>
 800c5a2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c5f8 <__ieee754_atan2f+0x134>
 800c5a6:	e7ea      	b.n	800c57e <__ieee754_atan2f+0xba>
 800c5a8:	ee17 3a90 	vmov	r3, s15
 800c5ac:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c5b0:	ee07 3a90 	vmov	s15, r3
 800c5b4:	e799      	b.n	800c4ea <__ieee754_atan2f+0x26>
 800c5b6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c5f0 <__ieee754_atan2f+0x12c>
 800c5ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5be:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800c5f4 <__ieee754_atan2f+0x130>
 800c5c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5c6:	e790      	b.n	800c4ea <__ieee754_atan2f+0x26>
 800c5c8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800c5f4 <__ieee754_atan2f+0x130>
 800c5cc:	e78d      	b.n	800c4ea <__ieee754_atan2f+0x26>
 800c5ce:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800c5fc <__ieee754_atan2f+0x138>
 800c5d2:	e78a      	b.n	800c4ea <__ieee754_atan2f+0x26>
 800c5d4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c5f8 <__ieee754_atan2f+0x134>
 800c5d8:	e787      	b.n	800c4ea <__ieee754_atan2f+0x26>
 800c5da:	bf00      	nop
 800c5dc:	c0490fdb 	.word	0xc0490fdb
 800c5e0:	3fc90fdb 	.word	0x3fc90fdb
 800c5e4:	bfc90fdb 	.word	0xbfc90fdb
 800c5e8:	0800cc54 	.word	0x0800cc54
 800c5ec:	0800cc48 	.word	0x0800cc48
 800c5f0:	33bbbd2e 	.word	0x33bbbd2e
 800c5f4:	40490fdb 	.word	0x40490fdb
 800c5f8:	00000000 	.word	0x00000000
 800c5fc:	3f490fdb 	.word	0x3f490fdb

0800c600 <atanf>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	ee10 5a10 	vmov	r5, s0
 800c606:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c60a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c60e:	eef0 7a40 	vmov.f32	s15, s0
 800c612:	d30f      	bcc.n	800c634 <atanf+0x34>
 800c614:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c618:	d904      	bls.n	800c624 <atanf+0x24>
 800c61a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c61e:	eeb0 0a67 	vmov.f32	s0, s15
 800c622:	bd38      	pop	{r3, r4, r5, pc}
 800c624:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c75c <atanf+0x15c>
 800c628:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800c760 <atanf+0x160>
 800c62c:	2d00      	cmp	r5, #0
 800c62e:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800c632:	e7f4      	b.n	800c61e <atanf+0x1e>
 800c634:	4b4b      	ldr	r3, [pc, #300]	@ (800c764 <atanf+0x164>)
 800c636:	429c      	cmp	r4, r3
 800c638:	d810      	bhi.n	800c65c <atanf+0x5c>
 800c63a:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c63e:	d20a      	bcs.n	800c656 <atanf+0x56>
 800c640:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800c768 <atanf+0x168>
 800c644:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c648:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c64c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c654:	dce3      	bgt.n	800c61e <atanf+0x1e>
 800c656:	f04f 33ff 	mov.w	r3, #4294967295
 800c65a:	e013      	b.n	800c684 <atanf+0x84>
 800c65c:	f000 f8a4 	bl	800c7a8 <fabsf>
 800c660:	4b42      	ldr	r3, [pc, #264]	@ (800c76c <atanf+0x16c>)
 800c662:	429c      	cmp	r4, r3
 800c664:	d84f      	bhi.n	800c706 <atanf+0x106>
 800c666:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c66a:	429c      	cmp	r4, r3
 800c66c:	d841      	bhi.n	800c6f2 <atanf+0xf2>
 800c66e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c672:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c676:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c67a:	2300      	movs	r3, #0
 800c67c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c680:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c684:	1c5a      	adds	r2, r3, #1
 800c686:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c68a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800c770 <atanf+0x170>
 800c68e:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800c774 <atanf+0x174>
 800c692:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800c778 <atanf+0x178>
 800c696:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c69a:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c69e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800c77c <atanf+0x17c>
 800c6a2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c6a6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800c780 <atanf+0x180>
 800c6aa:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c6ae:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800c784 <atanf+0x184>
 800c6b2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c6b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c788 <atanf+0x188>
 800c6ba:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c6be:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800c78c <atanf+0x18c>
 800c6c2:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c6c6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c790 <atanf+0x190>
 800c6ca:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c6ce:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800c794 <atanf+0x194>
 800c6d2:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c6d6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800c798 <atanf+0x198>
 800c6da:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c6de:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c6e2:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c6e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c6ea:	d121      	bne.n	800c730 <atanf+0x130>
 800c6ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6f0:	e795      	b.n	800c61e <atanf+0x1e>
 800c6f2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c6f6:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c6fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c6fe:	2301      	movs	r3, #1
 800c700:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c704:	e7be      	b.n	800c684 <atanf+0x84>
 800c706:	4b25      	ldr	r3, [pc, #148]	@ (800c79c <atanf+0x19c>)
 800c708:	429c      	cmp	r4, r3
 800c70a:	d80b      	bhi.n	800c724 <atanf+0x124>
 800c70c:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800c710:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c714:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c718:	2302      	movs	r3, #2
 800c71a:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c71e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c722:	e7af      	b.n	800c684 <atanf+0x84>
 800c724:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c728:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c72c:	2303      	movs	r3, #3
 800c72e:	e7a9      	b.n	800c684 <atanf+0x84>
 800c730:	4a1b      	ldr	r2, [pc, #108]	@ (800c7a0 <atanf+0x1a0>)
 800c732:	491c      	ldr	r1, [pc, #112]	@ (800c7a4 <atanf+0x1a4>)
 800c734:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c738:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c73c:	edd3 6a00 	vldr	s13, [r3]
 800c740:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c744:	2d00      	cmp	r5, #0
 800c746:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c74a:	edd2 7a00 	vldr	s15, [r2]
 800c74e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c752:	bfb8      	it	lt
 800c754:	eef1 7a67 	vneglt.f32	s15, s15
 800c758:	e761      	b.n	800c61e <atanf+0x1e>
 800c75a:	bf00      	nop
 800c75c:	bfc90fdb 	.word	0xbfc90fdb
 800c760:	3fc90fdb 	.word	0x3fc90fdb
 800c764:	3edfffff 	.word	0x3edfffff
 800c768:	7149f2ca 	.word	0x7149f2ca
 800c76c:	3f97ffff 	.word	0x3f97ffff
 800c770:	3c8569d7 	.word	0x3c8569d7
 800c774:	3d4bda59 	.word	0x3d4bda59
 800c778:	bd6ef16b 	.word	0xbd6ef16b
 800c77c:	3d886b35 	.word	0x3d886b35
 800c780:	3dba2e6e 	.word	0x3dba2e6e
 800c784:	3e124925 	.word	0x3e124925
 800c788:	3eaaaaab 	.word	0x3eaaaaab
 800c78c:	bd15a221 	.word	0xbd15a221
 800c790:	bd9d8795 	.word	0xbd9d8795
 800c794:	bde38e38 	.word	0xbde38e38
 800c798:	be4ccccd 	.word	0xbe4ccccd
 800c79c:	401bffff 	.word	0x401bffff
 800c7a0:	0800cc70 	.word	0x0800cc70
 800c7a4:	0800cc60 	.word	0x0800cc60

0800c7a8 <fabsf>:
 800c7a8:	ee10 3a10 	vmov	r3, s0
 800c7ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c7b0:	ee00 3a10 	vmov	s0, r3
 800c7b4:	4770      	bx	lr
	...

0800c7b8 <_init>:
 800c7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ba:	bf00      	nop
 800c7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7be:	bc08      	pop	{r3}
 800c7c0:	469e      	mov	lr, r3
 800c7c2:	4770      	bx	lr

0800c7c4 <_fini>:
 800c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c6:	bf00      	nop
 800c7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ca:	bc08      	pop	{r3}
 800c7cc:	469e      	mov	lr, r3
 800c7ce:	4770      	bx	lr
