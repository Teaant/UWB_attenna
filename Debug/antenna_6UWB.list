
antenna_6UWB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000924c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080094e4  080094e4  0000a4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080095d8  080095d8  0000a5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080095e0  080095e0  0000a5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080095e4  080095e4  0000a5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000020  24000000  080095e8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000868  24000020  08009608  0000b020  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000888  08009608  0000b888  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b020  2**0
                  CONTENTS, READONLY
 10 .debug_info   000229db  00000000  00000000  0000b04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000040d8  00000000  00000000  0002da29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a18  00000000  00000000  00031b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001436  00000000  00000000  00033520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d1c4  00000000  00000000  00034956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002686b  00000000  00000000  00071b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171765  00000000  00000000  00098385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00209aea  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006e1c  00000000  00000000  00209b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  0021094c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00000092  00000000  00000000  0021099f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080094cc 	.word	0x080094cc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	080094cc 	.word	0x080094cc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08c      	sub	sp, #48	@ 0x30
 80005cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005de:	4ba7      	ldr	r3, [pc, #668]	@ (800087c <MX_GPIO_Init+0x2b4>)
 80005e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e4:	4aa5      	ldr	r2, [pc, #660]	@ (800087c <MX_GPIO_Init+0x2b4>)
 80005e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ee:	4ba3      	ldr	r3, [pc, #652]	@ (800087c <MX_GPIO_Init+0x2b4>)
 80005f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005f8:	61bb      	str	r3, [r7, #24]
 80005fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b9f      	ldr	r3, [pc, #636]	@ (800087c <MX_GPIO_Init+0x2b4>)
 80005fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000602:	4a9e      	ldr	r2, [pc, #632]	@ (800087c <MX_GPIO_Init+0x2b4>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800060c:	4b9b      	ldr	r3, [pc, #620]	@ (800087c <MX_GPIO_Init+0x2b4>)
 800060e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b98      	ldr	r3, [pc, #608]	@ (800087c <MX_GPIO_Init+0x2b4>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000620:	4a96      	ldr	r2, [pc, #600]	@ (800087c <MX_GPIO_Init+0x2b4>)
 8000622:	f043 0302 	orr.w	r3, r3, #2
 8000626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800062a:	4b94      	ldr	r3, [pc, #592]	@ (800087c <MX_GPIO_Init+0x2b4>)
 800062c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000630:	f003 0302 	and.w	r3, r3, #2
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000638:	4b90      	ldr	r3, [pc, #576]	@ (800087c <MX_GPIO_Init+0x2b4>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800063e:	4a8f      	ldr	r2, [pc, #572]	@ (800087c <MX_GPIO_Init+0x2b4>)
 8000640:	f043 0310 	orr.w	r3, r3, #16
 8000644:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000648:	4b8c      	ldr	r3, [pc, #560]	@ (800087c <MX_GPIO_Init+0x2b4>)
 800064a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800064e:	f003 0310 	and.w	r3, r3, #16
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000656:	4b89      	ldr	r3, [pc, #548]	@ (800087c <MX_GPIO_Init+0x2b4>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800065c:	4a87      	ldr	r2, [pc, #540]	@ (800087c <MX_GPIO_Init+0x2b4>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000666:	4b85      	ldr	r3, [pc, #532]	@ (800087c <MX_GPIO_Init+0x2b4>)
 8000668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000674:	4b81      	ldr	r3, [pc, #516]	@ (800087c <MX_GPIO_Init+0x2b4>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800067a:	4a80      	ldr	r2, [pc, #512]	@ (800087c <MX_GPIO_Init+0x2b4>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000684:	4b7d      	ldr	r3, [pc, #500]	@ (800087c <MX_GPIO_Init+0x2b4>)
 8000686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800068a:	f003 0304 	and.w	r3, r3, #4
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UWB1_RESET_Pin|UWB1_CSn_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f240 2106 	movw	r1, #518	@ 0x206
 8000698:	4879      	ldr	r0, [pc, #484]	@ (8000880 <MX_GPIO_Init+0x2b8>)
 800069a:	f003 f90d 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, UWB1_WAKEUP_Pin|UWB2_RESET_Pin|UWB2_CSn_Pin|UWB2_WAKEUP_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 5162 	mov.w	r1, #14464	@ 0x3880
 80006a4:	4877      	ldr	r0, [pc, #476]	@ (8000884 <MX_GPIO_Init+0x2bc>)
 80006a6:	f003 f907 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, UWB3_RESET_Pin|UWB3_CSn_Pin|UWB3_WAKEUP_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 80006b0:	4875      	ldr	r0, [pc, #468]	@ (8000888 <MX_GPIO_Init+0x2c0>)
 80006b2:	f003 f901 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UWB4_RESET_Pin|UWB4_CSn_Pin|UWB4_WAKEUP_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80006bc:	4873      	ldr	r0, [pc, #460]	@ (800088c <MX_GPIO_Init+0x2c4>)
 80006be:	f003 f8fb 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYNC_EN_GPIO_Port, SYNC_EN_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006c8:	4871      	ldr	r0, [pc, #452]	@ (8000890 <MX_GPIO_Init+0x2c8>)
 80006ca:	f003 f8f5 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB1_IRQ_Pin;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UWB1_IRQ_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4867      	ldr	r0, [pc, #412]	@ (8000880 <MX_GPIO_Init+0x2b8>)
 80006e4:	f002 ff20 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB1_RESET_Pin;
 80006e8:	2302      	movs	r3, #2
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80006ec:	2311      	movs	r3, #17
 80006ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UWB1_RESET_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4860      	ldr	r0, [pc, #384]	@ (8000880 <MX_GPIO_Init+0x2b8>)
 8000700:	f002 ff12 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB9 */
  GPIO_InitStruct.Pin = UWB1_CSn_Pin|GPIO_PIN_9;
 8000704:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4858      	ldr	r0, [pc, #352]	@ (8000880 <MX_GPIO_Init+0x2b8>)
 800071e:	f002 ff03 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = UWB1_WAKEUP_Pin|UWB2_CSn_Pin|UWB2_WAKEUP_Pin;
 8000722:	f44f 5342 	mov.w	r3, #12416	@ 0x3080
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4852      	ldr	r0, [pc, #328]	@ (8000884 <MX_GPIO_Init+0x2bc>)
 800073c:	f002 fef4 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB2_IRQ_Pin;
 8000740:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000746:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800074a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UWB2_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	484b      	ldr	r0, [pc, #300]	@ (8000884 <MX_GPIO_Init+0x2bc>)
 8000758:	f002 fee6 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB2_RESET_Pin;
 800075c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000762:	2311      	movs	r3, #17
 8000764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UWB2_RESET_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <MX_GPIO_Init+0x2bc>)
 8000776:	f002 fed7 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB3_IRQ_Pin;
 800077a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000780:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UWB3_IRQ_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	483d      	ldr	r0, [pc, #244]	@ (8000888 <MX_GPIO_Init+0x2c0>)
 8000792:	f002 fec9 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB3_RESET_Pin;
 8000796:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800079c:	2311      	movs	r3, #17
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UWB3_RESET_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4836      	ldr	r0, [pc, #216]	@ (8000888 <MX_GPIO_Init+0x2c0>)
 80007b0:	f002 feba 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = UWB3_CSn_Pin|UWB3_WAKEUP_Pin;
 80007b4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	482e      	ldr	r0, [pc, #184]	@ (8000888 <MX_GPIO_Init+0x2c0>)
 80007ce:	f002 feab 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB4_IRQ_Pin;
 80007d2:	2340      	movs	r3, #64	@ 0x40
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UWB4_IRQ_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	4829      	ldr	r0, [pc, #164]	@ (800088c <MX_GPIO_Init+0x2c4>)
 80007e8:	f002 fe9e 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB4_RESET_Pin;
 80007ec:	2380      	movs	r3, #128	@ 0x80
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007f0:	2311      	movs	r3, #17
 80007f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UWB4_RESET_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4822      	ldr	r0, [pc, #136]	@ (800088c <MX_GPIO_Init+0x2c4>)
 8000804:	f002 fe90 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = UWB4_CSn_Pin|UWB4_WAKEUP_Pin;
 8000808:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	481a      	ldr	r0, [pc, #104]	@ (800088c <MX_GPIO_Init+0x2c4>)
 8000822:	f002 fe81 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SYNC_EN_Pin;
 8000826:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SYNC_EN_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4814      	ldr	r0, [pc, #80]	@ (8000890 <MX_GPIO_Init+0x2c8>)
 8000840:	f002 fe72 	bl	8003528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	2006      	movs	r0, #6
 800084a:	f002 fdc0 	bl	80033ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800084e:	2006      	movs	r0, #6
 8000850:	f002 fdd7 	bl	8003402 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	2017      	movs	r0, #23
 800085a:	f002 fdb8 	bl	80033ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800085e:	2017      	movs	r0, #23
 8000860:	f002 fdcf 	bl	8003402 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	2028      	movs	r0, #40	@ 0x28
 800086a:	f002 fdb0 	bl	80033ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800086e:	2028      	movs	r0, #40	@ 0x28
 8000870:	f002 fdc7 	bl	8003402 <HAL_NVIC_EnableIRQ>

}
 8000874:	bf00      	nop
 8000876:	3730      	adds	r7, #48	@ 0x30
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	58024400 	.word	0x58024400
 8000880:	58020400 	.word	0x58020400
 8000884:	58021000 	.word	0x58021000
 8000888:	58020c00 	.word	0x58020c00
 800088c:	58020800 	.word	0x58020800
 8000890:	58020000 	.word	0x58020000

08000894 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000898:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_I2C1_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	@ (800090c <MX_I2C1_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0040486C;
 800089e:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000910 <MX_I2C1_Init+0x7c>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a4:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008aa:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ce:	480e      	ldr	r0, [pc, #56]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008d0:	f003 f826 	bl	8003920 <HAL_I2C_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008da:	f000 f969 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008de:	2100      	movs	r1, #0
 80008e0:	4809      	ldr	r0, [pc, #36]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008e2:	f003 f8b9 	bl	8003a58 <HAL_I2CEx_ConfigAnalogFilter>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008ec:	f000 f960 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_I2C1_Init+0x74>)
 80008f4:	f003 f8fb 	bl	8003aee <HAL_I2CEx_ConfigDigitalFilter>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 f957 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2400003c 	.word	0x2400003c
 800090c:	40005400 	.word	0x40005400
 8000910:	0040486c 	.word	0x0040486c

08000914 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b0ba      	sub	sp, #232	@ 0xe8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	22c0      	movs	r2, #192	@ 0xc0
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f008 fd9d 	bl	8009474 <memset>
  if(i2cHandle->Instance==I2C1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a26      	ldr	r2, [pc, #152]	@ (80009d8 <HAL_I2C_MspInit+0xc4>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d145      	bne.n	80009d0 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000944:	f04f 0208 	mov.w	r2, #8
 8000948:	f04f 0300 	mov.w	r3, #0
 800094c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	4618      	mov	r0, r3
 800095c:	f004 f934 	bl	8004bc8 <HAL_RCCEx_PeriphCLKConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000966:	f000 f923 	bl	8000bb0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <HAL_I2C_MspInit+0xc8>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000970:	4a1a      	ldr	r2, [pc, #104]	@ (80009dc <HAL_I2C_MspInit+0xc8>)
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097a:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <HAL_I2C_MspInit+0xc8>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000980:	f003 0302 	and.w	r3, r3, #2
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000988:	23c0      	movs	r3, #192	@ 0xc0
 800098a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098e:	2312      	movs	r3, #18
 8000990:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a0:	2304      	movs	r3, #4
 80009a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <HAL_I2C_MspInit+0xcc>)
 80009ae:	f002 fdbb 	bl	8003528 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009b2:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <HAL_I2C_MspInit+0xc8>)
 80009b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80009b8:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <HAL_I2C_MspInit+0xc8>)
 80009ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_I2C_MspInit+0xc8>)
 80009c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80009c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009d0:	bf00      	nop
 80009d2:	37e8      	adds	r7, #232	@ 0xe8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40005400 	.word	0x40005400
 80009dc:	58024400 	.word	0x58024400
 80009e0:	58020400 	.word	0x58020400

080009e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009e8:	f3bf 8f4f 	dsb	sy
}
 80009ec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <__NVIC_SystemReset+0x24>)
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80009f6:	4904      	ldr	r1, [pc, #16]	@ (8000a08 <__NVIC_SystemReset+0x24>)
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <__NVIC_SystemReset+0x28>)
 80009fa:	4313      	orrs	r3, r2
 80009fc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80009fe:	f3bf 8f4f 	dsb	sy
}
 8000a02:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <__NVIC_SystemReset+0x20>
 8000a08:	e000ed00 	.word	0xe000ed00
 8000a0c:	05fa0004 	.word	0x05fa0004

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000a14:	f000 f8a0 	bl	8000b58 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a18:	f002 fb3c 	bl	8003094 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a1c:	f000 f81e 	bl	8000a5c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a20:	f7ff fdd2 	bl	80005c8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000a24:	f7ff ff36 	bl	8000894 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000a28:	f000 f8c8 	bl	8000bbc <MX_SPI1_Init>
	MX_TIM1_Init();
 8000a2c:	f000 fb16 	bl	800105c <MX_TIM1_Init>
	MX_SPI2_Init();
 8000a30:	f000 f91a 	bl	8000c68 <MX_SPI2_Init>
	MX_TIM2_Init();
 8000a34:	f000 fb66 	bl	8001104 <MX_TIM2_Init>
	MX_UART4_Init();
 8000a38:	f000 fc78 	bl	800132c <MX_UART4_Init>
	 * 否则Antenna_Array_Init()时DW1000内部还没开始工作 SPI通信会失败
	 * 错过了Antenna_Array_Init()这次初始化后只能复位STM32
	 *
	 * RSTn引脚被DW1000内部拉高标志着进入了INIT状态
	 */
	if(Check_DW1000RSTn(100) != UWB_OK || Antenna_Array_Init() != UWB_OK)
 8000a3c:	2064      	movs	r0, #100	@ 0x64
 8000a3e:	f000 ff2b 	bl	8001898 <Check_DW1000RSTn>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d104      	bne.n	8000a52 <main+0x42>
 8000a48:	f000 fd24 	bl	8001494 <Antenna_Array_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <main+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a52:	b672      	cpsid	i
}
 8000a54:	bf00      	nop
	{
		/* 只需成功 不需失败 重启*/
		__disable_irq();
		NVIC_SystemReset();
 8000a56:	f7ff ffc5 	bl	80009e4 <__NVIC_SystemReset>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while(1)
 8000a5a:	e7fe      	b.n	8000a5a <main+0x4a>

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09c      	sub	sp, #112	@ 0x70
 8000a60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a66:	224c      	movs	r2, #76	@ 0x4c
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f008 fd02 	bl	8009474 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2220      	movs	r2, #32
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f008 fcfc 	bl	8009474 <memset>

	/** Supply configuration update enable
	*/
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f003 f883 	bl	8003b88 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	*/
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b32      	ldr	r3, [pc, #200]	@ (8000b50 <SystemClock_Config+0xf4>)
 8000a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a8a:	4a31      	ldr	r2, [pc, #196]	@ (8000b50 <SystemClock_Config+0xf4>)
 8000a8c:	f023 0301 	bic.w	r3, r3, #1
 8000a90:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a92:	4b2f      	ldr	r3, [pc, #188]	@ (8000b50 <SystemClock_Config+0xf4>)
 8000a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b54 <SystemClock_Config+0xf8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000aa4:	4a2b      	ldr	r2, [pc, #172]	@ (8000b54 <SystemClock_Config+0xf8>)
 8000aa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <SystemClock_Config+0xf8>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000ab8:	bf00      	nop
 8000aba:	4b26      	ldr	r3, [pc, #152]	@ (8000b54 <SystemClock_Config+0xf8>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ac6:	d1f8      	bne.n	8000aba <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000acc:	2380      	movs	r3, #128	@ 0x80
 8000ace:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000ad0:	2320      	movs	r3, #32
 8000ad2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 75;
 8000ae0:	234b      	movs	r3, #75	@ 0x4b
 8000ae2:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 13;
 8000ae8:	230d      	movs	r3, #13
 8000aea:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000af0:	2304      	movs	r3, #4
 8000af2:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000af4:	2302      	movs	r3, #2
 8000af6:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b00:	4618      	mov	r0, r3
 8000b02:	f003 f87b 	bl	8003bfc <HAL_RCC_OscConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8000b0c:	f000 f850 	bl	8000bb0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b10:	233f      	movs	r3, #63	@ 0x3f
 8000b12:	607b      	str	r3, [r7, #4]
								  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2
								  | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b14:	2303      	movs	r3, #3
 8000b16:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b20:	2340      	movs	r3, #64	@ 0x40
 8000b22:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b24:	2340      	movs	r3, #64	@ 0x40
 8000b26:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b2c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b2e:	2340      	movs	r3, #64	@ 0x40
 8000b30:	623b      	str	r3, [r7, #32]

	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct,
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 fcba 	bl	80044b0 <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0xea>
						   FLASH_LATENCY_0) != HAL_OK)
	{
		Error_Handler();
 8000b42:	f000 f835 	bl	8000bb0 <Error_Handler>
	}
}
 8000b46:	bf00      	nop
 8000b48:	3770      	adds	r7, #112	@ 0x70
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	58000400 	.word	0x58000400
 8000b54:	58024800 	.word	0x58024800

08000b58 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000b6a:	f002 fc65 	bl	8003438 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	*/
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b7a:	231f      	movs	r3, #31
 8000b7c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8000b7e:	2387      	movs	r3, #135	@ 0x87
 8000b80:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b86:	2300      	movs	r3, #0
 8000b88:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 fc83 	bl	80034a8 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ba2:	2004      	movs	r0, #4
 8000ba4:	f002 fc60 	bl	8003468 <HAL_MPU_Enable>

}
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <Error_Handler+0x8>

08000bbc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000bc0:	4b27      	ldr	r3, [pc, #156]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000bc2:	4a28      	ldr	r2, [pc, #160]	@ (8000c64 <MX_SPI1_Init+0xa8>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bc6:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000bc8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bce:	4b24      	ldr	r3, [pc, #144]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bd4:	4b22      	ldr	r3, [pc, #136]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bda:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000be6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000be8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000bec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bee:	4b1c      	ldr	r3, [pc, #112]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c00:	4b17      	ldr	r3, [pc, #92]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c06:	4b16      	ldr	r3, [pc, #88]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000c0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c12:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c14:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_SPI1_Init+0xa4>)
 8000c4c:	f005 fde8 	bl	8006820 <HAL_SPI_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000c56:	f7ff ffab 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	24000560 	.word	0x24000560
 8000c64:	40013000 	.word	0x40013000

08000c68 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c6c:	4b27      	ldr	r3, [pc, #156]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000c6e:	4a28      	ldr	r2, [pc, #160]	@ (8000d10 <MX_SPI2_Init+0xa8>)
 8000c70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c72:	4b26      	ldr	r3, [pc, #152]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000c74:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c7a:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c80:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000c82:	2203      	movs	r2, #3
 8000c84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c86:	4b21      	ldr	r3, [pc, #132]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c92:	4b1e      	ldr	r3, [pc, #120]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000c94:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cac:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000cb2:	4b16      	ldr	r3, [pc, #88]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000cba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cbe:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_SPI2_Init+0xa4>)
 8000cf8:	f005 fd92 	bl	8006820 <HAL_SPI_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000d02:	f7ff ff55 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	240005e8 	.word	0x240005e8
 8000d10:	40003800 	.word	0x40003800

08000d14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0bc      	sub	sp, #240	@ 0xf0
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d2c:	f107 0318 	add.w	r3, r7, #24
 8000d30:	22c0      	movs	r2, #192	@ 0xc0
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f008 fb9d 	bl	8009474 <memset>
  if(spiHandle->Instance==SPI1)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a4c      	ldr	r2, [pc, #304]	@ (8000e70 <HAL_SPI_MspInit+0x15c>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d145      	bne.n	8000dd0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000d44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d54:	f107 0318 	add.w	r3, r7, #24
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f003 ff35 	bl	8004bc8 <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000d64:	f7ff ff24 	bl	8000bb0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d68:	4b42      	ldr	r3, [pc, #264]	@ (8000e74 <HAL_SPI_MspInit+0x160>)
 8000d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d6e:	4a41      	ldr	r2, [pc, #260]	@ (8000e74 <HAL_SPI_MspInit+0x160>)
 8000d70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d78:	4b3e      	ldr	r3, [pc, #248]	@ (8000e74 <HAL_SPI_MspInit+0x160>)
 8000d7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b3b      	ldr	r3, [pc, #236]	@ (8000e74 <HAL_SPI_MspInit+0x160>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8c:	4a39      	ldr	r2, [pc, #228]	@ (8000e74 <HAL_SPI_MspInit+0x160>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d96:	4b37      	ldr	r3, [pc, #220]	@ (8000e74 <HAL_SPI_MspInit+0x160>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000da4:	23e0      	movs	r3, #224	@ 0xe0
 8000da6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dbc:	2305      	movs	r3, #5
 8000dbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	482b      	ldr	r0, [pc, #172]	@ (8000e78 <HAL_SPI_MspInit+0x164>)
 8000dca:	f002 fbad 	bl	8003528 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000dce:	e04a      	b.n	8000e66 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a29      	ldr	r2, [pc, #164]	@ (8000e7c <HAL_SPI_MspInit+0x168>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d145      	bne.n	8000e66 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000dda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dea:	f107 0318 	add.w	r3, r7, #24
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 feea 	bl	8004bc8 <HAL_RCCEx_PeriphCLKConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8000dfa:	f7ff fed9 	bl	8000bb0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <HAL_SPI_MspInit+0x160>)
 8000e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e04:	4a1b      	ldr	r2, [pc, #108]	@ (8000e74 <HAL_SPI_MspInit+0x160>)
 8000e06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e0e:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_SPI_MspInit+0x160>)
 8000e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_SPI_MspInit+0x160>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e22:	4a14      	ldr	r2, [pc, #80]	@ (8000e74 <HAL_SPI_MspInit+0x160>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <HAL_SPI_MspInit+0x160>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e3a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e54:	2305      	movs	r3, #5
 8000e56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4807      	ldr	r0, [pc, #28]	@ (8000e80 <HAL_SPI_MspInit+0x16c>)
 8000e62:	f002 fb61 	bl	8003528 <HAL_GPIO_Init>
}
 8000e66:	bf00      	nop
 8000e68:	37f0      	adds	r7, #240	@ 0xf0
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40013000 	.word	0x40013000
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58020000 	.word	0x58020000
 8000e7c:	40003800 	.word	0x40003800
 8000e80:	58020400 	.word	0x58020400

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <HAL_MspInit+0x30>)
 8000e8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e90:	4a08      	ldr	r2, [pc, #32]	@ (8000eb4 <HAL_MspInit+0x30>)
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_MspInit+0x30>)
 8000e9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	58024400 	.word	0x58024400

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <NMI_Handler+0x4>

08000ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <MemManage_Handler+0x4>

08000ed0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <UsageFault_Handler+0x4>

08000ee0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0e:	f002 f933 	bl	8003178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UWB1_IRQ_Pin);
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f002 fce5 	bl	80038ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UWB4_IRQ_Pin);
 8000f28:	2040      	movs	r0, #64	@ 0x40
 8000f2a:	f002 fcde 	bl	80038ea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UWB2_IRQ_Pin);
 8000f2e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f32:	f002 fcda 	bl	80038ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UWB3_IRQ_Pin);
 8000f3e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f42:	f002 fcd2 	bl	80038ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f50:	4b37      	ldr	r3, [pc, #220]	@ (8001030 <SystemInit+0xe4>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f56:	4a36      	ldr	r2, [pc, #216]	@ (8001030 <SystemInit+0xe4>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f60:	4b34      	ldr	r3, [pc, #208]	@ (8001034 <SystemInit+0xe8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 030f 	and.w	r3, r3, #15
 8000f68:	2b06      	cmp	r3, #6
 8000f6a:	d807      	bhi.n	8000f7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f6c:	4b31      	ldr	r3, [pc, #196]	@ (8001034 <SystemInit+0xe8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f023 030f 	bic.w	r3, r3, #15
 8000f74:	4a2f      	ldr	r2, [pc, #188]	@ (8001034 <SystemInit+0xe8>)
 8000f76:	f043 0307 	orr.w	r3, r3, #7
 8000f7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001038 <SystemInit+0xec>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a2d      	ldr	r2, [pc, #180]	@ (8001038 <SystemInit+0xec>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f88:	4b2b      	ldr	r3, [pc, #172]	@ (8001038 <SystemInit+0xec>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <SystemInit+0xec>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4929      	ldr	r1, [pc, #164]	@ (8001038 <SystemInit+0xec>)
 8000f94:	4b29      	ldr	r3, [pc, #164]	@ (800103c <SystemInit+0xf0>)
 8000f96:	4013      	ands	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f9a:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <SystemInit+0xe8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d007      	beq.n	8000fb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fa6:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <SystemInit+0xe8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f023 030f 	bic.w	r3, r3, #15
 8000fae:	4a21      	ldr	r2, [pc, #132]	@ (8001034 <SystemInit+0xe8>)
 8000fb0:	f043 0307 	orr.w	r3, r3, #7
 8000fb4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <SystemInit+0xec>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <SystemInit+0xec>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001038 <SystemInit+0xec>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <SystemInit+0xec>)
 8000fca:	4a1d      	ldr	r2, [pc, #116]	@ (8001040 <SystemInit+0xf4>)
 8000fcc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <SystemInit+0xec>)
 8000fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8001044 <SystemInit+0xf8>)
 8000fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <SystemInit+0xec>)
 8000fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001048 <SystemInit+0xfc>)
 8000fd8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fda:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <SystemInit+0xec>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <SystemInit+0xec>)
 8000fe2:	4a19      	ldr	r2, [pc, #100]	@ (8001048 <SystemInit+0xfc>)
 8000fe4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <SystemInit+0xec>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <SystemInit+0xec>)
 8000fee:	4a16      	ldr	r2, [pc, #88]	@ (8001048 <SystemInit+0xfc>)
 8000ff0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <SystemInit+0xec>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <SystemInit+0xec>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <SystemInit+0xec>)
 8000ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001002:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <SystemInit+0xec>)
 8001006:	2200      	movs	r2, #0
 8001008:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <SystemInit+0x100>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <SystemInit+0x104>)
 8001010:	4013      	ands	r3, r2
 8001012:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001016:	d202      	bcs.n	800101e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <SystemInit+0x108>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <SystemInit+0x10c>)
 8001020:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001024:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00
 8001034:	52002000 	.word	0x52002000
 8001038:	58024400 	.word	0x58024400
 800103c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001040:	02020200 	.word	0x02020200
 8001044:	01ff0000 	.word	0x01ff0000
 8001048:	01010280 	.word	0x01010280
 800104c:	5c001000 	.word	0x5c001000
 8001050:	ffff0000 	.word	0xffff0000
 8001054:	51008108 	.word	0x51008108
 8001058:	52004000 	.word	0x52004000

0800105c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800107a:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <MX_TIM1_Init+0xa0>)
 800107c:	4a20      	ldr	r2, [pc, #128]	@ (8001100 <MX_TIM1_Init+0xa4>)
 800107e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001080:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <MX_TIM1_Init+0xa0>)
 8001082:	2200      	movs	r2, #0
 8001084:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001086:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <MX_TIM1_Init+0xa0>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <MX_TIM1_Init+0xa0>)
 800108e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001092:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <MX_TIM1_Init+0xa0>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800109a:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_TIM1_Init+0xa0>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <MX_TIM1_Init+0xa0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010a6:	4815      	ldr	r0, [pc, #84]	@ (80010fc <MX_TIM1_Init+0xa0>)
 80010a8:	f006 fa35 	bl	8007516 <HAL_TIM_Base_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80010b2:	f7ff fd7d 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4619      	mov	r1, r3
 80010c2:	480e      	ldr	r0, [pc, #56]	@ (80010fc <MX_TIM1_Init+0xa0>)
 80010c4:	f006 fb5a 	bl	800777c <HAL_TIM_ConfigClockSource>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80010ce:	f7ff fd6f 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	@ (80010fc <MX_TIM1_Init+0xa0>)
 80010e4:	f007 f85c 	bl	80081a0 <HAL_TIMEx_MasterConfigSynchronization>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010ee:	f7ff fd5f 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	24000670 	.word	0x24000670
 8001100:	40010000 	.word	0x40010000

08001104 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08e      	sub	sp, #56	@ 0x38
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
 8001132:	615a      	str	r2, [r3, #20]
 8001134:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001136:	4b30      	ldr	r3, [pc, #192]	@ (80011f8 <MX_TIM2_Init+0xf4>)
 8001138:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800113c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800113e:	4b2e      	ldr	r3, [pc, #184]	@ (80011f8 <MX_TIM2_Init+0xf4>)
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001144:	4b2c      	ldr	r3, [pc, #176]	@ (80011f8 <MX_TIM2_Init+0xf4>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800114a:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <MX_TIM2_Init+0xf4>)
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001152:	4b29      	ldr	r3, [pc, #164]	@ (80011f8 <MX_TIM2_Init+0xf4>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001158:	4b27      	ldr	r3, [pc, #156]	@ (80011f8 <MX_TIM2_Init+0xf4>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800115e:	4826      	ldr	r0, [pc, #152]	@ (80011f8 <MX_TIM2_Init+0xf4>)
 8001160:	f006 f9d9 	bl	8007516 <HAL_TIM_Base_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800116a:	f7ff fd21 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800116e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001172:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	633b      	str	r3, [r7, #48]	@ 0x30
  sClockSourceConfig.ClockFilter = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001180:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001184:	4619      	mov	r1, r3
 8001186:	481c      	ldr	r0, [pc, #112]	@ (80011f8 <MX_TIM2_Init+0xf4>)
 8001188:	f006 faf8 	bl	800777c <HAL_TIM_ConfigClockSource>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001192:	f7ff fd0d 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001196:	4818      	ldr	r0, [pc, #96]	@ (80011f8 <MX_TIM2_Init+0xf4>)
 8001198:	f006 fa14 	bl	80075c4 <HAL_TIM_OC_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80011a2:	f7ff fd05 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4810      	ldr	r0, [pc, #64]	@ (80011f8 <MX_TIM2_Init+0xf4>)
 80011b6:	f006 fff3 	bl	80081a0 <HAL_TIMEx_MasterConfigSynchronization>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 80011c0:	f7ff fcf6 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011c4:	2300      	movs	r3, #0
 80011c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	2204      	movs	r2, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4807      	ldr	r0, [pc, #28]	@ (80011f8 <MX_TIM2_Init+0xf4>)
 80011dc:	f006 fa54 	bl	8007688 <HAL_TIM_OC_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80011e6:	f7ff fce3 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011ea:	4803      	ldr	r0, [pc, #12]	@ (80011f8 <MX_TIM2_Init+0xf4>)
 80011ec:	f000 f866 	bl	80012bc <HAL_TIM_MspPostInit>

}
 80011f0:	bf00      	nop
 80011f2:	3738      	adds	r7, #56	@ 0x38
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	240006bc 	.word	0x240006bc

080011fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	@ 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a25      	ldr	r2, [pc, #148]	@ (80012b0 <HAL_TIM_Base_MspInit+0xb4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10f      	bne.n	800123e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800121e:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <HAL_TIM_Base_MspInit+0xb8>)
 8001220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001224:	4a23      	ldr	r2, [pc, #140]	@ (80012b4 <HAL_TIM_Base_MspInit+0xb8>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800122e:	4b21      	ldr	r3, [pc, #132]	@ (80012b4 <HAL_TIM_Base_MspInit+0xb8>)
 8001230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800123c:	e033      	b.n	80012a6 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001246:	d12e      	bne.n	80012a6 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001248:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <HAL_TIM_Base_MspInit+0xb8>)
 800124a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800124e:	4a19      	ldr	r2, [pc, #100]	@ (80012b4 <HAL_TIM_Base_MspInit+0xb8>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001258:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <HAL_TIM_Base_MspInit+0xb8>)
 800125a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <HAL_TIM_Base_MspInit+0xb8>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126c:	4a11      	ldr	r2, [pc, #68]	@ (80012b4 <HAL_TIM_Base_MspInit+0xb8>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001276:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <HAL_TIM_Base_MspInit+0xb8>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001284:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001296:	2301      	movs	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <HAL_TIM_Base_MspInit+0xbc>)
 80012a2:	f002 f941 	bl	8003528 <HAL_GPIO_Init>
}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	@ 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40010000 	.word	0x40010000
 80012b4:	58024400 	.word	0x58024400
 80012b8:	58020000 	.word	0x58020000

080012bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012dc:	d11e      	bne.n	800131c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <HAL_TIM_MspPostInit+0x68>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001324 <HAL_TIM_MspPostInit+0x68>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <HAL_TIM_MspPostInit+0x68>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012fc:	2308      	movs	r3, #8
 80012fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800130c:	2301      	movs	r3, #1
 800130e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	4619      	mov	r1, r3
 8001316:	4804      	ldr	r0, [pc, #16]	@ (8001328 <HAL_TIM_MspPostInit+0x6c>)
 8001318:	f002 f906 	bl	8003528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800131c:	bf00      	nop
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	58024400 	.word	0x58024400
 8001328:	58020400 	.word	0x58020400

0800132c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001330:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <MX_UART4_Init+0x90>)
 8001332:	4a23      	ldr	r2, [pc, #140]	@ (80013c0 <MX_UART4_Init+0x94>)
 8001334:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001336:	4b21      	ldr	r3, [pc, #132]	@ (80013bc <MX_UART4_Init+0x90>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <MX_UART4_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <MX_UART4_Init+0x90>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800134a:	4b1c      	ldr	r3, [pc, #112]	@ (80013bc <MX_UART4_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <MX_UART4_Init+0x90>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <MX_UART4_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <MX_UART4_Init+0x90>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001362:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <MX_UART4_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001368:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <MX_UART4_Init+0x90>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800136e:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <MX_UART4_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001374:	4811      	ldr	r0, [pc, #68]	@ (80013bc <MX_UART4_Init+0x90>)
 8001376:	f006 ffa1 	bl	80082bc <HAL_UART_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001380:	f7ff fc16 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	480d      	ldr	r0, [pc, #52]	@ (80013bc <MX_UART4_Init+0x90>)
 8001388:	f007 ffa9 	bl	80092de <HAL_UARTEx_SetTxFifoThreshold>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001392:	f7ff fc0d 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	4808      	ldr	r0, [pc, #32]	@ (80013bc <MX_UART4_Init+0x90>)
 800139a:	f007 ffde 	bl	800935a <HAL_UARTEx_SetRxFifoThreshold>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80013a4:	f7ff fc04 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	@ (80013bc <MX_UART4_Init+0x90>)
 80013aa:	f007 ff5f 	bl	800926c <HAL_UARTEx_DisableFifoMode>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80013b4:	f7ff fbfc 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	24000708 	.word	0x24000708
 80013c0:	40004c00 	.word	0x40004c00

080013c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0ba      	sub	sp, #232	@ 0xe8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	22c0      	movs	r2, #192	@ 0xc0
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f008 f845 	bl	8009474 <memset>
  if(uartHandle->Instance==UART4)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a26      	ldr	r2, [pc, #152]	@ (8001488 <HAL_UART_MspInit+0xc4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d145      	bne.n	8001480 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80013f4:	f04f 0202 	mov.w	r2, #2
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	4618      	mov	r0, r3
 800140c:	f003 fbdc 	bl	8004bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001416:	f7ff fbcb 	bl	8000bb0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800141a:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <HAL_UART_MspInit+0xc8>)
 800141c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001420:	4a1a      	ldr	r2, [pc, #104]	@ (800148c <HAL_UART_MspInit+0xc8>)
 8001422:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001426:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800142a:	4b18      	ldr	r3, [pc, #96]	@ (800148c <HAL_UART_MspInit+0xc8>)
 800142c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001430:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <HAL_UART_MspInit+0xc8>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800143e:	4a13      	ldr	r2, [pc, #76]	@ (800148c <HAL_UART_MspInit+0xc8>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001448:	4b10      	ldr	r3, [pc, #64]	@ (800148c <HAL_UART_MspInit+0xc8>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001456:	2303      	movs	r3, #3
 8001458:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800146e:	2308      	movs	r3, #8
 8001470:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001478:	4619      	mov	r1, r3
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <HAL_UART_MspInit+0xcc>)
 800147c:	f002 f854 	bl	8003528 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001480:	bf00      	nop
 8001482:	37e8      	adds	r7, #232	@ 0xe8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40004c00 	.word	0x40004c00
 800148c:	58024400 	.word	0x58024400
 8001490:	58020000 	.word	0x58020000

08001494 <Antenna_Array_Init>:

extern volatile UWB_Device UWB_device_array[DWT_NUM_DW_DEV];


UWB_StatusTypeDef Antenna_Array_Init()
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	e0b2      	b.n	8001606 <Antenna_Array_Init+0x172>
	{
		UWB_device_array[0].port.index = 0;
 80014a0:	4baa      	ldr	r3, [pc, #680]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		UWB_device_array[0].port.hspi = &hspi1;
 80014a8:	4ba8      	ldr	r3, [pc, #672]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80014aa:	4aa9      	ldr	r2, [pc, #676]	@ (8001750 <Antenna_Array_Init+0x2bc>)
 80014ac:	609a      	str	r2, [r3, #8]
		UWB_device_array[0].port.irq_pin = UWB1_IRQ_Pin;
 80014ae:	4ba7      	ldr	r3, [pc, #668]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	851a      	strh	r2, [r3, #40]	@ 0x28
		UWB_device_array[0].port.irq_port = UWB1_IRQ_GPIO_Port;
 80014b4:	4ba5      	ldr	r3, [pc, #660]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80014b6:	4aa7      	ldr	r2, [pc, #668]	@ (8001754 <Antenna_Array_Init+0x2c0>)
 80014b8:	625a      	str	r2, [r3, #36]	@ 0x24
		UWB_device_array[0].port.rstn_pin = UWB1_RESET_Pin;
 80014ba:	4ba4      	ldr	r3, [pc, #656]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80014bc:	2202      	movs	r2, #2
 80014be:	841a      	strh	r2, [r3, #32]
		UWB_device_array[0].port.rstn_port = UWB1_RESET_GPIO_Port;
 80014c0:	4ba2      	ldr	r3, [pc, #648]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80014c2:	4aa4      	ldr	r2, [pc, #656]	@ (8001754 <Antenna_Array_Init+0x2c0>)
 80014c4:	61da      	str	r2, [r3, #28]
		UWB_device_array[0].port.spi_csn_pin = UWB1_CSn_Pin;
 80014c6:	4ba1      	ldr	r3, [pc, #644]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80014c8:	2204      	movs	r2, #4
 80014ca:	821a      	strh	r2, [r3, #16]
		UWB_device_array[0].port.spi_csn_port = UWB1_CSn_GPIO_Port;
 80014cc:	4b9f      	ldr	r3, [pc, #636]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80014ce:	4aa1      	ldr	r2, [pc, #644]	@ (8001754 <Antenna_Array_Init+0x2c0>)
 80014d0:	60da      	str	r2, [r3, #12]
		UWB_device_array[0].port.wakeup_pin = UWB1_WAKEUP_Pin;
 80014d2:	4b9e      	ldr	r3, [pc, #632]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80014d4:	2280      	movs	r2, #128	@ 0x80
 80014d6:	831a      	strh	r2, [r3, #24]
		UWB_device_array[0].port.wakeup_port = UWB1_WAKEUP_GPIO_Port;
 80014d8:	4b9c      	ldr	r3, [pc, #624]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80014da:	4a9f      	ldr	r2, [pc, #636]	@ (8001758 <Antenna_Array_Init+0x2c4>)
 80014dc:	615a      	str	r2, [r3, #20]
		UWB_device_array[0].port.irq = EXTI0_IRQn;
 80014de:	4b9b      	ldr	r3, [pc, #620]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80014e0:	2206      	movs	r2, #6
 80014e2:	62da      	str	r2, [r3, #44]	@ 0x2c

		UWB_device_array[1].port.index = 1;
 80014e4:	4b99      	ldr	r3, [pc, #612]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2164 	strb.w	r2, [r3, #356]	@ 0x164
		UWB_device_array[1].port.hspi = &hspi1;
 80014ec:	4b97      	ldr	r3, [pc, #604]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80014ee:	4a98      	ldr	r2, [pc, #608]	@ (8001750 <Antenna_Array_Init+0x2bc>)
 80014f0:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
		UWB_device_array[1].port.irq_pin = UWB2_IRQ_Pin;
 80014f4:	4b95      	ldr	r3, [pc, #596]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80014f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014fa:	f8a3 215c 	strh.w	r2, [r3, #348]	@ 0x15c
		UWB_device_array[1].port.irq_port = UWB2_IRQ_GPIO_Port;
 80014fe:	4b93      	ldr	r3, [pc, #588]	@ (800174c <Antenna_Array_Init+0x2b8>)
 8001500:	4a95      	ldr	r2, [pc, #596]	@ (8001758 <Antenna_Array_Init+0x2c4>)
 8001502:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		UWB_device_array[1].port.rstn_pin = UWB2_RESET_Pin;
 8001506:	4b91      	ldr	r3, [pc, #580]	@ (800174c <Antenna_Array_Init+0x2b8>)
 8001508:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800150c:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
		UWB_device_array[1].port.rstn_port = UWB2_RESET_GPIO_Port;
 8001510:	4b8e      	ldr	r3, [pc, #568]	@ (800174c <Antenna_Array_Init+0x2b8>)
 8001512:	4a91      	ldr	r2, [pc, #580]	@ (8001758 <Antenna_Array_Init+0x2c4>)
 8001514:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
		UWB_device_array[1].port.spi_csn_pin = UWB2_CSn_Pin;
 8001518:	4b8c      	ldr	r3, [pc, #560]	@ (800174c <Antenna_Array_Init+0x2b8>)
 800151a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800151e:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
		UWB_device_array[1].port.spi_csn_port = UWB2_CSn_GPIO_Port;
 8001522:	4b8a      	ldr	r3, [pc, #552]	@ (800174c <Antenna_Array_Init+0x2b8>)
 8001524:	4a8c      	ldr	r2, [pc, #560]	@ (8001758 <Antenna_Array_Init+0x2c4>)
 8001526:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		UWB_device_array[1].port.wakeup_pin = UWB2_WAKEUP_Pin;
 800152a:	4b88      	ldr	r3, [pc, #544]	@ (800174c <Antenna_Array_Init+0x2b8>)
 800152c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001530:	f8a3 214c 	strh.w	r2, [r3, #332]	@ 0x14c
		UWB_device_array[1].port.wakeup_port = UWB2_WAKEUP_GPIO_Port;
 8001534:	4b85      	ldr	r3, [pc, #532]	@ (800174c <Antenna_Array_Init+0x2b8>)
 8001536:	4a88      	ldr	r2, [pc, #544]	@ (8001758 <Antenna_Array_Init+0x2c4>)
 8001538:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
		UWB_device_array[1].port.irq = EXTI9_5_IRQn;
 800153c:	4b83      	ldr	r3, [pc, #524]	@ (800174c <Antenna_Array_Init+0x2b8>)
 800153e:	2217      	movs	r2, #23
 8001540:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

		UWB_device_array[2].port.index = 2;
 8001544:	4b81      	ldr	r3, [pc, #516]	@ (800174c <Antenna_Array_Init+0x2b8>)
 8001546:	2202      	movs	r2, #2
 8001548:	f883 2298 	strb.w	r2, [r3, #664]	@ 0x298
		UWB_device_array[2].port.hspi = &hspi2;
 800154c:	4b7f      	ldr	r3, [pc, #508]	@ (800174c <Antenna_Array_Init+0x2b8>)
 800154e:	4a83      	ldr	r2, [pc, #524]	@ (800175c <Antenna_Array_Init+0x2c8>)
 8001550:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270
		UWB_device_array[2].port.irq_pin = UWB3_IRQ_Pin;
 8001554:	4b7d      	ldr	r3, [pc, #500]	@ (800174c <Antenna_Array_Init+0x2b8>)
 8001556:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800155a:	f8a3 2290 	strh.w	r2, [r3, #656]	@ 0x290
		UWB_device_array[2].port.irq_port = UWB3_IRQ_GPIO_Port;
 800155e:	4b7b      	ldr	r3, [pc, #492]	@ (800174c <Antenna_Array_Init+0x2b8>)
 8001560:	4a7f      	ldr	r2, [pc, #508]	@ (8001760 <Antenna_Array_Init+0x2cc>)
 8001562:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
		UWB_device_array[2].port.rstn_pin = UWB3_RESET_Pin;
 8001566:	4b79      	ldr	r3, [pc, #484]	@ (800174c <Antenna_Array_Init+0x2b8>)
 8001568:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800156c:	f8a3 2288 	strh.w	r2, [r3, #648]	@ 0x288
		UWB_device_array[2].port.rstn_port = UWB3_RESET_GPIO_Port;
 8001570:	4b76      	ldr	r3, [pc, #472]	@ (800174c <Antenna_Array_Init+0x2b8>)
 8001572:	4a7b      	ldr	r2, [pc, #492]	@ (8001760 <Antenna_Array_Init+0x2cc>)
 8001574:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
		UWB_device_array[2].port.spi_csn_pin = UWB3_CSn_Pin;
 8001578:	4b74      	ldr	r3, [pc, #464]	@ (800174c <Antenna_Array_Init+0x2b8>)
 800157a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800157e:	f8a3 2278 	strh.w	r2, [r3, #632]	@ 0x278
		UWB_device_array[2].port.spi_csn_port = UWB3_CSn_GPIO_Port;
 8001582:	4b72      	ldr	r3, [pc, #456]	@ (800174c <Antenna_Array_Init+0x2b8>)
 8001584:	4a76      	ldr	r2, [pc, #472]	@ (8001760 <Antenna_Array_Init+0x2cc>)
 8001586:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
		UWB_device_array[2].port.wakeup_pin = UWB3_WAKEUP_Pin;
 800158a:	4b70      	ldr	r3, [pc, #448]	@ (800174c <Antenna_Array_Init+0x2b8>)
 800158c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001590:	f8a3 2280 	strh.w	r2, [r3, #640]	@ 0x280
		UWB_device_array[2].port.wakeup_port = UWB3_WAKEUP_GPIO_Port;
 8001594:	4b6d      	ldr	r3, [pc, #436]	@ (800174c <Antenna_Array_Init+0x2b8>)
 8001596:	4a72      	ldr	r2, [pc, #456]	@ (8001760 <Antenna_Array_Init+0x2cc>)
 8001598:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c
		UWB_device_array[2].port.irq = EXTI15_10_IRQn;
 800159c:	4b6b      	ldr	r3, [pc, #428]	@ (800174c <Antenna_Array_Init+0x2b8>)
 800159e:	2228      	movs	r2, #40	@ 0x28
 80015a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

		UWB_device_array[3].port.index = 3;
 80015a4:	4b69      	ldr	r3, [pc, #420]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80015a6:	2203      	movs	r2, #3
 80015a8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
		UWB_device_array[3].port.hspi = &hspi2;
 80015ac:	4b67      	ldr	r3, [pc, #412]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80015ae:	4a6b      	ldr	r2, [pc, #428]	@ (800175c <Antenna_Array_Init+0x2c8>)
 80015b0:	f8c3 23a4 	str.w	r2, [r3, #932]	@ 0x3a4
		UWB_device_array[3].port.irq_pin = UWB4_IRQ_Pin;
 80015b4:	4b65      	ldr	r3, [pc, #404]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80015b6:	2240      	movs	r2, #64	@ 0x40
 80015b8:	f8a3 23c4 	strh.w	r2, [r3, #964]	@ 0x3c4
		UWB_device_array[3].port.irq_port = UWB4_IRQ_GPIO_Port;
 80015bc:	4b63      	ldr	r3, [pc, #396]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80015be:	4a69      	ldr	r2, [pc, #420]	@ (8001764 <Antenna_Array_Init+0x2d0>)
 80015c0:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
		UWB_device_array[3].port.rstn_pin = UWB4_RESET_Pin;
 80015c4:	4b61      	ldr	r3, [pc, #388]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80015c6:	2280      	movs	r2, #128	@ 0x80
 80015c8:	f8a3 23bc 	strh.w	r2, [r3, #956]	@ 0x3bc
		UWB_device_array[3].port.rstn_port = UWB4_RESET_GPIO_Port;
 80015cc:	4b5f      	ldr	r3, [pc, #380]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80015ce:	4a65      	ldr	r2, [pc, #404]	@ (8001764 <Antenna_Array_Init+0x2d0>)
 80015d0:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
		UWB_device_array[3].port.spi_csn_pin = UWB4_CSn_Pin;
 80015d4:	4b5d      	ldr	r3, [pc, #372]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80015d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015da:	f8a3 23ac 	strh.w	r2, [r3, #940]	@ 0x3ac
		UWB_device_array[3].port.spi_csn_port = UWB4_CSn_GPIO_Port;
 80015de:	4b5b      	ldr	r3, [pc, #364]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80015e0:	4a60      	ldr	r2, [pc, #384]	@ (8001764 <Antenna_Array_Init+0x2d0>)
 80015e2:	f8c3 23a8 	str.w	r2, [r3, #936]	@ 0x3a8
		UWB_device_array[3].port.wakeup_pin = UWB4_WAKEUP_Pin;
 80015e6:	4b59      	ldr	r3, [pc, #356]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80015e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ec:	f8a3 23b4 	strh.w	r2, [r3, #948]	@ 0x3b4
		UWB_device_array[3].port.wakeup_port = UWB4_WAKEUP_GPIO_Port;
 80015f0:	4b56      	ldr	r3, [pc, #344]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80015f2:	4a5c      	ldr	r2, [pc, #368]	@ (8001764 <Antenna_Array_Init+0x2d0>)
 80015f4:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
		UWB_device_array[3].port.irq = EXTI9_5_IRQn;
 80015f8:	4b54      	ldr	r3, [pc, #336]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80015fa:	2217      	movs	r2, #23
 80015fc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2b03      	cmp	r3, #3
 800160a:	f77f af49 	ble.w	80014a0 <Antenna_Array_Init+0xc>

	/* Reset and initialise DW1000.
	 * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
	 * performance. */

	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	e00d      	b.n	8001630 <Antenna_Array_Init+0x19c>
	{
		reset_DW1000((DW1000_Port_t *)&UWB_device_array[i].port);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	3308      	adds	r3, #8
 8001620:	4a4a      	ldr	r2, [pc, #296]	@ (800174c <Antenna_Array_Init+0x2b8>)
 8001622:	4413      	add	r3, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f001 fbf9 	bl	8002e1c <reset_DW1000>
	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	3301      	adds	r3, #1
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	2b03      	cmp	r3, #3
 8001634:	ddee      	ble.n	8001614 <Antenna_Array_Init+0x180>
	}

	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	e07e      	b.n	800173a <Antenna_Array_Init+0x2a6>
	{
		DW1000_Port_t *antenna_port = (DW1000_Port_t *) &UWB_device_array[i].port;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8001642:	fb02 f303 	mul.w	r3, r2, r3
 8001646:	3308      	adds	r3, #8
 8001648:	4a40      	ldr	r2, [pc, #256]	@ (800174c <Antenna_Array_Init+0x2b8>)
 800164a:	4413      	add	r3, r2
 800164c:	607b      	str	r3, [r7, #4]
		int trys = 10;
 800164e:	230a      	movs	r3, #10
 8001650:	60bb      	str	r3, [r7, #8]
		port_set_dw1000_slowrate(antenna_port);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f001 fc07 	bl	8002e66 <port_set_dw1000_slowrate>

		dwt_setlocaldataptr(i);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f986 	bl	800196c <dwt_setlocaldataptr>

		do
		{
			if(dwt_initialise(DWT_LOADUCODE,
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	2001      	movs	r0, #1
 8001664:	f000 f9a0 	bl	80019a8 <dwt_initialise>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10a      	bne.n	8001684 <Antenna_Array_Init+0x1f0>
							  antenna_port) == DWT_SUCCESS)
			{
				UWB_device_array[i].avalible = 1;
 800166e:	4a37      	ldr	r2, [pc, #220]	@ (800174c <Antenna_Array_Init+0x2b8>)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8001676:	fb01 f303 	mul.w	r3, r1, r3
 800167a:	4413      	add	r3, r2
 800167c:	3304      	adds	r3, #4
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	e010      	b.n	80016a6 <Antenna_Array_Init+0x212>
			}
			else
			{
				reset_DW1000((DW1000_Port_t *)&UWB_device_array[i].port);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800168a:	fb02 f303 	mul.w	r3, r2, r3
 800168e:	3308      	adds	r3, #8
 8001690:	4a2e      	ldr	r2, [pc, #184]	@ (800174c <Antenna_Array_Init+0x2b8>)
 8001692:	4413      	add	r3, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f001 fbc1 	bl	8002e1c <reset_DW1000>
				deca_sleep(5);
 800169a:	2005      	movs	r0, #5
 800169c:	f001 fab4 	bl	8002c08 <deca_sleep>
				trys--;
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	60bb      	str	r3, [r7, #8]
			}
		} while((trys > 0) && UWB_device_array[i].avalible != 1);
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	dd0b      	ble.n	80016c4 <Antenna_Array_Init+0x230>
 80016ac:	4a27      	ldr	r2, [pc, #156]	@ (800174c <Antenna_Array_Init+0x2b8>)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f44f 719a 	mov.w	r1, #308	@ 0x134
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	3304      	adds	r3, #4
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d1cd      	bne.n	8001660 <Antenna_Array_Init+0x1cc>
		if(trys <= 0)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	dc01      	bgt.n	80016ce <Antenna_Array_Init+0x23a>
		{
			return UWB_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e03a      	b.n	8001744 <Antenna_Array_Init+0x2b0>
		}

		port_set_dw1000_fastrate(antenna_port);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f001 fbdb 	bl	8002e8a <port_set_dw1000_fastrate>

		/*Setup Interrupt*/
		dwt_setinterrupt((SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO),
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	2102      	movs	r1, #2
 80016d8:	4823      	ldr	r0, [pc, #140]	@ (8001768 <Antenna_Array_Init+0x2d4>)
 80016da:	f001 f9cd 	bl	8002a78 <dwt_setinterrupt>
						 2,
						 antenna_port);

		//核心 四个回调函数
		dwt_setcallbacks(NULL,
 80016de:	4b23      	ldr	r3, [pc, #140]	@ (800176c <Antenna_Array_Init+0x2d8>)
 80016e0:	4a23      	ldr	r2, [pc, #140]	@ (8001770 <Antenna_Array_Init+0x2dc>)
 80016e2:	4924      	ldr	r1, [pc, #144]	@ (8001774 <Antenna_Array_Init+0x2e0>)
 80016e4:	2000      	movs	r0, #0
 80016e6:	f000 fe7d 	bl	80023e4 <dwt_setcallbacks>
						 rxOkCallback,
						 rxToCallback,
						 rxErrCallback);
		port_set_deca_isr(dwt_isr,
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4822      	ldr	r0, [pc, #136]	@ (8001778 <Antenna_Array_Init+0x2e4>)
 80016ee:	f001 fcb1 	bl	8003054 <port_set_deca_isr>
						  antenna_port);

		dwt_write32bitreg(SYS_STATUS_ID,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a21      	ldr	r2, [pc, #132]	@ (800177c <Antenna_Array_Init+0x2e8>)
 80016f6:	2100      	movs	r1, #0
 80016f8:	200f      	movs	r0, #15
 80016fa:	f000 fdd3 	bl	80022a4 <dwt_write32bitoffsetreg>
						  SYS_STATUS_ALL_RX_GOOD | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR,
						  antenna_port);

		dwt_configure(&config,
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	481f      	ldr	r0, [pc, #124]	@ (8001780 <Antenna_Array_Init+0x2ec>)
 8001702:	f000 fac1 	bl	8001c88 <dwt_configure>
					  antenna_port);

		dwt_setrxantennadelay(RX_ANT_DLY,
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	f244 0043 	movw	r0, #16451	@ 0x4043
 800170c:	f000 fc3c 	bl	8001f88 <dwt_setrxantennadelay>
							  antenna_port);
		dwt_settxantennadelay(TX_ANT_DLY,
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	f244 0043 	movw	r0, #16451	@ 0x4043
 8001716:	f000 fc48 	bl	8001faa <dwt_settxantennadelay>
							  antenna_port);

		dwt_setpreambledetecttimeout(PRE_TIMEOUT,
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	2000      	movs	r0, #0
 800171e:	f001 f99b 	bl	8002a58 <dwt_setpreambledetecttimeout>
									 antenna_port);

		/* Configure LED */
		dwt_setleds(1,
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	2001      	movs	r0, #1
 8001726:	f000 ff87 	bl	8002638 <dwt_setleds>
					antenna_port);

		/* Set Sync to OSTR*/
		dwt_setecctrl(EC_CTRL_OSTRM,
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001730:	f001 fa35 	bl	8002b9e <dwt_setecctrl>
	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3301      	adds	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b03      	cmp	r3, #3
 800173e:	f77f af7d 	ble.w	800163c <Antenna_Array_Init+0x1a8>
					  antenna_port);
	}
	return UWB_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	24000090 	.word	0x24000090
 8001750:	24000560 	.word	0x24000560
 8001754:	58020400 	.word	0x58020400
 8001758:	58021000 	.word	0x58021000
 800175c:	240005e8 	.word	0x240005e8
 8001760:	58020c00 	.word	0x58020c00
 8001764:	58020800 	.word	0x58020800
 8001768:	2427d000 	.word	0x2427d000
 800176c:	08001875 	.word	0x08001875
 8001770:	08001853 	.word	0x08001853
 8001774:	08001803 	.word	0x08001803
 8001778:	08002425 	.word	0x08002425
 800177c:	2427ff00 	.word	0x2427ff00
 8001780:	24000008 	.word	0x24000008

08001784 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(DW1000_Port_t *pports)
{
 8001784:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001788:	b088      	sub	sp, #32
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
	uint8 ts_tab[5];
	uint64 ts = 0;
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i;
	dwt_readrxtimestamp(ts_tab,
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fc27 	bl	8001ff4 <dwt_readrxtimestamp>
						pports);
	for(i = 4; i >= 0; i--)
 80017a6:	2304      	movs	r3, #4
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	e01f      	b.n	80017ec <get_rx_timestamp_u64+0x68>
	{
		ts <<= 8;
 80017ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	020b      	lsls	r3, r1, #8
 80017ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80017be:	0202      	lsls	r2, r0, #8
 80017c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ts |= ts_tab[i];
 80017c4:	f107 020c 	add.w	r2, r7, #12
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	4413      	add	r3, r2
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2200      	movs	r2, #0
 80017d2:	461c      	mov	r4, r3
 80017d4:	4615      	mov	r5, r2
 80017d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017da:	ea42 0804 	orr.w	r8, r2, r4
 80017de:	ea43 0905 	orr.w	r9, r3, r5
 80017e2:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for(i = 4; i >= 0; i--)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	dadc      	bge.n	80017ac <get_rx_timestamp_u64+0x28>
	}
	return ts;
 80017f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	3720      	adds	r7, #32
 80017fc:	46bd      	mov	sp, r7
 80017fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001802 <rxOkCallback>:


void rxOkCallback(const dwt_cb_data_t *cbData, DW1000_Port_t *antenna_port)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
	uint64 rx_timestamp = 0;
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9c7 2304 	strd	r2, r3, [r7, #16]
	char enter[2] = {'\r', '\n'};
 8001818:	f640 230d 	movw	r3, #2573	@ 0xa0d
 800181c:	81bb      	strh	r3, [r7, #12]
	/* Clear reception timeout to start next ranging process. */
	dwt_setrxtimeout(0,
 800181e:	6839      	ldr	r1, [r7, #0]
 8001820:	2000      	movs	r0, #0
 8001822:	f001 f8d7 	bl	80029d4 <dwt_setrxtimeout>
					 antenna_port);

	/* Activate reception immediately. */
	dwt_rxenable(DWT_START_RX_IMMEDIATE,
 8001826:	6839      	ldr	r1, [r7, #0]
 8001828:	2000      	movs	r0, #0
 800182a:	f001 f88c 	bl	8002946 <dwt_rxenable>
				 antenna_port);

	dwt_readrxdata(antenna_port->antenna_buffer.rxBuffer,
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f103 00ac 	add.w	r0, r3, #172	@ 0xac
				   cbData->datalength,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	8899      	ldrh	r1, [r3, #4]
	dwt_readrxdata(antenna_port->antenna_buffer.rxBuffer,
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	2200      	movs	r2, #0
 800183c:	f000 fbc5 	bl	8001fca <dwt_readrxdata>
				   0,
				   antenna_port);

	rx_timestamp = get_rx_timestamp_u64(antenna_port);
 8001840:	6838      	ldr	r0, [r7, #0]
 8001842:	f7ff ff9f 	bl	8001784 <get_rx_timestamp_u64>
 8001846:	e9c7 0104 	strd	r0, r1, [r7, #16]

}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <rxToCallback>:

void rxToCallback(const dwt_cb_data_t *cbData, DW1000_Port_t *antenna_port)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
	/* Clear reception timeout to start next ranging process. */
	dwt_setrxtimeout(0,
 800185c:	6839      	ldr	r1, [r7, #0]
 800185e:	2000      	movs	r0, #0
 8001860:	f001 f8b8 	bl	80029d4 <dwt_setrxtimeout>
					 antenna_port);

	/* Activate reception immediately. */
	dwt_rxenable(DWT_START_RX_IMMEDIATE,
 8001864:	6839      	ldr	r1, [r7, #0]
 8001866:	2000      	movs	r0, #0
 8001868:	f001 f86d 	bl	8002946 <dwt_rxenable>
				 antenna_port);
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <rxErrCallback>:

void rxErrCallback(const dwt_cb_data_t *cbData, DW1000_Port_t *antenna_port)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]

	/* Clear reception timeout to start next ranging process. */
	dwt_setrxtimeout(0,
 800187e:	6839      	ldr	r1, [r7, #0]
 8001880:	2000      	movs	r0, #0
 8001882:	f001 f8a7 	bl	80029d4 <dwt_setrxtimeout>
					 antenna_port);

	/* Activate reception immediately. */
	dwt_rxenable(DWT_START_RX_IMMEDIATE,
 8001886:	6839      	ldr	r1, [r7, #0]
 8001888:	2000      	movs	r0, #0
 800188a:	f001 f85c 	bl	8002946 <dwt_rxenable>
				 antenna_port);
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <Check_DW1000RSTn>:
												 2)) / powf(adjusted_rxpacc,
															2)) - A_PRF64M;
}

UWB_StatusTypeDef Check_DW1000RSTn(uint32_t Timeout)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 80018a0:	f001 fc7e 	bl	80031a0 <HAL_GetTick>
 80018a4:	60f8      	str	r0, [r7, #12]
	 * When the I/O port is programmed as output:
	 * The data present on the I/O pin are sampled into the input data register every AHB clock cycle
	 * A read access to the input data register gets the I/O state
	 */

	while(HAL_GPIO_ReadPin(UWB1_RESET_GPIO_Port,
 80018a6:	e009      	b.n	80018bc <Check_DW1000RSTn+0x24>
		  && HAL_GPIO_ReadPin(UWB3_RESET_GPIO_Port,
							  UWB3_RESET_Pin) == GPIO_PIN_RESET
		  && HAL_GPIO_ReadPin(UWB4_RESET_GPIO_Port,
							  UWB4_RESET_Pin) == GPIO_PIN_RESET)
	{
		if((HAL_GetTick() - tickstart) > Timeout)
 80018a8:	f001 fc7a 	bl	80031a0 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d201      	bcs.n	80018bc <Check_DW1000RSTn+0x24>
		{
			return UWB_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e021      	b.n	8001900 <Check_DW1000RSTn+0x68>
	while(HAL_GPIO_ReadPin(UWB1_RESET_GPIO_Port,
 80018bc:	2102      	movs	r1, #2
 80018be:	4812      	ldr	r0, [pc, #72]	@ (8001908 <Check_DW1000RSTn+0x70>)
 80018c0:	f001 ffe2 	bl	8003888 <HAL_GPIO_ReadPin>
 80018c4:	4603      	mov	r3, r0
		  && HAL_GPIO_ReadPin(UWB4_RESET_GPIO_Port,
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d116      	bne.n	80018f8 <Check_DW1000RSTn+0x60>
		  && HAL_GPIO_ReadPin(UWB2_RESET_GPIO_Port,
 80018ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018ce:	480f      	ldr	r0, [pc, #60]	@ (800190c <Check_DW1000RSTn+0x74>)
 80018d0:	f001 ffda 	bl	8003888 <HAL_GPIO_ReadPin>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10e      	bne.n	80018f8 <Check_DW1000RSTn+0x60>
		  && HAL_GPIO_ReadPin(UWB3_RESET_GPIO_Port,
 80018da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018de:	480c      	ldr	r0, [pc, #48]	@ (8001910 <Check_DW1000RSTn+0x78>)
 80018e0:	f001 ffd2 	bl	8003888 <HAL_GPIO_ReadPin>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d106      	bne.n	80018f8 <Check_DW1000RSTn+0x60>
		  && HAL_GPIO_ReadPin(UWB4_RESET_GPIO_Port,
 80018ea:	2180      	movs	r1, #128	@ 0x80
 80018ec:	4809      	ldr	r0, [pc, #36]	@ (8001914 <Check_DW1000RSTn+0x7c>)
 80018ee:	f001 ffcb 	bl	8003888 <HAL_GPIO_ReadPin>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0d7      	beq.n	80018a8 <Check_DW1000RSTn+0x10>
		}
	}

	/*从INIT到IDLE还需要几us 等1ms足够*/
	deca_sleep(1);
 80018f8:	2001      	movs	r0, #1
 80018fa:	f001 f985 	bl	8002c08 <deca_sleep>

	return UWB_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	58020400 	.word	0x58020400
 800190c:	58021000 	.word	0x58021000
 8001910:	58020c00 	.word	0x58020c00
 8001914:	58020800 	.word	0x58020800

08001918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001950 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800191c:	f7ff fb16 	bl	8000f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001920:	480c      	ldr	r0, [pc, #48]	@ (8001954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001922:	490d      	ldr	r1, [pc, #52]	@ (8001958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001924:	4a0d      	ldr	r2, [pc, #52]	@ (800195c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001938:	4c0a      	ldr	r4, [pc, #40]	@ (8001964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001946:	f007 fd9d 	bl	8009484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194a:	f7ff f861 	bl	8000a10 <main>
  bx  lr
 800194e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001950:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001954:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001958:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 800195c:	080095e8 	.word	0x080095e8
  ldr r2, =_sbss
 8001960:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8001964:	24000888 	.word	0x24000888

08001968 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC3_IRQHandler>
	...

0800196c <dwt_setlocaldataptr>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_setlocaldataptr(unsigned int index)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
    // Check the index is within the array bounds
    if (DWT_NUM_DW_DEV <= index) // return error if index outside the array bounds
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d902      	bls.n	8001980 <dwt_setlocaldataptr+0x14>
    {
        return DWT_ERROR ;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	e009      	b.n	8001994 <dwt_setlocaldataptr+0x28>
    }

    pdw1000local = &dw1000local[index];
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	1a9b      	subs	r3, r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <dwt_setlocaldataptr+0x34>)
 800198c:	4413      	add	r3, r2
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <dwt_setlocaldataptr+0x38>)
 8001990:	6013      	str	r3, [r2, #0]

    return DWT_SUCCESS ;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	2400079c 	.word	0x2400079c
 80019a4:	24000014 	.word	0x24000014

080019a8 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config, DW1000_Port_t *antenna_port)
{
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
    uint16 otp_xtaltrim_and_rev = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80019ba:	4b8c      	ldr	r3, [pc, #560]	@ (8001bec <dwt_initialise+0x244>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2200      	movs	r2, #0
 80019c0:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80019c2:	4b8a      	ldr	r3, [pc, #552]	@ (8001bec <dwt_initialise+0x244>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2200      	movs	r2, #0
 80019c8:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80019ca:	4b88      	ldr	r3, [pc, #544]	@ (8001bec <dwt_initialise+0x244>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2200      	movs	r2, #0
 80019d0:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80019d2:	4b86      	ldr	r3, [pc, #536]	@ (8001bec <dwt_initialise+0x244>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 80019da:	4b84      	ldr	r3, [pc, #528]	@ (8001bec <dwt_initialise+0x244>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2200      	movs	r2, #0
 80019e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 80019e2:	4b82      	ldr	r3, [pc, #520]	@ (8001bec <dwt_initialise+0x244>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2200      	movs	r2, #0
 80019e8:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 80019ea:	4b80      	ldr	r3, [pc, #512]	@ (8001bec <dwt_initialise+0x244>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2200      	movs	r2, #0
 80019f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid(antenna_port)) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80019f2:	6838      	ldr	r0, [r7, #0]
 80019f4:	f000 f93a 	bl	8001c6c <dwt_readdevid>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4a7d      	ldr	r2, [pc, #500]	@ (8001bf0 <dwt_initialise+0x248>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d002      	beq.n	8001a06 <dwt_initialise+0x5e>
    {
        return DWT_ERROR ;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
 8001a04:	e12c      	b.n	8001c60 <dwt_initialise+0x2b8>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <dwt_initialise+0x6e>
    {
        dwt_softreset(antenna_port); // Make sure the device is completely reset before starting initialisation
 8001a10:	6838      	ldr	r0, [r7, #0]
 8001a12:	f001 f87b 	bl	8002b0c <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <dwt_initialise+0x82>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d103      	bne.n	8001a32 <dwt_initialise+0x8a>
    {
        _dwt_enableclocks(FORCE_SYS_XTI, antenna_port); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8001a2a:	6839      	ldr	r1, [r7, #0]
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f000 fe7d 	bl	800272c <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK, antenna_port);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2204      	movs	r2, #4
 8001a36:	2100      	movs	r1, #0
 8001a38:	2024      	movs	r0, #36	@ 0x24
 8001a3a:	f000 fbfc 	bl	8002236 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d118      	bne.n	8001a7a <dwt_initialise+0xd2>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS, antenna_port);
 8001a48:	6839      	ldr	r1, [r7, #0]
 8001a4a:	2004      	movs	r0, #4
 8001a4c:	f000 fc55 	bl	80022fa <_dwt_otpread>
 8001a50:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d021      	beq.n	8001a9e <dwt_initialise+0xf6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK, antenna_port); // Set load LDO kick bit
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	2112      	movs	r1, #18
 8001a60:	202d      	movs	r0, #45	@ 0x2d
 8001a62:	f000 fbe8 	bl	8002236 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8001a66:	4b61      	ldr	r3, [pc, #388]	@ (8001bec <dwt_initialise+0x244>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	8ada      	ldrh	r2, [r3, #22]
 8001a6c:	4b5f      	ldr	r3, [pc, #380]	@ (8001bec <dwt_initialise+0x244>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a74:	b292      	uxth	r2, r2
 8001a76:	82da      	strh	r2, [r3, #22]
 8001a78:	e011      	b.n	8001a9e <dwt_initialise+0xf6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE, antenna_port) != LDOTUNE_DEFAULT)
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	2130      	movs	r1, #48	@ 0x30
 8001a7e:	2028      	movs	r0, #40	@ 0x28
 8001a80:	f000 fb78 	bl	8002174 <dwt_read32bitoffsetreg>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f1b3 3f88 	cmp.w	r3, #2290649224	@ 0x88888888
 8001a8a:	d008      	beq.n	8001a9e <dwt_initialise+0xf6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8001a8c:	4b57      	ldr	r3, [pc, #348]	@ (8001bec <dwt_initialise+0x244>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	8ada      	ldrh	r2, [r3, #22]
 8001a92:	4b56      	ldr	r3, [pc, #344]	@ (8001bec <dwt_initialise+0x244>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a9a:	b292      	uxth	r2, r2
 8001a9c:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d009      	beq.n	8001abc <dwt_initialise+0x114>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d012      	beq.n	8001ad8 <dwt_initialise+0x130>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00d      	beq.n	8001ad8 <dwt_initialise+0x130>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS, antenna_port) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8001abc:	6839      	ldr	r1, [r7, #0]
 8001abe:	201e      	movs	r0, #30
 8001ac0:	f000 fc1b 	bl	80022fa <_dwt_otpread>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8001ac8:	8afb      	ldrh	r3, [r7, #22]
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	4b47      	ldr	r3, [pc, #284]	@ (8001bec <dwt_initialise+0x244>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	72da      	strb	r2, [r3, #11]
 8001ad6:	e003      	b.n	8001ae0 <dwt_initialise+0x138>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8001ad8:	4b44      	ldr	r3, [pc, #272]	@ (8001bec <dwt_initialise+0x244>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	72da      	strb	r2, [r3, #11]
    // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10c      	bne.n	8001b04 <dwt_initialise+0x15c>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8001aea:	8afb      	ldrh	r3, [r7, #22]
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <dwt_initialise+0x150>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8001af4:	2310      	movs	r3, #16
 8001af6:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev, antenna_port);
 8001af8:	8afb      	ldrh	r3, [r7, #22]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	6839      	ldr	r1, [r7, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f001 f834 	bl	8002b6c <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d008      	beq.n	8001b20 <dwt_initialise+0x178>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS, antenna_port);
 8001b0e:	4b37      	ldr	r3, [pc, #220]	@ (8001bec <dwt_initialise+0x244>)
 8001b10:	681c      	ldr	r4, [r3, #0]
 8001b12:	6839      	ldr	r1, [r7, #0]
 8001b14:	2006      	movs	r0, #6
 8001b16:	f000 fbf0 	bl	80022fa <_dwt_otpread>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6023      	str	r3, [r4, #0]
 8001b1e:	e003      	b.n	8001b28 <dwt_initialise+0x180>
    }
    else
    {
        pdw1000local->partID = 0;
 8001b20:	4b32      	ldr	r3, [pc, #200]	@ (8001bec <dwt_initialise+0x244>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d008      	beq.n	8001b44 <dwt_initialise+0x19c>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS, antenna_port);
 8001b32:	4b2e      	ldr	r3, [pc, #184]	@ (8001bec <dwt_initialise+0x244>)
 8001b34:	681c      	ldr	r4, [r3, #0]
 8001b36:	6839      	ldr	r1, [r7, #0]
 8001b38:	2007      	movs	r0, #7
 8001b3a:	f000 fbde 	bl	80022fa <_dwt_otpread>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6063      	str	r3, [r4, #4]
 8001b42:	e003      	b.n	8001b4c <dwt_initialise+0x1a4>
    }
    else
    {
        pdw1000local->lotID = 0;
 8001b44:	4b29      	ldr	r3, [pc, #164]	@ (8001bec <dwt_initialise+0x244>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d009      	beq.n	8001b6a <dwt_initialise+0x1c2>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS, antenna_port) & 0xff;
 8001b56:	6839      	ldr	r1, [r7, #0]
 8001b58:	2008      	movs	r0, #8
 8001b5a:	f000 fbce 	bl	80022fa <_dwt_otpread>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <dwt_initialise+0x244>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	721a      	strb	r2, [r3, #8]
 8001b68:	e003      	b.n	8001b72 <dwt_initialise+0x1ca>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8001b6a:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <dwt_initialise+0x244>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d009      	beq.n	8001b90 <dwt_initialise+0x1e8>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS, antenna_port) & 0xff;
 8001b7c:	6839      	ldr	r1, [r7, #0]
 8001b7e:	2009      	movs	r0, #9
 8001b80:	f000 fbbb 	bl	80022fa <_dwt_otpread>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b19      	ldr	r3, [pc, #100]	@ (8001bec <dwt_initialise+0x244>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	725a      	strb	r2, [r3, #9]
 8001b8e:	e003      	b.n	8001b98 <dwt_initialise+0x1f0>
    }
    else
    {
        pdw1000local->tempP = 0;
 8001b90:	4b16      	ldr	r3, [pc, #88]	@ (8001bec <dwt_initialise+0x244>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d128      	bne.n	8001bf4 <dwt_initialise+0x24c>
    {
        if(DWT_LOADUCODE & config)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00c      	beq.n	8001bc6 <dwt_initialise+0x21e>
        {
            _dwt_loaducodefromrom(antenna_port);
 8001bac:	6838      	ldr	r0, [r7, #0]
 8001bae:	f000 fbff 	bl	80023b0 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <dwt_initialise+0x244>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	8ada      	ldrh	r2, [r3, #22]
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <dwt_initialise+0x244>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bc0:	b292      	uxth	r2, r2
 8001bc2:	82da      	strh	r2, [r3, #22]
 8001bc4:	e024      	b.n	8001c10 <dwt_initialise+0x268>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, antenna_port) ;
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	2105      	movs	r1, #5
 8001bca:	2036      	movs	r0, #54	@ 0x36
 8001bcc:	f000 fafd 	bl	80021ca <dwt_read16bitoffsetreg>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8001bd4:	89fb      	ldrh	r3, [r7, #14]
 8001bd6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001bda:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega, antenna_port) ;
 8001bdc:	89fa      	ldrh	r2, [r7, #14]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2105      	movs	r1, #5
 8001be2:	2036      	movs	r0, #54	@ 0x36
 8001be4:	f000 fb3e 	bl	8002264 <dwt_write16bitoffsetreg>
 8001be8:	e012      	b.n	8001c10 <dwt_initialise+0x268>
 8001bea:	bf00      	nop
 8001bec:	24000014 	.word	0x24000014
 8001bf0:	deca0130 	.word	0xdeca0130
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d108      	bne.n	8001c10 <dwt_initialise+0x268>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <dwt_initialise+0x2c0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	8ada      	ldrh	r2, [r3, #22]
 8001c04:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <dwt_initialise+0x2c0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c0c:	b292      	uxth	r2, r2
 8001c0e:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ, antenna_port); // Enable clocks for sequencing
 8001c10:	6839      	ldr	r1, [r7, #0]
 8001c12:	2001      	movs	r0, #1
 8001c14:	f000 fd8a 	bl	800272c <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00, antenna_port);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	210a      	movs	r1, #10
 8001c1e:	202c      	movs	r0, #44	@ 0x2c
 8001c20:	f000 fb09 	bl	8002236 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID, antenna_port); // Read sysconfig register
 8001c24:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <dwt_initialise+0x2c0>)
 8001c26:	681c      	ldr	r4, [r3, #0]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2004      	movs	r0, #4
 8001c2e:	f000 faa1 	bl	8002174 <dwt_read32bitoffsetreg>
 8001c32:	4603      	mov	r3, r0
 8001c34:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8001c36:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <dwt_initialise+0x2c0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	0c1b      	lsrs	r3, r3, #16
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <dwt_initialise+0x2c0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f002 0203 	and.w	r2, r2, #3
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID, antenna_port) ;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <dwt_initialise+0x2c0>)
 8001c4e:	681c      	ldr	r4, [r3, #0]
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	2100      	movs	r1, #0
 8001c54:	2008      	movs	r0, #8
 8001c56:	f000 fa8d 	bl	8002174 <dwt_read32bitoffsetreg>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8001c5e:	2300      	movs	r3, #0

} // end dwt_initialise()
 8001c60:	4618      	mov	r0, r3
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd90      	pop	{r4, r7, pc}
 8001c68:	24000014 	.word	0x24000014

08001c6c <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(DW1000_Port_t *antenna_port)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    return dwt_read32bitoffsetreg(DEV_ID_ID,0,antenna_port);
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	2100      	movs	r1, #0
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f000 fa7b 	bl	8002174 <dwt_read32bitoffsetreg>
 8001c7e:	4603      	mov	r3, r0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config, DW1000_Port_t *antenna_port)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
    uint8 nsSfd_result  = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	795b      	ldrb	r3, [r3, #5]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4bab      	ldr	r3, [pc, #684]	@ (8001f54 <dwt_configure+0x2cc>)
 8001ca8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001cac:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	785b      	ldrb	r3, [r3, #1]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8001cb6:	7cfb      	ldrb	r3, [r7, #19]
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d002      	beq.n	8001cc2 <dwt_configure+0x3a>
 8001cbc:	7cfb      	ldrb	r3, [r7, #19]
 8001cbe:	2b07      	cmp	r3, #7
 8001cc0:	d101      	bne.n	8001cc6 <dwt_configure+0x3e>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <dwt_configure+0x40>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	79db      	ldrb	r3, [r3, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10b      	bne.n	8001cea <dwt_configure+0x62>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8001cd2:	4ba1      	ldr	r3, [pc, #644]	@ (8001f58 <dwt_configure+0x2d0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	4b9f      	ldr	r3, [pc, #636]	@ (8001f58 <dwt_configure+0x2d0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001ce0:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8001ce2:	8abb      	ldrh	r3, [r7, #20]
 8001ce4:	08db      	lsrs	r3, r3, #3
 8001ce6:	82bb      	strh	r3, [r7, #20]
 8001ce8:	e007      	b.n	8001cfa <dwt_configure+0x72>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8001cea:	4b9b      	ldr	r3, [pc, #620]	@ (8001f58 <dwt_configure+0x2d0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	4b99      	ldr	r3, [pc, #612]	@ (8001f58 <dwt_configure+0x2d0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8001cf8:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8001cfa:	4b97      	ldr	r3, [pc, #604]	@ (8001f58 <dwt_configure+0x2d0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	7a12      	ldrb	r2, [r2, #8]
 8001d02:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8001d04:	4b94      	ldr	r3, [pc, #592]	@ (8001f58 <dwt_configure+0x2d0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	4b93      	ldr	r3, [pc, #588]	@ (8001f58 <dwt_configure+0x2d0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8001d12:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8001d14:	4b90      	ldr	r3, [pc, #576]	@ (8001f58 <dwt_configure+0x2d0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6919      	ldr	r1, [r3, #16]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7a1b      	ldrb	r3, [r3, #8]
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d24:	4b8c      	ldr	r3, [pc, #560]	@ (8001f58 <dwt_configure+0x2d0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg, antenna_port) ;
 8001d2c:	4b8a      	ldr	r3, [pc, #552]	@ (8001f58 <dwt_configure+0x2d0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2100      	movs	r1, #0
 8001d36:	2004      	movs	r0, #4
 8001d38:	f000 fab4 	bl	80022a4 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16, antenna_port) ;
 8001d3c:	8aba      	ldrh	r2, [r7, #20]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	f642 0104 	movw	r1, #10244	@ 0x2804
 8001d44:	202e      	movs	r0, #46	@ 0x2e
 8001d46:	f000 fa8d 	bl	8002264 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex, antenna_port);
 8001d4a:	7cbb      	ldrb	r3, [r7, #18]
 8001d4c:	6839      	ldr	r1, [r7, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fb0a 	bl	8002368 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]], antenna_port);
 8001d54:	7cfb      	ldrb	r3, [r7, #19]
 8001d56:	4a81      	ldr	r2, [pc, #516]	@ (8001f5c <dwt_configure+0x2d4>)
 8001d58:	5cd3      	ldrb	r3, [r2, r3]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b80      	ldr	r3, [pc, #512]	@ (8001f60 <dwt_configure+0x2d8>)
 8001d5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2107      	movs	r1, #7
 8001d66:	202b      	movs	r0, #43	@ 0x2b
 8001d68:	f000 fa9c 	bl	80022a4 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]], antenna_port);
 8001d6c:	7cfb      	ldrb	r3, [r7, #19]
 8001d6e:	4a7b      	ldr	r2, [pc, #492]	@ (8001f5c <dwt_configure+0x2d4>)
 8001d70:	5cd3      	ldrb	r3, [r2, r3]
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b7b      	ldr	r3, [pc, #492]	@ (8001f64 <dwt_configure+0x2dc>)
 8001d76:	5c9a      	ldrb	r2, [r3, r2]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	210b      	movs	r1, #11
 8001d7c:	202b      	movs	r0, #43	@ 0x2b
 8001d7e:	f000 fa5a 	bl	8002236 <dwt_write8bitoffsetreg>

    // Configure Pulse Generator Delay
    dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGDELAY_OFFSET, tc_pgdelay[chan_idx[chan]], antenna_port);
 8001d82:	7cfb      	ldrb	r3, [r7, #19]
 8001d84:	4a75      	ldr	r2, [pc, #468]	@ (8001f5c <dwt_configure+0x2d4>)
 8001d86:	5cd3      	ldrb	r3, [r2, r3]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b77      	ldr	r3, [pc, #476]	@ (8001f68 <dwt_configure+0x2e0>)
 8001d8c:	5c9a      	ldrb	r2, [r3, r2]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	210b      	movs	r1, #11
 8001d92:	202a      	movs	r0, #42	@ 0x2a
 8001d94:	f000 fa4f 	bl	8002236 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw], antenna_port);
 8001d98:	7c7b      	ldrb	r3, [r7, #17]
 8001d9a:	4a74      	ldr	r2, [pc, #464]	@ (8001f6c <dwt_configure+0x2e4>)
 8001d9c:	5cd2      	ldrb	r2, [r2, r3]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	210b      	movs	r1, #11
 8001da2:	2028      	movs	r0, #40	@ 0x28
 8001da4:	f000 fa47 	bl	8002236 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]], antenna_port);
 8001da8:	7cfb      	ldrb	r3, [r7, #19]
 8001daa:	4a6c      	ldr	r2, [pc, #432]	@ (8001f5c <dwt_configure+0x2d4>)
 8001dac:	5cd3      	ldrb	r3, [r2, r3]
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b6f      	ldr	r3, [pc, #444]	@ (8001f70 <dwt_configure+0x2e8>)
 8001db2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	210c      	movs	r1, #12
 8001dba:	2028      	movs	r0, #40	@ 0x28
 8001dbc:	f000 fa72 	bl	80022a4 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD], antenna_port);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	79db      	ldrb	r3, [r3, #7]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	799b      	ldrb	r3, [r3, #6]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4a69      	ldr	r2, [pc, #420]	@ (8001f74 <dwt_configure+0x2ec>)
 8001dce:	0043      	lsls	r3, r0, #1
 8001dd0:	440b      	add	r3, r1
 8001dd2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2102      	movs	r1, #2
 8001dda:	2027      	movs	r0, #39	@ 0x27
 8001ddc:	f000 fa42 	bl	8002264 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex], antenna_port);
 8001de0:	7cbb      	ldrb	r3, [r7, #18]
 8001de2:	4a65      	ldr	r2, [pc, #404]	@ (8001f78 <dwt_configure+0x2f0>)
 8001de4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	2104      	movs	r1, #4
 8001dec:	2027      	movs	r0, #39	@ 0x27
 8001dee:	f000 fa39 	bl	8002264 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	79db      	ldrb	r3, [r3, #7]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <dwt_configure+0x180>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K, antenna_port);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2264      	movs	r2, #100	@ 0x64
 8001dfe:	2106      	movs	r1, #6
 8001e00:	2027      	movs	r0, #39	@ 0x27
 8001e02:	f000 fa2f 	bl	8002264 <dwt_write16bitoffsetreg>
 8001e06:	e01c      	b.n	8001e42 <dwt_configure+0x1ba>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	789b      	ldrb	r3, [r3, #2]
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d10c      	bne.n	8001e2a <dwt_configure+0x1a2>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64, antenna_port);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2210      	movs	r2, #16
 8001e14:	2106      	movs	r1, #6
 8001e16:	2027      	movs	r0, #39	@ 0x27
 8001e18:	f000 fa24 	bl	8002264 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64, antenna_port);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2210      	movs	r2, #16
 8001e20:	2126      	movs	r1, #38	@ 0x26
 8001e22:	2027      	movs	r0, #39	@ 0x27
 8001e24:	f000 fa07 	bl	8002236 <dwt_write8bitoffsetreg>
 8001e28:	e00b      	b.n	8001e42 <dwt_configure+0x1ba>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8, antenna_port);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	2106      	movs	r1, #6
 8001e30:	2027      	movs	r0, #39	@ 0x27
 8001e32:	f000 fa17 	bl	8002264 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS, antenna_port);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2228      	movs	r2, #40	@ 0x28
 8001e3a:	2126      	movs	r1, #38	@ 0x26
 8001e3c:	2027      	movs	r0, #39	@ 0x27
 8001e3e:	f000 f9fa 	bl	8002236 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC], antenna_port);
 8001e42:	7cbb      	ldrb	r3, [r7, #18]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	78d2      	ldrb	r2, [r2, #3]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4a4c      	ldr	r2, [pc, #304]	@ (8001f7c <dwt_configure+0x2f4>)
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	2108      	movs	r1, #8
 8001e58:	2027      	movs	r0, #39	@ 0x27
 8001e5a:	f000 fa23 	bl	80022a4 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	895b      	ldrh	r3, [r3, #10]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d103      	bne.n	8001e6e <dwt_configure+0x1e6>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f241 0241 	movw	r2, #4161	@ 0x1041
 8001e6c:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO, antenna_port);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	895a      	ldrh	r2, [r3, #10]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2120      	movs	r1, #32
 8001e76:	2027      	movs	r0, #39	@ 0x27
 8001e78:	f000 f9f4 	bl	8002264 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32, antenna_port);
 8001e7c:	4b40      	ldr	r3, [pc, #256]	@ (8001f80 <dwt_configure+0x2f8>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	210c      	movs	r1, #12
 8001e84:	2023      	movs	r0, #35	@ 0x23
 8001e86:	f000 fa0d 	bl	80022a4 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex], antenna_port);
 8001e8a:	7cbb      	ldrb	r3, [r7, #18]
 8001e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f80 <dwt_configure+0x2f8>)
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	889a      	ldrh	r2, [r3, #4]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2104      	movs	r1, #4
 8001e98:	2023      	movs	r0, #35	@ 0x23
 8001e9a:	f000 f9e3 	bl	8002264 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	799b      	ldrb	r3, [r3, #6]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00d      	beq.n	8001ec2 <dwt_configure+0x23a>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate], antenna_port);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	79db      	ldrb	r3, [r3, #7]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b35      	ldr	r3, [pc, #212]	@ (8001f84 <dwt_configure+0x2fc>)
 8001eae:	5c9a      	ldrb	r2, [r3, r2]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2021      	movs	r0, #33	@ 0x21
 8001eb6:	f000 f9be 	bl	8002236 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8001ec2:	7cfb      	ldrb	r3, [r7, #19]
 8001ec4:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8001ec8:	7cfb      	ldrb	r3, [r7, #19]
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8001ece:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	785b      	ldrb	r3, [r3, #1]
 8001ed4:	049b      	lsls	r3, r3, #18
 8001ed6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8001eda:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	051b      	lsls	r3, r3, #20
 8001ee0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8001ee4:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8001ee6:	7dbb      	ldrb	r3, [r7, #22]
 8001ee8:	045b      	lsls	r3, r3, #17
 8001eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8001eee:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	791b      	ldrb	r3, [r3, #4]
 8001ef4:	059b      	lsls	r3, r3, #22
 8001ef6:	f003 63f8 	and.w	r3, r3, #130023424	@ 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8001efa:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	795b      	ldrb	r3, [r3, #5]
 8001f00:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval, antenna_port) ;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	201f      	movs	r0, #31
 8001f0e:	f000 f9c9 	bl	80022a4 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	789a      	ldrb	r2, [r3, #2]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	0419      	lsls	r1, r3, #16
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	79db      	ldrb	r3, [r3, #7]
 8001f24:	035a      	lsls	r2, r3, #13
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <dwt_configure+0x2d0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL, antenna_port);
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <dwt_configure+0x2d0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2100      	movs	r1, #0
 8001f38:	2008      	movs	r0, #8
 8001f3a:	f000 f9b3 	bl	80022a4 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF, antenna_port); // Request TX start and TRX off at the same time
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2242      	movs	r2, #66	@ 0x42
 8001f42:	2100      	movs	r1, #0
 8001f44:	200d      	movs	r0, #13
 8001f46:	f000 f976 	bl	8002236 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	0800957c 	.word	0x0800957c
 8001f58:	24000014 	.word	0x24000014
 8001f5c:	080094f4 	.word	0x080094f4
 8001f60:	08009514 	.word	0x08009514
 8001f64:	0800952c 	.word	0x0800952c
 8001f68:	08009534 	.word	0x08009534
 8001f6c:	0800953c 	.word	0x0800953c
 8001f70:	080094fc 	.word	0x080094fc
 8001f74:	0800954c 	.word	0x0800954c
 8001f78:	08009558 	.word	0x08009558
 8001f7c:	0800955c 	.word	0x0800955c
 8001f80:	08009540 	.word	0x08009540
 8001f84:	08009548 	.word	0x08009548

08001f88 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay, DW1000_Port_t *antenna_port)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay, antenna_port);
 8001f94:	88fa      	ldrh	r2, [r7, #6]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f641 0104 	movw	r1, #6148	@ 0x1804
 8001f9c:	202e      	movs	r0, #46	@ 0x2e
 8001f9e:	f000 f961 	bl	8002264 <dwt_write16bitoffsetreg>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay, DW1000_Port_t *antenna_port)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	6039      	str	r1, [r7, #0]
 8001fb4:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay, antenna_port);
 8001fb6:	88fa      	ldrh	r2, [r7, #6]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2018      	movs	r0, #24
 8001fbe:	f000 f951 	bl	8002264 <dwt_write16bitoffsetreg>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset, DW1000_Port_t *antenna_port)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af02      	add	r7, sp, #8
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	817b      	strh	r3, [r7, #10]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	813b      	strh	r3, [r7, #8]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer,antenna_port) ;
 8001fdc:	897a      	ldrh	r2, [r7, #10]
 8001fde:	8939      	ldrh	r1, [r7, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2011      	movs	r0, #17
 8001fe8:	f000 f86e 	bl	80020c8 <dwt_readfromdevice>
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp, DW1000_Port_t *antenna_port)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp, antenna_port) ; // Get the adjusted time of arrival
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2205      	movs	r2, #5
 8002006:	2100      	movs	r1, #0
 8002008:	2015      	movs	r0, #21
 800200a:	f000 f85d 	bl	80020c8 <dwt_readfromdevice>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <dwt_writetodevice>:
                uint16  index,
                uint32        length,
                const uint8   *buffer,
                DW1000_Port_t *antenna_port
        )
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b088      	sub	sp, #32
 800201a:	af02      	add	r7, sp, #8
 800201c:	60ba      	str	r2, [r7, #8]
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	4603      	mov	r3, r0
 8002022:	81fb      	strh	r3, [r7, #14]
 8002024:	460b      	mov	r3, r1
 8002026:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800202c:	89bb      	ldrh	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10c      	bne.n	800204c <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002032:	89fb      	ldrh	r3, [r7, #14]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	1c59      	adds	r1, r3, #1
 800203a:	6179      	str	r1, [r7, #20]
 800203c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	3318      	adds	r3, #24
 8002044:	443b      	add	r3, r7
 8002046:	f803 2c08 	strb.w	r2, [r3, #-8]
 800204a:	e02f      	b.n	80020ac <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800204c:	89fb      	ldrh	r3, [r7, #14]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	1c59      	adds	r1, r3, #1
 8002054:	6179      	str	r1, [r7, #20]
 8002056:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	3318      	adds	r3, #24
 800205e:	443b      	add	r3, r7
 8002060:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8002064:	89bb      	ldrh	r3, [r7, #12]
 8002066:	2b7f      	cmp	r3, #127	@ 0x7f
 8002068:	d809      	bhi.n	800207e <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	617a      	str	r2, [r7, #20]
 8002070:	89ba      	ldrh	r2, [r7, #12]
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	3318      	adds	r3, #24
 8002076:	443b      	add	r3, r7
 8002078:	f803 2c08 	strb.w	r2, [r3, #-8]
 800207c:	e016      	b.n	80020ac <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800207e:	89bb      	ldrh	r3, [r7, #12]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	1c59      	adds	r1, r3, #1
 8002086:	6179      	str	r1, [r7, #20]
 8002088:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	3318      	adds	r3, #24
 8002090:	443b      	add	r3, r7
 8002092:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8002096:	89bb      	ldrh	r3, [r7, #12]
 8002098:	09db      	lsrs	r3, r3, #7
 800209a:	b299      	uxth	r1, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	617a      	str	r2, [r7, #20]
 80020a2:	b2ca      	uxtb	r2, r1
 80020a4:	3318      	adds	r3, #24
 80020a6:	443b      	add	r3, r7
 80020a8:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer,antenna_port);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	b298      	uxth	r0, r3
 80020b0:	f107 0110 	add.w	r1, r7, #16
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	f000 fdb0 	bl	8002c20 <writetospi>
} // end dwt_writetodevice()
 80020c0:	bf00      	nop
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <dwt_readfromdevice>:
                uint16  index,
                uint32        length,
                uint8         *buffer,
                DW1000_Port_t *antenna_port
        )
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60ba      	str	r2, [r7, #8]
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4603      	mov	r3, r0
 80020d4:	81fb      	strh	r3, [r7, #14]
 80020d6:	460b      	mov	r3, r1
 80020d8:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80020de:	89bb      	ldrh	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	617a      	str	r2, [r7, #20]
 80020ea:	89fa      	ldrh	r2, [r7, #14]
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	3318      	adds	r3, #24
 80020f0:	443b      	add	r3, r7
 80020f2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80020f6:	e02f      	b.n	8002158 <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80020f8:	89fb      	ldrh	r3, [r7, #14]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	1c59      	adds	r1, r3, #1
 8002100:	6179      	str	r1, [r7, #20]
 8002102:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	3318      	adds	r3, #24
 800210a:	443b      	add	r3, r7
 800210c:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8002110:	89bb      	ldrh	r3, [r7, #12]
 8002112:	2b7f      	cmp	r3, #127	@ 0x7f
 8002114:	d809      	bhi.n	800212a <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	617a      	str	r2, [r7, #20]
 800211c:	89ba      	ldrh	r2, [r7, #12]
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	3318      	adds	r3, #24
 8002122:	443b      	add	r3, r7
 8002124:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002128:	e016      	b.n	8002158 <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800212a:	89bb      	ldrh	r3, [r7, #12]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	1c59      	adds	r1, r3, #1
 8002132:	6179      	str	r1, [r7, #20]
 8002134:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	3318      	adds	r3, #24
 800213c:	443b      	add	r3, r7
 800213e:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8002142:	89bb      	ldrh	r3, [r7, #12]
 8002144:	09db      	lsrs	r3, r3, #7
 8002146:	b299      	uxth	r1, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	617a      	str	r2, [r7, #20]
 800214e:	b2ca      	uxtb	r2, r1
 8002150:	3318      	adds	r3, #24
 8002152:	443b      	add	r3, r7
 8002154:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer, antenna_port);  // result is stored in the buffer
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	b298      	uxth	r0, r3
 800215c:	f107 0110 	add.w	r1, r7, #16
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f000 fd8e 	bl	8002c88 <readfromspi>
} // end dwt_readfromdevice()
 800216c:	bf00      	nop
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset, DW1000_Port_t *antenna_port)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	@ 0x28
 8002178:	af02      	add	r7, sp, #8
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
    uint32  regval = 0 ;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer,antenna_port); // Read 4 bytes (32-bits) register into buffer
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	b298      	uxth	r0, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	b299      	uxth	r1, r3
 800218c:	f107 0214 	add.w	r2, r7, #20
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	4613      	mov	r3, r2
 8002196:	2204      	movs	r2, #4
 8002198:	f7ff ff96 	bl	80020c8 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 800219c:	2303      	movs	r3, #3
 800219e:	61bb      	str	r3, [r7, #24]
 80021a0:	e00b      	b.n	80021ba <dwt_read32bitoffsetreg+0x46>
    {
        regval = (regval << 8) + buffer[j] ;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	f107 0114 	add.w	r1, r7, #20
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	440a      	add	r2, r1
 80021ae:	7812      	ldrb	r2, [r2, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	61fb      	str	r3, [r7, #28]
    for (j = 3 ; j >= 0 ; j --)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	daf0      	bge.n	80021a2 <dwt_read32bitoffsetreg+0x2e>
    }
    return regval ;
 80021c0:	69fb      	ldr	r3, [r7, #28]

} // end dwt_read32bitoffsetreg()
 80021c2:	4618      	mov	r0, r3
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset, DW1000_Port_t *antenna_port)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b088      	sub	sp, #32
 80021ce:	af02      	add	r7, sp, #8
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
    uint16  regval = 0 ;
 80021d6:	2300      	movs	r3, #0
 80021d8:	82fb      	strh	r3, [r7, #22]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer,antenna_port); // Read 2 bytes (16-bits) register into buffer
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	b298      	uxth	r0, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	b299      	uxth	r1, r3
 80021e2:	f107 0214 	add.w	r2, r7, #20
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	4613      	mov	r3, r2
 80021ec:	2202      	movs	r2, #2
 80021ee:	f7ff ff6b 	bl	80020c8 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 80021f2:	7d7b      	ldrb	r3, [r7, #21]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	7d3a      	ldrb	r2, [r7, #20]
 80021fa:	4413      	add	r3, r2
 80021fc:	82fb      	strh	r3, [r7, #22]
    return regval ;
 80021fe:	8afb      	ldrh	r3, [r7, #22]

} // end dwt_read16bitoffsetreg()
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset, DW1000_Port_t *antenna_port)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af02      	add	r7, sp, #8
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval, antenna_port);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	b298      	uxth	r0, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	b299      	uxth	r1, r3
 800221c:	f107 0217 	add.w	r2, r7, #23
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	2201      	movs	r2, #1
 8002228:	f7ff ff4e 	bl	80020c8 <dwt_readfromdevice>

    return regval ;
 800222c:	7dfb      	ldrb	r3, [r7, #23]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval, DW1000_Port_t *antenna_port)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af02      	add	r7, sp, #8
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	4613      	mov	r3, r2
 8002244:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval, antenna_port);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	b298      	uxth	r0, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	b299      	uxth	r1, r3
 800224e:	1dfa      	adds	r2, r7, #7
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	2201      	movs	r2, #1
 8002258:	f7ff fedd 	bl	8002016 <dwt_writetodevice>
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval, DW1000_Port_t *antenna_port)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	4613      	mov	r3, r2
 8002272:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	b29b      	uxth	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer,antenna_port);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	b298      	uxth	r0, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	b299      	uxth	r1, r3
 800228c:	f107 0214 	add.w	r2, r7, #20
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	2202      	movs	r2, #2
 8002298:	f7ff febd 	bl	8002016 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 800229c:	bf00      	nop
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval, DW1000_Port_t *antenna_port)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	e00d      	b.n	80022d4 <dwt_write32bitoffsetreg+0x30>
    {
        buffer[j] = regval & 0xff ;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	b2d9      	uxtb	r1, r3
 80022bc:	f107 0210 	add.w	r2, r7, #16
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	4413      	add	r3, r2
 80022c4:	460a      	mov	r2, r1
 80022c6:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3301      	adds	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	ddee      	ble.n	80022b8 <dwt_write32bitoffsetreg+0x14>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer,antenna_port);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	b298      	uxth	r0, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	b299      	uxth	r1, r3
 80022e2:	f107 0210 	add.w	r2, r7, #16
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	4613      	mov	r3, r2
 80022ec:	2204      	movs	r2, #4
 80022ee:	f7ff fe92 	bl	8002016 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 80022f2:	bf00      	nop
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address, DW1000_Port_t *antenna_port)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	6039      	str	r1, [r7, #0]
 8002304:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address, antenna_port);
 8002306:	88fa      	ldrh	r2, [r7, #6]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2104      	movs	r1, #4
 800230c:	202d      	movs	r0, #45	@ 0x2d
 800230e:	f7ff ffa9 	bl	8002264 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN, antenna_port);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2203      	movs	r2, #3
 8002316:	2106      	movs	r1, #6
 8002318:	202d      	movs	r0, #45	@ 0x2d
 800231a:	f7ff ff8c 	bl	8002236 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00, antenna_port); // OTPREAD is self clearing but OTPRDEN is not
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2200      	movs	r2, #0
 8002322:	2106      	movs	r1, #6
 8002324:	202d      	movs	r0, #45	@ 0x2d
 8002326:	f7ff ff86 	bl	8002236 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT, antenna_port);
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	210a      	movs	r1, #10
 800232e:	202d      	movs	r0, #45	@ 0x2d
 8002330:	f7ff ff20 	bl	8002174 <dwt_read32bitoffsetreg>
 8002334:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8002336:	68fb      	ldr	r3, [r7, #12]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(DW1000_Port_t *antenna_port)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00, antenna_port); // Clear the register
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	2102      	movs	r1, #2
 800234e:	202c      	movs	r0, #44	@ 0x2c
 8002350:	f7ff ff71 	bl	8002236 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, antenna_port);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	2102      	movs	r1, #2
 800235a:	202c      	movs	r0, #44	@ 0x2c
 800235c:	f7ff ff6b 	bl	8002236 <dwt_write8bitoffsetreg>
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex, DW1000_Port_t *antenna_port)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1, antenna_port); // 8-bit configuration register
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	226d      	movs	r2, #109	@ 0x6d
 8002376:	f640 0106 	movw	r1, #2054	@ 0x806
 800237a:	202e      	movs	r0, #46	@ 0x2e
 800237c:	f7ff ff5b 	bl	8002236 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d008      	beq.n	8002398 <_dwt_configlde+0x30>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64, antenna_port); // 16-bit LDE configuration tuning register
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f240 6207 	movw	r2, #1543	@ 0x607
 800238c:	f641 0106 	movw	r1, #6150	@ 0x1806
 8002390:	202e      	movs	r0, #46	@ 0x2e
 8002392:	f7ff ff67 	bl	8002264 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16, antenna_port);
    }
}
 8002396:	e007      	b.n	80023a8 <_dwt_configlde+0x40>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16, antenna_port);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f241 6207 	movw	r2, #5639	@ 0x1607
 800239e:	f641 0106 	movw	r1, #6150	@ 0x1806
 80023a2:	202e      	movs	r0, #46	@ 0x2e
 80023a4:	f7ff ff5e 	bl	8002264 <dwt_write16bitoffsetreg>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(DW1000_Port_t *antenna_port)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE, antenna_port);
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	200e      	movs	r0, #14
 80023bc:	f000 f9b6 	bl	800272c <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD, antenna_port); // Set load LDE kick bit
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80023c6:	2106      	movs	r1, #6
 80023c8:	202d      	movs	r0, #45	@ 0x2d
 80023ca:	f7ff ff4b 	bl	8002264 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 80023ce:	2001      	movs	r0, #1
 80023d0:	f000 fc1a 	bl	8002c08 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ, antenna_port); // Enable clocks for sequencing
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	2001      	movs	r0, #1
 80023d8:	f000 f9a8 	bl	800272c <_dwt_enableclocks>
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <dwt_setcallbacks>:
 * output parameters
 *
 * no return value
 */
void dwt_setcallbacks(dwt_cb_t cbTxDone, dwt_cb_t cbRxOk, dwt_cb_t cbRxTo, dwt_cb_t cbRxErr)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
    pdw1000local->cbTxDone = cbTxDone;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <dwt_setcallbacks+0x3c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = cbRxOk;
 80023fa:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <dwt_setcallbacks+0x3c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = cbRxTo;
 8002402:	4b07      	ldr	r3, [pc, #28]	@ (8002420 <dwt_setcallbacks+0x3c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = cbRxErr;
 800240a:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <dwt_setcallbacks+0x3c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	24000014 	.word	0x24000014

08002424 <dwt_isr>:
 * output parameters
 *
 * no return value
 */
void dwt_isr(DW1000_Port_t *antenna_port)
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b08b      	sub	sp, #44	@ 0x2c
 8002428:	af02      	add	r7, sp, #8
 800242a:	6078      	str	r0, [r7, #4]
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID, antenna_port); // Read status register low 32bits
 800242c:	4b80      	ldr	r3, [pc, #512]	@ (8002630 <dwt_isr+0x20c>)
 800242e:	681c      	ldr	r4, [r3, #0]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	2100      	movs	r1, #0
 8002434:	200f      	movs	r0, #15
 8002436:	f7ff fe9d 	bl	8002174 <dwt_read32bitoffsetreg>
 800243a:	4603      	mov	r3, r0
 800243c:	61e3      	str	r3, [r4, #28]
 800243e:	69e3      	ldr	r3, [r4, #28]
 8002440:	61bb      	str	r3, [r7, #24]

    // Handle RX good frame event
    if(status & SYS_STATUS_RXFCG) //疑问: 为什么不是SYS_STATUS_RXDFR
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d076      	beq.n	800253a <dwt_isr+0x116>
    {
        uint16 finfo16;
        uint16 len;

        /* RXPRD(前导码检测) -> RXSFDD(SFD检测) -> RXPHD(PHY Header检测) -> RXFCG(crc正确) -> RXDFR(接收完成) */
        dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXPRD | \
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f44f 42d6 	mov.w	r2, #27392	@ 0x6b00
 8002452:	2100      	movs	r1, #0
 8002454:	200f      	movs	r0, #15
 8002456:	f7ff ff25 	bl	80022a4 <dwt_write32bitoffsetreg>
                SYS_STATUS_RXSFDD | SYS_STATUS_RXPHD ), antenna_port); // Clear all receive status bits

        pdw1000local->cbData.rx_flags = 0;
 800245a:	4b75      	ldr	r3, [pc, #468]	@ (8002630 <dwt_isr+0x20c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        // Read frame info - Only the first two bytes of the register are used here.
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET, antenna_port);
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	2100      	movs	r1, #0
 8002468:	2010      	movs	r0, #16
 800246a:	f7ff feae 	bl	80021ca <dwt_read16bitoffsetreg>
 800246e:	4603      	mov	r3, r0
 8002470:	82fb      	strh	r3, [r7, #22]

        // Report frame length - Standard frame length up to 127, extended frame length up to 1023 bytes
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
 8002472:	8afb      	ldrh	r3, [r7, #22]
 8002474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002478:	83fb      	strh	r3, [r7, #30]
        if(pdw1000local->longFrames == 0)
 800247a:	4b6d      	ldr	r3, [pc, #436]	@ (8002630 <dwt_isr+0x20c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	7a9b      	ldrb	r3, [r3, #10]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <dwt_isr+0x68>
        {
            len &= RX_FINFO_RXFLEN_MASK;
 8002484:	8bfb      	ldrh	r3, [r7, #30]
 8002486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800248a:	83fb      	strh	r3, [r7, #30]
        }
        pdw1000local->cbData.datalength = len;
 800248c:	4b68      	ldr	r3, [pc, #416]	@ (8002630 <dwt_isr+0x20c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	8bfa      	ldrh	r2, [r7, #30]
 8002492:	841a      	strh	r2, [r3, #32]

        // Report ranging bit
        if(finfo16 & RX_FINFO_RNG)
 8002494:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002498:	2b00      	cmp	r3, #0
 800249a:	da0a      	bge.n	80024b2 <dwt_isr+0x8e>
        {
            pdw1000local->cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
 800249c:	4b64      	ldr	r3, [pc, #400]	@ (8002630 <dwt_isr+0x20c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80024a4:	4b62      	ldr	r3, [pc, #392]	@ (8002630 <dwt_isr+0x20c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        // Report frame control - First bytes of the received frame.
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, pdw1000local->cbData.fctrl, antenna_port);
 80024b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002630 <dwt_isr+0x20c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	2202      	movs	r2, #2
 80024c2:	2100      	movs	r1, #0
 80024c4:	2011      	movs	r0, #17
 80024c6:	f7ff fdff 	bl	80020c8 <dwt_readfromdevice>

        // Because of a previous frame not being received properly, AAT bit can be set upon the proper reception of a frame not requesting for
        // acknowledgement (ACK frame is not actually sent though). If the AAT bit is set, check ACK request bit in frame control to confirm (this
        // implementation works only for IEEE802.15.4-2011 compliant frames).
        // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
        if((status & SYS_STATUS_AAT) && ((pdw1000local->cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d019      	beq.n	8002508 <dwt_isr+0xe4>
 80024d4:	4b56      	ldr	r3, [pc, #344]	@ (8002630 <dwt_isr+0x20c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d111      	bne.n	8002508 <dwt_isr+0xe4>
        {
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT, antenna_port); // Clear AAT status bit in register
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2208      	movs	r2, #8
 80024e8:	2100      	movs	r1, #0
 80024ea:	200f      	movs	r0, #15
 80024ec:	f7ff feda 	bl	80022a4 <dwt_write32bitoffsetreg>
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
 80024f0:	4b4f      	ldr	r3, [pc, #316]	@ (8002630 <dwt_isr+0x20c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002630 <dwt_isr+0x20c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0208 	bic.w	r2, r2, #8
 80024fe:	61da      	str	r2, [r3, #28]
            pdw1000local->wait4resp = 0;
 8002500:	4b4b      	ldr	r3, [pc, #300]	@ (8002630 <dwt_isr+0x20c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2200      	movs	r2, #0
 8002506:	755a      	strb	r2, [r3, #21]
        }

        // Call the corresponding callback if present
        if(pdw1000local->cbRxOk != NULL)
 8002508:	4b49      	ldr	r3, [pc, #292]	@ (8002630 <dwt_isr+0x20c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <dwt_isr+0x100>
        {
            pdw1000local->cbRxOk(&pdw1000local->cbData, antenna_port);
 8002512:	4b47      	ldr	r3, [pc, #284]	@ (8002630 <dwt_isr+0x20c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	4a45      	ldr	r2, [pc, #276]	@ (8002630 <dwt_isr+0x20c>)
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	321c      	adds	r2, #28
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4610      	mov	r0, r2
 8002522:	4798      	blx	r3
        }

        if (pdw1000local->dblbuffon)
 8002524:	4b42      	ldr	r3, [pc, #264]	@ (8002630 <dwt_isr+0x20c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	7d1b      	ldrb	r3, [r3, #20]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <dwt_isr+0x116>
        {
            // Toggle the Host side Receive Buffer Pointer
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1, antenna_port);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	2103      	movs	r1, #3
 8002534:	200d      	movs	r0, #13
 8002536:	f7ff fe7e 	bl	8002236 <dwt_write8bitoffsetreg>
        }
    }

    // Handle TX confirmation event
    if(status & SYS_STATUS_TXFRS)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002540:	2b00      	cmp	r3, #0
 8002542:	d023      	beq.n	800258c <dwt_isr+0x168>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX, antenna_port); // Clear TX event bits  就是啊，这边会自动清除的啊，为什么还要什么东西呢？
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	22f8      	movs	r2, #248	@ 0xf8
 8002548:	2100      	movs	r1, #0
 800254a:	200f      	movs	r0, #15
 800254c:	f7ff feaa 	bl	80022a4 <dwt_write32bitoffsetreg>
        // In the case where this TXFRS interrupt is due to the automatic transmission of an ACK solicited by a response (with ACK request bit set)
        // that we receive through using wait4resp to a previous TX (and assuming that the IRQ processing of that TX has already been handled), then
        // we need to handle the IC issue which turns on the RX again in this situation (i.e. because it is wrongly applying the wait4resp after the
        // ACK TX).
        // See section "Transmit and automatically wait for response" in DW1000 User Manual
        if((status & SYS_STATUS_AAT) && pdw1000local->wait4resp)   //wait4resp是在tx的时候设置了expect_resp, 但是这个什么SYS_STATUS_AAT不知道是在哪里设置的啊
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <dwt_isr+0x14c>
 800255a:	4b35      	ldr	r3, [pc, #212]	@ (8002630 <dwt_isr+0x20c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	7d5b      	ldrb	r3, [r3, #21]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <dwt_isr+0x14c>
        {
            dwt_forcetrxoff(antenna_port); // Turn the RX off
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f997 	bl	8002898 <dwt_forcetrxoff>
            dwt_rxreset(antenna_port); // Reset in case we were late and a frame was already being received
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 faba 	bl	8002ae4 <dwt_rxreset>
        }

        // Call the corresponding callback if present
        if(pdw1000local->cbTxDone != NULL)
 8002570:	4b2f      	ldr	r3, [pc, #188]	@ (8002630 <dwt_isr+0x20c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <dwt_isr+0x168>
        {
            pdw1000local->cbTxDone(&pdw1000local->cbData, antenna_port);
 800257a:	4b2d      	ldr	r3, [pc, #180]	@ (8002630 <dwt_isr+0x20c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002580:	4a2b      	ldr	r2, [pc, #172]	@ (8002630 <dwt_isr+0x20c>)
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	321c      	adds	r2, #28
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4610      	mov	r0, r2
 800258a:	4798      	blx	r3
        }
    }

    // Handle frame reception/preamble detect timeout events
    if(status & SYS_STATUS_ALL_RX_TO)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	f403 1308 	and.w	r3, r3, #2228224	@ 0x220000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d01e      	beq.n	80025d4 <dwt_isr+0x1b0>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO, antenna_port); // Clear RX timeout event bits
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f44f 1208 	mov.w	r2, #2228224	@ 0x220000
 800259c:	2100      	movs	r1, #0
 800259e:	200f      	movs	r0, #15
 80025a0:	f7ff fe80 	bl	80022a4 <dwt_write32bitoffsetreg>

        pdw1000local->wait4resp = 0;
 80025a4:	4b22      	ldr	r3, [pc, #136]	@ (8002630 <dwt_isr+0x20c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2200      	movs	r2, #0
 80025aa:	755a      	strb	r2, [r3, #21]

        // Because of an issue with receiver restart after error conditions, an RX reset must be applied after any error or timeout event to ensure
        // the next good frame's timestamp is computed correctly.
        // See section "RX Message timestamp" in DW1000 User Manual.
        dwt_forcetrxoff(antenna_port);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f973 	bl	8002898 <dwt_forcetrxoff>
        dwt_rxreset(antenna_port);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fa96 	bl	8002ae4 <dwt_rxreset>

        // Call the corresponding callback if present
        if(pdw1000local->cbRxTo != NULL)
 80025b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002630 <dwt_isr+0x20c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <dwt_isr+0x1b0>
        {
            pdw1000local->cbRxTo(&pdw1000local->cbData, antenna_port);
 80025c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002630 <dwt_isr+0x20c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c8:	4a19      	ldr	r2, [pc, #100]	@ (8002630 <dwt_isr+0x20c>)
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	321c      	adds	r2, #28
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4610      	mov	r0, r2
 80025d2:	4798      	blx	r3
        }
    }

    // Handle RX errors events
    if(status & SYS_STATUS_ALL_RX_ERR)
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4b17      	ldr	r3, [pc, #92]	@ (8002634 <dwt_isr+0x210>)
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d01a      	beq.n	8002614 <dwt_isr+0x1f0>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR, antenna_port); // Clear RX error event bits
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a14      	ldr	r2, [pc, #80]	@ (8002634 <dwt_isr+0x210>)
 80025e2:	2100      	movs	r1, #0
 80025e4:	200f      	movs	r0, #15
 80025e6:	f7ff fe5d 	bl	80022a4 <dwt_write32bitoffsetreg>

        pdw1000local->wait4resp = 0;
 80025ea:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <dwt_isr+0x20c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2200      	movs	r2, #0
 80025f0:	755a      	strb	r2, [r3, #21]

        // Because of an issue with receiver restart after error conditions, an RX reset must be applied after any error or timeout event to ensure
        // the next good frame's timestamp is computed correctly.
        // See section "RX Message timestamp" in DW1000 User Manual.
        //        dwt_forcetrxoff();
        dwt_rxreset(antenna_port);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fa76 	bl	8002ae4 <dwt_rxreset>

        // Call the corresponding callback if present
        if(pdw1000local->cbRxErr != NULL)
 80025f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002630 <dwt_isr+0x20c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <dwt_isr+0x1f0>
        {
            pdw1000local->cbRxErr(&pdw1000local->cbData, antenna_port);
 8002602:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <dwt_isr+0x20c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002608:	4a09      	ldr	r2, [pc, #36]	@ (8002630 <dwt_isr+0x20c>)
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	321c      	adds	r2, #28
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4610      	mov	r0, r2
 8002612:	4798      	blx	r3
        }
    }

    uint32 sysconfig1;
    sysconfig1 = dwt_read32bitreg(SYS_CFG_ID, antenna_port) ; // Read sysconfig register
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	2100      	movs	r1, #0
 8002618:	2004      	movs	r0, #4
 800261a:	f7ff fdab 	bl	8002174 <dwt_read32bitoffsetreg>
 800261e:	6138      	str	r0, [r7, #16]
    int a;
    a++;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3301      	adds	r3, #1
 8002624:	60fb      	str	r3, [r7, #12]
}
 8002626:	bf00      	nop
 8002628:	3724      	adds	r7, #36	@ 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	bf00      	nop
 8002630:	24000014 	.word	0x24000014
 8002634:	24059000 	.word	0x24059000

08002638 <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode, DW1000_Port_t *antenna_port)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d059      	beq.n	8002702 <dwt_setleds+0xca>
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, antenna_port);
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	2100      	movs	r1, #0
 8002652:	2026      	movs	r0, #38	@ 0x26
 8002654:	f7ff fd8e 	bl	8002174 <dwt_read32bitoffsetreg>
 8002658:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8002660:	60fb      	str	r3, [r7, #12]
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8002668:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, antenna_port);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	2100      	movs	r1, #0
 8002670:	2026      	movs	r0, #38	@ 0x26
 8002672:	f7ff fe17 	bl	80022a4 <dwt_write32bitoffsetreg>



        //RXOK GPIO0
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, antenna_port);
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	2100      	movs	r1, #0
 800267a:	2026      	movs	r0, #38	@ 0x26
 800267c:	f7ff fd7a 	bl	8002174 <dwt_read32bitoffsetreg>
 8002680:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP0_MASK | GPIO_MSGP3_MASK);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f423 5343 	bic.w	r3, r3, #12480	@ 0x30c0
 8002688:	60fb      	str	r3, [r7, #12]
        reg |= (0x00000040 | GPIO_PIN3_TXLED);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f443 5382 	orr.w	r3, r3, #4160	@ 0x1040
 8002690:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, antenna_port);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	2100      	movs	r1, #0
 8002698:	2026      	movs	r0, #38	@ 0x26
 800269a:	f7ff fe03 	bl	80022a4 <dwt_write32bitoffsetreg>




        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, antenna_port);
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	2100      	movs	r1, #0
 80026a2:	2036      	movs	r0, #54	@ 0x36
 80026a4:	f7ff fd66 	bl	8002174 <dwt_read32bitoffsetreg>
 80026a8:	60f8      	str	r0, [r7, #12]
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f443 0304 	orr.w	r3, r3, #8650752	@ 0x840000
 80026b0:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg, antenna_port);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	2100      	movs	r1, #0
 80026b8:	2036      	movs	r0, #54	@ 0x36
 80026ba:	f7ff fdf3 	bl	80022a4 <dwt_write32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
 80026be:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80026c2:	60fb      	str	r3, [r7, #12]
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <dwt_setleds+0x9e>
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 80026d4:	60fb      	str	r3, [r7, #12]
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg, antenna_port);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	2128      	movs	r1, #40	@ 0x28
 80026dc:	2036      	movs	r0, #54	@ 0x36
 80026de:	f7ff fde1 	bl	80022a4 <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d01a      	beq.n	8002722 <dwt_setleds+0xea>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80026f2:	60fb      	str	r3, [r7, #12]
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg, antenna_port);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	2128      	movs	r1, #40	@ 0x28
 80026fa:	2036      	movs	r0, #54	@ 0x36
 80026fc:	f7ff fdd2 	bl	80022a4 <dwt_write32bitoffsetreg>
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, antenna_port);
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, antenna_port);
    }
}
 8002700:	e00f      	b.n	8002722 <dwt_setleds+0xea>
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, antenna_port);
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	2100      	movs	r1, #0
 8002706:	2026      	movs	r0, #38	@ 0x26
 8002708:	f7ff fd34 	bl	8002174 <dwt_read32bitoffsetreg>
 800270c:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8002714:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, antenna_port);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	2100      	movs	r1, #0
 800271c:	2026      	movs	r0, #38	@ 0x26
 800271e:	f7ff fdc1 	bl	80022a4 <dwt_write32bitoffsetreg>
}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks, DW1000_Port_t *antenna_port)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af02      	add	r7, sp, #8
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg, antenna_port);
 8002736:	f107 020c 	add.w	r2, r7, #12
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	4613      	mov	r3, r2
 8002740:	2202      	movs	r2, #2
 8002742:	2100      	movs	r1, #0
 8002744:	2036      	movs	r0, #54	@ 0x36
 8002746:	f7ff fcbf 	bl	80020c8 <dwt_readfromdevice>
    switch(clocks)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b0e      	cmp	r3, #14
 800274e:	d876      	bhi.n	800283e <_dwt_enableclocks+0x112>
 8002750:	a201      	add	r2, pc, #4	@ (adr r2, 8002758 <_dwt_enableclocks+0x2c>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	080027a5 	.word	0x080027a5
 800275c:	08002795 	.word	0x08002795
 8002760:	080027bb 	.word	0x080027bb
 8002764:	0800283f 	.word	0x0800283f
 8002768:	0800283f 	.word	0x0800283f
 800276c:	0800283f 	.word	0x0800283f
 8002770:	0800283f 	.word	0x0800283f
 8002774:	080027d1 	.word	0x080027d1
 8002778:	080027f1 	.word	0x080027f1
 800277c:	0800283f 	.word	0x0800283f
 8002780:	0800283f 	.word	0x0800283f
 8002784:	08002807 	.word	0x08002807
 8002788:	08002813 	.word	0x08002813
 800278c:	0800281f 	.word	0x0800281f
 8002790:	08002835 	.word	0x08002835
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8002794:	2300      	movs	r3, #0
 8002796:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8002798:	7b7b      	ldrb	r3, [r7, #13]
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	737b      	strb	r3, [r7, #13]
        }
            break;
 80027a2:	e04d      	b.n	8002840 <_dwt_enableclocks+0x114>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 80027a4:	7b3b      	ldrb	r3, [r7, #12]
 80027a6:	b25b      	sxtb	r3, r3
 80027a8:	f023 0303 	bic.w	r3, r3, #3
 80027ac:	b25b      	sxtb	r3, r3
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	b25b      	sxtb	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	733b      	strb	r3, [r7, #12]
        }
            break;
 80027b8:	e042      	b.n	8002840 <_dwt_enableclocks+0x114>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 80027ba:	7b3b      	ldrb	r3, [r7, #12]
 80027bc:	b25b      	sxtb	r3, r3
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	b25b      	sxtb	r3, r3
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	b25b      	sxtb	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	733b      	strb	r3, [r7, #12]
        }
            break;
 80027ce:	e037      	b.n	8002840 <_dwt_enableclocks+0x114>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 80027d0:	7b3b      	ldrb	r3, [r7, #12]
 80027d2:	b25b      	sxtb	r3, r3
 80027d4:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	f043 0348 	orr.w	r3, r3, #72	@ 0x48
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 80027e4:	7b7b      	ldrb	r3, [r7, #13]
 80027e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	737b      	strb	r3, [r7, #13]
        }
            break;
 80027ee:	e027      	b.n	8002840 <_dwt_enableclocks+0x114>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 80027f0:	7b3b      	ldrb	r3, [r7, #12]
 80027f2:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 80027fa:	7b7b      	ldrb	r3, [r7, #13]
 80027fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002800:	b2db      	uxtb	r3, r3
 8002802:	737b      	strb	r3, [r7, #13]
        }
            break;
 8002804:	e01c      	b.n	8002840 <_dwt_enableclocks+0x114>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8002806:	7b7b      	ldrb	r3, [r7, #13]
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	b2db      	uxtb	r3, r3
 800280e:	737b      	strb	r3, [r7, #13]
        }
            break;
 8002810:	e016      	b.n	8002840 <_dwt_enableclocks+0x114>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8002812:	7b7b      	ldrb	r3, [r7, #13]
 8002814:	f023 0302 	bic.w	r3, r3, #2
 8002818:	b2db      	uxtb	r3, r3
 800281a:	737b      	strb	r3, [r7, #13]
        }
            break;
 800281c:	e010      	b.n	8002840 <_dwt_enableclocks+0x114>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 800281e:	7b3b      	ldrb	r3, [r7, #12]
 8002820:	b25b      	sxtb	r3, r3
 8002822:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002826:	b25b      	sxtb	r3, r3
 8002828:	f043 0320 	orr.w	r3, r3, #32
 800282c:	b25b      	sxtb	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	733b      	strb	r3, [r7, #12]
        }
            break;
 8002832:	e005      	b.n	8002840 <_dwt_enableclocks+0x114>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8002834:	2301      	movs	r3, #1
 8002836:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8002838:	2303      	movs	r3, #3
 800283a:	737b      	strb	r3, [r7, #13]
        }
            break;
 800283c:	e000      	b.n	8002840 <_dwt_enableclocks+0x114>
        default:
            break;
 800283e:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0], antenna_port);
 8002840:	f107 020c 	add.w	r2, r7, #12
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	2201      	movs	r2, #1
 800284c:	2100      	movs	r1, #0
 800284e:	2036      	movs	r0, #54	@ 0x36
 8002850:	f7ff fbe1 	bl	8002016 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1], antenna_port);
 8002854:	f107 030c 	add.w	r3, r7, #12
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	4613      	mov	r3, r2
 8002860:	2201      	movs	r2, #1
 8002862:	2101      	movs	r1, #1
 8002864:	2036      	movs	r0, #54	@ 0x36
 8002866:	f7ff fbd6 	bl	8002016 <dwt_writetodevice>

} // end _dwt_enableclocks()
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop

08002874 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(DW1000_Port_t *antenna_port) // Disable sequencing and go to state "INIT"
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
    _dwt_enableclocks(FORCE_SYS_XTI, antenna_port); // Set system clock to XTI
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	2000      	movs	r0, #0
 8002880:	f7ff ff54 	bl	800272c <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, antenna_port); // Disable PMSC ctrl of RF and RX clk blocks
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	2104      	movs	r1, #4
 800288a:	2036      	movs	r0, #54	@ 0x36
 800288c:	f7ff fcea 	bl	8002264 <dwt_write16bitoffsetreg>
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(DW1000_Port_t *antenna_port)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID, antenna_port) ; // Read set interrupt mask
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	2100      	movs	r1, #0
 80028a4:	200e      	movs	r0, #14
 80028a6:	f7ff fc65 	bl	8002174 <dwt_read32bitoffsetreg>
 80028aa:	60f8      	str	r0, [r7, #12]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon(antenna_port) ;
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f988 	bl	8002bc2 <decamutexon>
 80028b2:	60b8      	str	r0, [r7, #8]

    dwt_write32bitreg(SYS_MASK_ID, 0, antenna_port) ; // Clear interrupt mask - so we don't get any unwanted events
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	2100      	movs	r1, #0
 80028ba:	200e      	movs	r0, #14
 80028bc:	f7ff fcf2 	bl	80022a4 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF, antenna_port) ; // Disable the radio
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2240      	movs	r2, #64	@ 0x40
 80028c4:	2100      	movs	r1, #0
 80028c6:	200d      	movs	r0, #13
 80028c8:	f7ff fcb5 	bl	8002236 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD), antenna_port);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002904 <dwt_forcetrxoff+0x6c>)
 80028d0:	2100      	movs	r1, #0
 80028d2:	200f      	movs	r0, #15
 80028d4:	f7ff fce6 	bl	80022a4 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs(antenna_port);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f817 	bl	800290c <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask, antenna_port) ; // Set interrupt mask to what it was
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	2100      	movs	r1, #0
 80028e4:	200e      	movs	r0, #14
 80028e6:	f7ff fcdd 	bl	80022a4 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat, antenna_port) ;
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	68b8      	ldr	r0, [r7, #8]
 80028ee:	f000 f97c 	bl	8002bea <decamutexoff>
    pdw1000local->wait4resp = 0;
 80028f2:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <dwt_forcetrxoff+0x70>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2200      	movs	r2, #0
 80028f8:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	2427fff8 	.word	0x2427fff8
 8002908:	24000014 	.word	0x24000014

0800290c <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(DW1000_Port_t *antenna_port)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3, antenna_port); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	2103      	movs	r1, #3
 8002918:	200f      	movs	r0, #15
 800291a:	f7ff fc75 	bl	8002208 <dwt_read8bitoffsetreg>
 800291e:	4603      	mov	r3, r0
 8002920:	73fb      	strb	r3, [r7, #15]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8002922:	7bfa      	ldrb	r2, [r7, #15]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8002928:	4053      	eors	r3, r2
 800292a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <dwt_syncrxbufptrs+0x32>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01, antenna_port) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	2103      	movs	r1, #3
 8002938:	200d      	movs	r0, #13
 800293a:	f7ff fc7c 	bl	8002236 <dwt_write8bitoffsetreg>
    }
}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode, DW1000_Port_t *antenna_port)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	d102      	bne.n	8002960 <dwt_rxenable+0x1a>
    {
        dwt_syncrxbufptrs(antenna_port);
 800295a:	6838      	ldr	r0, [r7, #0]
 800295c:	f7ff ffd6 	bl	800290c <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8002960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002964:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <dwt_rxenable+0x32>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8002970:	89fb      	ldrh	r3, [r7, #14]
 8002972:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002976:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp, antenna_port);
 8002978:	89fa      	ldrh	r2, [r7, #14]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2100      	movs	r1, #0
 800297e:	200d      	movs	r0, #13
 8002980:	f7ff fc70 	bl	8002264 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d01d      	beq.n	80029ca <dwt_rxenable+0x84>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3, antenna_port); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	2103      	movs	r1, #3
 8002992:	200f      	movs	r0, #15
 8002994:	f7ff fc38 	bl	8002208 <dwt_read8bitoffsetreg>
 8002998:	4603      	mov	r3, r0
 800299a:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 800299c:	7b7b      	ldrb	r3, [r7, #13]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d011      	beq.n	80029ca <dwt_rxenable+0x84>
        {
            dwt_forcetrxoff(antenna_port); // turn the delayed receive off
 80029a6:	6838      	ldr	r0, [r7, #0]
 80029a8:	f7ff ff76 	bl	8002898 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <dwt_rxenable+0x7e>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB, antenna_port);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029bc:	2100      	movs	r1, #0
 80029be:	200d      	movs	r0, #13
 80029c0:	f7ff fc50 	bl	8002264 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 80029c4:	f04f 33ff 	mov.w	r3, #4294967295
 80029c8:	e000      	b.n	80029cc <dwt_rxenable+0x86>
        }
    }

    return DWT_SUCCESS;
 80029ca:	2300      	movs	r3, #0
} // end dwt_rxenable()
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time, DW1000_Port_t *antenna_port)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3, antenna_port); // Read at offset 3 to get the upper byte only
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	2103      	movs	r1, #3
 80029e4:	2004      	movs	r0, #4
 80029e6:	f7ff fc0f 	bl	8002208 <dwt_read8bitoffsetreg>
 80029ea:	4603      	mov	r3, r0
 80029ec:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d018      	beq.n	8002a26 <dwt_setrxtimeout+0x52>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time, antenna_port) ;
 80029f4:	88fa      	ldrh	r2, [r7, #6]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2100      	movs	r1, #0
 80029fa:	200c      	movs	r0, #12
 80029fc:	f7ff fc32 	bl	8002264 <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	f043 0310 	orr.w	r3, r3, #16
 8002a06:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 8002a08:	4b12      	ldr	r3, [pc, #72]	@ (8002a54 <dwt_setrxtimeout+0x80>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	4b11      	ldr	r3, [pc, #68]	@ (8002a54 <dwt_setrxtimeout+0x80>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002a16:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp, antenna_port); // Write at offset 3 to write the upper byte only
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2103      	movs	r1, #3
 8002a1e:	2004      	movs	r0, #4
 8002a20:	f7ff fc09 	bl	8002236 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp, antenna_port); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 8002a24:	e011      	b.n	8002a4a <dwt_setrxtimeout+0x76>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	f023 0310 	bic.w	r3, r3, #16
 8002a2c:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 8002a2e:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <dwt_setrxtimeout+0x80>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	4b07      	ldr	r3, [pc, #28]	@ (8002a54 <dwt_setrxtimeout+0x80>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002a3c:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp, antenna_port); // Write at offset 3 to write the upper byte only
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2103      	movs	r1, #3
 8002a44:	2004      	movs	r0, #4
 8002a46:	f7ff fbf6 	bl	8002236 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	24000014 	.word	0x24000014

08002a58 <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout, DW1000_Port_t *antenna_port)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	80fb      	strh	r3, [r7, #6]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout, antenna_port);
 8002a64:	88fa      	ldrh	r2, [r7, #6]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2124      	movs	r1, #36	@ 0x24
 8002a6a:	2027      	movs	r0, #39	@ 0x27
 8002a6c:	f7ff fbfa 	bl	8002264 <dwt_write16bitoffsetreg>
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <dwt_setinterrupt>:
 * output parameters
 *
 * no return value
 */
void dwt_setinterrupt(uint32 bitmask, uint8 operation, DW1000_Port_t *antenna_port)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	460b      	mov	r3, r1
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	72fb      	strb	r3, [r7, #11]
    decaIrqStatus_t stat ;
    uint32 mask ;

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    stat = decamutexon(antenna_port) ;
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f89b 	bl	8002bc2 <decamutexon>
 8002a8c:	6138      	str	r0, [r7, #16]

    if(operation == 2)
 8002a8e:	7afb      	ldrb	r3, [r7, #11]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d106      	bne.n	8002aa2 <dwt_setinterrupt+0x2a>
    {
        dwt_write32bitreg(SYS_MASK_ID, bitmask, antenna_port) ; // New value
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	2100      	movs	r1, #0
 8002a9a:	200e      	movs	r0, #14
 8002a9c:	f7ff fc02 	bl	80022a4 <dwt_write32bitoffsetreg>
 8002aa0:	e018      	b.n	8002ad4 <dwt_setinterrupt+0x5c>
    }
    else
    {
        mask = dwt_read32bitreg(SYS_MASK_ID, antenna_port) ; // Read register
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	200e      	movs	r0, #14
 8002aa8:	f7ff fb64 	bl	8002174 <dwt_read32bitoffsetreg>
 8002aac:	6178      	str	r0, [r7, #20]
        if(operation == 1)
 8002aae:	7afb      	ldrb	r3, [r7, #11]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d104      	bne.n	8002abe <dwt_setinterrupt+0x46>
        {
            mask |= bitmask ;
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	e004      	b.n	8002ac8 <dwt_setinterrupt+0x50>
        }
        else
        {
            mask &= ~bitmask ; // Clear the bit
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]
        }
        dwt_write32bitreg(SYS_MASK_ID, mask, antenna_port) ; // New value
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	2100      	movs	r1, #0
 8002ace:	200e      	movs	r0, #14
 8002ad0:	f7ff fbe8 	bl	80022a4 <dwt_write32bitoffsetreg>
    }

    decamutexoff(stat,antenna_port) ;
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	6938      	ldr	r0, [r7, #16]
 8002ad8:	f000 f887 	bl	8002bea <decamutexoff>
}
 8002adc:	bf00      	nop
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(DW1000_Port_t *antenna_port)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX, antenna_port);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	22e0      	movs	r2, #224	@ 0xe0
 8002af0:	2103      	movs	r1, #3
 8002af2:	2036      	movs	r0, #54	@ 0x36
 8002af4:	f7ff fb9f 	bl	8002236 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, antenna_port);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	22f0      	movs	r2, #240	@ 0xf0
 8002afc:	2103      	movs	r1, #3
 8002afe:	2036      	movs	r0, #54	@ 0x36
 8002b00:	f7ff fb99 	bl	8002236 <dwt_write8bitoffsetreg>
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(DW1000_Port_t *antenna_port)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
    _dwt_disablesequencing(antenna_port);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff fead 	bl	8002874 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00, antenna_port);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2100      	movs	r1, #0
 8002b20:	202c      	movs	r0, #44	@ 0x2c
 8002b22:	f7ff fb9f 	bl	8002264 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00, antenna_port);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2106      	movs	r1, #6
 8002b2c:	202c      	movs	r0, #44	@ 0x2c
 8002b2e:	f7ff fb82 	bl	8002236 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload(antenna_port);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff fc04 	bl	8002340 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL, antenna_port);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2103      	movs	r1, #3
 8002b3e:	2036      	movs	r0, #54	@ 0x36
 8002b40:	f7ff fb79 	bl	8002236 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8002b44:	2001      	movs	r0, #1
 8002b46:	f000 f85f 	bl	8002c08 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, antenna_port);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	22f0      	movs	r2, #240	@ 0xf0
 8002b4e:	2103      	movs	r1, #3
 8002b50:	2036      	movs	r0, #54	@ 0x36
 8002b52:	f7ff fb70 	bl	8002236 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8002b56:	4b04      	ldr	r3, [pc, #16]	@ (8002b68 <dwt_softreset+0x5c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	755a      	strb	r2, [r3, #21]
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	24000014 	.word	0x24000014

08002b6c <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value, DW1000_Port_t *antenna_port)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	b25b      	sxtb	r3, r3
 8002b82:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val, antenna_port);
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	210e      	movs	r1, #14
 8002b90:	202b      	movs	r0, #43	@ 0x2b
 8002b92:	f7ff fb50 	bl	8002236 <dwt_write8bitoffsetreg>
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <dwt_setecctrl>:

    *phase = (temp & RX_TTCKO_RCPHASE_MASK) >> 32;
}
// set EC_CTRL OSTRM (One Shot Timebase Reset)
void dwt_setecctrl(uint32_t reg, DW1000_Port_t *antenna_port)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af02      	add	r7, sp, #8
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
    dwt_writetodevice(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_LEN, &reg, antenna_port);
 8002ba8:	1d3a      	adds	r2, r7, #4
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	2024      	movs	r0, #36	@ 0x24
 8002bb6:	f7ff fa2e 	bl	8002016 <dwt_writetodevice>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(DW1000_Port_t *antenna_port)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
	decaIrqStatus_t s = (decaIrqStatus_t)port_GetEXT_IRQStatus(antenna_port);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fa22 	bl	8003014 <port_GetEXT_IRQStatus>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	60fb      	str	r3, [r7, #12]

	if(s) {
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <decamutexon+0x1e>
		port_DisableEXT_IRQ(antenna_port); //disable the external interrupt line
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f9fe 	bl	8002fdc <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8002be0:	68fb      	ldr	r3, [r7, #12]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s, DW1000_Port_t *antenna_port)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <decamutexoff+0x16>
		port_EnableEXT_IRQ(antenna_port);
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	f000 f9fc 	bl	8002ff8 <port_EnableEXT_IRQ>
	}
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8da 	bl	8002dca <Sleep>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <writetospi>:
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer,
               DW1000_Port_t *antenna_port)
{
 8002c20:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	4683      	mov	fp, r0
 8002c28:	468a      	mov	sl, r1
 8002c2a:	4690      	mov	r8, r2
 8002c2c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8002c2e:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    SPI_HandleTypeDef *hspi = antenna_port->hspi;
    stat = decamutexon(antenna_port);
 8002c30:	4630      	mov	r0, r6
    SPI_HandleTypeDef *hspi = antenna_port->hspi;
 8002c32:	6835      	ldr	r5, [r6, #0]
    stat = decamutexon(antenna_port);
 8002c34:	f7ff ffc5 	bl	8002bc2 <decamutexon>
 8002c38:	9001      	str	r0, [sp, #4]

    while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY);
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f004 fb74 	bl	8007328 <HAL_SPI_GetState>
 8002c40:	2801      	cmp	r0, #1
 8002c42:	4604      	mov	r4, r0
 8002c44:	d1f9      	bne.n	8002c3a <writetospi+0x1a>

    HAL_GPIO_WritePin(antenna_port->spi_csn_port, antenna_port->spi_csn_pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8002c46:	8931      	ldrh	r1, [r6, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	6870      	ldr	r0, [r6, #4]
 8002c4c:	f000 fe34 	bl	80038b8 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hspi, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8002c50:	465a      	mov	r2, fp
 8002c52:	4651      	mov	r1, sl
 8002c54:	f04f 33ff 	mov.w	r3, #4294967295
 8002c58:	4628      	mov	r0, r5
 8002c5a:	f003 ff05 	bl	8006a68 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c62:	4649      	mov	r1, r9
 8002c64:	fa1f f288 	uxth.w	r2, r8
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f003 fefd 	bl	8006a68 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(antenna_port->spi_csn_port, antenna_port->spi_csn_pin, GPIO_PIN_SET); /**< Put chip select line high */
 8002c6e:	4622      	mov	r2, r4
 8002c70:	8931      	ldrh	r1, [r6, #8]
 8002c72:	6870      	ldr	r0, [r6, #4]
 8002c74:	f000 fe20 	bl	80038b8 <HAL_GPIO_WritePin>

    decamutexoff(stat, antenna_port);
 8002c78:	9801      	ldr	r0, [sp, #4]
 8002c7a:	4631      	mov	r1, r6
 8002c7c:	f7ff ffb5 	bl	8002bea <decamutexoff>

    return 0;
} // end writetospi()
 8002c80:	2000      	movs	r0, #0
 8002c82:	b002      	add	sp, #8
 8002c84:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08002c88 <readfromspi>:
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer,
                DW1000_Port_t *antenna_port)
{
 8002c88:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	4683      	mov	fp, r0
 8002c90:	468a      	mov	sl, r1
 8002c92:	4690      	mov	r8, r2
 8002c94:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8002c96:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    SPI_HandleTypeDef *hspi = antenna_port->hspi;
    stat = decamutexon(antenna_port) ;
 8002c98:	4630      	mov	r0, r6
    SPI_HandleTypeDef *hspi = antenna_port->hspi;
 8002c9a:	6835      	ldr	r5, [r6, #0]
    stat = decamutexon(antenna_port) ;
 8002c9c:	f7ff ff91 	bl	8002bc2 <decamutexon>
 8002ca0:	9001      	str	r0, [sp, #4]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY);
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	f004 fb40 	bl	8007328 <HAL_SPI_GetState>
 8002ca8:	2801      	cmp	r0, #1
 8002caa:	4604      	mov	r4, r0
 8002cac:	d1f9      	bne.n	8002ca2 <readfromspi+0x1a>

    HAL_GPIO_WritePin(antenna_port->spi_csn_port, antenna_port->spi_csn_pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8002cae:	8931      	ldrh	r1, [r6, #8]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	6870      	ldr	r0, [r6, #4]
 8002cb4:	f000 fe00 	bl	80038b8 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hspi, headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 8002cb8:	465a      	mov	r2, fp
 8002cba:	4651      	mov	r1, sl
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f003 fed1 	bl	8006a68 <HAL_SPI_Transmit>

    HAL_SPI_Receive(hspi, readBuffer, readlength, HAL_MAX_DELAY);
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cca:	4649      	mov	r1, r9
 8002ccc:	fa1f f288 	uxth.w	r2, r8
 8002cd0:	4628      	mov	r0, r5
 8002cd2:	f004 f8b7 	bl	8006e44 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(antenna_port->spi_csn_port, antenna_port->spi_csn_pin, GPIO_PIN_SET); /**< Put chip select line high */
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	8931      	ldrh	r1, [r6, #8]
 8002cda:	6870      	ldr	r0, [r6, #4]
 8002cdc:	f000 fdec 	bl	80038b8 <HAL_GPIO_WritePin>

    decamutexoff(stat, antenna_port);
 8002ce0:	9801      	ldr	r0, [sp, #4]
 8002ce2:	4631      	mov	r1, r6
 8002ce4:	f7ff ff81 	bl	8002bea <decamutexoff>

    return 0;
} // end readfromspi()
 8002ce8:	2000      	movs	r0, #0
 8002cea:	b002      	add	sp, #8
 8002cec:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08002cf0 <__NVIC_EnableIRQ>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	db0b      	blt.n	8002d1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	4907      	ldr	r1, [pc, #28]	@ (8002d28 <__NVIC_EnableIRQ+0x38>)
 8002d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2001      	movs	r0, #1
 8002d12:	fa00 f202 	lsl.w	r2, r0, r2
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <__NVIC_DisableIRQ>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db12      	blt.n	8002d64 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	f003 021f 	and.w	r2, r3, #31
 8002d44:	490a      	ldr	r1, [pc, #40]	@ (8002d70 <__NVIC_DisableIRQ+0x44>)
 8002d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d52:	3320      	adds	r3, #32
 8002d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d58:	f3bf 8f4f 	dsb	sy
}
 8002d5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d5e:	f3bf 8f6f 	isb	sy
}
 8002d62:	bf00      	nop
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000e100 	.word	0xe000e100

08002d74 <usleep>:
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")

int usleep(uint16_t usec)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	80fb      	strh	r3, [r7, #6]
    int i, j;
#pragma GCC ivdep
    for(i = 0; i < usec; i++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	e012      	b.n	8002daa <usleep+0x36>
    {
#pragma GCC ivdep
        for(j = 0; j < 2; j++)
 8002d84:	2300      	movs	r3, #0
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	e004      	b.n	8002d94 <usleep+0x20>
        {
            __NOP();
 8002d8a:	bf00      	nop
            __NOP();
 8002d8c:	bf00      	nop
        for(j = 0; j < 2; j++)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	3301      	adds	r3, #1
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	bfd4      	ite	le
 8002d9a:	2301      	movle	r3, #1
 8002d9c:	2300      	movgt	r3, #0
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f2      	bne.n	8002d8a <usleep+0x16>
    for(i = 0; i < usec; i++)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3301      	adds	r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	bfb4      	ite	lt
 8002db2:	2301      	movlt	r3, #1
 8002db4:	2300      	movge	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e3      	bne.n	8002d84 <usleep+0x10>
        }
    }
    return 0;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f9f0 	bl	80031b8 <HAL_Delay>
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t) x) >> 5UL)] & \
 8002de8:	4a0b      	ldr	r2, [pc, #44]	@ (8002e18 <EXTI_GetITEnStatus+0x38>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t) (1UL << (((uint32_t) x) & 0x1FUL))) == (uint32_t) RESET) ? (RESET) : (SET);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	e000e100 	.word	0xe000e100

08002e1c <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(DW1000_Port_t *antenna_port)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
    //拉低开漏的RESET引脚
    HAL_GPIO_WritePin(antenna_port->rstn_port,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6958      	ldr	r0, [r3, #20]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8b1b      	ldrh	r3, [r3, #24]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f000 fd42 	bl	80038b8 <HAL_GPIO_WritePin>
                      antenna_port->rstn_pin,
                      GPIO_PIN_RESET);

    usleep(1);
 8002e34:	2001      	movs	r0, #1
 8002e36:	f7ff ff9d 	bl	8002d74 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0, antenna_port);
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f000 f807 	bl	8002e50 <setup_DW1000RSTnIRQ>

    Sleep(2);
 8002e42:	2002      	movs	r0, #2
 8002e44:	f7ff ffc1 	bl	8002dca <Sleep>
}
 8002e48:	bf00      	nop
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <setup_DW1000RSTnIRQ>:
 * 主要是用来唤醒DW1000  唤醒后进入init模式  DW1000自动拉高RESET
 * @param enable
 * @param antenna_port
 */
void setup_DW1000RSTnIRQ(int enable, DW1000_Port_t *antenna_port)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
//                      &GPIO_InitStruct);
//        HAL_GPIO_WritePin(antenna_port->rstn_port,
//                          antenna_port->rstn_pin,
//                          GPIO_PIN_SET);
//    }
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <port_set_dw1000_slowrate>:
/**
 * @brief 好像是强制初始化(Init中会关闭SPI) 可能需要加锁(ing)
 * @param antenna_port
 */
void port_set_dw1000_slowrate(DW1000_Port_t *antenna_port)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
    antenna_port->hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e76:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(antenna_port->hspi);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f003 fccf 	bl	8006820 <HAL_SPI_Init>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(DW1000_Port_t *antenna_port)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
    antenna_port->hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e9a:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(antenna_port->hspi);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f003 fcbd 	bl	8006820 <HAL_SPI_Init>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <HAL_GPIO_EXTI_Callback>:
 * 这里需要根据GPIO_Port和GPIO_Pin分辨出是哪个DW1000引起的中断
 * 本函数和不同的引脚连接有关 因此不同的项目移植本函数都要进行修改(还没有想到通用移植办法)
 * @param GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	80fb      	strh	r3, [r7, #6]
    uint8_t pin_index = __builtin_ctz(GPIO_Pin);
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	75fb      	strb	r3, [r7, #23]
    uint32_t syscfg_exticr = SYSCFG->EXTICR[pin_index / 4];
 8002ec6:	4a34      	ldr	r2, [pc, #208]	@ (8002f98 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	3302      	adds	r3, #2
 8002ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed4:	613b      	str	r3, [r7, #16]
    uint8_t port_index = (syscfg_exticr >> (4 * (pin_index % 4))) & 0xFF;
 8002ed6:	7dfb      	ldrb	r3, [r7, #23]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	73fb      	strb	r3, [r7, #15]

	/* 这里的dwt_setlocaldataptr(index)非常重要 index一定要和UWB_device_array[]的索引对上 */
    if(GPIO_Pin == UWB1_IRQ_Pin && (GPIO_PORT_INDEX(UWB1_IRQ_GPIO_Port) == port_index))
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d109      	bne.n	8002f00 <HAL_GPIO_EXTI_Callback+0x50>
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d106      	bne.n	8002f00 <HAL_GPIO_EXTI_Callback+0x50>
    {
        dwt_setlocaldataptr(0);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fe fd3a 	bl	800196c <dwt_setlocaldataptr>
        process_deca_irq(&UWB_device_array[0].port);
 8002ef8:	4828      	ldr	r0, [pc, #160]	@ (8002f9c <HAL_GPIO_EXTI_Callback+0xec>)
 8002efa:	f000 f859 	bl	8002fb0 <process_deca_irq>
 8002efe:	e046      	b.n	8002f8e <HAL_GPIO_EXTI_Callback+0xde>
    }
    else if(GPIO_Pin == UWB2_IRQ_Pin && (GPIO_PORT_INDEX(UWB2_IRQ_GPIO_Port) == port_index))
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f06:	d109      	bne.n	8002f1c <HAL_GPIO_EXTI_Callback+0x6c>
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d106      	bne.n	8002f1c <HAL_GPIO_EXTI_Callback+0x6c>
	{
		dwt_setlocaldataptr(1);
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f7fe fd2c 	bl	800196c <dwt_setlocaldataptr>
		process_deca_irq(&UWB_device_array[1].port);
 8002f14:	4822      	ldr	r0, [pc, #136]	@ (8002fa0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002f16:	f000 f84b 	bl	8002fb0 <process_deca_irq>
 8002f1a:	e038      	b.n	8002f8e <HAL_GPIO_EXTI_Callback+0xde>
	}
	else if(GPIO_Pin == UWB3_IRQ_Pin && (GPIO_PORT_INDEX(UWB3_IRQ_GPIO_Port) == port_index))
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f22:	d109      	bne.n	8002f38 <HAL_GPIO_EXTI_Callback+0x88>
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d106      	bne.n	8002f38 <HAL_GPIO_EXTI_Callback+0x88>
	{
		dwt_setlocaldataptr(2);
 8002f2a:	2002      	movs	r0, #2
 8002f2c:	f7fe fd1e 	bl	800196c <dwt_setlocaldataptr>
		process_deca_irq(&UWB_device_array[2].port);
 8002f30:	481c      	ldr	r0, [pc, #112]	@ (8002fa4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002f32:	f000 f83d 	bl	8002fb0 <process_deca_irq>
 8002f36:	e02a      	b.n	8002f8e <HAL_GPIO_EXTI_Callback+0xde>
	}
	else if(GPIO_Pin == UWB4_IRQ_Pin && (GPIO_PORT_INDEX(UWB4_IRQ_GPIO_Port) == port_index))
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	2b40      	cmp	r3, #64	@ 0x40
 8002f3c:	d109      	bne.n	8002f52 <HAL_GPIO_EXTI_Callback+0xa2>
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d106      	bne.n	8002f52 <HAL_GPIO_EXTI_Callback+0xa2>
	{
		dwt_setlocaldataptr(3);
 8002f44:	2003      	movs	r0, #3
 8002f46:	f7fe fd11 	bl	800196c <dwt_setlocaldataptr>
		process_deca_irq(&UWB_device_array[3].port);
 8002f4a:	4817      	ldr	r0, [pc, #92]	@ (8002fa8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002f4c:	f000 f830 	bl	8002fb0 <process_deca_irq>
 8002f50:	e01d      	b.n	8002f8e <HAL_GPIO_EXTI_Callback+0xde>
	}
    else if((GPIO_Pin == UWB1_RESET_Pin && (GPIO_PORT_INDEX(UWB1_RESET_GPIO_Port) == port_index))
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d102      	bne.n	8002f5e <HAL_GPIO_EXTI_Callback+0xae>
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d013      	beq.n	8002f86 <HAL_GPIO_EXTI_Callback+0xd6>
			|| (GPIO_Pin == UWB2_RESET_Pin && (GPIO_PORT_INDEX(UWB2_RESET_GPIO_Port) == port_index))
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f64:	d102      	bne.n	8002f6c <HAL_GPIO_EXTI_Callback+0xbc>
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d00c      	beq.n	8002f86 <HAL_GPIO_EXTI_Callback+0xd6>
				|| (GPIO_Pin == UWB3_RESET_Pin && (GPIO_PORT_INDEX(UWB3_RESET_GPIO_Port) == port_index))
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f72:	d102      	bne.n	8002f7a <HAL_GPIO_EXTI_Callback+0xca>
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d005      	beq.n	8002f86 <HAL_GPIO_EXTI_Callback+0xd6>
					|| (GPIO_Pin == UWB4_RESET_Pin && (GPIO_PORT_INDEX(UWB4_RESET_GPIO_Port) == port_index)))
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	2b80      	cmp	r3, #128	@ 0x80
 8002f7e:	d106      	bne.n	8002f8e <HAL_GPIO_EXTI_Callback+0xde>
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d103      	bne.n	8002f8e <HAL_GPIO_EXTI_Callback+0xde>
    {
        signalResetDone = 1;
 8002f86:	4b09      	ldr	r3, [pc, #36]	@ (8002fac <HAL_GPIO_EXTI_Callback+0xfc>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
    }
}
 8002f8c:	e7ff      	b.n	8002f8e <HAL_GPIO_EXTI_Callback+0xde>
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	58000400 	.word	0x58000400
 8002f9c:	24000098 	.word	0x24000098
 8002fa0:	240001cc 	.word	0x240001cc
 8002fa4:	24000300 	.word	0x24000300
 8002fa8:	24000434 	.word	0x24000434
 8002fac:	2400087c 	.word	0x2400087c

08002fb0 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(DW1000_Port_t *antenna_port)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
    while(port_CheckEXT_IRQ(antenna_port) != 0)
 8002fb8:	e003      	b.n	8002fc2 <process_deca_irq+0x12>
    {

        port_deca_isr(antenna_port);
 8002fba:	4b07      	ldr	r3, [pc, #28]	@ (8002fd8 <process_deca_irq+0x28>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	4798      	blx	r3
    while(port_CheckEXT_IRQ(antenna_port) != 0)
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f834 	bl	8003030 <port_CheckEXT_IRQ>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f5      	bne.n	8002fba <process_deca_irq+0xa>

    } //while DW1000 IRQ line active
}
 8002fce:	bf00      	nop
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	24000880 	.word	0x24000880

08002fdc <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(DW1000_Port_t *antenna_port)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(antenna_port->irq);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	b21b      	sxth	r3, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fe9e 	bl	8002d2c <__NVIC_DisableIRQ>
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(DW1000_Port_t *antenna_port)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(antenna_port->irq);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	b21b      	sxth	r3, r3
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fe72 	bl	8002cf0 <__NVIC_EnableIRQ>
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(DW1000_Port_t *antenna_port)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
    return EXTI_GetITEnStatus(antenna_port->irq);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fedd 	bl	8002de0 <EXTI_GetITEnStatus>
 8003026:	4603      	mov	r3, r0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(DW1000_Port_t *antenna_port)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(antenna_port->irq_port,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	8c1b      	ldrh	r3, [r3, #32]
 8003040:	4619      	mov	r1, r3
 8003042:	4610      	mov	r0, r2
 8003044:	f000 fc20 	bl	8003888 <HAL_GPIO_ReadPin>
 8003048:	4603      	mov	r3, r0
                            antenna_port->irq_pin);
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <port_set_deca_isr>:
 * @param deca_isr function pointer to DW1000 interrupt handler to install
 *
 * @return none
 */
void port_set_deca_isr(port_deca_isr_t deca_isr, DW1000_Port_t *antenna_port)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
    /* Check DW1000 IRQ activation status. */
    ITStatus en = port_GetEXT_IRQStatus(antenna_port);
 800305e:	6838      	ldr	r0, [r7, #0]
 8003060:	f7ff ffd8 	bl	8003014 <port_GetEXT_IRQStatus>
 8003064:	4603      	mov	r3, r0
 8003066:	73fb      	strb	r3, [r7, #15]

    /* If needed, deactivate DW1000 IRQ during the installation of the new handler. */
    if(en)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <port_set_deca_isr+0x20>
    {
        port_DisableEXT_IRQ(antenna_port);
 800306e:	6838      	ldr	r0, [r7, #0]
 8003070:	f7ff ffb4 	bl	8002fdc <port_DisableEXT_IRQ>
    }
    port_deca_isr = deca_isr;
 8003074:	4a06      	ldr	r2, [pc, #24]	@ (8003090 <port_set_deca_isr+0x3c>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6013      	str	r3, [r2, #0]
    if(en)
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <port_set_deca_isr+0x32>
    {
        port_EnableEXT_IRQ(antenna_port);
 8003080:	6838      	ldr	r0, [r7, #0]
 8003082:	f7ff ffb9 	bl	8002ff8 <port_EnableEXT_IRQ>
    }
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	24000880 	.word	0x24000880

08003094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800309a:	2003      	movs	r0, #3
 800309c:	f000 f98c 	bl	80033b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030a0:	f001 fbbc 	bl	800481c <HAL_RCC_GetSysClockFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b15      	ldr	r3, [pc, #84]	@ (80030fc <HAL_Init+0x68>)
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	0a1b      	lsrs	r3, r3, #8
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	4913      	ldr	r1, [pc, #76]	@ (8003100 <HAL_Init+0x6c>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
 80030bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030be:	4b0f      	ldr	r3, [pc, #60]	@ (80030fc <HAL_Init+0x68>)
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003100 <HAL_Init+0x6c>)
 80030c8:	5cd3      	ldrb	r3, [r2, r3]
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
 80030d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003104 <HAL_Init+0x70>)
 80030d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003108 <HAL_Init+0x74>)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030de:	200f      	movs	r0, #15
 80030e0:	f000 f814 	bl	800310c <HAL_InitTick>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e002      	b.n	80030f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80030ee:	f7fd fec9 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	58024400 	.word	0x58024400
 8003100:	080094e4 	.word	0x080094e4
 8003104:	24000004 	.word	0x24000004
 8003108:	24000000 	.word	0x24000000

0800310c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003114:	4b15      	ldr	r3, [pc, #84]	@ (800316c <HAL_InitTick+0x60>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e021      	b.n	8003164 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003120:	4b13      	ldr	r3, [pc, #76]	@ (8003170 <HAL_InitTick+0x64>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b11      	ldr	r3, [pc, #68]	@ (800316c <HAL_InitTick+0x60>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	4619      	mov	r1, r3
 800312a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800312e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003132:	fbb2 f3f3 	udiv	r3, r2, r3
 8003136:	4618      	mov	r0, r3
 8003138:	f000 f971 	bl	800341e <HAL_SYSTICK_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e00e      	b.n	8003164 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b0f      	cmp	r3, #15
 800314a:	d80a      	bhi.n	8003162 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800314c:	2200      	movs	r2, #0
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	f04f 30ff 	mov.w	r0, #4294967295
 8003154:	f000 f93b 	bl	80033ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003158:	4a06      	ldr	r2, [pc, #24]	@ (8003174 <HAL_InitTick+0x68>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e000      	b.n	8003164 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	2400001c 	.word	0x2400001c
 8003170:	24000000 	.word	0x24000000
 8003174:	24000018 	.word	0x24000018

08003178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800317c:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <HAL_IncTick+0x20>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	4b06      	ldr	r3, [pc, #24]	@ (800319c <HAL_IncTick+0x24>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4413      	add	r3, r2
 8003188:	4a04      	ldr	r2, [pc, #16]	@ (800319c <HAL_IncTick+0x24>)
 800318a:	6013      	str	r3, [r2, #0]
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	2400001c 	.word	0x2400001c
 800319c:	24000884 	.word	0x24000884

080031a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return uwTick;
 80031a4:	4b03      	ldr	r3, [pc, #12]	@ (80031b4 <HAL_GetTick+0x14>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	24000884 	.word	0x24000884

080031b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031c0:	f7ff ffee 	bl	80031a0 <HAL_GetTick>
 80031c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d005      	beq.n	80031de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031d2:	4b0a      	ldr	r3, [pc, #40]	@ (80031fc <HAL_Delay+0x44>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4413      	add	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031de:	bf00      	nop
 80031e0:	f7ff ffde 	bl	80031a0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d8f7      	bhi.n	80031e0 <HAL_Delay+0x28>
  {
  }
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	2400001c 	.word	0x2400001c

08003200 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003204:	4b03      	ldr	r3, [pc, #12]	@ (8003214 <HAL_GetREVID+0x14>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	0c1b      	lsrs	r3, r3, #16
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	5c001000 	.word	0x5c001000

08003218 <__NVIC_SetPriorityGrouping>:
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003228:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <__NVIC_SetPriorityGrouping+0x40>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003234:	4013      	ands	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003240:	4b06      	ldr	r3, [pc, #24]	@ (800325c <__NVIC_SetPriorityGrouping+0x44>)
 8003242:	4313      	orrs	r3, r2
 8003244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003246:	4a04      	ldr	r2, [pc, #16]	@ (8003258 <__NVIC_SetPriorityGrouping+0x40>)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	60d3      	str	r3, [r2, #12]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000ed00 	.word	0xe000ed00
 800325c:	05fa0000 	.word	0x05fa0000

08003260 <__NVIC_GetPriorityGrouping>:
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003264:	4b04      	ldr	r3, [pc, #16]	@ (8003278 <__NVIC_GetPriorityGrouping+0x18>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 0307 	and.w	r3, r3, #7
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <__NVIC_EnableIRQ>:
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800328a:	2b00      	cmp	r3, #0
 800328c:	db0b      	blt.n	80032a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	f003 021f 	and.w	r2, r3, #31
 8003294:	4907      	ldr	r1, [pc, #28]	@ (80032b4 <__NVIC_EnableIRQ+0x38>)
 8003296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2001      	movs	r0, #1
 800329e:	fa00 f202 	lsl.w	r2, r0, r2
 80032a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000e100 	.word	0xe000e100

080032b8 <__NVIC_SetPriority>:
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	db0a      	blt.n	80032e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	490c      	ldr	r1, [pc, #48]	@ (8003304 <__NVIC_SetPriority+0x4c>)
 80032d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032d6:	0112      	lsls	r2, r2, #4
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	440b      	add	r3, r1
 80032dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80032e0:	e00a      	b.n	80032f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4908      	ldr	r1, [pc, #32]	@ (8003308 <__NVIC_SetPriority+0x50>)
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	3b04      	subs	r3, #4
 80032f0:	0112      	lsls	r2, r2, #4
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	440b      	add	r3, r1
 80032f6:	761a      	strb	r2, [r3, #24]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000e100 	.word	0xe000e100
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <NVIC_EncodePriority>:
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	@ 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f1c3 0307 	rsb	r3, r3, #7
 8003326:	2b04      	cmp	r3, #4
 8003328:	bf28      	it	cs
 800332a:	2304      	movcs	r3, #4
 800332c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3304      	adds	r3, #4
 8003332:	2b06      	cmp	r3, #6
 8003334:	d902      	bls.n	800333c <NVIC_EncodePriority+0x30>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3b03      	subs	r3, #3
 800333a:	e000      	b.n	800333e <NVIC_EncodePriority+0x32>
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	f04f 32ff 	mov.w	r2, #4294967295
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	401a      	ands	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003354:	f04f 31ff 	mov.w	r1, #4294967295
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	43d9      	mvns	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	4313      	orrs	r3, r2
}
 8003366:	4618      	mov	r0, r3
 8003368:	3724      	adds	r7, #36	@ 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003384:	d301      	bcc.n	800338a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003386:	2301      	movs	r3, #1
 8003388:	e00f      	b.n	80033aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800338a:	4a0a      	ldr	r2, [pc, #40]	@ (80033b4 <SysTick_Config+0x40>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003392:	210f      	movs	r1, #15
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	f7ff ff8e 	bl	80032b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800339c:	4b05      	ldr	r3, [pc, #20]	@ (80033b4 <SysTick_Config+0x40>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a2:	4b04      	ldr	r3, [pc, #16]	@ (80033b4 <SysTick_Config+0x40>)
 80033a4:	2207      	movs	r2, #7
 80033a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	e000e010 	.word	0xe000e010

080033b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff29 	bl	8003218 <__NVIC_SetPriorityGrouping>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033dc:	f7ff ff40 	bl	8003260 <__NVIC_GetPriorityGrouping>
 80033e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	6978      	ldr	r0, [r7, #20]
 80033e8:	f7ff ff90 	bl	800330c <NVIC_EncodePriority>
 80033ec:	4602      	mov	r2, r0
 80033ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ff5f 	bl	80032b8 <__NVIC_SetPriority>
}
 80033fa:	bf00      	nop
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800340c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff33 	bl	800327c <__NVIC_EnableIRQ>
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ffa4 	bl	8003374 <SysTick_Config>
 800342c:	4603      	mov	r3, r0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800343c:	f3bf 8f5f 	dmb	sy
}
 8003440:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003442:	4b07      	ldr	r3, [pc, #28]	@ (8003460 <HAL_MPU_Disable+0x28>)
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	4a06      	ldr	r2, [pc, #24]	@ (8003460 <HAL_MPU_Disable+0x28>)
 8003448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800344c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800344e:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <HAL_MPU_Disable+0x2c>)
 8003450:	2200      	movs	r2, #0
 8003452:	605a      	str	r2, [r3, #4]
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	e000ed00 	.word	0xe000ed00
 8003464:	e000ed90 	.word	0xe000ed90

08003468 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003470:	4a0b      	ldr	r2, [pc, #44]	@ (80034a0 <HAL_MPU_Enable+0x38>)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800347a:	4b0a      	ldr	r3, [pc, #40]	@ (80034a4 <HAL_MPU_Enable+0x3c>)
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	4a09      	ldr	r2, [pc, #36]	@ (80034a4 <HAL_MPU_Enable+0x3c>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003484:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003486:	f3bf 8f4f 	dsb	sy
}
 800348a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800348c:	f3bf 8f6f 	isb	sy
}
 8003490:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	e000ed90 	.word	0xe000ed90
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	785a      	ldrb	r2, [r3, #1]
 80034b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003524 <HAL_MPU_ConfigRegion+0x7c>)
 80034b6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80034b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003524 <HAL_MPU_ConfigRegion+0x7c>)
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	4a19      	ldr	r2, [pc, #100]	@ (8003524 <HAL_MPU_ConfigRegion+0x7c>)
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80034c4:	4a17      	ldr	r2, [pc, #92]	@ (8003524 <HAL_MPU_ConfigRegion+0x7c>)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	7b1b      	ldrb	r3, [r3, #12]
 80034d0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7adb      	ldrb	r3, [r3, #11]
 80034d6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	7a9b      	ldrb	r3, [r3, #10]
 80034de:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80034e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	7b5b      	ldrb	r3, [r3, #13]
 80034e6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80034e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	7b9b      	ldrb	r3, [r3, #14]
 80034ee:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80034f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	7bdb      	ldrb	r3, [r3, #15]
 80034f6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80034f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7a5b      	ldrb	r3, [r3, #9]
 80034fe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003500:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	7a1b      	ldrb	r3, [r3, #8]
 8003506:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003508:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	7812      	ldrb	r2, [r2, #0]
 800350e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003510:	4a04      	ldr	r2, [pc, #16]	@ (8003524 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003512:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003514:	6113      	str	r3, [r2, #16]
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000ed90 	.word	0xe000ed90

08003528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	@ 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003536:	4b89      	ldr	r3, [pc, #548]	@ (800375c <HAL_GPIO_Init+0x234>)
 8003538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800353a:	e194      	b.n	8003866 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	2101      	movs	r1, #1
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8186 	beq.w	8003860 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d005      	beq.n	800356c <HAL_GPIO_Init+0x44>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d130      	bne.n	80035ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	2203      	movs	r2, #3
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035a2:	2201      	movs	r2, #1
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	091b      	lsrs	r3, r3, #4
 80035b8:	f003 0201 	and.w	r2, r3, #1
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d017      	beq.n	800360a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	2203      	movs	r2, #3
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d123      	bne.n	800365e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	08da      	lsrs	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3208      	adds	r2, #8
 800361e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	220f      	movs	r2, #15
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	08da      	lsrs	r2, r3, #3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3208      	adds	r2, #8
 8003658:	69b9      	ldr	r1, [r7, #24]
 800365a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	2203      	movs	r2, #3
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0203 	and.w	r2, r3, #3
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80e0 	beq.w	8003860 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003760 <HAL_GPIO_Init+0x238>)
 80036a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003760 <HAL_GPIO_Init+0x238>)
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80036b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003760 <HAL_GPIO_Init+0x238>)
 80036b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036be:	4a29      	ldr	r2, [pc, #164]	@ (8003764 <HAL_GPIO_Init+0x23c>)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	089b      	lsrs	r3, r3, #2
 80036c4:	3302      	adds	r3, #2
 80036c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	220f      	movs	r2, #15
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4013      	ands	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a20      	ldr	r2, [pc, #128]	@ (8003768 <HAL_GPIO_Init+0x240>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d052      	beq.n	8003790 <HAL_GPIO_Init+0x268>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a1f      	ldr	r2, [pc, #124]	@ (800376c <HAL_GPIO_Init+0x244>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d031      	beq.n	8003756 <HAL_GPIO_Init+0x22e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003770 <HAL_GPIO_Init+0x248>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d02b      	beq.n	8003752 <HAL_GPIO_Init+0x22a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003774 <HAL_GPIO_Init+0x24c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d025      	beq.n	800374e <HAL_GPIO_Init+0x226>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a1c      	ldr	r2, [pc, #112]	@ (8003778 <HAL_GPIO_Init+0x250>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01f      	beq.n	800374a <HAL_GPIO_Init+0x222>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1b      	ldr	r2, [pc, #108]	@ (800377c <HAL_GPIO_Init+0x254>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d019      	beq.n	8003746 <HAL_GPIO_Init+0x21e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a1a      	ldr	r2, [pc, #104]	@ (8003780 <HAL_GPIO_Init+0x258>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_GPIO_Init+0x21a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a19      	ldr	r2, [pc, #100]	@ (8003784 <HAL_GPIO_Init+0x25c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00d      	beq.n	800373e <HAL_GPIO_Init+0x216>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a18      	ldr	r2, [pc, #96]	@ (8003788 <HAL_GPIO_Init+0x260>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <HAL_GPIO_Init+0x212>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a17      	ldr	r2, [pc, #92]	@ (800378c <HAL_GPIO_Init+0x264>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_GPIO_Init+0x20e>
 8003732:	2309      	movs	r3, #9
 8003734:	e02d      	b.n	8003792 <HAL_GPIO_Init+0x26a>
 8003736:	230a      	movs	r3, #10
 8003738:	e02b      	b.n	8003792 <HAL_GPIO_Init+0x26a>
 800373a:	2308      	movs	r3, #8
 800373c:	e029      	b.n	8003792 <HAL_GPIO_Init+0x26a>
 800373e:	2307      	movs	r3, #7
 8003740:	e027      	b.n	8003792 <HAL_GPIO_Init+0x26a>
 8003742:	2306      	movs	r3, #6
 8003744:	e025      	b.n	8003792 <HAL_GPIO_Init+0x26a>
 8003746:	2305      	movs	r3, #5
 8003748:	e023      	b.n	8003792 <HAL_GPIO_Init+0x26a>
 800374a:	2304      	movs	r3, #4
 800374c:	e021      	b.n	8003792 <HAL_GPIO_Init+0x26a>
 800374e:	2303      	movs	r3, #3
 8003750:	e01f      	b.n	8003792 <HAL_GPIO_Init+0x26a>
 8003752:	2302      	movs	r3, #2
 8003754:	e01d      	b.n	8003792 <HAL_GPIO_Init+0x26a>
 8003756:	2301      	movs	r3, #1
 8003758:	e01b      	b.n	8003792 <HAL_GPIO_Init+0x26a>
 800375a:	bf00      	nop
 800375c:	58000080 	.word	0x58000080
 8003760:	58024400 	.word	0x58024400
 8003764:	58000400 	.word	0x58000400
 8003768:	58020000 	.word	0x58020000
 800376c:	58020400 	.word	0x58020400
 8003770:	58020800 	.word	0x58020800
 8003774:	58020c00 	.word	0x58020c00
 8003778:	58021000 	.word	0x58021000
 800377c:	58021400 	.word	0x58021400
 8003780:	58021800 	.word	0x58021800
 8003784:	58021c00 	.word	0x58021c00
 8003788:	58022000 	.word	0x58022000
 800378c:	58022400 	.word	0x58022400
 8003790:	2300      	movs	r3, #0
 8003792:	69fa      	ldr	r2, [r7, #28]
 8003794:	f002 0203 	and.w	r2, r2, #3
 8003798:	0092      	lsls	r2, r2, #2
 800379a:	4093      	lsls	r3, r2
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037a2:	4938      	ldr	r1, [pc, #224]	@ (8003884 <HAL_GPIO_Init+0x35c>)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	3302      	adds	r3, #2
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80037d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003804:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	43db      	mvns	r3, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3301      	adds	r3, #1
 8003864:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	f47f ae63 	bne.w	800353c <HAL_GPIO_Init+0x14>
  }
}
 8003876:	bf00      	nop
 8003878:	bf00      	nop
 800387a:	3724      	adds	r7, #36	@ 0x24
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	58000400 	.word	0x58000400

08003888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	887b      	ldrh	r3, [r7, #2]
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
 80038a4:	e001      	b.n	80038aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038a6:	2300      	movs	r3, #0
 80038a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	807b      	strh	r3, [r7, #2]
 80038c4:	4613      	mov	r3, r2
 80038c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038c8:	787b      	ldrb	r3, [r7, #1]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ce:	887a      	ldrh	r2, [r7, #2]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80038d4:	e003      	b.n	80038de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038d6:	887b      	ldrh	r3, [r7, #2]
 80038d8:	041a      	lsls	r2, r3, #16
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	619a      	str	r2, [r3, #24]
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	4603      	mov	r3, r0
 80038f2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80038f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003904:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff facd 	bl	8002eb0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e08b      	b.n	8003a4a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fc ffe4 	bl	8000914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2224      	movs	r2, #36	@ 0x24
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003970:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003980:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d107      	bne.n	800399a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	e006      	b.n	80039a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80039a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d108      	bne.n	80039c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039be:	605a      	str	r2, [r3, #4]
 80039c0:	e007      	b.n	80039d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a54 <HAL_I2C_Init+0x134>)
 80039de:	430b      	orrs	r3, r1
 80039e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69d9      	ldr	r1, [r3, #28]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	02008000 	.word	0x02008000

08003a58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d138      	bne.n	8003ae0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e032      	b.n	8003ae2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2224      	movs	r2, #36	@ 0x24
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6819      	ldr	r1, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b085      	sub	sp, #20
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d139      	bne.n	8003b78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e033      	b.n	8003b7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2224      	movs	r2, #36	@ 0x24
 8003b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	e000      	b.n	8003b7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
  }
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003b90:	4b19      	ldr	r3, [pc, #100]	@ (8003bf8 <HAL_PWREx_ConfigSupply+0x70>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b9c:	4b16      	ldr	r3, [pc, #88]	@ (8003bf8 <HAL_PWREx_ConfigSupply+0x70>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d001      	beq.n	8003bae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e01f      	b.n	8003bee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e01d      	b.n	8003bee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003bb2:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <HAL_PWREx_ConfigSupply+0x70>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f023 0207 	bic.w	r2, r3, #7
 8003bba:	490f      	ldr	r1, [pc, #60]	@ (8003bf8 <HAL_PWREx_ConfigSupply+0x70>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003bc2:	f7ff faed 	bl	80031a0 <HAL_GetTick>
 8003bc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bc8:	e009      	b.n	8003bde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bca:	f7ff fae9 	bl	80031a0 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bd8:	d901      	bls.n	8003bde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e007      	b.n	8003bee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_PWREx_ConfigSupply+0x70>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bea:	d1ee      	bne.n	8003bca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	58024800 	.word	0x58024800

08003bfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	@ 0x30
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f000 bc48 	b.w	80044a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8088 	beq.w	8003d2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1e:	4b99      	ldr	r3, [pc, #612]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c28:	4b96      	ldr	r3, [pc, #600]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d007      	beq.n	8003c44 <HAL_RCC_OscConfig+0x48>
 8003c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c36:	2b18      	cmp	r3, #24
 8003c38:	d111      	bne.n	8003c5e <HAL_RCC_OscConfig+0x62>
 8003c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d10c      	bne.n	8003c5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c44:	4b8f      	ldr	r3, [pc, #572]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d06d      	beq.n	8003d2c <HAL_RCC_OscConfig+0x130>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d169      	bne.n	8003d2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f000 bc21 	b.w	80044a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x7a>
 8003c68:	4b86      	ldr	r3, [pc, #536]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a85      	ldr	r2, [pc, #532]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	e02e      	b.n	8003cd4 <HAL_RCC_OscConfig+0xd8>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x9c>
 8003c7e:	4b81      	ldr	r3, [pc, #516]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a80      	ldr	r2, [pc, #512]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b7e      	ldr	r3, [pc, #504]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a7d      	ldr	r2, [pc, #500]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e01d      	b.n	8003cd4 <HAL_RCC_OscConfig+0xd8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0xc0>
 8003ca2:	4b78      	ldr	r3, [pc, #480]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a77      	ldr	r2, [pc, #476]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	4b75      	ldr	r3, [pc, #468]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a74      	ldr	r2, [pc, #464]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCC_OscConfig+0xd8>
 8003cbc:	4b71      	ldr	r3, [pc, #452]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a70      	ldr	r2, [pc, #448]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	4b6e      	ldr	r3, [pc, #440]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a6d      	ldr	r2, [pc, #436]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d013      	beq.n	8003d04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7ff fa60 	bl	80031a0 <HAL_GetTick>
 8003ce0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7ff fa5c 	bl	80031a0 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	@ 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e3d4      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cf6:	4b63      	ldr	r3, [pc, #396]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0xe8>
 8003d02:	e014      	b.n	8003d2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7ff fa4c 	bl	80031a0 <HAL_GetTick>
 8003d08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7ff fa48 	bl	80031a0 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	@ 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e3c0      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d1e:	4b59      	ldr	r3, [pc, #356]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x110>
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80ca 	beq.w	8003ed0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3c:	4b51      	ldr	r3, [pc, #324]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d46:	4b4f      	ldr	r3, [pc, #316]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d007      	beq.n	8003d62 <HAL_RCC_OscConfig+0x166>
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	2b18      	cmp	r3, #24
 8003d56:	d156      	bne.n	8003e06 <HAL_RCC_OscConfig+0x20a>
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d151      	bne.n	8003e06 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d62:	4b48      	ldr	r3, [pc, #288]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_RCC_OscConfig+0x17e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e392      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d7a:	4b42      	ldr	r3, [pc, #264]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 0219 	bic.w	r2, r3, #25
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	493f      	ldr	r1, [pc, #252]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7ff fa08 	bl	80031a0 <HAL_GetTick>
 8003d90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d94:	f7ff fa04 	bl	80031a0 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e37c      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003da6:	4b37      	ldr	r3, [pc, #220]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db2:	f7ff fa25 	bl	8003200 <HAL_GetREVID>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d817      	bhi.n	8003df0 <HAL_RCC_OscConfig+0x1f4>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b40      	cmp	r3, #64	@ 0x40
 8003dc6:	d108      	bne.n	8003dda <HAL_RCC_OscConfig+0x1de>
 8003dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dd6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dd8:	e07a      	b.n	8003ed0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dda:	4b2a      	ldr	r3, [pc, #168]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	031b      	lsls	r3, r3, #12
 8003de8:	4926      	ldr	r1, [pc, #152]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dee:	e06f      	b.n	8003ed0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df0:	4b24      	ldr	r3, [pc, #144]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	4921      	ldr	r1, [pc, #132]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e04:	e064      	b.n	8003ed0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d047      	beq.n	8003e9e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 0219 	bic.w	r2, r3, #25
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	491a      	ldr	r1, [pc, #104]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7ff f9be 	bl	80031a0 <HAL_GetTick>
 8003e24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e28:	f7ff f9ba 	bl	80031a0 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e332      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e3a:	4b12      	ldr	r3, [pc, #72]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e46:	f7ff f9db 	bl	8003200 <HAL_GetREVID>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d819      	bhi.n	8003e88 <HAL_RCC_OscConfig+0x28c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b40      	cmp	r3, #64	@ 0x40
 8003e5a:	d108      	bne.n	8003e6e <HAL_RCC_OscConfig+0x272>
 8003e5c:	4b09      	ldr	r3, [pc, #36]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003e64:	4a07      	ldr	r2, [pc, #28]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e6a:	6053      	str	r3, [r2, #4]
 8003e6c:	e030      	b.n	8003ed0 <HAL_RCC_OscConfig+0x2d4>
 8003e6e:	4b05      	ldr	r3, [pc, #20]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	031b      	lsls	r3, r3, #12
 8003e7c:	4901      	ldr	r1, [pc, #4]	@ (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	604b      	str	r3, [r1, #4]
 8003e82:	e025      	b.n	8003ed0 <HAL_RCC_OscConfig+0x2d4>
 8003e84:	58024400 	.word	0x58024400
 8003e88:	4b9a      	ldr	r3, [pc, #616]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	061b      	lsls	r3, r3, #24
 8003e96:	4997      	ldr	r1, [pc, #604]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
 8003e9c:	e018      	b.n	8003ed0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e9e:	4b95      	ldr	r3, [pc, #596]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a94      	ldr	r2, [pc, #592]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eaa:	f7ff f979 	bl	80031a0 <HAL_GetTick>
 8003eae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb2:	f7ff f975 	bl	80031a0 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e2ed      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ec4:	4b8b      	ldr	r3, [pc, #556]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f0      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80a9 	beq.w	8004030 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ede:	4b85      	ldr	r3, [pc, #532]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ee6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ee8:	4b82      	ldr	r3, [pc, #520]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d007      	beq.n	8003f04 <HAL_RCC_OscConfig+0x308>
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b18      	cmp	r3, #24
 8003ef8:	d13a      	bne.n	8003f70 <HAL_RCC_OscConfig+0x374>
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d135      	bne.n	8003f70 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f04:	4b7b      	ldr	r3, [pc, #492]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_OscConfig+0x320>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	2b80      	cmp	r3, #128	@ 0x80
 8003f16:	d001      	beq.n	8003f1c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e2c1      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f1c:	f7ff f970 	bl	8003200 <HAL_GetREVID>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d817      	bhi.n	8003f5a <HAL_RCC_OscConfig+0x35e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	d108      	bne.n	8003f44 <HAL_RCC_OscConfig+0x348>
 8003f32:	4b70      	ldr	r3, [pc, #448]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003f3a:	4a6e      	ldr	r2, [pc, #440]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003f3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f40:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f42:	e075      	b.n	8004030 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f44:	4b6b      	ldr	r3, [pc, #428]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	069b      	lsls	r3, r3, #26
 8003f52:	4968      	ldr	r1, [pc, #416]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f58:	e06a      	b.n	8004030 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f5a:	4b66      	ldr	r3, [pc, #408]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	061b      	lsls	r3, r3, #24
 8003f68:	4962      	ldr	r1, [pc, #392]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f6e:	e05f      	b.n	8004030 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d042      	beq.n	8003ffe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003f78:	4b5e      	ldr	r3, [pc, #376]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a5d      	ldr	r2, [pc, #372]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7ff f90c 	bl	80031a0 <HAL_GetTick>
 8003f88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f8c:	f7ff f908 	bl	80031a0 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e280      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f9e:	4b55      	ldr	r3, [pc, #340]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003faa:	f7ff f929 	bl	8003200 <HAL_GetREVID>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d817      	bhi.n	8003fe8 <HAL_RCC_OscConfig+0x3ec>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d108      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x3d6>
 8003fc0:	4b4c      	ldr	r3, [pc, #304]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003fc8:	4a4a      	ldr	r2, [pc, #296]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003fca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fce:	6053      	str	r3, [r2, #4]
 8003fd0:	e02e      	b.n	8004030 <HAL_RCC_OscConfig+0x434>
 8003fd2:	4b48      	ldr	r3, [pc, #288]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	069b      	lsls	r3, r3, #26
 8003fe0:	4944      	ldr	r1, [pc, #272]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	604b      	str	r3, [r1, #4]
 8003fe6:	e023      	b.n	8004030 <HAL_RCC_OscConfig+0x434>
 8003fe8:	4b42      	ldr	r3, [pc, #264]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	493f      	ldr	r1, [pc, #252]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60cb      	str	r3, [r1, #12]
 8003ffc:	e018      	b.n	8004030 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a3c      	ldr	r2, [pc, #240]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8004004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400a:	f7ff f8c9 	bl	80031a0 <HAL_GetTick>
 800400e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004012:	f7ff f8c5 	bl	80031a0 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e23d      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004024:	4b33      	ldr	r3, [pc, #204]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f0      	bne.n	8004012 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d036      	beq.n	80040aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d019      	beq.n	8004078 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004044:	4b2b      	ldr	r3, [pc, #172]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 8004046:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004048:	4a2a      	ldr	r2, [pc, #168]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004050:	f7ff f8a6 	bl	80031a0 <HAL_GetTick>
 8004054:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004058:	f7ff f8a2 	bl	80031a0 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e21a      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800406a:	4b22      	ldr	r3, [pc, #136]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 800406c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0x45c>
 8004076:	e018      	b.n	80040aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004078:	4b1e      	ldr	r3, [pc, #120]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 800407a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800407c:	4a1d      	ldr	r2, [pc, #116]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 800407e:	f023 0301 	bic.w	r3, r3, #1
 8004082:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004084:	f7ff f88c 	bl	80031a0 <HAL_GetTick>
 8004088:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800408c:	f7ff f888 	bl	80031a0 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e200      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800409e:	4b15      	ldr	r3, [pc, #84]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 80040a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d039      	beq.n	800412a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d01c      	beq.n	80040f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040be:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a0c      	ldr	r2, [pc, #48]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 80040c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040ca:	f7ff f869 	bl	80031a0 <HAL_GetTick>
 80040ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040d2:	f7ff f865 	bl	80031a0 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e1dd      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040e4:	4b03      	ldr	r3, [pc, #12]	@ (80040f4 <HAL_RCC_OscConfig+0x4f8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x4d6>
 80040f0:	e01b      	b.n	800412a <HAL_RCC_OscConfig+0x52e>
 80040f2:	bf00      	nop
 80040f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040f8:	4b9b      	ldr	r3, [pc, #620]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a9a      	ldr	r2, [pc, #616]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80040fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004102:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004104:	f7ff f84c 	bl	80031a0 <HAL_GetTick>
 8004108:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800410c:	f7ff f848 	bl	80031a0 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e1c0      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800411e:	4b92      	ldr	r3, [pc, #584]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 8081 	beq.w	800423a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004138:	4b8c      	ldr	r3, [pc, #560]	@ (800436c <HAL_RCC_OscConfig+0x770>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a8b      	ldr	r2, [pc, #556]	@ (800436c <HAL_RCC_OscConfig+0x770>)
 800413e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004142:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004144:	f7ff f82c 	bl	80031a0 <HAL_GetTick>
 8004148:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414c:	f7ff f828 	bl	80031a0 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	@ 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e1a0      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800415e:	4b83      	ldr	r3, [pc, #524]	@ (800436c <HAL_RCC_OscConfig+0x770>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d106      	bne.n	8004180 <HAL_RCC_OscConfig+0x584>
 8004172:	4b7d      	ldr	r3, [pc, #500]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004176:	4a7c      	ldr	r2, [pc, #496]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	6713      	str	r3, [r2, #112]	@ 0x70
 800417e:	e02d      	b.n	80041dc <HAL_RCC_OscConfig+0x5e0>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10c      	bne.n	80041a2 <HAL_RCC_OscConfig+0x5a6>
 8004188:	4b77      	ldr	r3, [pc, #476]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418c:	4a76      	ldr	r2, [pc, #472]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 800418e:	f023 0301 	bic.w	r3, r3, #1
 8004192:	6713      	str	r3, [r2, #112]	@ 0x70
 8004194:	4b74      	ldr	r3, [pc, #464]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004198:	4a73      	ldr	r2, [pc, #460]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 800419a:	f023 0304 	bic.w	r3, r3, #4
 800419e:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a0:	e01c      	b.n	80041dc <HAL_RCC_OscConfig+0x5e0>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b05      	cmp	r3, #5
 80041a8:	d10c      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5c8>
 80041aa:	4b6f      	ldr	r3, [pc, #444]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80041ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ae:	4a6e      	ldr	r2, [pc, #440]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80041b0:	f043 0304 	orr.w	r3, r3, #4
 80041b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b6:	4b6c      	ldr	r3, [pc, #432]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ba:	4a6b      	ldr	r2, [pc, #428]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c2:	e00b      	b.n	80041dc <HAL_RCC_OscConfig+0x5e0>
 80041c4:	4b68      	ldr	r3, [pc, #416]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80041c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c8:	4a67      	ldr	r2, [pc, #412]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80041ca:	f023 0301 	bic.w	r3, r3, #1
 80041ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80041d0:	4b65      	ldr	r3, [pc, #404]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80041d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d4:	4a64      	ldr	r2, [pc, #400]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80041d6:	f023 0304 	bic.w	r3, r3, #4
 80041da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d015      	beq.n	8004210 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fe ffdc 	bl	80031a0 <HAL_GetTick>
 80041e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ec:	f7fe ffd8 	bl	80031a0 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e14e      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004202:	4b59      	ldr	r3, [pc, #356]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0ee      	beq.n	80041ec <HAL_RCC_OscConfig+0x5f0>
 800420e:	e014      	b.n	800423a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004210:	f7fe ffc6 	bl	80031a0 <HAL_GetTick>
 8004214:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004216:	e00a      	b.n	800422e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004218:	f7fe ffc2 	bl	80031a0 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e138      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800422e:	4b4e      	ldr	r3, [pc, #312]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1ee      	bne.n	8004218 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 812d 	beq.w	800449e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004244:	4b48      	ldr	r3, [pc, #288]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800424c:	2b18      	cmp	r3, #24
 800424e:	f000 80bd 	beq.w	80043cc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	2b02      	cmp	r3, #2
 8004258:	f040 809e 	bne.w	8004398 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425c:	4b42      	ldr	r3, [pc, #264]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a41      	ldr	r2, [pc, #260]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe ff9a 	bl	80031a0 <HAL_GetTick>
 800426c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7fe ff96 	bl	80031a0 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e10e      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004282:	4b39      	ldr	r3, [pc, #228]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800428e:	4b36      	ldr	r3, [pc, #216]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004290:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004292:	4b37      	ldr	r3, [pc, #220]	@ (8004370 <HAL_RCC_OscConfig+0x774>)
 8004294:	4013      	ands	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800429e:	0112      	lsls	r2, r2, #4
 80042a0:	430a      	orrs	r2, r1
 80042a2:	4931      	ldr	r1, [pc, #196]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ac:	3b01      	subs	r3, #1
 80042ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b6:	3b01      	subs	r3, #1
 80042b8:	025b      	lsls	r3, r3, #9
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c2:	3b01      	subs	r3, #1
 80042c4:	041b      	lsls	r3, r3, #16
 80042c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d0:	3b01      	subs	r3, #1
 80042d2:	061b      	lsls	r3, r3, #24
 80042d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80042d8:	4923      	ldr	r1, [pc, #140]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80042de:	4b22      	ldr	r3, [pc, #136]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80042e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e2:	4a21      	ldr	r2, [pc, #132]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80042ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ee:	4b21      	ldr	r3, [pc, #132]	@ (8004374 <HAL_RCC_OscConfig+0x778>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80042f6:	00d2      	lsls	r2, r2, #3
 80042f8:	491b      	ldr	r1, [pc, #108]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80042fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004302:	f023 020c 	bic.w	r2, r3, #12
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	4917      	ldr	r1, [pc, #92]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 800430c:	4313      	orrs	r3, r2
 800430e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004310:	4b15      	ldr	r3, [pc, #84]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004314:	f023 0202 	bic.w	r2, r3, #2
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431c:	4912      	ldr	r1, [pc, #72]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 800431e:	4313      	orrs	r3, r2
 8004320:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004322:	4b11      	ldr	r3, [pc, #68]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004326:	4a10      	ldr	r2, [pc, #64]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800432c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800432e:	4b0e      	ldr	r3, [pc, #56]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004332:	4a0d      	ldr	r2, [pc, #52]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004338:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800433a:	4b0b      	ldr	r3, [pc, #44]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 800433c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433e:	4a0a      	ldr	r2, [pc, #40]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004344:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004346:	4b08      	ldr	r3, [pc, #32]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434a:	4a07      	ldr	r2, [pc, #28]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004352:	4b05      	ldr	r3, [pc, #20]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a04      	ldr	r2, [pc, #16]	@ (8004368 <HAL_RCC_OscConfig+0x76c>)
 8004358:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800435c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435e:	f7fe ff1f 	bl	80031a0 <HAL_GetTick>
 8004362:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004364:	e011      	b.n	800438a <HAL_RCC_OscConfig+0x78e>
 8004366:	bf00      	nop
 8004368:	58024400 	.word	0x58024400
 800436c:	58024800 	.word	0x58024800
 8004370:	fffffc0c 	.word	0xfffffc0c
 8004374:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7fe ff12 	bl	80031a0 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e08a      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800438a:	4b47      	ldr	r3, [pc, #284]	@ (80044a8 <HAL_RCC_OscConfig+0x8ac>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0x77c>
 8004396:	e082      	b.n	800449e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004398:	4b43      	ldr	r3, [pc, #268]	@ (80044a8 <HAL_RCC_OscConfig+0x8ac>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a42      	ldr	r2, [pc, #264]	@ (80044a8 <HAL_RCC_OscConfig+0x8ac>)
 800439e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fe fefc 	bl	80031a0 <HAL_GetTick>
 80043a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fe fef8 	bl	80031a0 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e070      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043be:	4b3a      	ldr	r3, [pc, #232]	@ (80044a8 <HAL_RCC_OscConfig+0x8ac>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x7b0>
 80043ca:	e068      	b.n	800449e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80043cc:	4b36      	ldr	r3, [pc, #216]	@ (80044a8 <HAL_RCC_OscConfig+0x8ac>)
 80043ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80043d2:	4b35      	ldr	r3, [pc, #212]	@ (80044a8 <HAL_RCC_OscConfig+0x8ac>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d031      	beq.n	8004444 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f003 0203 	and.w	r2, r3, #3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d12a      	bne.n	8004444 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d122      	bne.n	8004444 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004408:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800440a:	429a      	cmp	r2, r3
 800440c:	d11a      	bne.n	8004444 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	0a5b      	lsrs	r3, r3, #9
 8004412:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800441a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d111      	bne.n	8004444 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	0c1b      	lsrs	r3, r3, #16
 8004424:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d108      	bne.n	8004444 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	0e1b      	lsrs	r3, r3, #24
 8004436:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d001      	beq.n	8004448 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e02b      	b.n	80044a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004448:	4b17      	ldr	r3, [pc, #92]	@ (80044a8 <HAL_RCC_OscConfig+0x8ac>)
 800444a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444c:	08db      	lsrs	r3, r3, #3
 800444e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004452:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	429a      	cmp	r2, r3
 800445c:	d01f      	beq.n	800449e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800445e:	4b12      	ldr	r3, [pc, #72]	@ (80044a8 <HAL_RCC_OscConfig+0x8ac>)
 8004460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004462:	4a11      	ldr	r2, [pc, #68]	@ (80044a8 <HAL_RCC_OscConfig+0x8ac>)
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800446a:	f7fe fe99 	bl	80031a0 <HAL_GetTick>
 800446e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004470:	bf00      	nop
 8004472:	f7fe fe95 	bl	80031a0 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447a:	4293      	cmp	r3, r2
 800447c:	d0f9      	beq.n	8004472 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800447e:	4b0a      	ldr	r3, [pc, #40]	@ (80044a8 <HAL_RCC_OscConfig+0x8ac>)
 8004480:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004482:	4b0a      	ldr	r3, [pc, #40]	@ (80044ac <HAL_RCC_OscConfig+0x8b0>)
 8004484:	4013      	ands	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800448a:	00d2      	lsls	r2, r2, #3
 800448c:	4906      	ldr	r1, [pc, #24]	@ (80044a8 <HAL_RCC_OscConfig+0x8ac>)
 800448e:	4313      	orrs	r3, r2
 8004490:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004492:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <HAL_RCC_OscConfig+0x8ac>)
 8004494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004496:	4a04      	ldr	r2, [pc, #16]	@ (80044a8 <HAL_RCC_OscConfig+0x8ac>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3730      	adds	r7, #48	@ 0x30
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	58024400 	.word	0x58024400
 80044ac:	ffff0007 	.word	0xffff0007

080044b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e19c      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044c4:	4b8a      	ldr	r3, [pc, #552]	@ (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d910      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	4b87      	ldr	r3, [pc, #540]	@ (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 020f 	bic.w	r2, r3, #15
 80044da:	4985      	ldr	r1, [pc, #532]	@ (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b83      	ldr	r3, [pc, #524]	@ (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e184      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d010      	beq.n	8004522 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	4b7b      	ldr	r3, [pc, #492]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800450c:	429a      	cmp	r2, r3
 800450e:	d908      	bls.n	8004522 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004510:	4b78      	ldr	r3, [pc, #480]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	4975      	ldr	r1, [pc, #468]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 800451e:	4313      	orrs	r3, r2
 8004520:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d010      	beq.n	8004550 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	4b70      	ldr	r3, [pc, #448]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800453a:	429a      	cmp	r2, r3
 800453c:	d908      	bls.n	8004550 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800453e:	4b6d      	ldr	r3, [pc, #436]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	496a      	ldr	r1, [pc, #424]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 800454c:	4313      	orrs	r3, r2
 800454e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b00      	cmp	r3, #0
 800455a:	d010      	beq.n	800457e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	4b64      	ldr	r3, [pc, #400]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004568:	429a      	cmp	r2, r3
 800456a:	d908      	bls.n	800457e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800456c:	4b61      	ldr	r3, [pc, #388]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	495e      	ldr	r1, [pc, #376]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 800457a:	4313      	orrs	r3, r2
 800457c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d010      	beq.n	80045ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69da      	ldr	r2, [r3, #28]
 800458e:	4b59      	ldr	r3, [pc, #356]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004596:	429a      	cmp	r2, r3
 8004598:	d908      	bls.n	80045ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800459a:	4b56      	ldr	r3, [pc, #344]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	4953      	ldr	r1, [pc, #332]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d010      	beq.n	80045da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	4b4d      	ldr	r3, [pc, #308]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d908      	bls.n	80045da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c8:	4b4a      	ldr	r3, [pc, #296]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f023 020f 	bic.w	r2, r3, #15
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4947      	ldr	r1, [pc, #284]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d055      	beq.n	8004692 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80045e6:	4b43      	ldr	r3, [pc, #268]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	4940      	ldr	r1, [pc, #256]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004600:	4b3c      	ldr	r3, [pc, #240]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d121      	bne.n	8004650 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0f6      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d107      	bne.n	8004628 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004618:	4b36      	ldr	r3, [pc, #216]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d115      	bne.n	8004650 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e0ea      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d107      	bne.n	8004640 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004630:	4b30      	ldr	r3, [pc, #192]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d109      	bne.n	8004650 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0de      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004640:	4b2c      	ldr	r3, [pc, #176]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0d6      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004650:	4b28      	ldr	r3, [pc, #160]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f023 0207 	bic.w	r2, r3, #7
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	4925      	ldr	r1, [pc, #148]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 800465e:	4313      	orrs	r3, r2
 8004660:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004662:	f7fe fd9d 	bl	80031a0 <HAL_GetTick>
 8004666:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004668:	e00a      	b.n	8004680 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800466a:	f7fe fd99 	bl	80031a0 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004678:	4293      	cmp	r3, r2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e0be      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004680:	4b1c      	ldr	r3, [pc, #112]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	429a      	cmp	r2, r3
 8004690:	d1eb      	bne.n	800466a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d010      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	4b14      	ldr	r3, [pc, #80]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d208      	bcs.n	80046c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ae:	4b11      	ldr	r3, [pc, #68]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f023 020f 	bic.w	r2, r3, #15
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	490e      	ldr	r1, [pc, #56]	@ (80046f4 <HAL_RCC_ClockConfig+0x244>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046c0:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d214      	bcs.n	80046f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b08      	ldr	r3, [pc, #32]	@ (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 020f 	bic.w	r2, r3, #15
 80046d6:	4906      	ldr	r1, [pc, #24]	@ (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046de:	4b04      	ldr	r3, [pc, #16]	@ (80046f0 <HAL_RCC_ClockConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d005      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e086      	b.n	80047fe <HAL_RCC_ClockConfig+0x34e>
 80046f0:	52002000 	.word	0x52002000
 80046f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d010      	beq.n	8004726 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	4b3f      	ldr	r3, [pc, #252]	@ (8004808 <HAL_RCC_ClockConfig+0x358>)
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004710:	429a      	cmp	r2, r3
 8004712:	d208      	bcs.n	8004726 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004714:	4b3c      	ldr	r3, [pc, #240]	@ (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	4939      	ldr	r1, [pc, #228]	@ (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004722:	4313      	orrs	r3, r2
 8004724:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d010      	beq.n	8004754 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	4b34      	ldr	r3, [pc, #208]	@ (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800473e:	429a      	cmp	r2, r3
 8004740:	d208      	bcs.n	8004754 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004742:	4b31      	ldr	r3, [pc, #196]	@ (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	492e      	ldr	r1, [pc, #184]	@ (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004750:	4313      	orrs	r3, r2
 8004752:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	d010      	beq.n	8004782 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	4b28      	ldr	r3, [pc, #160]	@ (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800476c:	429a      	cmp	r2, r3
 800476e:	d208      	bcs.n	8004782 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004770:	4b25      	ldr	r3, [pc, #148]	@ (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	4922      	ldr	r1, [pc, #136]	@ (8004808 <HAL_RCC_ClockConfig+0x358>)
 800477e:	4313      	orrs	r3, r2
 8004780:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d010      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69da      	ldr	r2, [r3, #28]
 8004792:	4b1d      	ldr	r3, [pc, #116]	@ (8004808 <HAL_RCC_ClockConfig+0x358>)
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800479a:	429a      	cmp	r2, r3
 800479c:	d208      	bcs.n	80047b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800479e:	4b1a      	ldr	r3, [pc, #104]	@ (8004808 <HAL_RCC_ClockConfig+0x358>)
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	4917      	ldr	r1, [pc, #92]	@ (8004808 <HAL_RCC_ClockConfig+0x358>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80047b0:	f000 f834 	bl	800481c <HAL_RCC_GetSysClockFreq>
 80047b4:	4602      	mov	r2, r0
 80047b6:	4b14      	ldr	r3, [pc, #80]	@ (8004808 <HAL_RCC_ClockConfig+0x358>)
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	4912      	ldr	r1, [pc, #72]	@ (800480c <HAL_RCC_ClockConfig+0x35c>)
 80047c2:	5ccb      	ldrb	r3, [r1, r3]
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
 80047cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004808 <HAL_RCC_ClockConfig+0x358>)
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	4a0d      	ldr	r2, [pc, #52]	@ (800480c <HAL_RCC_ClockConfig+0x35c>)
 80047d8:	5cd3      	ldrb	r3, [r2, r3]
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	fa22 f303 	lsr.w	r3, r2, r3
 80047e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004810 <HAL_RCC_ClockConfig+0x360>)
 80047e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004814 <HAL_RCC_ClockConfig+0x364>)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80047ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004818 <HAL_RCC_ClockConfig+0x368>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe fc8a 	bl	800310c <HAL_InitTick>
 80047f8:	4603      	mov	r3, r0
 80047fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	58024400 	.word	0x58024400
 800480c:	080094e4 	.word	0x080094e4
 8004810:	24000004 	.word	0x24000004
 8004814:	24000000 	.word	0x24000000
 8004818:	24000018 	.word	0x24000018

0800481c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800481c:	b480      	push	{r7}
 800481e:	b089      	sub	sp, #36	@ 0x24
 8004820:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004822:	4bb3      	ldr	r3, [pc, #716]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800482a:	2b18      	cmp	r3, #24
 800482c:	f200 8155 	bhi.w	8004ada <HAL_RCC_GetSysClockFreq+0x2be>
 8004830:	a201      	add	r2, pc, #4	@ (adr r2, 8004838 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	0800489d 	.word	0x0800489d
 800483c:	08004adb 	.word	0x08004adb
 8004840:	08004adb 	.word	0x08004adb
 8004844:	08004adb 	.word	0x08004adb
 8004848:	08004adb 	.word	0x08004adb
 800484c:	08004adb 	.word	0x08004adb
 8004850:	08004adb 	.word	0x08004adb
 8004854:	08004adb 	.word	0x08004adb
 8004858:	080048c3 	.word	0x080048c3
 800485c:	08004adb 	.word	0x08004adb
 8004860:	08004adb 	.word	0x08004adb
 8004864:	08004adb 	.word	0x08004adb
 8004868:	08004adb 	.word	0x08004adb
 800486c:	08004adb 	.word	0x08004adb
 8004870:	08004adb 	.word	0x08004adb
 8004874:	08004adb 	.word	0x08004adb
 8004878:	080048c9 	.word	0x080048c9
 800487c:	08004adb 	.word	0x08004adb
 8004880:	08004adb 	.word	0x08004adb
 8004884:	08004adb 	.word	0x08004adb
 8004888:	08004adb 	.word	0x08004adb
 800488c:	08004adb 	.word	0x08004adb
 8004890:	08004adb 	.word	0x08004adb
 8004894:	08004adb 	.word	0x08004adb
 8004898:	080048cf 	.word	0x080048cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800489c:	4b94      	ldr	r3, [pc, #592]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d009      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048a8:	4b91      	ldr	r3, [pc, #580]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	08db      	lsrs	r3, r3, #3
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	4a90      	ldr	r2, [pc, #576]	@ (8004af4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
 80048b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80048ba:	e111      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80048bc:	4b8d      	ldr	r3, [pc, #564]	@ (8004af4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048be:	61bb      	str	r3, [r7, #24]
      break;
 80048c0:	e10e      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80048c2:	4b8d      	ldr	r3, [pc, #564]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048c4:	61bb      	str	r3, [r7, #24]
      break;
 80048c6:	e10b      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80048c8:	4b8c      	ldr	r3, [pc, #560]	@ (8004afc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80048ca:	61bb      	str	r3, [r7, #24]
      break;
 80048cc:	e108      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048ce:	4b88      	ldr	r3, [pc, #544]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80048d8:	4b85      	ldr	r3, [pc, #532]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80048e4:	4b82      	ldr	r3, [pc, #520]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80048ee:	4b80      	ldr	r3, [pc, #512]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f2:	08db      	lsrs	r3, r3, #3
 80048f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	fb02 f303 	mul.w	r3, r2, r3
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004906:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 80e1 	beq.w	8004ad4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b02      	cmp	r3, #2
 8004916:	f000 8083 	beq.w	8004a20 <HAL_RCC_GetSysClockFreq+0x204>
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b02      	cmp	r3, #2
 800491e:	f200 80a1 	bhi.w	8004a64 <HAL_RCC_GetSysClockFreq+0x248>
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_RCC_GetSysClockFreq+0x114>
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d056      	beq.n	80049dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800492e:	e099      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004930:	4b6f      	ldr	r3, [pc, #444]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d02d      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800493c:	4b6c      	ldr	r3, [pc, #432]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	08db      	lsrs	r3, r3, #3
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	4a6b      	ldr	r2, [pc, #428]	@ (8004af4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
 800494c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	ee07 3a90 	vmov	s15, r3
 8004954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004966:	4b62      	ldr	r3, [pc, #392]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004976:	ed97 6a02 	vldr	s12, [r7, #8]
 800497a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800497e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800498a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800498e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004992:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004996:	e087      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004b04 <HAL_RCC_GetSysClockFreq+0x2e8>
 80049a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049aa:	4b51      	ldr	r3, [pc, #324]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80049be:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049da:	e065      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004b08 <HAL_RCC_GetSysClockFreq+0x2ec>
 80049ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ee:	4b40      	ldr	r3, [pc, #256]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a02:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a1e:	e043      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004b0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a32:	4b2f      	ldr	r3, [pc, #188]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a46:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a62:	e021      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004b08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a76:	4b1e      	ldr	r3, [pc, #120]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a8a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004aa6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004aa8:	4b11      	ldr	r3, [pc, #68]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aac:	0a5b      	lsrs	r3, r3, #9
 8004aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ac0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004acc:	ee17 3a90 	vmov	r3, s15
 8004ad0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004ad2:	e005      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61bb      	str	r3, [r7, #24]
      break;
 8004ad8:	e002      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004ada:	4b07      	ldr	r3, [pc, #28]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004adc:	61bb      	str	r3, [r7, #24]
      break;
 8004ade:	bf00      	nop
  }

  return sysclockfreq;
 8004ae0:	69bb      	ldr	r3, [r7, #24]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3724      	adds	r7, #36	@ 0x24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	58024400 	.word	0x58024400
 8004af4:	03d09000 	.word	0x03d09000
 8004af8:	003d0900 	.word	0x003d0900
 8004afc:	017d7840 	.word	0x017d7840
 8004b00:	46000000 	.word	0x46000000
 8004b04:	4c742400 	.word	0x4c742400
 8004b08:	4a742400 	.word	0x4a742400
 8004b0c:	4bbebc20 	.word	0x4bbebc20

08004b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b16:	f7ff fe81 	bl	800481c <HAL_RCC_GetSysClockFreq>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	4b10      	ldr	r3, [pc, #64]	@ (8004b60 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	0a1b      	lsrs	r3, r3, #8
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	490f      	ldr	r1, [pc, #60]	@ (8004b64 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b28:	5ccb      	ldrb	r3, [r1, r3]
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b34:	4b0a      	ldr	r3, [pc, #40]	@ (8004b60 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	4a09      	ldr	r2, [pc, #36]	@ (8004b64 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b3e:	5cd3      	ldrb	r3, [r2, r3]
 8004b40:	f003 031f 	and.w	r3, r3, #31
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4a:	4a07      	ldr	r2, [pc, #28]	@ (8004b68 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b4e:	4a07      	ldr	r2, [pc, #28]	@ (8004b6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004b54:	4b04      	ldr	r3, [pc, #16]	@ (8004b68 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b56:	681b      	ldr	r3, [r3, #0]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	58024400 	.word	0x58024400
 8004b64:	080094e4 	.word	0x080094e4
 8004b68:	24000004 	.word	0x24000004
 8004b6c:	24000000 	.word	0x24000000

08004b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004b74:	f7ff ffcc 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	091b      	lsrs	r3, r3, #4
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	4904      	ldr	r1, [pc, #16]	@ (8004b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b86:	5ccb      	ldrb	r3, [r1, r3]
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	58024400 	.word	0x58024400
 8004b98:	080094e4 	.word	0x080094e4

08004b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004ba0:	f7ff ffb6 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	0a1b      	lsrs	r3, r3, #8
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	4904      	ldr	r1, [pc, #16]	@ (8004bc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bb2:	5ccb      	ldrb	r3, [r1, r3]
 8004bb4:	f003 031f 	and.w	r3, r3, #31
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	58024400 	.word	0x58024400
 8004bc4:	080094e4 	.word	0x080094e4

08004bc8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bcc:	b0ca      	sub	sp, #296	@ 0x128
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004bec:	2500      	movs	r5, #0
 8004bee:	ea54 0305 	orrs.w	r3, r4, r5
 8004bf2:	d049      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bfa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bfe:	d02f      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004c00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c04:	d828      	bhi.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004c06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c0a:	d01a      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c10:	d822      	bhi.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004c16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c1a:	d007      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c1c:	e01c      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c1e:	4bb8      	ldr	r3, [pc, #736]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	4ab7      	ldr	r2, [pc, #732]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c2a:	e01a      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c30:	3308      	adds	r3, #8
 8004c32:	2102      	movs	r1, #2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f001 fc8f 	bl	8006558 <RCCEx_PLL2_Config>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c40:	e00f      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c46:	3328      	adds	r3, #40	@ 0x28
 8004c48:	2102      	movs	r1, #2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 fd36 	bl	80066bc <RCCEx_PLL3_Config>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c56:	e004      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c5e:	e000      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10a      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c6a:	4ba5      	ldr	r3, [pc, #660]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c78:	4aa1      	ldr	r2, [pc, #644]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c7e:	e003      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004c94:	f04f 0900 	mov.w	r9, #0
 8004c98:	ea58 0309 	orrs.w	r3, r8, r9
 8004c9c:	d047      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d82a      	bhi.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cae:	bf00      	nop
 8004cb0:	08004cc5 	.word	0x08004cc5
 8004cb4:	08004cd3 	.word	0x08004cd3
 8004cb8:	08004ce9 	.word	0x08004ce9
 8004cbc:	08004d07 	.word	0x08004d07
 8004cc0:	08004d07 	.word	0x08004d07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc4:	4b8e      	ldr	r3, [pc, #568]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc8:	4a8d      	ldr	r2, [pc, #564]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cd0:	e01a      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 fc3c 	bl	8006558 <RCCEx_PLL2_Config>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ce6:	e00f      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cec:	3328      	adds	r3, #40	@ 0x28
 8004cee:	2100      	movs	r1, #0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f001 fce3 	bl	80066bc <RCCEx_PLL3_Config>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cfc:	e004      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d04:	e000      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d10:	4b7b      	ldr	r3, [pc, #492]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d14:	f023 0107 	bic.w	r1, r3, #7
 8004d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1e:	4a78      	ldr	r2, [pc, #480]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d20:	430b      	orrs	r3, r1
 8004d22:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d24:	e003      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d36:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004d3a:	f04f 0b00 	mov.w	fp, #0
 8004d3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d42:	d04c      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d4e:	d030      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004d50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d54:	d829      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d56:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d58:	d02d      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004d5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d5c:	d825      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d5e:	2b80      	cmp	r3, #128	@ 0x80
 8004d60:	d018      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004d62:	2b80      	cmp	r3, #128	@ 0x80
 8004d64:	d821      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004d6a:	2b40      	cmp	r3, #64	@ 0x40
 8004d6c:	d007      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004d6e:	e01c      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d70:	4b63      	ldr	r3, [pc, #396]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d74:	4a62      	ldr	r2, [pc, #392]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d7c:	e01c      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d82:	3308      	adds	r3, #8
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f001 fbe6 	bl	8006558 <RCCEx_PLL2_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d92:	e011      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d98:	3328      	adds	r3, #40	@ 0x28
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 fc8d 	bl	80066bc <RCCEx_PLL3_Config>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004da8:	e006      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004db0:	e002      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004db2:	bf00      	nop
 8004db4:	e000      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004db6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004dc0:	4b4f      	ldr	r3, [pc, #316]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dce:	4a4c      	ldr	r2, [pc, #304]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004dd4:	e003      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004dea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004dee:	2300      	movs	r3, #0
 8004df0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004df4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	d053      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e0a:	d035      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004e0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e10:	d82e      	bhi.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004e12:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004e16:	d031      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004e18:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004e1c:	d828      	bhi.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004e1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e22:	d01a      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004e24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e28:	d822      	bhi.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004e2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e32:	d007      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004e34:	e01c      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e36:	4b32      	ldr	r3, [pc, #200]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3a:	4a31      	ldr	r2, [pc, #196]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e42:	e01c      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e48:	3308      	adds	r3, #8
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f001 fb83 	bl	8006558 <RCCEx_PLL2_Config>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004e58:	e011      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5e:	3328      	adds	r3, #40	@ 0x28
 8004e60:	2100      	movs	r1, #0
 8004e62:	4618      	mov	r0, r3
 8004e64:	f001 fc2a 	bl	80066bc <RCCEx_PLL3_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e6e:	e006      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e76:	e002      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e78:	bf00      	nop
 8004e7a:	e000      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10b      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e86:	4b1e      	ldr	r3, [pc, #120]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e8a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e96:	4a1a      	ldr	r2, [pc, #104]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e9c:	e003      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004eb2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004ebc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	d056      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ece:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ed2:	d038      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004ed4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ed8:	d831      	bhi.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004eda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ede:	d034      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004ee0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ee4:	d82b      	bhi.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ee6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004eea:	d01d      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004eec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ef0:	d825      	bhi.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d006      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004ef6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004efa:	d00a      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004efc:	e01f      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004efe:	bf00      	nop
 8004f00:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f04:	4ba2      	ldr	r3, [pc, #648]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f08:	4aa1      	ldr	r2, [pc, #644]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f10:	e01c      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f16:	3308      	adds	r3, #8
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f001 fb1c 	bl	8006558 <RCCEx_PLL2_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004f26:	e011      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2c:	3328      	adds	r3, #40	@ 0x28
 8004f2e:	2100      	movs	r1, #0
 8004f30:	4618      	mov	r0, r3
 8004f32:	f001 fbc3 	bl	80066bc <RCCEx_PLL3_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f3c:	e006      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f44:	e002      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004f46:	bf00      	nop
 8004f48:	e000      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10b      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f54:	4b8e      	ldr	r3, [pc, #568]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f58:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f64:	4a8a      	ldr	r2, [pc, #552]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f66:	430b      	orrs	r3, r1
 8004f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f6a:	e003      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004f80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004f8a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4313      	orrs	r3, r2
 8004f92:	d03a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f9a:	2b30      	cmp	r3, #48	@ 0x30
 8004f9c:	d01f      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004f9e:	2b30      	cmp	r3, #48	@ 0x30
 8004fa0:	d819      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	d00c      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	d815      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d019      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004fae:	2b10      	cmp	r3, #16
 8004fb0:	d111      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb2:	4b77      	ldr	r3, [pc, #476]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb6:	4a76      	ldr	r2, [pc, #472]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004fbe:	e011      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 fac5 	bl	8006558 <RCCEx_PLL2_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004fd4:	e006      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fdc:	e002      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004fde:	bf00      	nop
 8004fe0:	e000      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004fec:	4b68      	ldr	r3, [pc, #416]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ff0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ffa:	4a65      	ldr	r2, [pc, #404]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005000:	e003      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800500a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005012:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005016:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800501a:	2300      	movs	r3, #0
 800501c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005020:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005024:	460b      	mov	r3, r1
 8005026:	4313      	orrs	r3, r2
 8005028:	d051      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800502a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005030:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005034:	d035      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005036:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800503a:	d82e      	bhi.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800503c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005040:	d031      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005042:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005046:	d828      	bhi.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005048:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800504c:	d01a      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800504e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005052:	d822      	bhi.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800505c:	d007      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800505e:	e01c      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005060:	4b4b      	ldr	r3, [pc, #300]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005064:	4a4a      	ldr	r2, [pc, #296]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800506a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800506c:	e01c      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800506e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005072:	3308      	adds	r3, #8
 8005074:	2100      	movs	r1, #0
 8005076:	4618      	mov	r0, r3
 8005078:	f001 fa6e 	bl	8006558 <RCCEx_PLL2_Config>
 800507c:	4603      	mov	r3, r0
 800507e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005082:	e011      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005088:	3328      	adds	r3, #40	@ 0x28
 800508a:	2100      	movs	r1, #0
 800508c:	4618      	mov	r0, r3
 800508e:	f001 fb15 	bl	80066bc <RCCEx_PLL3_Config>
 8005092:	4603      	mov	r3, r0
 8005094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005098:	e006      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050a0:	e002      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80050a2:	bf00      	nop
 80050a4:	e000      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80050a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80050b0:	4b37      	ldr	r3, [pc, #220]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80050b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050be:	4a34      	ldr	r2, [pc, #208]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050c0:	430b      	orrs	r3, r1
 80050c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80050c4:	e003      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80050ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80050da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050de:	2300      	movs	r3, #0
 80050e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80050e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80050e8:	460b      	mov	r3, r1
 80050ea:	4313      	orrs	r3, r2
 80050ec:	d056      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80050ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050f8:	d033      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80050fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050fe:	d82c      	bhi.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005100:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005104:	d02f      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005106:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800510a:	d826      	bhi.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800510c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005110:	d02b      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005112:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005116:	d820      	bhi.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800511c:	d012      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800511e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005122:	d81a      	bhi.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d022      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800512c:	d115      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800512e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005132:	3308      	adds	r3, #8
 8005134:	2101      	movs	r1, #1
 8005136:	4618      	mov	r0, r3
 8005138:	f001 fa0e 	bl	8006558 <RCCEx_PLL2_Config>
 800513c:	4603      	mov	r3, r0
 800513e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005142:	e015      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005148:	3328      	adds	r3, #40	@ 0x28
 800514a:	2101      	movs	r1, #1
 800514c:	4618      	mov	r0, r3
 800514e:	f001 fab5 	bl	80066bc <RCCEx_PLL3_Config>
 8005152:	4603      	mov	r3, r0
 8005154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005158:	e00a      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005160:	e006      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005162:	bf00      	nop
 8005164:	e004      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005166:	bf00      	nop
 8005168:	e002      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800516a:	bf00      	nop
 800516c:	e000      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800516e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10d      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005178:	4b05      	ldr	r3, [pc, #20]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800517a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800517c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005184:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005186:	4a02      	ldr	r2, [pc, #8]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005188:	430b      	orrs	r3, r1
 800518a:	6513      	str	r3, [r2, #80]	@ 0x50
 800518c:	e006      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800518e:	bf00      	nop
 8005190:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800519c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80051a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051ac:	2300      	movs	r3, #0
 80051ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4313      	orrs	r3, r2
 80051ba:	d055      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80051bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051c8:	d033      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80051ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051ce:	d82c      	bhi.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d4:	d02f      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80051d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051da:	d826      	bhi.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051e0:	d02b      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80051e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051e6:	d820      	bhi.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051ec:	d012      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80051ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051f2:	d81a      	bhi.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d022      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80051f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051fc:	d115      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005202:	3308      	adds	r3, #8
 8005204:	2101      	movs	r1, #1
 8005206:	4618      	mov	r0, r3
 8005208:	f001 f9a6 	bl	8006558 <RCCEx_PLL2_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005212:	e015      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005218:	3328      	adds	r3, #40	@ 0x28
 800521a:	2101      	movs	r1, #1
 800521c:	4618      	mov	r0, r3
 800521e:	f001 fa4d 	bl	80066bc <RCCEx_PLL3_Config>
 8005222:	4603      	mov	r3, r0
 8005224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005228:	e00a      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005230:	e006      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005232:	bf00      	nop
 8005234:	e004      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005236:	bf00      	nop
 8005238:	e002      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800523a:	bf00      	nop
 800523c:	e000      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800523e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10b      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005248:	4ba3      	ldr	r3, [pc, #652]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800524a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800524c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005254:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005258:	4a9f      	ldr	r2, [pc, #636]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800525a:	430b      	orrs	r3, r1
 800525c:	6593      	str	r3, [r2, #88]	@ 0x58
 800525e:	e003      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005264:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005270:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005278:	2300      	movs	r3, #0
 800527a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800527e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005282:	460b      	mov	r3, r1
 8005284:	4313      	orrs	r3, r2
 8005286:	d037      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005292:	d00e      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005298:	d816      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d018      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800529e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052a2:	d111      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052a4:	4b8c      	ldr	r3, [pc, #560]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a8:	4a8b      	ldr	r2, [pc, #556]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052b0:	e00f      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b6:	3308      	adds	r3, #8
 80052b8:	2101      	movs	r1, #1
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 f94c 	bl	8006558 <RCCEx_PLL2_Config>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052c6:	e004      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052ce:	e000      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80052d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10a      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052da:	4b7f      	ldr	r3, [pc, #508]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80052e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e8:	4a7b      	ldr	r2, [pc, #492]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052ea:	430b      	orrs	r3, r1
 80052ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80052ee:	e003      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80052f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005300:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005304:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005308:	2300      	movs	r3, #0
 800530a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800530e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005312:	460b      	mov	r3, r1
 8005314:	4313      	orrs	r3, r2
 8005316:	d039      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800531e:	2b03      	cmp	r3, #3
 8005320:	d81c      	bhi.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005322:	a201      	add	r2, pc, #4	@ (adr r2, 8005328 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005328:	08005365 	.word	0x08005365
 800532c:	08005339 	.word	0x08005339
 8005330:	08005347 	.word	0x08005347
 8005334:	08005365 	.word	0x08005365
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005338:	4b67      	ldr	r3, [pc, #412]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800533a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533c:	4a66      	ldr	r2, [pc, #408]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800533e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005344:	e00f      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800534a:	3308      	adds	r3, #8
 800534c:	2102      	movs	r1, #2
 800534e:	4618      	mov	r0, r3
 8005350:	f001 f902 	bl	8006558 <RCCEx_PLL2_Config>
 8005354:	4603      	mov	r3, r0
 8005356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800535a:	e004      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005362:	e000      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800536e:	4b5a      	ldr	r3, [pc, #360]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005372:	f023 0103 	bic.w	r1, r3, #3
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800537c:	4a56      	ldr	r2, [pc, #344]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800537e:	430b      	orrs	r3, r1
 8005380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005382:	e003      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005388:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800538c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005398:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800539c:	2300      	movs	r3, #0
 800539e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80053a6:	460b      	mov	r3, r1
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f000 809f 	beq.w	80054ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053ae:	4b4b      	ldr	r3, [pc, #300]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a4a      	ldr	r2, [pc, #296]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80053b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053ba:	f7fd fef1 	bl	80031a0 <HAL_GetTick>
 80053be:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053c2:	e00b      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c4:	f7fd feec 	bl	80031a0 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b64      	cmp	r3, #100	@ 0x64
 80053d2:	d903      	bls.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053da:	e005      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053dc:	4b3f      	ldr	r3, [pc, #252]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0ed      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80053e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d179      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80053f0:	4b39      	ldr	r3, [pc, #228]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053fc:	4053      	eors	r3, r2
 80053fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005402:	2b00      	cmp	r3, #0
 8005404:	d015      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005406:	4b34      	ldr	r3, [pc, #208]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800540e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005412:	4b31      	ldr	r3, [pc, #196]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005416:	4a30      	ldr	r2, [pc, #192]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800541c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800541e:	4b2e      	ldr	r3, [pc, #184]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005422:	4a2d      	ldr	r2, [pc, #180]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005428:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800542a:	4a2b      	ldr	r2, [pc, #172]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800542c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005430:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005436:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800543a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800543e:	d118      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fd feae 	bl	80031a0 <HAL_GetTick>
 8005444:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005448:	e00d      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544a:	f7fd fea9 	bl	80031a0 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005454:	1ad2      	subs	r2, r2, r3
 8005456:	f241 3388 	movw	r3, #5000	@ 0x1388
 800545a:	429a      	cmp	r2, r3
 800545c:	d903      	bls.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005464:	e005      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005466:	4b1c      	ldr	r3, [pc, #112]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0eb      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005476:	2b00      	cmp	r3, #0
 8005478:	d129      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800547a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005486:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800548a:	d10e      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800548c:	4b12      	ldr	r3, [pc, #72]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005498:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800549c:	091a      	lsrs	r2, r3, #4
 800549e:	4b10      	ldr	r3, [pc, #64]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	4a0d      	ldr	r2, [pc, #52]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054a4:	430b      	orrs	r3, r1
 80054a6:	6113      	str	r3, [r2, #16]
 80054a8:	e005      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80054aa:	4b0b      	ldr	r3, [pc, #44]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	4a0a      	ldr	r2, [pc, #40]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80054b4:	6113      	str	r3, [r2, #16]
 80054b6:	4b08      	ldr	r3, [pc, #32]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80054c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c6:	4a04      	ldr	r2, [pc, #16]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054c8:	430b      	orrs	r3, r1
 80054ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80054cc:	e00e      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80054d6:	e009      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 80054d8:	58024400 	.word	0x58024400
 80054dc:	58024800 	.word	0x58024800
 80054e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80054ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f002 0301 	and.w	r3, r2, #1
 80054f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054fc:	2300      	movs	r3, #0
 80054fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005502:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005506:	460b      	mov	r3, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	f000 8089 	beq.w	8005620 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800550e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005512:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005514:	2b28      	cmp	r3, #40	@ 0x28
 8005516:	d86b      	bhi.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005518:	a201      	add	r2, pc, #4	@ (adr r2, 8005520 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	080055f9 	.word	0x080055f9
 8005524:	080055f1 	.word	0x080055f1
 8005528:	080055f1 	.word	0x080055f1
 800552c:	080055f1 	.word	0x080055f1
 8005530:	080055f1 	.word	0x080055f1
 8005534:	080055f1 	.word	0x080055f1
 8005538:	080055f1 	.word	0x080055f1
 800553c:	080055f1 	.word	0x080055f1
 8005540:	080055c5 	.word	0x080055c5
 8005544:	080055f1 	.word	0x080055f1
 8005548:	080055f1 	.word	0x080055f1
 800554c:	080055f1 	.word	0x080055f1
 8005550:	080055f1 	.word	0x080055f1
 8005554:	080055f1 	.word	0x080055f1
 8005558:	080055f1 	.word	0x080055f1
 800555c:	080055f1 	.word	0x080055f1
 8005560:	080055db 	.word	0x080055db
 8005564:	080055f1 	.word	0x080055f1
 8005568:	080055f1 	.word	0x080055f1
 800556c:	080055f1 	.word	0x080055f1
 8005570:	080055f1 	.word	0x080055f1
 8005574:	080055f1 	.word	0x080055f1
 8005578:	080055f1 	.word	0x080055f1
 800557c:	080055f1 	.word	0x080055f1
 8005580:	080055f9 	.word	0x080055f9
 8005584:	080055f1 	.word	0x080055f1
 8005588:	080055f1 	.word	0x080055f1
 800558c:	080055f1 	.word	0x080055f1
 8005590:	080055f1 	.word	0x080055f1
 8005594:	080055f1 	.word	0x080055f1
 8005598:	080055f1 	.word	0x080055f1
 800559c:	080055f1 	.word	0x080055f1
 80055a0:	080055f9 	.word	0x080055f9
 80055a4:	080055f1 	.word	0x080055f1
 80055a8:	080055f1 	.word	0x080055f1
 80055ac:	080055f1 	.word	0x080055f1
 80055b0:	080055f1 	.word	0x080055f1
 80055b4:	080055f1 	.word	0x080055f1
 80055b8:	080055f1 	.word	0x080055f1
 80055bc:	080055f1 	.word	0x080055f1
 80055c0:	080055f9 	.word	0x080055f9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c8:	3308      	adds	r3, #8
 80055ca:	2101      	movs	r1, #1
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 ffc3 	bl	8006558 <RCCEx_PLL2_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80055d8:	e00f      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055de:	3328      	adds	r3, #40	@ 0x28
 80055e0:	2101      	movs	r1, #1
 80055e2:	4618      	mov	r0, r3
 80055e4:	f001 f86a 	bl	80066bc <RCCEx_PLL3_Config>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80055ee:	e004      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055f6:	e000      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80055f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10a      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005602:	4bbf      	ldr	r3, [pc, #764]	@ (8005900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005606:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005610:	4abb      	ldr	r2, [pc, #748]	@ (8005900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005612:	430b      	orrs	r3, r1
 8005614:	6553      	str	r3, [r2, #84]	@ 0x54
 8005616:	e003      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800561c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	f002 0302 	and.w	r3, r2, #2
 800562c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005630:	2300      	movs	r3, #0
 8005632:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005636:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800563a:	460b      	mov	r3, r1
 800563c:	4313      	orrs	r3, r2
 800563e:	d041      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005644:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005646:	2b05      	cmp	r3, #5
 8005648:	d824      	bhi.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800564a:	a201      	add	r2, pc, #4	@ (adr r2, 8005650 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	0800569d 	.word	0x0800569d
 8005654:	08005669 	.word	0x08005669
 8005658:	0800567f 	.word	0x0800567f
 800565c:	0800569d 	.word	0x0800569d
 8005660:	0800569d 	.word	0x0800569d
 8005664:	0800569d 	.word	0x0800569d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566c:	3308      	adds	r3, #8
 800566e:	2101      	movs	r1, #1
 8005670:	4618      	mov	r0, r3
 8005672:	f000 ff71 	bl	8006558 <RCCEx_PLL2_Config>
 8005676:	4603      	mov	r3, r0
 8005678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800567c:	e00f      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005682:	3328      	adds	r3, #40	@ 0x28
 8005684:	2101      	movs	r1, #1
 8005686:	4618      	mov	r0, r3
 8005688:	f001 f818 	bl	80066bc <RCCEx_PLL3_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005692:	e004      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800569a:	e000      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800569c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800569e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10a      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056a6:	4b96      	ldr	r3, [pc, #600]	@ (8005900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056aa:	f023 0107 	bic.w	r1, r3, #7
 80056ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056b4:	4a92      	ldr	r2, [pc, #584]	@ (8005900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056b6:	430b      	orrs	r3, r1
 80056b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80056ba:	e003      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	f002 0304 	and.w	r3, r2, #4
 80056d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056d4:	2300      	movs	r3, #0
 80056d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80056de:	460b      	mov	r3, r1
 80056e0:	4313      	orrs	r3, r2
 80056e2:	d044      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80056e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056ec:	2b05      	cmp	r3, #5
 80056ee:	d825      	bhi.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80056f0:	a201      	add	r2, pc, #4	@ (adr r2, 80056f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80056f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f6:	bf00      	nop
 80056f8:	08005745 	.word	0x08005745
 80056fc:	08005711 	.word	0x08005711
 8005700:	08005727 	.word	0x08005727
 8005704:	08005745 	.word	0x08005745
 8005708:	08005745 	.word	0x08005745
 800570c:	08005745 	.word	0x08005745
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005714:	3308      	adds	r3, #8
 8005716:	2101      	movs	r1, #1
 8005718:	4618      	mov	r0, r3
 800571a:	f000 ff1d 	bl	8006558 <RCCEx_PLL2_Config>
 800571e:	4603      	mov	r3, r0
 8005720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005724:	e00f      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572a:	3328      	adds	r3, #40	@ 0x28
 800572c:	2101      	movs	r1, #1
 800572e:	4618      	mov	r0, r3
 8005730:	f000 ffc4 	bl	80066bc <RCCEx_PLL3_Config>
 8005734:	4603      	mov	r3, r0
 8005736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800573a:	e004      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005742:	e000      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10b      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800574e:	4b6c      	ldr	r3, [pc, #432]	@ (8005900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005752:	f023 0107 	bic.w	r1, r3, #7
 8005756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800575e:	4a68      	ldr	r2, [pc, #416]	@ (8005900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005760:	430b      	orrs	r3, r1
 8005762:	6593      	str	r3, [r2, #88]	@ 0x58
 8005764:	e003      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800576a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800576e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	f002 0320 	and.w	r3, r2, #32
 800577a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800577e:	2300      	movs	r3, #0
 8005780:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005784:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005788:	460b      	mov	r3, r1
 800578a:	4313      	orrs	r3, r2
 800578c:	d055      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800578e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005796:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800579a:	d033      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800579c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057a0:	d82c      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80057a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a6:	d02f      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80057a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ac:	d826      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80057ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057b2:	d02b      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80057b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057b8:	d820      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80057ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057be:	d012      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80057c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057c4:	d81a      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d022      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80057ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057ce:	d115      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d4:	3308      	adds	r3, #8
 80057d6:	2100      	movs	r1, #0
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 febd 	bl	8006558 <RCCEx_PLL2_Config>
 80057de:	4603      	mov	r3, r0
 80057e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80057e4:	e015      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ea:	3328      	adds	r3, #40	@ 0x28
 80057ec:	2102      	movs	r1, #2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 ff64 	bl	80066bc <RCCEx_PLL3_Config>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80057fa:	e00a      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005802:	e006      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005804:	bf00      	nop
 8005806:	e004      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005808:	bf00      	nop
 800580a:	e002      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800580c:	bf00      	nop
 800580e:	e000      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10b      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800581a:	4b39      	ldr	r3, [pc, #228]	@ (8005900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800581c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800582a:	4a35      	ldr	r2, [pc, #212]	@ (8005900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800582c:	430b      	orrs	r3, r1
 800582e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005830:	e003      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800583a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800584a:	2300      	movs	r3, #0
 800584c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005850:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005854:	460b      	mov	r3, r1
 8005856:	4313      	orrs	r3, r2
 8005858:	d058      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800585a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005862:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005866:	d033      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005868:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800586c:	d82c      	bhi.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800586e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005872:	d02f      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005878:	d826      	bhi.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800587a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800587e:	d02b      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005880:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005884:	d820      	bhi.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005886:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800588a:	d012      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800588c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005890:	d81a      	bhi.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005892:	2b00      	cmp	r3, #0
 8005894:	d022      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800589a:	d115      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800589c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a0:	3308      	adds	r3, #8
 80058a2:	2100      	movs	r1, #0
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fe57 	bl	8006558 <RCCEx_PLL2_Config>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80058b0:	e015      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b6:	3328      	adds	r3, #40	@ 0x28
 80058b8:	2102      	movs	r1, #2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fefe 	bl	80066bc <RCCEx_PLL3_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80058c6:	e00a      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058ce:	e006      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80058d0:	bf00      	nop
 80058d2:	e004      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80058d4:	bf00      	nop
 80058d6:	e002      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80058d8:	bf00      	nop
 80058da:	e000      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80058dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10e      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058e6:	4b06      	ldr	r3, [pc, #24]	@ (8005900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80058ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058f6:	4a02      	ldr	r2, [pc, #8]	@ (8005900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058f8:	430b      	orrs	r3, r1
 80058fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80058fc:	e006      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80058fe:	bf00      	nop
 8005900:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005904:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005908:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800590c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800591c:	2300      	movs	r3, #0
 800591e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005922:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005926:	460b      	mov	r3, r1
 8005928:	4313      	orrs	r3, r2
 800592a:	d055      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800592c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005930:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005934:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005938:	d033      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800593a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800593e:	d82c      	bhi.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005944:	d02f      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005946:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800594a:	d826      	bhi.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800594c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005950:	d02b      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005952:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005956:	d820      	bhi.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005958:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800595c:	d012      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800595e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005962:	d81a      	bhi.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d022      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800596c:	d115      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005972:	3308      	adds	r3, #8
 8005974:	2100      	movs	r1, #0
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fdee 	bl	8006558 <RCCEx_PLL2_Config>
 800597c:	4603      	mov	r3, r0
 800597e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005982:	e015      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005988:	3328      	adds	r3, #40	@ 0x28
 800598a:	2102      	movs	r1, #2
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fe95 	bl	80066bc <RCCEx_PLL3_Config>
 8005992:	4603      	mov	r3, r0
 8005994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005998:	e00a      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059a0:	e006      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80059a2:	bf00      	nop
 80059a4:	e004      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80059a6:	bf00      	nop
 80059a8:	e002      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80059aa:	bf00      	nop
 80059ac:	e000      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80059ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10b      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80059b8:	4ba1      	ldr	r3, [pc, #644]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059c8:	4a9d      	ldr	r2, [pc, #628]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059ca:	430b      	orrs	r3, r1
 80059cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ce:	e003      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80059d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	f002 0308 	and.w	r3, r2, #8
 80059e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059e8:	2300      	movs	r3, #0
 80059ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80059f2:	460b      	mov	r3, r1
 80059f4:	4313      	orrs	r3, r2
 80059f6:	d01e      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a04:	d10c      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0a:	3328      	adds	r3, #40	@ 0x28
 8005a0c:	2102      	movs	r1, #2
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fe54 	bl	80066bc <RCCEx_PLL3_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a20:	4b87      	ldr	r3, [pc, #540]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a24:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a30:	4a83      	ldr	r2, [pc, #524]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a32:	430b      	orrs	r3, r1
 8005a34:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f002 0310 	and.w	r3, r2, #16
 8005a42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a46:	2300      	movs	r3, #0
 8005a48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a4c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005a50:	460b      	mov	r3, r1
 8005a52:	4313      	orrs	r3, r2
 8005a54:	d01e      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a62:	d10c      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a68:	3328      	adds	r3, #40	@ 0x28
 8005a6a:	2102      	movs	r1, #2
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fe25 	bl	80066bc <RCCEx_PLL3_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a7e:	4b70      	ldr	r3, [pc, #448]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a8e:	4a6c      	ldr	r2, [pc, #432]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a90:	430b      	orrs	r3, r1
 8005a92:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005aa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005aaa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	d03e      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005abc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ac0:	d022      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005ac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ac6:	d81b      	bhi.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ad0:	d00b      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005ad2:	e015      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad8:	3308      	adds	r3, #8
 8005ada:	2100      	movs	r1, #0
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fd3b 	bl	8006558 <RCCEx_PLL2_Config>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ae8:	e00f      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aee:	3328      	adds	r3, #40	@ 0x28
 8005af0:	2102      	movs	r1, #2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fde2 	bl	80066bc <RCCEx_PLL3_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005afe:	e004      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b06:	e000      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10b      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b12:	4b4b      	ldr	r3, [pc, #300]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b16:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005b22:	4a47      	ldr	r2, [pc, #284]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b24:	430b      	orrs	r3, r1
 8005b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b28:	e003      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005b3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b40:	2300      	movs	r3, #0
 8005b42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b44:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	d03b      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b5a:	d01f      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005b5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b60:	d818      	bhi.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b66:	d003      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005b68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b6c:	d007      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005b6e:	e011      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b70:	4b33      	ldr	r3, [pc, #204]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b74:	4a32      	ldr	r2, [pc, #200]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b7c:	e00f      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b82:	3328      	adds	r3, #40	@ 0x28
 8005b84:	2101      	movs	r1, #1
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fd98 	bl	80066bc <RCCEx_PLL3_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b92:	e004      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b9a:	e000      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10b      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ba6:	4b26      	ldr	r3, [pc, #152]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005baa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb6:	4a22      	ldr	r2, [pc, #136]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	6553      	str	r3, [r2, #84]	@ 0x54
 8005bbc:	e003      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005bd2:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	677b      	str	r3, [r7, #116]	@ 0x74
 8005bd8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4313      	orrs	r3, r2
 8005be0:	d034      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bf0:	d007      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005bf2:	e011      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf4:	4b12      	ldr	r3, [pc, #72]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf8:	4a11      	ldr	r2, [pc, #68]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c00:	e00e      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c06:	3308      	adds	r3, #8
 8005c08:	2102      	movs	r1, #2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fca4 	bl	8006558 <RCCEx_PLL2_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c16:	e003      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10d      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c28:	4b05      	ldr	r3, [pc, #20]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c2c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c36:	4a02      	ldr	r2, [pc, #8]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c38:	430b      	orrs	r3, r1
 8005c3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c3c:	e006      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005c3e:	bf00      	nop
 8005c40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005c58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c5e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005c62:	460b      	mov	r3, r1
 8005c64:	4313      	orrs	r3, r2
 8005c66:	d00c      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6c:	3328      	adds	r3, #40	@ 0x28
 8005c6e:	2102      	movs	r1, #2
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fd23 	bl	80066bc <RCCEx_PLL3_Config>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005c8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c90:	2300      	movs	r3, #0
 8005c92:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c94:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	d038      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005caa:	d018      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005cac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cb0:	d811      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cb6:	d014      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cbc:	d80b      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d011      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cc6:	d106      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc8:	4bc3      	ldr	r3, [pc, #780]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ccc:	4ac2      	ldr	r2, [pc, #776]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cdc:	e004      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005cde:	bf00      	nop
 8005ce0:	e002      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005ce2:	bf00      	nop
 8005ce4:	e000      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10b      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cf0:	4bb9      	ldr	r3, [pc, #740]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d00:	4ab5      	ldr	r2, [pc, #724]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d02:	430b      	orrs	r3, r1
 8005d04:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d06:	e003      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005d1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d1e:	2300      	movs	r3, #0
 8005d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d22:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005d26:	460b      	mov	r3, r1
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	d009      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d2c:	4baa      	ldr	r3, [pc, #680]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d3a:	4aa7      	ldr	r2, [pc, #668]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005d4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d4e:	2300      	movs	r3, #0
 8005d50:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005d56:	460b      	mov	r3, r1
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	d00a      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005d5c:	4b9e      	ldr	r3, [pc, #632]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005d6c:	4a9a      	ldr	r2, [pc, #616]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d80:	2300      	movs	r3, #0
 8005d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d84:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	d009      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d8e:	4b92      	ldr	r3, [pc, #584]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d92:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d9c:	4a8e      	ldr	r2, [pc, #568]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d9e:	430b      	orrs	r3, r1
 8005da0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005dae:	643b      	str	r3, [r7, #64]	@ 0x40
 8005db0:	2300      	movs	r3, #0
 8005db2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005db4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005db8:	460b      	mov	r3, r1
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	d00e      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005dbe:	4b86      	ldr	r3, [pc, #536]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	4a85      	ldr	r2, [pc, #532]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dc4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005dc8:	6113      	str	r3, [r2, #16]
 8005dca:	4b83      	ldr	r3, [pc, #524]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dcc:	6919      	ldr	r1, [r3, #16]
 8005dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005dd6:	4a80      	ldr	r2, [pc, #512]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005de8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dea:	2300      	movs	r3, #0
 8005dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005df2:	460b      	mov	r3, r1
 8005df4:	4313      	orrs	r3, r2
 8005df6:	d009      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005df8:	4b77      	ldr	r3, [pc, #476]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dfc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e06:	4a74      	ldr	r2, [pc, #464]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e1e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005e22:	460b      	mov	r3, r1
 8005e24:	4313      	orrs	r3, r2
 8005e26:	d00a      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e28:	4b6b      	ldr	r3, [pc, #428]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e2c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e38:	4a67      	ldr	r2, [pc, #412]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	2100      	movs	r1, #0
 8005e48:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e50:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005e54:	460b      	mov	r3, r1
 8005e56:	4313      	orrs	r3, r2
 8005e58:	d011      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5e:	3308      	adds	r3, #8
 8005e60:	2100      	movs	r1, #0
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fb78 	bl	8006558 <RCCEx_PLL2_Config>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	2100      	movs	r1, #0
 8005e88:	6239      	str	r1, [r7, #32]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e90:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005e94:	460b      	mov	r3, r1
 8005e96:	4313      	orrs	r3, r2
 8005e98:	d011      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9e:	3308      	adds	r3, #8
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 fb58 	bl	8006558 <RCCEx_PLL2_Config>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005eae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	61b9      	str	r1, [r7, #24]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	d011      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ede:	3308      	adds	r3, #8
 8005ee0:	2102      	movs	r1, #2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fb38 	bl	8006558 <RCCEx_PLL2_Config>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005efa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	2100      	movs	r1, #0
 8005f08:	6139      	str	r1, [r7, #16]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005f14:	460b      	mov	r3, r1
 8005f16:	4313      	orrs	r3, r2
 8005f18:	d011      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1e:	3328      	adds	r3, #40	@ 0x28
 8005f20:	2100      	movs	r1, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fbca 	bl	80066bc <RCCEx_PLL3_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	2100      	movs	r1, #0
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f54:	460b      	mov	r3, r1
 8005f56:	4313      	orrs	r3, r2
 8005f58:	d011      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5e:	3328      	adds	r3, #40	@ 0x28
 8005f60:	2101      	movs	r1, #1
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fbaa 	bl	80066bc <RCCEx_PLL3_Config>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	2100      	movs	r1, #0
 8005f88:	6039      	str	r1, [r7, #0]
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	607b      	str	r3, [r7, #4]
 8005f90:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f94:	460b      	mov	r3, r1
 8005f96:	4313      	orrs	r3, r2
 8005f98:	d011      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9e:	3328      	adds	r3, #40	@ 0x28
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fb8a 	bl	80066bc <RCCEx_PLL3_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005fbe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e000      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fd8:	58024400 	.word	0x58024400

08005fdc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005fe0:	f7fe fd96 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	4b06      	ldr	r3, [pc, #24]	@ (8006000 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	091b      	lsrs	r3, r3, #4
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	4904      	ldr	r1, [pc, #16]	@ (8006004 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005ff2:	5ccb      	ldrb	r3, [r1, r3]
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	58024400 	.word	0x58024400
 8006004:	080094e4 	.word	0x080094e4

08006008 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006008:	b480      	push	{r7}
 800600a:	b089      	sub	sp, #36	@ 0x24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006010:	4ba1      	ldr	r3, [pc, #644]	@ (8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800601a:	4b9f      	ldr	r3, [pc, #636]	@ (8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800601c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601e:	0b1b      	lsrs	r3, r3, #12
 8006020:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006024:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006026:	4b9c      	ldr	r3, [pc, #624]	@ (8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602a:	091b      	lsrs	r3, r3, #4
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006032:	4b99      	ldr	r3, [pc, #612]	@ (8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006036:	08db      	lsrs	r3, r3, #3
 8006038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	fb02 f303 	mul.w	r3, r2, r3
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 8111 	beq.w	8006278 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b02      	cmp	r3, #2
 800605a:	f000 8083 	beq.w	8006164 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	2b02      	cmp	r3, #2
 8006062:	f200 80a1 	bhi.w	80061a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d056      	beq.n	8006120 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006072:	e099      	b.n	80061a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006074:	4b88      	ldr	r3, [pc, #544]	@ (8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d02d      	beq.n	80060dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006080:	4b85      	ldr	r3, [pc, #532]	@ (8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	08db      	lsrs	r3, r3, #3
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	4a84      	ldr	r2, [pc, #528]	@ (800629c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800608c:	fa22 f303 	lsr.w	r3, r2, r3
 8006090:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	ee07 3a90 	vmov	s15, r3
 8006098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060aa:	4b7b      	ldr	r3, [pc, #492]	@ (8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80060be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80060da:	e087      	b.n	80061ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80060ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ee:	4b6a      	ldr	r3, [pc, #424]	@ (8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006102:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800610e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800611e:	e065      	b.n	80061ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80062a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800612e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006132:	4b59      	ldr	r3, [pc, #356]	@ (8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006142:	ed97 6a03 	vldr	s12, [r7, #12]
 8006146:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800614a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006162:	e043      	b.n	80061ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80062ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006176:	4b48      	ldr	r3, [pc, #288]	@ (8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006186:	ed97 6a03 	vldr	s12, [r7, #12]
 800618a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800618e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800619a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800619e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061a6:	e021      	b.n	80061ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80062a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ba:	4b37      	ldr	r3, [pc, #220]	@ (8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80061ec:	4b2a      	ldr	r3, [pc, #168]	@ (8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f0:	0a5b      	lsrs	r3, r3, #9
 80061f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006206:	edd7 6a07 	vldr	s13, [r7, #28]
 800620a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800620e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006212:	ee17 2a90 	vmov	r2, s15
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800621a:	4b1f      	ldr	r3, [pc, #124]	@ (8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800621c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621e:	0c1b      	lsrs	r3, r3, #16
 8006220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006224:	ee07 3a90 	vmov	s15, r3
 8006228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006230:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006234:	edd7 6a07 	vldr	s13, [r7, #28]
 8006238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800623c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006240:	ee17 2a90 	vmov	r2, s15
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006248:	4b13      	ldr	r3, [pc, #76]	@ (8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800624a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624c:	0e1b      	lsrs	r3, r3, #24
 800624e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800625e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006262:	edd7 6a07 	vldr	s13, [r7, #28]
 8006266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800626a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800626e:	ee17 2a90 	vmov	r2, s15
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006276:	e008      	b.n	800628a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	609a      	str	r2, [r3, #8]
}
 800628a:	bf00      	nop
 800628c:	3724      	adds	r7, #36	@ 0x24
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	58024400 	.word	0x58024400
 800629c:	03d09000 	.word	0x03d09000
 80062a0:	46000000 	.word	0x46000000
 80062a4:	4c742400 	.word	0x4c742400
 80062a8:	4a742400 	.word	0x4a742400
 80062ac:	4bbebc20 	.word	0x4bbebc20

080062b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b089      	sub	sp, #36	@ 0x24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062b8:	4ba1      	ldr	r3, [pc, #644]	@ (8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80062c2:	4b9f      	ldr	r3, [pc, #636]	@ (8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c6:	0d1b      	lsrs	r3, r3, #20
 80062c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80062ce:	4b9c      	ldr	r3, [pc, #624]	@ (8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d2:	0a1b      	lsrs	r3, r3, #8
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80062da:	4b99      	ldr	r3, [pc, #612]	@ (8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062de:	08db      	lsrs	r3, r3, #3
 80062e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 8111 	beq.w	8006520 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	2b02      	cmp	r3, #2
 8006302:	f000 8083 	beq.w	800640c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	2b02      	cmp	r3, #2
 800630a:	f200 80a1 	bhi.w	8006450 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d056      	beq.n	80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800631a:	e099      	b.n	8006450 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800631c:	4b88      	ldr	r3, [pc, #544]	@ (8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	2b00      	cmp	r3, #0
 8006326:	d02d      	beq.n	8006384 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006328:	4b85      	ldr	r3, [pc, #532]	@ (8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	08db      	lsrs	r3, r3, #3
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	4a84      	ldr	r2, [pc, #528]	@ (8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006334:	fa22 f303 	lsr.w	r3, r2, r3
 8006338:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	ee07 3a90 	vmov	s15, r3
 8006340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	ee07 3a90 	vmov	s15, r3
 800634a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006352:	4b7b      	ldr	r3, [pc, #492]	@ (8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006362:	ed97 6a03 	vldr	s12, [r7, #12]
 8006366:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800636a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800636e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800637a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006382:	e087      	b.n	8006494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800654c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006396:	4b6a      	ldr	r3, [pc, #424]	@ (8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063c6:	e065      	b.n	8006494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006550 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063da:	4b59      	ldr	r3, [pc, #356]	@ (8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800640a:	e043      	b.n	8006494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006416:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800641a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800641e:	4b48      	ldr	r3, [pc, #288]	@ (8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800642e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006432:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800643a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800643e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800644a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800644e:	e021      	b.n	8006494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006550 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800645e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006462:	4b37      	ldr	r3, [pc, #220]	@ (8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006472:	ed97 6a03 	vldr	s12, [r7, #12]
 8006476:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800647a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800647e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800648a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006492:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006494:	4b2a      	ldr	r3, [pc, #168]	@ (8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006498:	0a5b      	lsrs	r3, r3, #9
 800649a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80064b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ba:	ee17 2a90 	vmov	r2, s15
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80064c2:	4b1f      	ldr	r3, [pc, #124]	@ (8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c6:	0c1b      	lsrs	r3, r3, #16
 80064c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064cc:	ee07 3a90 	vmov	s15, r3
 80064d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80064e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064e8:	ee17 2a90 	vmov	r2, s15
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80064f0:	4b13      	ldr	r3, [pc, #76]	@ (8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f4:	0e1b      	lsrs	r3, r3, #24
 80064f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006502:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800650a:	edd7 6a07 	vldr	s13, [r7, #28]
 800650e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006516:	ee17 2a90 	vmov	r2, s15
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800651e:	e008      	b.n	8006532 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	609a      	str	r2, [r3, #8]
}
 8006532:	bf00      	nop
 8006534:	3724      	adds	r7, #36	@ 0x24
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	58024400 	.word	0x58024400
 8006544:	03d09000 	.word	0x03d09000
 8006548:	46000000 	.word	0x46000000
 800654c:	4c742400 	.word	0x4c742400
 8006550:	4a742400 	.word	0x4a742400
 8006554:	4bbebc20 	.word	0x4bbebc20

08006558 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006566:	4b53      	ldr	r3, [pc, #332]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 8006568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	2b03      	cmp	r3, #3
 8006570:	d101      	bne.n	8006576 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e099      	b.n	80066aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006576:	4b4f      	ldr	r3, [pc, #316]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a4e      	ldr	r2, [pc, #312]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 800657c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006582:	f7fc fe0d 	bl	80031a0 <HAL_GetTick>
 8006586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006588:	e008      	b.n	800659c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800658a:	f7fc fe09 	bl	80031a0 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d901      	bls.n	800659c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e086      	b.n	80066aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800659c:	4b45      	ldr	r3, [pc, #276]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1f0      	bne.n	800658a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80065a8:	4b42      	ldr	r3, [pc, #264]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 80065aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	031b      	lsls	r3, r3, #12
 80065b6:	493f      	ldr	r1, [pc, #252]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	025b      	lsls	r3, r3, #9
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	041b      	lsls	r3, r3, #16
 80065da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	061b      	lsls	r3, r3, #24
 80065e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065ec:	4931      	ldr	r1, [pc, #196]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80065f2:	4b30      	ldr	r3, [pc, #192]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 80065f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	492d      	ldr	r1, [pc, #180]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 8006600:	4313      	orrs	r3, r2
 8006602:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006604:	4b2b      	ldr	r3, [pc, #172]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 8006606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006608:	f023 0220 	bic.w	r2, r3, #32
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	4928      	ldr	r1, [pc, #160]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 8006612:	4313      	orrs	r3, r2
 8006614:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006616:	4b27      	ldr	r3, [pc, #156]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 8006618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661a:	4a26      	ldr	r2, [pc, #152]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 800661c:	f023 0310 	bic.w	r3, r3, #16
 8006620:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006622:	4b24      	ldr	r3, [pc, #144]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 8006624:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006626:	4b24      	ldr	r3, [pc, #144]	@ (80066b8 <RCCEx_PLL2_Config+0x160>)
 8006628:	4013      	ands	r3, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	69d2      	ldr	r2, [r2, #28]
 800662e:	00d2      	lsls	r2, r2, #3
 8006630:	4920      	ldr	r1, [pc, #128]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 8006632:	4313      	orrs	r3, r2
 8006634:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006636:	4b1f      	ldr	r3, [pc, #124]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 8006638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663a:	4a1e      	ldr	r2, [pc, #120]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 800663c:	f043 0310 	orr.w	r3, r3, #16
 8006640:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d106      	bne.n	8006656 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006648:	4b1a      	ldr	r3, [pc, #104]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 800664a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664c:	4a19      	ldr	r2, [pc, #100]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 800664e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006652:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006654:	e00f      	b.n	8006676 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d106      	bne.n	800666a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800665c:	4b15      	ldr	r3, [pc, #84]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 800665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006660:	4a14      	ldr	r2, [pc, #80]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 8006662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006666:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006668:	e005      	b.n	8006676 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800666a:	4b12      	ldr	r3, [pc, #72]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 800666c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666e:	4a11      	ldr	r2, [pc, #68]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 8006670:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006674:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006676:	4b0f      	ldr	r3, [pc, #60]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a0e      	ldr	r2, [pc, #56]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 800667c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006682:	f7fc fd8d 	bl	80031a0 <HAL_GetTick>
 8006686:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006688:	e008      	b.n	800669c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800668a:	f7fc fd89 	bl	80031a0 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e006      	b.n	80066aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800669c:	4b05      	ldr	r3, [pc, #20]	@ (80066b4 <RCCEx_PLL2_Config+0x15c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0f0      	beq.n	800668a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	58024400 	.word	0x58024400
 80066b8:	ffff0007 	.word	0xffff0007

080066bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066ca:	4b53      	ldr	r3, [pc, #332]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 80066cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d101      	bne.n	80066da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e099      	b.n	800680e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80066da:	4b4f      	ldr	r3, [pc, #316]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a4e      	ldr	r2, [pc, #312]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 80066e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e6:	f7fc fd5b 	bl	80031a0 <HAL_GetTick>
 80066ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066ec:	e008      	b.n	8006700 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80066ee:	f7fc fd57 	bl	80031a0 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d901      	bls.n	8006700 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e086      	b.n	800680e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006700:	4b45      	ldr	r3, [pc, #276]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1f0      	bne.n	80066ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800670c:	4b42      	ldr	r3, [pc, #264]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 800670e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006710:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	051b      	lsls	r3, r3, #20
 800671a:	493f      	ldr	r1, [pc, #252]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 800671c:	4313      	orrs	r3, r2
 800671e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	3b01      	subs	r3, #1
 8006726:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	3b01      	subs	r3, #1
 8006730:	025b      	lsls	r3, r3, #9
 8006732:	b29b      	uxth	r3, r3
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	3b01      	subs	r3, #1
 800673c:	041b      	lsls	r3, r3, #16
 800673e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006742:	431a      	orrs	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	3b01      	subs	r3, #1
 800674a:	061b      	lsls	r3, r3, #24
 800674c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006750:	4931      	ldr	r1, [pc, #196]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 8006752:	4313      	orrs	r3, r2
 8006754:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006756:	4b30      	ldr	r3, [pc, #192]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 8006758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	492d      	ldr	r1, [pc, #180]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 8006764:	4313      	orrs	r3, r2
 8006766:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006768:	4b2b      	ldr	r3, [pc, #172]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 800676a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	4928      	ldr	r1, [pc, #160]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 8006776:	4313      	orrs	r3, r2
 8006778:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800677a:	4b27      	ldr	r3, [pc, #156]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 800677c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677e:	4a26      	ldr	r2, [pc, #152]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 8006780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006784:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006786:	4b24      	ldr	r3, [pc, #144]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 8006788:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800678a:	4b24      	ldr	r3, [pc, #144]	@ (800681c <RCCEx_PLL3_Config+0x160>)
 800678c:	4013      	ands	r3, r2
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	69d2      	ldr	r2, [r2, #28]
 8006792:	00d2      	lsls	r2, r2, #3
 8006794:	4920      	ldr	r1, [pc, #128]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 8006796:	4313      	orrs	r3, r2
 8006798:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800679a:	4b1f      	ldr	r3, [pc, #124]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 800679c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679e:	4a1e      	ldr	r2, [pc, #120]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 80067a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d106      	bne.n	80067ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80067ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 80067ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b0:	4a19      	ldr	r2, [pc, #100]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 80067b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80067b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80067b8:	e00f      	b.n	80067da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d106      	bne.n	80067ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80067c0:	4b15      	ldr	r3, [pc, #84]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 80067c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c4:	4a14      	ldr	r2, [pc, #80]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 80067c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80067cc:	e005      	b.n	80067da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80067ce:	4b12      	ldr	r3, [pc, #72]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 80067d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d2:	4a11      	ldr	r2, [pc, #68]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 80067d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80067da:	4b0f      	ldr	r3, [pc, #60]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a0e      	ldr	r2, [pc, #56]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 80067e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e6:	f7fc fcdb 	bl	80031a0 <HAL_GetTick>
 80067ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067ec:	e008      	b.n	8006800 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80067ee:	f7fc fcd7 	bl	80031a0 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d901      	bls.n	8006800 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e006      	b.n	800680e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006800:	4b05      	ldr	r3, [pc, #20]	@ (8006818 <RCCEx_PLL3_Config+0x15c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0f0      	beq.n	80067ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800680c:	7bfb      	ldrb	r3, [r7, #15]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	58024400 	.word	0x58024400
 800681c:	ffff0007 	.word	0xffff0007

08006820 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e10f      	b.n	8006a52 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a87      	ldr	r2, [pc, #540]	@ (8006a5c <HAL_SPI_Init+0x23c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00f      	beq.n	8006862 <HAL_SPI_Init+0x42>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a86      	ldr	r2, [pc, #536]	@ (8006a60 <HAL_SPI_Init+0x240>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00a      	beq.n	8006862 <HAL_SPI_Init+0x42>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a84      	ldr	r2, [pc, #528]	@ (8006a64 <HAL_SPI_Init+0x244>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d005      	beq.n	8006862 <HAL_SPI_Init+0x42>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	2b0f      	cmp	r3, #15
 800685c:	d901      	bls.n	8006862 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e0f7      	b.n	8006a52 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fe3c 	bl	80074e0 <SPI_GetPacketSize>
 8006868:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a7b      	ldr	r2, [pc, #492]	@ (8006a5c <HAL_SPI_Init+0x23c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00c      	beq.n	800688e <HAL_SPI_Init+0x6e>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a79      	ldr	r2, [pc, #484]	@ (8006a60 <HAL_SPI_Init+0x240>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d007      	beq.n	800688e <HAL_SPI_Init+0x6e>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a78      	ldr	r2, [pc, #480]	@ (8006a64 <HAL_SPI_Init+0x244>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d002      	beq.n	800688e <HAL_SPI_Init+0x6e>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b08      	cmp	r3, #8
 800688c:	d811      	bhi.n	80068b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006892:	4a72      	ldr	r2, [pc, #456]	@ (8006a5c <HAL_SPI_Init+0x23c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d009      	beq.n	80068ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a70      	ldr	r2, [pc, #448]	@ (8006a60 <HAL_SPI_Init+0x240>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d004      	beq.n	80068ac <HAL_SPI_Init+0x8c>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a6f      	ldr	r2, [pc, #444]	@ (8006a64 <HAL_SPI_Init+0x244>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d104      	bne.n	80068b6 <HAL_SPI_Init+0x96>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b10      	cmp	r3, #16
 80068b0:	d901      	bls.n	80068b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e0cd      	b.n	8006a52 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d106      	bne.n	80068d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7fa fa22 	bl	8000d14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0201 	bic.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80068f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068fc:	d119      	bne.n	8006932 <HAL_SPI_Init+0x112>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006906:	d103      	bne.n	8006910 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800690c:	2b00      	cmp	r3, #0
 800690e:	d008      	beq.n	8006922 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10c      	bne.n	8006932 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800691c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006920:	d107      	bne.n	8006932 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006930:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00f      	beq.n	800695e <HAL_SPI_Init+0x13e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	2b06      	cmp	r3, #6
 8006944:	d90b      	bls.n	800695e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	e007      	b.n	800696e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800696c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	69da      	ldr	r2, [r3, #28]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006976:	431a      	orrs	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006980:	ea42 0103 	orr.w	r1, r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	431a      	orrs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	431a      	orrs	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	431a      	orrs	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069c2:	431a      	orrs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ce:	ea42 0103 	orr.w	r1, r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d113      	bne.n	8006a0e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006a0c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0201 	bic.w	r2, r2, #1
 8006a1c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40013000 	.word	0x40013000
 8006a60:	40003800 	.word	0x40003800
 8006a64:	40003c00 	.word	0x40003c00

08006a68 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	4613      	mov	r3, r2
 8006a76:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3320      	adds	r3, #32
 8006a7e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a80:	f7fc fb8e 	bl	80031a0 <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d001      	beq.n	8006a96 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006a92:	2302      	movs	r3, #2
 8006a94:	e1d1      	b.n	8006e3a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <HAL_SPI_Transmit+0x3a>
 8006a9c:	88fb      	ldrh	r3, [r7, #6]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e1c9      	b.n	8006e3a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d101      	bne.n	8006ab4 <HAL_SPI_Transmit+0x4c>
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	e1c2      	b.n	8006e3a <HAL_SPI_Transmit+0x3d2>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2203      	movs	r2, #3
 8006ac0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	88fa      	ldrh	r2, [r7, #6]
 8006ad6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	88fa      	ldrh	r2, [r7, #6]
 8006ade:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006b0c:	d108      	bne.n	8006b20 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	e009      	b.n	8006b34 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006b32:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	4b96      	ldr	r3, [pc, #600]	@ (8006d94 <HAL_SPI_Transmit+0x32c>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	88f9      	ldrh	r1, [r7, #6]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	6812      	ldr	r2, [r2, #0]
 8006b44:	430b      	orrs	r3, r1
 8006b46:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0201 	orr.w	r2, r2, #1
 8006b56:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b60:	d107      	bne.n	8006b72 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	2b0f      	cmp	r3, #15
 8006b78:	d947      	bls.n	8006c0a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006b7a:	e03f      	b.n	8006bfc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d114      	bne.n	8006bb4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6812      	ldr	r2, [r2, #0]
 8006b94:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b9a:	1d1a      	adds	r2, r3, #4
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006bb2:	e023      	b.n	8006bfc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bb4:	f7fc faf4 	bl	80031a0 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d803      	bhi.n	8006bcc <HAL_SPI_Transmit+0x164>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bca:	d102      	bne.n	8006bd2 <HAL_SPI_Transmit+0x16a>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d114      	bne.n	8006bfc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 fbb6 	bl	8007344 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e11e      	b.n	8006e3a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1b9      	bne.n	8006b7c <HAL_SPI_Transmit+0x114>
 8006c08:	e0f1      	b.n	8006dee <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	2b07      	cmp	r3, #7
 8006c10:	f240 80e6 	bls.w	8006de0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006c14:	e05d      	b.n	8006cd2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d132      	bne.n	8006c8a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d918      	bls.n	8006c62 <HAL_SPI_Transmit+0x1fa>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d014      	beq.n	8006c62 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6812      	ldr	r2, [r2, #0]
 8006c42:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c48:	1d1a      	adds	r2, r3, #4
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b02      	subs	r3, #2
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006c60:	e037      	b.n	8006cd2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c66:	881a      	ldrh	r2, [r3, #0]
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c70:	1c9a      	adds	r2, r3, #2
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006c88:	e023      	b.n	8006cd2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c8a:	f7fc fa89 	bl	80031a0 <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d803      	bhi.n	8006ca2 <HAL_SPI_Transmit+0x23a>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca0:	d102      	bne.n	8006ca8 <HAL_SPI_Transmit+0x240>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d114      	bne.n	8006cd2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 fb4b 	bl	8007344 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e0b3      	b.n	8006e3a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d19b      	bne.n	8006c16 <HAL_SPI_Transmit+0x1ae>
 8006cde:	e086      	b.n	8006dee <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d154      	bne.n	8006d98 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d918      	bls.n	8006d2c <HAL_SPI_Transmit+0x2c4>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cfe:	2b40      	cmp	r3, #64	@ 0x40
 8006d00:	d914      	bls.n	8006d2c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6812      	ldr	r2, [r2, #0]
 8006d0c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d12:	1d1a      	adds	r2, r3, #4
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b04      	subs	r3, #4
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006d2a:	e059      	b.n	8006de0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d917      	bls.n	8006d68 <HAL_SPI_Transmit+0x300>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d013      	beq.n	8006d68 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d44:	881a      	ldrh	r2, [r3, #0]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d4e:	1c9a      	adds	r2, r3, #2
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3b02      	subs	r3, #2
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006d66:	e03b      	b.n	8006de0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3320      	adds	r3, #32
 8006d72:	7812      	ldrb	r2, [r2, #0]
 8006d74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006d92:	e025      	b.n	8006de0 <HAL_SPI_Transmit+0x378>
 8006d94:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d98:	f7fc fa02 	bl	80031a0 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d803      	bhi.n	8006db0 <HAL_SPI_Transmit+0x348>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dae:	d102      	bne.n	8006db6 <HAL_SPI_Transmit+0x34e>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d114      	bne.n	8006de0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 fac4 	bl	8007344 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dc2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e02c      	b.n	8006e3a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f47f af79 	bne.w	8006ce0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2200      	movs	r2, #0
 8006df6:	2108      	movs	r1, #8
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 fb43 	bl	8007484 <SPI_WaitOnFlagUntilTimeout>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e0a:	f043 0220 	orr.w	r2, r3, #32
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 fa95 	bl	8007344 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006e38:	2300      	movs	r3, #0
  }
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop

08006e44 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	603b      	str	r3, [r7, #0]
 8006e50:	4613      	mov	r3, r2
 8006e52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e58:	095b      	lsrs	r3, r3, #5
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3330      	adds	r3, #48	@ 0x30
 8006e66:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e68:	f7fc f99a 	bl	80031a0 <HAL_GetTick>
 8006e6c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d001      	beq.n	8006e7e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	e250      	b.n	8007320 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <HAL_SPI_Receive+0x46>
 8006e84:	88fb      	ldrh	r3, [r7, #6]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e248      	b.n	8007320 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d101      	bne.n	8006e9c <HAL_SPI_Receive+0x58>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	e241      	b.n	8007320 <HAL_SPI_Receive+0x4dc>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2204      	movs	r2, #4
 8006ea8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	88fa      	ldrh	r2, [r7, #6]
 8006ebe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	88fa      	ldrh	r2, [r7, #6]
 8006ec6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006ef4:	d108      	bne.n	8006f08 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	e009      	b.n	8006f1c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006f1a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	4b95      	ldr	r3, [pc, #596]	@ (8007178 <HAL_SPI_Receive+0x334>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	88f9      	ldrh	r1, [r7, #6]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	6812      	ldr	r2, [r2, #0]
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f48:	d107      	bne.n	8006f5a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	2b0f      	cmp	r3, #15
 8006f60:	d96c      	bls.n	800703c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006f62:	e064      	b.n	800702e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d114      	bne.n	8006fa4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f82:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006f84:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f8a:	1d1a      	adds	r2, r3, #4
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006fa2:	e044      	b.n	800702e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	8bfa      	ldrh	r2, [r7, #30]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d919      	bls.n	8006fe6 <HAL_SPI_Receive+0x1a2>
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d014      	beq.n	8006fe6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006fc6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fcc:	1d1a      	adds	r2, r3, #4
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006fe4:	e023      	b.n	800702e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fe6:	f7fc f8db 	bl	80031a0 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d803      	bhi.n	8006ffe <HAL_SPI_Receive+0x1ba>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d102      	bne.n	8007004 <HAL_SPI_Receive+0x1c0>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d114      	bne.n	800702e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f99d 	bl	8007344 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007010:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e178      	b.n	8007320 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d194      	bne.n	8006f64 <HAL_SPI_Receive+0x120>
 800703a:	e15e      	b.n	80072fa <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	2b07      	cmp	r3, #7
 8007042:	f240 8153 	bls.w	80072ec <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007046:	e08f      	b.n	8007168 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b01      	cmp	r3, #1
 800705c:	d114      	bne.n	8007088 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	8812      	ldrh	r2, [r2, #0]
 8007066:	b292      	uxth	r2, r2
 8007068:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800706e:	1c9a      	adds	r2, r3, #2
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800707a:	b29b      	uxth	r3, r3
 800707c:	3b01      	subs	r3, #1
 800707e:	b29a      	uxth	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007086:	e06f      	b.n	8007168 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800708e:	b29b      	uxth	r3, r3
 8007090:	8bfa      	ldrh	r2, [r7, #30]
 8007092:	429a      	cmp	r2, r3
 8007094:	d924      	bls.n	80070e0 <HAL_SPI_Receive+0x29c>
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01f      	beq.n	80070e0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	8812      	ldrh	r2, [r2, #0]
 80070a8:	b292      	uxth	r2, r2
 80070aa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070b0:	1c9a      	adds	r2, r3, #2
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	8812      	ldrh	r2, [r2, #0]
 80070be:	b292      	uxth	r2, r2
 80070c0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070c6:	1c9a      	adds	r2, r3, #2
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	3b02      	subs	r3, #2
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80070de:	e043      	b.n	8007168 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d119      	bne.n	8007120 <HAL_SPI_Receive+0x2dc>
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d014      	beq.n	8007120 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070fa:	69ba      	ldr	r2, [r7, #24]
 80070fc:	8812      	ldrh	r2, [r2, #0]
 80070fe:	b292      	uxth	r2, r2
 8007100:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007106:	1c9a      	adds	r2, r3, #2
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007112:	b29b      	uxth	r3, r3
 8007114:	3b01      	subs	r3, #1
 8007116:	b29a      	uxth	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800711e:	e023      	b.n	8007168 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007120:	f7fc f83e 	bl	80031a0 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d803      	bhi.n	8007138 <HAL_SPI_Receive+0x2f4>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007136:	d102      	bne.n	800713e <HAL_SPI_Receive+0x2fa>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d114      	bne.n	8007168 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 f900 	bl	8007344 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800714a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e0db      	b.n	8007320 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800716e:	b29b      	uxth	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	f47f af69 	bne.w	8007048 <HAL_SPI_Receive+0x204>
 8007176:	e0c0      	b.n	80072fa <HAL_SPI_Receive+0x4b6>
 8007178:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b01      	cmp	r3, #1
 8007190:	d117      	bne.n	80071c2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800719e:	7812      	ldrb	r2, [r2, #0]
 80071a0:	b2d2      	uxtb	r2, r2
 80071a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	3b01      	subs	r3, #1
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80071c0:	e094      	b.n	80072ec <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	8bfa      	ldrh	r2, [r7, #30]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d946      	bls.n	800725e <HAL_SPI_Receive+0x41a>
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d041      	beq.n	800725e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071e6:	7812      	ldrb	r2, [r2, #0]
 80071e8:	b2d2      	uxtb	r2, r2
 80071ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007202:	7812      	ldrb	r2, [r2, #0]
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800720c:	1c5a      	adds	r2, r3, #1
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800721e:	7812      	ldrb	r2, [r2, #0]
 8007220:	b2d2      	uxtb	r2, r2
 8007222:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800723a:	7812      	ldrb	r2, [r2, #0]
 800723c:	b2d2      	uxtb	r2, r2
 800723e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007250:	b29b      	uxth	r3, r3
 8007252:	3b04      	subs	r3, #4
 8007254:	b29a      	uxth	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800725c:	e046      	b.n	80072ec <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b03      	cmp	r3, #3
 8007268:	d81c      	bhi.n	80072a4 <HAL_SPI_Receive+0x460>
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d017      	beq.n	80072a4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007280:	7812      	ldrb	r2, [r2, #0]
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80072a2:	e023      	b.n	80072ec <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072a4:	f7fb ff7c 	bl	80031a0 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d803      	bhi.n	80072bc <HAL_SPI_Receive+0x478>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ba:	d102      	bne.n	80072c2 <HAL_SPI_Receive+0x47e>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d114      	bne.n	80072ec <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f83e 	bl	8007344 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e019      	b.n	8007320 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f47f af41 	bne.w	800717c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 f822 	bl	8007344 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e000      	b.n	8007320 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800731e:	2300      	movs	r3, #0
  }
}
 8007320:	4618      	mov	r0, r3
 8007322:	3720      	adds	r7, #32
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007336:	b2db      	uxtb	r3, r3
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0208 	orr.w	r2, r2, #8
 8007362:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699a      	ldr	r2, [r3, #24]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f042 0210 	orr.w	r2, r2, #16
 8007372:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0201 	bic.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6919      	ldr	r1, [r3, #16]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	4b3c      	ldr	r3, [pc, #240]	@ (8007480 <SPI_CloseTransfer+0x13c>)
 8007390:	400b      	ands	r3, r1
 8007392:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80073a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d014      	beq.n	80073da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00f      	beq.n	80073da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	699a      	ldr	r2, [r3, #24]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 0220 	orr.w	r2, r2, #32
 80073d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d014      	beq.n	8007410 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00f      	beq.n	8007410 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073f6:	f043 0204 	orr.w	r2, r3, #4
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800740e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00f      	beq.n	800743a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007420:	f043 0201 	orr.w	r2, r3, #1
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	699a      	ldr	r2, [r3, #24]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007438:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00f      	beq.n	8007464 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800744a:	f043 0208 	orr.w	r2, r3, #8
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007462:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007474:	bf00      	nop
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	fffffc90 	.word	0xfffffc90

08007484 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	603b      	str	r3, [r7, #0]
 8007490:	4613      	mov	r3, r2
 8007492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007494:	e010      	b.n	80074b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007496:	f7fb fe83 	bl	80031a0 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d803      	bhi.n	80074ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ac:	d102      	bne.n	80074b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e00f      	b.n	80074d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	695a      	ldr	r2, [r3, #20]
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	4013      	ands	r3, r2
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	bf0c      	ite	eq
 80074c8:	2301      	moveq	r3, #1
 80074ca:	2300      	movne	r3, #0
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	461a      	mov	r2, r3
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d0df      	beq.n	8007496 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ec:	095b      	lsrs	r3, r3, #5
 80074ee:	3301      	adds	r3, #1
 80074f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	3301      	adds	r3, #1
 80074f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	3307      	adds	r3, #7
 80074fe:	08db      	lsrs	r3, r3, #3
 8007500:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	fb02 f303 	mul.w	r3, r2, r3
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e049      	b.n	80075bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d106      	bne.n	8007542 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7f9 fe5d 	bl	80011fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3304      	adds	r3, #4
 8007552:	4619      	mov	r1, r3
 8007554:	4610      	mov	r0, r2
 8007556:	f000 fa09 	bl	800796c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e049      	b.n	800766a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f841 	bl	8007672 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3304      	adds	r3, #4
 8007600:	4619      	mov	r1, r3
 8007602:	4610      	mov	r0, r2
 8007604:	f000 f9b2 	bl	800796c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
	...

08007688 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d101      	bne.n	80076a6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80076a2:	2302      	movs	r3, #2
 80076a4:	e066      	b.n	8007774 <HAL_TIM_OC_ConfigChannel+0xec>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b14      	cmp	r3, #20
 80076b2:	d857      	bhi.n	8007764 <HAL_TIM_OC_ConfigChannel+0xdc>
 80076b4:	a201      	add	r2, pc, #4	@ (adr r2, 80076bc <HAL_TIM_OC_ConfigChannel+0x34>)
 80076b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ba:	bf00      	nop
 80076bc:	08007711 	.word	0x08007711
 80076c0:	08007765 	.word	0x08007765
 80076c4:	08007765 	.word	0x08007765
 80076c8:	08007765 	.word	0x08007765
 80076cc:	0800771f 	.word	0x0800771f
 80076d0:	08007765 	.word	0x08007765
 80076d4:	08007765 	.word	0x08007765
 80076d8:	08007765 	.word	0x08007765
 80076dc:	0800772d 	.word	0x0800772d
 80076e0:	08007765 	.word	0x08007765
 80076e4:	08007765 	.word	0x08007765
 80076e8:	08007765 	.word	0x08007765
 80076ec:	0800773b 	.word	0x0800773b
 80076f0:	08007765 	.word	0x08007765
 80076f4:	08007765 	.word	0x08007765
 80076f8:	08007765 	.word	0x08007765
 80076fc:	08007749 	.word	0x08007749
 8007700:	08007765 	.word	0x08007765
 8007704:	08007765 	.word	0x08007765
 8007708:	08007765 	.word	0x08007765
 800770c:	08007757 	.word	0x08007757
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68b9      	ldr	r1, [r7, #8]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 f9ce 	bl	8007ab8 <TIM_OC1_SetConfig>
      break;
 800771c:	e025      	b.n	800776a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68b9      	ldr	r1, [r7, #8]
 8007724:	4618      	mov	r0, r3
 8007726:	f000 fa57 	bl	8007bd8 <TIM_OC2_SetConfig>
      break;
 800772a:	e01e      	b.n	800776a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68b9      	ldr	r1, [r7, #8]
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fada 	bl	8007cec <TIM_OC3_SetConfig>
      break;
 8007738:	e017      	b.n	800776a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68b9      	ldr	r1, [r7, #8]
 8007740:	4618      	mov	r0, r3
 8007742:	f000 fb5b 	bl	8007dfc <TIM_OC4_SetConfig>
      break;
 8007746:	e010      	b.n	800776a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68b9      	ldr	r1, [r7, #8]
 800774e:	4618      	mov	r0, r3
 8007750:	f000 fbbe 	bl	8007ed0 <TIM_OC5_SetConfig>
      break;
 8007754:	e009      	b.n	800776a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	4618      	mov	r0, r3
 800775e:	f000 fc1b 	bl	8007f98 <TIM_OC6_SetConfig>
      break;
 8007762:	e002      	b.n	800776a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	75fb      	strb	r3, [r7, #23]
      break;
 8007768:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007772:	7dfb      	ldrb	r3, [r7, #23]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007790:	2b01      	cmp	r3, #1
 8007792:	d101      	bne.n	8007798 <HAL_TIM_ConfigClockSource+0x1c>
 8007794:	2302      	movs	r3, #2
 8007796:	e0dc      	b.n	8007952 <HAL_TIM_ConfigClockSource+0x1d6>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	4b6a      	ldr	r3, [pc, #424]	@ (800795c <HAL_TIM_ConfigClockSource+0x1e0>)
 80077b4:	4013      	ands	r3, r2
 80077b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a64      	ldr	r2, [pc, #400]	@ (8007960 <HAL_TIM_ConfigClockSource+0x1e4>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	f000 80a9 	beq.w	8007926 <HAL_TIM_ConfigClockSource+0x1aa>
 80077d4:	4a62      	ldr	r2, [pc, #392]	@ (8007960 <HAL_TIM_ConfigClockSource+0x1e4>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	f200 80ae 	bhi.w	8007938 <HAL_TIM_ConfigClockSource+0x1bc>
 80077dc:	4a61      	ldr	r2, [pc, #388]	@ (8007964 <HAL_TIM_ConfigClockSource+0x1e8>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	f000 80a1 	beq.w	8007926 <HAL_TIM_ConfigClockSource+0x1aa>
 80077e4:	4a5f      	ldr	r2, [pc, #380]	@ (8007964 <HAL_TIM_ConfigClockSource+0x1e8>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	f200 80a6 	bhi.w	8007938 <HAL_TIM_ConfigClockSource+0x1bc>
 80077ec:	4a5e      	ldr	r2, [pc, #376]	@ (8007968 <HAL_TIM_ConfigClockSource+0x1ec>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	f000 8099 	beq.w	8007926 <HAL_TIM_ConfigClockSource+0x1aa>
 80077f4:	4a5c      	ldr	r2, [pc, #368]	@ (8007968 <HAL_TIM_ConfigClockSource+0x1ec>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	f200 809e 	bhi.w	8007938 <HAL_TIM_ConfigClockSource+0x1bc>
 80077fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007800:	f000 8091 	beq.w	8007926 <HAL_TIM_ConfigClockSource+0x1aa>
 8007804:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007808:	f200 8096 	bhi.w	8007938 <HAL_TIM_ConfigClockSource+0x1bc>
 800780c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007810:	f000 8089 	beq.w	8007926 <HAL_TIM_ConfigClockSource+0x1aa>
 8007814:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007818:	f200 808e 	bhi.w	8007938 <HAL_TIM_ConfigClockSource+0x1bc>
 800781c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007820:	d03e      	beq.n	80078a0 <HAL_TIM_ConfigClockSource+0x124>
 8007822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007826:	f200 8087 	bhi.w	8007938 <HAL_TIM_ConfigClockSource+0x1bc>
 800782a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800782e:	f000 8086 	beq.w	800793e <HAL_TIM_ConfigClockSource+0x1c2>
 8007832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007836:	d87f      	bhi.n	8007938 <HAL_TIM_ConfigClockSource+0x1bc>
 8007838:	2b70      	cmp	r3, #112	@ 0x70
 800783a:	d01a      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0xf6>
 800783c:	2b70      	cmp	r3, #112	@ 0x70
 800783e:	d87b      	bhi.n	8007938 <HAL_TIM_ConfigClockSource+0x1bc>
 8007840:	2b60      	cmp	r3, #96	@ 0x60
 8007842:	d050      	beq.n	80078e6 <HAL_TIM_ConfigClockSource+0x16a>
 8007844:	2b60      	cmp	r3, #96	@ 0x60
 8007846:	d877      	bhi.n	8007938 <HAL_TIM_ConfigClockSource+0x1bc>
 8007848:	2b50      	cmp	r3, #80	@ 0x50
 800784a:	d03c      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0x14a>
 800784c:	2b50      	cmp	r3, #80	@ 0x50
 800784e:	d873      	bhi.n	8007938 <HAL_TIM_ConfigClockSource+0x1bc>
 8007850:	2b40      	cmp	r3, #64	@ 0x40
 8007852:	d058      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x18a>
 8007854:	2b40      	cmp	r3, #64	@ 0x40
 8007856:	d86f      	bhi.n	8007938 <HAL_TIM_ConfigClockSource+0x1bc>
 8007858:	2b30      	cmp	r3, #48	@ 0x30
 800785a:	d064      	beq.n	8007926 <HAL_TIM_ConfigClockSource+0x1aa>
 800785c:	2b30      	cmp	r3, #48	@ 0x30
 800785e:	d86b      	bhi.n	8007938 <HAL_TIM_ConfigClockSource+0x1bc>
 8007860:	2b20      	cmp	r3, #32
 8007862:	d060      	beq.n	8007926 <HAL_TIM_ConfigClockSource+0x1aa>
 8007864:	2b20      	cmp	r3, #32
 8007866:	d867      	bhi.n	8007938 <HAL_TIM_ConfigClockSource+0x1bc>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d05c      	beq.n	8007926 <HAL_TIM_ConfigClockSource+0x1aa>
 800786c:	2b10      	cmp	r3, #16
 800786e:	d05a      	beq.n	8007926 <HAL_TIM_ConfigClockSource+0x1aa>
 8007870:	e062      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007882:	f000 fc6d 	bl	8008160 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007894:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	609a      	str	r2, [r3, #8]
      break;
 800789e:	e04f      	b.n	8007940 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078b0:	f000 fc56 	bl	8008160 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689a      	ldr	r2, [r3, #8]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078c2:	609a      	str	r2, [r3, #8]
      break;
 80078c4:	e03c      	b.n	8007940 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078d2:	461a      	mov	r2, r3
 80078d4:	f000 fbc6 	bl	8008064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2150      	movs	r1, #80	@ 0x50
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 fc20 	bl	8008124 <TIM_ITRx_SetConfig>
      break;
 80078e4:	e02c      	b.n	8007940 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078f2:	461a      	mov	r2, r3
 80078f4:	f000 fbe5 	bl	80080c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2160      	movs	r1, #96	@ 0x60
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fc10 	bl	8008124 <TIM_ITRx_SetConfig>
      break;
 8007904:	e01c      	b.n	8007940 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007912:	461a      	mov	r2, r3
 8007914:	f000 fba6 	bl	8008064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2140      	movs	r1, #64	@ 0x40
 800791e:	4618      	mov	r0, r3
 8007920:	f000 fc00 	bl	8008124 <TIM_ITRx_SetConfig>
      break;
 8007924:	e00c      	b.n	8007940 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4619      	mov	r1, r3
 8007930:	4610      	mov	r0, r2
 8007932:	f000 fbf7 	bl	8008124 <TIM_ITRx_SetConfig>
      break;
 8007936:	e003      	b.n	8007940 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	73fb      	strb	r3, [r7, #15]
      break;
 800793c:	e000      	b.n	8007940 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800793e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007950:	7bfb      	ldrb	r3, [r7, #15]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	ffceff88 	.word	0xffceff88
 8007960:	00100040 	.word	0x00100040
 8007964:	00100030 	.word	0x00100030
 8007968:	00100020 	.word	0x00100020

0800796c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a46      	ldr	r2, [pc, #280]	@ (8007a98 <TIM_Base_SetConfig+0x12c>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d013      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800798a:	d00f      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a43      	ldr	r2, [pc, #268]	@ (8007a9c <TIM_Base_SetConfig+0x130>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00b      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a42      	ldr	r2, [pc, #264]	@ (8007aa0 <TIM_Base_SetConfig+0x134>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d007      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a41      	ldr	r2, [pc, #260]	@ (8007aa4 <TIM_Base_SetConfig+0x138>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d003      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a40      	ldr	r2, [pc, #256]	@ (8007aa8 <TIM_Base_SetConfig+0x13c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d108      	bne.n	80079be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a35      	ldr	r2, [pc, #212]	@ (8007a98 <TIM_Base_SetConfig+0x12c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d01f      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079cc:	d01b      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a32      	ldr	r2, [pc, #200]	@ (8007a9c <TIM_Base_SetConfig+0x130>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d017      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a31      	ldr	r2, [pc, #196]	@ (8007aa0 <TIM_Base_SetConfig+0x134>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d013      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a30      	ldr	r2, [pc, #192]	@ (8007aa4 <TIM_Base_SetConfig+0x138>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00f      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a2f      	ldr	r2, [pc, #188]	@ (8007aa8 <TIM_Base_SetConfig+0x13c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d00b      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a2e      	ldr	r2, [pc, #184]	@ (8007aac <TIM_Base_SetConfig+0x140>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d007      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a2d      	ldr	r2, [pc, #180]	@ (8007ab0 <TIM_Base_SetConfig+0x144>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d003      	beq.n	8007a06 <TIM_Base_SetConfig+0x9a>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a2c      	ldr	r2, [pc, #176]	@ (8007ab4 <TIM_Base_SetConfig+0x148>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d108      	bne.n	8007a18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a16      	ldr	r2, [pc, #88]	@ (8007a98 <TIM_Base_SetConfig+0x12c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d00f      	beq.n	8007a64 <TIM_Base_SetConfig+0xf8>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a18      	ldr	r2, [pc, #96]	@ (8007aa8 <TIM_Base_SetConfig+0x13c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00b      	beq.n	8007a64 <TIM_Base_SetConfig+0xf8>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a17      	ldr	r2, [pc, #92]	@ (8007aac <TIM_Base_SetConfig+0x140>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d007      	beq.n	8007a64 <TIM_Base_SetConfig+0xf8>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a16      	ldr	r2, [pc, #88]	@ (8007ab0 <TIM_Base_SetConfig+0x144>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d003      	beq.n	8007a64 <TIM_Base_SetConfig+0xf8>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a15      	ldr	r2, [pc, #84]	@ (8007ab4 <TIM_Base_SetConfig+0x148>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d103      	bne.n	8007a6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	691a      	ldr	r2, [r3, #16]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d105      	bne.n	8007a8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	f023 0201 	bic.w	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	611a      	str	r2, [r3, #16]
  }
}
 8007a8a:	bf00      	nop
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	40010000 	.word	0x40010000
 8007a9c:	40000400 	.word	0x40000400
 8007aa0:	40000800 	.word	0x40000800
 8007aa4:	40000c00 	.word	0x40000c00
 8007aa8:	40010400 	.word	0x40010400
 8007aac:	40014000 	.word	0x40014000
 8007ab0:	40014400 	.word	0x40014400
 8007ab4:	40014800 	.word	0x40014800

08007ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	f023 0201 	bic.w	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4b37      	ldr	r3, [pc, #220]	@ (8007bc0 <TIM_OC1_SetConfig+0x108>)
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f023 0302 	bic.w	r3, r3, #2
 8007b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8007bc4 <TIM_OC1_SetConfig+0x10c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d00f      	beq.n	8007b34 <TIM_OC1_SetConfig+0x7c>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a2c      	ldr	r2, [pc, #176]	@ (8007bc8 <TIM_OC1_SetConfig+0x110>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d00b      	beq.n	8007b34 <TIM_OC1_SetConfig+0x7c>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a2b      	ldr	r2, [pc, #172]	@ (8007bcc <TIM_OC1_SetConfig+0x114>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d007      	beq.n	8007b34 <TIM_OC1_SetConfig+0x7c>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a2a      	ldr	r2, [pc, #168]	@ (8007bd0 <TIM_OC1_SetConfig+0x118>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d003      	beq.n	8007b34 <TIM_OC1_SetConfig+0x7c>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a29      	ldr	r2, [pc, #164]	@ (8007bd4 <TIM_OC1_SetConfig+0x11c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d10c      	bne.n	8007b4e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f023 0308 	bic.w	r3, r3, #8
 8007b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f023 0304 	bic.w	r3, r3, #4
 8007b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a1c      	ldr	r2, [pc, #112]	@ (8007bc4 <TIM_OC1_SetConfig+0x10c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d00f      	beq.n	8007b76 <TIM_OC1_SetConfig+0xbe>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a1b      	ldr	r2, [pc, #108]	@ (8007bc8 <TIM_OC1_SetConfig+0x110>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d00b      	beq.n	8007b76 <TIM_OC1_SetConfig+0xbe>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a1a      	ldr	r2, [pc, #104]	@ (8007bcc <TIM_OC1_SetConfig+0x114>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d007      	beq.n	8007b76 <TIM_OC1_SetConfig+0xbe>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a19      	ldr	r2, [pc, #100]	@ (8007bd0 <TIM_OC1_SetConfig+0x118>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d003      	beq.n	8007b76 <TIM_OC1_SetConfig+0xbe>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a18      	ldr	r2, [pc, #96]	@ (8007bd4 <TIM_OC1_SetConfig+0x11c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d111      	bne.n	8007b9a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	621a      	str	r2, [r3, #32]
}
 8007bb4:	bf00      	nop
 8007bb6:	371c      	adds	r7, #28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	fffeff8f 	.word	0xfffeff8f
 8007bc4:	40010000 	.word	0x40010000
 8007bc8:	40010400 	.word	0x40010400
 8007bcc:	40014000 	.word	0x40014000
 8007bd0:	40014400 	.word	0x40014400
 8007bd4:	40014800 	.word	0x40014800

08007bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	f023 0210 	bic.w	r2, r3, #16
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4b34      	ldr	r3, [pc, #208]	@ (8007cd4 <TIM_OC2_SetConfig+0xfc>)
 8007c04:	4013      	ands	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	021b      	lsls	r3, r3, #8
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f023 0320 	bic.w	r3, r3, #32
 8007c22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a29      	ldr	r2, [pc, #164]	@ (8007cd8 <TIM_OC2_SetConfig+0x100>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d003      	beq.n	8007c40 <TIM_OC2_SetConfig+0x68>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a28      	ldr	r2, [pc, #160]	@ (8007cdc <TIM_OC2_SetConfig+0x104>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d10d      	bne.n	8007c5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	011b      	lsls	r3, r3, #4
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8007cd8 <TIM_OC2_SetConfig+0x100>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00f      	beq.n	8007c84 <TIM_OC2_SetConfig+0xac>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a1d      	ldr	r2, [pc, #116]	@ (8007cdc <TIM_OC2_SetConfig+0x104>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00b      	beq.n	8007c84 <TIM_OC2_SetConfig+0xac>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ce0 <TIM_OC2_SetConfig+0x108>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d007      	beq.n	8007c84 <TIM_OC2_SetConfig+0xac>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a1b      	ldr	r2, [pc, #108]	@ (8007ce4 <TIM_OC2_SetConfig+0x10c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d003      	beq.n	8007c84 <TIM_OC2_SetConfig+0xac>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ce8 <TIM_OC2_SetConfig+0x110>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d113      	bne.n	8007cac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	621a      	str	r2, [r3, #32]
}
 8007cc6:	bf00      	nop
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	feff8fff 	.word	0xfeff8fff
 8007cd8:	40010000 	.word	0x40010000
 8007cdc:	40010400 	.word	0x40010400
 8007ce0:	40014000 	.word	0x40014000
 8007ce4:	40014400 	.word	0x40014400
 8007ce8:	40014800 	.word	0x40014800

08007cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b087      	sub	sp, #28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4b33      	ldr	r3, [pc, #204]	@ (8007de4 <TIM_OC3_SetConfig+0xf8>)
 8007d18:	4013      	ands	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f023 0303 	bic.w	r3, r3, #3
 8007d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	021b      	lsls	r3, r3, #8
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a28      	ldr	r2, [pc, #160]	@ (8007de8 <TIM_OC3_SetConfig+0xfc>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d003      	beq.n	8007d52 <TIM_OC3_SetConfig+0x66>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a27      	ldr	r2, [pc, #156]	@ (8007dec <TIM_OC3_SetConfig+0x100>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d10d      	bne.n	8007d6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a1d      	ldr	r2, [pc, #116]	@ (8007de8 <TIM_OC3_SetConfig+0xfc>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d00f      	beq.n	8007d96 <TIM_OC3_SetConfig+0xaa>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a1c      	ldr	r2, [pc, #112]	@ (8007dec <TIM_OC3_SetConfig+0x100>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d00b      	beq.n	8007d96 <TIM_OC3_SetConfig+0xaa>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a1b      	ldr	r2, [pc, #108]	@ (8007df0 <TIM_OC3_SetConfig+0x104>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d007      	beq.n	8007d96 <TIM_OC3_SetConfig+0xaa>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a1a      	ldr	r2, [pc, #104]	@ (8007df4 <TIM_OC3_SetConfig+0x108>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d003      	beq.n	8007d96 <TIM_OC3_SetConfig+0xaa>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a19      	ldr	r2, [pc, #100]	@ (8007df8 <TIM_OC3_SetConfig+0x10c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d113      	bne.n	8007dbe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	011b      	lsls	r3, r3, #4
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	011b      	lsls	r3, r3, #4
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	621a      	str	r2, [r3, #32]
}
 8007dd8:	bf00      	nop
 8007dda:	371c      	adds	r7, #28
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	fffeff8f 	.word	0xfffeff8f
 8007de8:	40010000 	.word	0x40010000
 8007dec:	40010400 	.word	0x40010400
 8007df0:	40014000 	.word	0x40014000
 8007df4:	40014400 	.word	0x40014400
 8007df8:	40014800 	.word	0x40014800

08007dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
 8007e10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	4b24      	ldr	r3, [pc, #144]	@ (8007eb8 <TIM_OC4_SetConfig+0xbc>)
 8007e28:	4013      	ands	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	031b      	lsls	r3, r3, #12
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a19      	ldr	r2, [pc, #100]	@ (8007ebc <TIM_OC4_SetConfig+0xc0>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d00f      	beq.n	8007e7c <TIM_OC4_SetConfig+0x80>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a18      	ldr	r2, [pc, #96]	@ (8007ec0 <TIM_OC4_SetConfig+0xc4>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00b      	beq.n	8007e7c <TIM_OC4_SetConfig+0x80>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a17      	ldr	r2, [pc, #92]	@ (8007ec4 <TIM_OC4_SetConfig+0xc8>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d007      	beq.n	8007e7c <TIM_OC4_SetConfig+0x80>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a16      	ldr	r2, [pc, #88]	@ (8007ec8 <TIM_OC4_SetConfig+0xcc>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d003      	beq.n	8007e7c <TIM_OC4_SetConfig+0x80>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a15      	ldr	r2, [pc, #84]	@ (8007ecc <TIM_OC4_SetConfig+0xd0>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d109      	bne.n	8007e90 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	019b      	lsls	r3, r3, #6
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	621a      	str	r2, [r3, #32]
}
 8007eaa:	bf00      	nop
 8007eac:	371c      	adds	r7, #28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	feff8fff 	.word	0xfeff8fff
 8007ebc:	40010000 	.word	0x40010000
 8007ec0:	40010400 	.word	0x40010400
 8007ec4:	40014000 	.word	0x40014000
 8007ec8:	40014400 	.word	0x40014400
 8007ecc:	40014800 	.word	0x40014800

08007ed0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4b21      	ldr	r3, [pc, #132]	@ (8007f80 <TIM_OC5_SetConfig+0xb0>)
 8007efc:	4013      	ands	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007f10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	041b      	lsls	r3, r3, #16
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a18      	ldr	r2, [pc, #96]	@ (8007f84 <TIM_OC5_SetConfig+0xb4>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d00f      	beq.n	8007f46 <TIM_OC5_SetConfig+0x76>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a17      	ldr	r2, [pc, #92]	@ (8007f88 <TIM_OC5_SetConfig+0xb8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d00b      	beq.n	8007f46 <TIM_OC5_SetConfig+0x76>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a16      	ldr	r2, [pc, #88]	@ (8007f8c <TIM_OC5_SetConfig+0xbc>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d007      	beq.n	8007f46 <TIM_OC5_SetConfig+0x76>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a15      	ldr	r2, [pc, #84]	@ (8007f90 <TIM_OC5_SetConfig+0xc0>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d003      	beq.n	8007f46 <TIM_OC5_SetConfig+0x76>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a14      	ldr	r2, [pc, #80]	@ (8007f94 <TIM_OC5_SetConfig+0xc4>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d109      	bne.n	8007f5a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	021b      	lsls	r3, r3, #8
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	621a      	str	r2, [r3, #32]
}
 8007f74:	bf00      	nop
 8007f76:	371c      	adds	r7, #28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	fffeff8f 	.word	0xfffeff8f
 8007f84:	40010000 	.word	0x40010000
 8007f88:	40010400 	.word	0x40010400
 8007f8c:	40014000 	.word	0x40014000
 8007f90:	40014400 	.word	0x40014400
 8007f94:	40014800 	.word	0x40014800

08007f98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	4b22      	ldr	r3, [pc, #136]	@ (800804c <TIM_OC6_SetConfig+0xb4>)
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	021b      	lsls	r3, r3, #8
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	051b      	lsls	r3, r3, #20
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a19      	ldr	r2, [pc, #100]	@ (8008050 <TIM_OC6_SetConfig+0xb8>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d00f      	beq.n	8008010 <TIM_OC6_SetConfig+0x78>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a18      	ldr	r2, [pc, #96]	@ (8008054 <TIM_OC6_SetConfig+0xbc>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d00b      	beq.n	8008010 <TIM_OC6_SetConfig+0x78>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a17      	ldr	r2, [pc, #92]	@ (8008058 <TIM_OC6_SetConfig+0xc0>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d007      	beq.n	8008010 <TIM_OC6_SetConfig+0x78>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a16      	ldr	r2, [pc, #88]	@ (800805c <TIM_OC6_SetConfig+0xc4>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d003      	beq.n	8008010 <TIM_OC6_SetConfig+0x78>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a15      	ldr	r2, [pc, #84]	@ (8008060 <TIM_OC6_SetConfig+0xc8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d109      	bne.n	8008024 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008016:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	029b      	lsls	r3, r3, #10
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	621a      	str	r2, [r3, #32]
}
 800803e:	bf00      	nop
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	feff8fff 	.word	0xfeff8fff
 8008050:	40010000 	.word	0x40010000
 8008054:	40010400 	.word	0x40010400
 8008058:	40014000 	.word	0x40014000
 800805c:	40014400 	.word	0x40014400
 8008060:	40014800 	.word	0x40014800

08008064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	f023 0201 	bic.w	r2, r3, #1
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800808e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	011b      	lsls	r3, r3, #4
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	4313      	orrs	r3, r2
 8008098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f023 030a 	bic.w	r3, r3, #10
 80080a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	621a      	str	r2, [r3, #32]
}
 80080b6:	bf00      	nop
 80080b8:	371c      	adds	r7, #28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b087      	sub	sp, #28
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	f023 0210 	bic.w	r2, r3, #16
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80080ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	031b      	lsls	r3, r3, #12
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80080fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	4313      	orrs	r3, r2
 8008108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	621a      	str	r2, [r3, #32]
}
 8008116:	bf00      	nop
 8008118:	371c      	adds	r7, #28
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
	...

08008124 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4b09      	ldr	r3, [pc, #36]	@ (800815c <TIM_ITRx_SetConfig+0x38>)
 8008138:	4013      	ands	r3, r2
 800813a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4313      	orrs	r3, r2
 8008142:	f043 0307 	orr.w	r3, r3, #7
 8008146:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	609a      	str	r2, [r3, #8]
}
 800814e:	bf00      	nop
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	ffcfff8f 	.word	0xffcfff8f

08008160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800817a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	021a      	lsls	r2, r3, #8
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	431a      	orrs	r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	4313      	orrs	r3, r2
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	4313      	orrs	r3, r2
 800818c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	609a      	str	r2, [r3, #8]
}
 8008194:	bf00      	nop
 8008196:	371c      	adds	r7, #28
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d101      	bne.n	80081b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081b4:	2302      	movs	r3, #2
 80081b6:	e06d      	b.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a30      	ldr	r2, [pc, #192]	@ (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d004      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a2f      	ldr	r2, [pc, #188]	@ (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d108      	bne.n	80081fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80081f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008204:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	4313      	orrs	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a20      	ldr	r2, [pc, #128]	@ (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d022      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800822a:	d01d      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a1d      	ldr	r2, [pc, #116]	@ (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d018      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a1c      	ldr	r2, [pc, #112]	@ (80082ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d013      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a1a      	ldr	r2, [pc, #104]	@ (80082b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d00e      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a15      	ldr	r2, [pc, #84]	@ (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d009      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a16      	ldr	r2, [pc, #88]	@ (80082b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d004      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a15      	ldr	r2, [pc, #84]	@ (80082b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d10c      	bne.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800826e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	4313      	orrs	r3, r2
 8008278:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	40010000 	.word	0x40010000
 80082a4:	40010400 	.word	0x40010400
 80082a8:	40000400 	.word	0x40000400
 80082ac:	40000800 	.word	0x40000800
 80082b0:	40000c00 	.word	0x40000c00
 80082b4:	40001800 	.word	0x40001800
 80082b8:	40014000 	.word	0x40014000

080082bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e042      	b.n	8008354 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d106      	bne.n	80082e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7f9 f86f 	bl	80013c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2224      	movs	r2, #36	@ 0x24
 80082ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 0201 	bic.w	r2, r2, #1
 80082fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008302:	2b00      	cmp	r3, #0
 8008304:	d002      	beq.n	800830c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fd90 	bl	8008e2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f825 	bl	800835c <UART_SetConfig>
 8008312:	4603      	mov	r3, r0
 8008314:	2b01      	cmp	r3, #1
 8008316:	d101      	bne.n	800831c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e01b      	b.n	8008354 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800832a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800833a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f042 0201 	orr.w	r2, r2, #1
 800834a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fe0f 	bl	8008f70 <UART_CheckIdleState>
 8008352:	4603      	mov	r3, r0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800835c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008360:	b092      	sub	sp, #72	@ 0x48
 8008362:	af00      	add	r7, sp, #0
 8008364:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	431a      	orrs	r2, r3
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	431a      	orrs	r2, r3
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	4313      	orrs	r3, r2
 8008382:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	4bbe      	ldr	r3, [pc, #760]	@ (8008684 <UART_SetConfig+0x328>)
 800838c:	4013      	ands	r3, r2
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	6812      	ldr	r2, [r2, #0]
 8008392:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008394:	430b      	orrs	r3, r1
 8008396:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	68da      	ldr	r2, [r3, #12]
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4ab3      	ldr	r2, [pc, #716]	@ (8008688 <UART_SetConfig+0x32c>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d004      	beq.n	80083c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083c4:	4313      	orrs	r3, r2
 80083c6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689a      	ldr	r2, [r3, #8]
 80083ce:	4baf      	ldr	r3, [pc, #700]	@ (800868c <UART_SetConfig+0x330>)
 80083d0:	4013      	ands	r3, r2
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	6812      	ldr	r2, [r2, #0]
 80083d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80083d8:	430b      	orrs	r3, r1
 80083da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e2:	f023 010f 	bic.w	r1, r3, #15
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4aa6      	ldr	r2, [pc, #664]	@ (8008690 <UART_SetConfig+0x334>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d177      	bne.n	80084ec <UART_SetConfig+0x190>
 80083fc:	4ba5      	ldr	r3, [pc, #660]	@ (8008694 <UART_SetConfig+0x338>)
 80083fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008400:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008404:	2b28      	cmp	r3, #40	@ 0x28
 8008406:	d86d      	bhi.n	80084e4 <UART_SetConfig+0x188>
 8008408:	a201      	add	r2, pc, #4	@ (adr r2, 8008410 <UART_SetConfig+0xb4>)
 800840a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840e:	bf00      	nop
 8008410:	080084b5 	.word	0x080084b5
 8008414:	080084e5 	.word	0x080084e5
 8008418:	080084e5 	.word	0x080084e5
 800841c:	080084e5 	.word	0x080084e5
 8008420:	080084e5 	.word	0x080084e5
 8008424:	080084e5 	.word	0x080084e5
 8008428:	080084e5 	.word	0x080084e5
 800842c:	080084e5 	.word	0x080084e5
 8008430:	080084bd 	.word	0x080084bd
 8008434:	080084e5 	.word	0x080084e5
 8008438:	080084e5 	.word	0x080084e5
 800843c:	080084e5 	.word	0x080084e5
 8008440:	080084e5 	.word	0x080084e5
 8008444:	080084e5 	.word	0x080084e5
 8008448:	080084e5 	.word	0x080084e5
 800844c:	080084e5 	.word	0x080084e5
 8008450:	080084c5 	.word	0x080084c5
 8008454:	080084e5 	.word	0x080084e5
 8008458:	080084e5 	.word	0x080084e5
 800845c:	080084e5 	.word	0x080084e5
 8008460:	080084e5 	.word	0x080084e5
 8008464:	080084e5 	.word	0x080084e5
 8008468:	080084e5 	.word	0x080084e5
 800846c:	080084e5 	.word	0x080084e5
 8008470:	080084cd 	.word	0x080084cd
 8008474:	080084e5 	.word	0x080084e5
 8008478:	080084e5 	.word	0x080084e5
 800847c:	080084e5 	.word	0x080084e5
 8008480:	080084e5 	.word	0x080084e5
 8008484:	080084e5 	.word	0x080084e5
 8008488:	080084e5 	.word	0x080084e5
 800848c:	080084e5 	.word	0x080084e5
 8008490:	080084d5 	.word	0x080084d5
 8008494:	080084e5 	.word	0x080084e5
 8008498:	080084e5 	.word	0x080084e5
 800849c:	080084e5 	.word	0x080084e5
 80084a0:	080084e5 	.word	0x080084e5
 80084a4:	080084e5 	.word	0x080084e5
 80084a8:	080084e5 	.word	0x080084e5
 80084ac:	080084e5 	.word	0x080084e5
 80084b0:	080084dd 	.word	0x080084dd
 80084b4:	2301      	movs	r3, #1
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ba:	e222      	b.n	8008902 <UART_SetConfig+0x5a6>
 80084bc:	2304      	movs	r3, #4
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c2:	e21e      	b.n	8008902 <UART_SetConfig+0x5a6>
 80084c4:	2308      	movs	r3, #8
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ca:	e21a      	b.n	8008902 <UART_SetConfig+0x5a6>
 80084cc:	2310      	movs	r3, #16
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d2:	e216      	b.n	8008902 <UART_SetConfig+0x5a6>
 80084d4:	2320      	movs	r3, #32
 80084d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084da:	e212      	b.n	8008902 <UART_SetConfig+0x5a6>
 80084dc:	2340      	movs	r3, #64	@ 0x40
 80084de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084e2:	e20e      	b.n	8008902 <UART_SetConfig+0x5a6>
 80084e4:	2380      	movs	r3, #128	@ 0x80
 80084e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ea:	e20a      	b.n	8008902 <UART_SetConfig+0x5a6>
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a69      	ldr	r2, [pc, #420]	@ (8008698 <UART_SetConfig+0x33c>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d130      	bne.n	8008558 <UART_SetConfig+0x1fc>
 80084f6:	4b67      	ldr	r3, [pc, #412]	@ (8008694 <UART_SetConfig+0x338>)
 80084f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084fa:	f003 0307 	and.w	r3, r3, #7
 80084fe:	2b05      	cmp	r3, #5
 8008500:	d826      	bhi.n	8008550 <UART_SetConfig+0x1f4>
 8008502:	a201      	add	r2, pc, #4	@ (adr r2, 8008508 <UART_SetConfig+0x1ac>)
 8008504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008508:	08008521 	.word	0x08008521
 800850c:	08008529 	.word	0x08008529
 8008510:	08008531 	.word	0x08008531
 8008514:	08008539 	.word	0x08008539
 8008518:	08008541 	.word	0x08008541
 800851c:	08008549 	.word	0x08008549
 8008520:	2300      	movs	r3, #0
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008526:	e1ec      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008528:	2304      	movs	r3, #4
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852e:	e1e8      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008530:	2308      	movs	r3, #8
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008536:	e1e4      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008538:	2310      	movs	r3, #16
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853e:	e1e0      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008540:	2320      	movs	r3, #32
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008546:	e1dc      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008548:	2340      	movs	r3, #64	@ 0x40
 800854a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800854e:	e1d8      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008550:	2380      	movs	r3, #128	@ 0x80
 8008552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008556:	e1d4      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a4f      	ldr	r2, [pc, #316]	@ (800869c <UART_SetConfig+0x340>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d130      	bne.n	80085c4 <UART_SetConfig+0x268>
 8008562:	4b4c      	ldr	r3, [pc, #304]	@ (8008694 <UART_SetConfig+0x338>)
 8008564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	2b05      	cmp	r3, #5
 800856c:	d826      	bhi.n	80085bc <UART_SetConfig+0x260>
 800856e:	a201      	add	r2, pc, #4	@ (adr r2, 8008574 <UART_SetConfig+0x218>)
 8008570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008574:	0800858d 	.word	0x0800858d
 8008578:	08008595 	.word	0x08008595
 800857c:	0800859d 	.word	0x0800859d
 8008580:	080085a5 	.word	0x080085a5
 8008584:	080085ad 	.word	0x080085ad
 8008588:	080085b5 	.word	0x080085b5
 800858c:	2300      	movs	r3, #0
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008592:	e1b6      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008594:	2304      	movs	r3, #4
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859a:	e1b2      	b.n	8008902 <UART_SetConfig+0x5a6>
 800859c:	2308      	movs	r3, #8
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a2:	e1ae      	b.n	8008902 <UART_SetConfig+0x5a6>
 80085a4:	2310      	movs	r3, #16
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085aa:	e1aa      	b.n	8008902 <UART_SetConfig+0x5a6>
 80085ac:	2320      	movs	r3, #32
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b2:	e1a6      	b.n	8008902 <UART_SetConfig+0x5a6>
 80085b4:	2340      	movs	r3, #64	@ 0x40
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ba:	e1a2      	b.n	8008902 <UART_SetConfig+0x5a6>
 80085bc:	2380      	movs	r3, #128	@ 0x80
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085c2:	e19e      	b.n	8008902 <UART_SetConfig+0x5a6>
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a35      	ldr	r2, [pc, #212]	@ (80086a0 <UART_SetConfig+0x344>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d130      	bne.n	8008630 <UART_SetConfig+0x2d4>
 80085ce:	4b31      	ldr	r3, [pc, #196]	@ (8008694 <UART_SetConfig+0x338>)
 80085d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	2b05      	cmp	r3, #5
 80085d8:	d826      	bhi.n	8008628 <UART_SetConfig+0x2cc>
 80085da:	a201      	add	r2, pc, #4	@ (adr r2, 80085e0 <UART_SetConfig+0x284>)
 80085dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e0:	080085f9 	.word	0x080085f9
 80085e4:	08008601 	.word	0x08008601
 80085e8:	08008609 	.word	0x08008609
 80085ec:	08008611 	.word	0x08008611
 80085f0:	08008619 	.word	0x08008619
 80085f4:	08008621 	.word	0x08008621
 80085f8:	2300      	movs	r3, #0
 80085fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fe:	e180      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008600:	2304      	movs	r3, #4
 8008602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008606:	e17c      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008608:	2308      	movs	r3, #8
 800860a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860e:	e178      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008610:	2310      	movs	r3, #16
 8008612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008616:	e174      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008618:	2320      	movs	r3, #32
 800861a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861e:	e170      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008620:	2340      	movs	r3, #64	@ 0x40
 8008622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008626:	e16c      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008628:	2380      	movs	r3, #128	@ 0x80
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862e:	e168      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a1b      	ldr	r2, [pc, #108]	@ (80086a4 <UART_SetConfig+0x348>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d142      	bne.n	80086c0 <UART_SetConfig+0x364>
 800863a:	4b16      	ldr	r3, [pc, #88]	@ (8008694 <UART_SetConfig+0x338>)
 800863c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800863e:	f003 0307 	and.w	r3, r3, #7
 8008642:	2b05      	cmp	r3, #5
 8008644:	d838      	bhi.n	80086b8 <UART_SetConfig+0x35c>
 8008646:	a201      	add	r2, pc, #4	@ (adr r2, 800864c <UART_SetConfig+0x2f0>)
 8008648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864c:	08008665 	.word	0x08008665
 8008650:	0800866d 	.word	0x0800866d
 8008654:	08008675 	.word	0x08008675
 8008658:	0800867d 	.word	0x0800867d
 800865c:	080086a9 	.word	0x080086a9
 8008660:	080086b1 	.word	0x080086b1
 8008664:	2300      	movs	r3, #0
 8008666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866a:	e14a      	b.n	8008902 <UART_SetConfig+0x5a6>
 800866c:	2304      	movs	r3, #4
 800866e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008672:	e146      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008674:	2308      	movs	r3, #8
 8008676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867a:	e142      	b.n	8008902 <UART_SetConfig+0x5a6>
 800867c:	2310      	movs	r3, #16
 800867e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008682:	e13e      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008684:	cfff69f3 	.word	0xcfff69f3
 8008688:	58000c00 	.word	0x58000c00
 800868c:	11fff4ff 	.word	0x11fff4ff
 8008690:	40011000 	.word	0x40011000
 8008694:	58024400 	.word	0x58024400
 8008698:	40004400 	.word	0x40004400
 800869c:	40004800 	.word	0x40004800
 80086a0:	40004c00 	.word	0x40004c00
 80086a4:	40005000 	.word	0x40005000
 80086a8:	2320      	movs	r3, #32
 80086aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ae:	e128      	b.n	8008902 <UART_SetConfig+0x5a6>
 80086b0:	2340      	movs	r3, #64	@ 0x40
 80086b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086b6:	e124      	b.n	8008902 <UART_SetConfig+0x5a6>
 80086b8:	2380      	movs	r3, #128	@ 0x80
 80086ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086be:	e120      	b.n	8008902 <UART_SetConfig+0x5a6>
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4acb      	ldr	r2, [pc, #812]	@ (80089f4 <UART_SetConfig+0x698>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d176      	bne.n	80087b8 <UART_SetConfig+0x45c>
 80086ca:	4bcb      	ldr	r3, [pc, #812]	@ (80089f8 <UART_SetConfig+0x69c>)
 80086cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086d2:	2b28      	cmp	r3, #40	@ 0x28
 80086d4:	d86c      	bhi.n	80087b0 <UART_SetConfig+0x454>
 80086d6:	a201      	add	r2, pc, #4	@ (adr r2, 80086dc <UART_SetConfig+0x380>)
 80086d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086dc:	08008781 	.word	0x08008781
 80086e0:	080087b1 	.word	0x080087b1
 80086e4:	080087b1 	.word	0x080087b1
 80086e8:	080087b1 	.word	0x080087b1
 80086ec:	080087b1 	.word	0x080087b1
 80086f0:	080087b1 	.word	0x080087b1
 80086f4:	080087b1 	.word	0x080087b1
 80086f8:	080087b1 	.word	0x080087b1
 80086fc:	08008789 	.word	0x08008789
 8008700:	080087b1 	.word	0x080087b1
 8008704:	080087b1 	.word	0x080087b1
 8008708:	080087b1 	.word	0x080087b1
 800870c:	080087b1 	.word	0x080087b1
 8008710:	080087b1 	.word	0x080087b1
 8008714:	080087b1 	.word	0x080087b1
 8008718:	080087b1 	.word	0x080087b1
 800871c:	08008791 	.word	0x08008791
 8008720:	080087b1 	.word	0x080087b1
 8008724:	080087b1 	.word	0x080087b1
 8008728:	080087b1 	.word	0x080087b1
 800872c:	080087b1 	.word	0x080087b1
 8008730:	080087b1 	.word	0x080087b1
 8008734:	080087b1 	.word	0x080087b1
 8008738:	080087b1 	.word	0x080087b1
 800873c:	08008799 	.word	0x08008799
 8008740:	080087b1 	.word	0x080087b1
 8008744:	080087b1 	.word	0x080087b1
 8008748:	080087b1 	.word	0x080087b1
 800874c:	080087b1 	.word	0x080087b1
 8008750:	080087b1 	.word	0x080087b1
 8008754:	080087b1 	.word	0x080087b1
 8008758:	080087b1 	.word	0x080087b1
 800875c:	080087a1 	.word	0x080087a1
 8008760:	080087b1 	.word	0x080087b1
 8008764:	080087b1 	.word	0x080087b1
 8008768:	080087b1 	.word	0x080087b1
 800876c:	080087b1 	.word	0x080087b1
 8008770:	080087b1 	.word	0x080087b1
 8008774:	080087b1 	.word	0x080087b1
 8008778:	080087b1 	.word	0x080087b1
 800877c:	080087a9 	.word	0x080087a9
 8008780:	2301      	movs	r3, #1
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008786:	e0bc      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008788:	2304      	movs	r3, #4
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878e:	e0b8      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008790:	2308      	movs	r3, #8
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008796:	e0b4      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008798:	2310      	movs	r3, #16
 800879a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800879e:	e0b0      	b.n	8008902 <UART_SetConfig+0x5a6>
 80087a0:	2320      	movs	r3, #32
 80087a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087a6:	e0ac      	b.n	8008902 <UART_SetConfig+0x5a6>
 80087a8:	2340      	movs	r3, #64	@ 0x40
 80087aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ae:	e0a8      	b.n	8008902 <UART_SetConfig+0x5a6>
 80087b0:	2380      	movs	r3, #128	@ 0x80
 80087b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087b6:	e0a4      	b.n	8008902 <UART_SetConfig+0x5a6>
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a8f      	ldr	r2, [pc, #572]	@ (80089fc <UART_SetConfig+0x6a0>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d130      	bne.n	8008824 <UART_SetConfig+0x4c8>
 80087c2:	4b8d      	ldr	r3, [pc, #564]	@ (80089f8 <UART_SetConfig+0x69c>)
 80087c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087c6:	f003 0307 	and.w	r3, r3, #7
 80087ca:	2b05      	cmp	r3, #5
 80087cc:	d826      	bhi.n	800881c <UART_SetConfig+0x4c0>
 80087ce:	a201      	add	r2, pc, #4	@ (adr r2, 80087d4 <UART_SetConfig+0x478>)
 80087d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d4:	080087ed 	.word	0x080087ed
 80087d8:	080087f5 	.word	0x080087f5
 80087dc:	080087fd 	.word	0x080087fd
 80087e0:	08008805 	.word	0x08008805
 80087e4:	0800880d 	.word	0x0800880d
 80087e8:	08008815 	.word	0x08008815
 80087ec:	2300      	movs	r3, #0
 80087ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f2:	e086      	b.n	8008902 <UART_SetConfig+0x5a6>
 80087f4:	2304      	movs	r3, #4
 80087f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087fa:	e082      	b.n	8008902 <UART_SetConfig+0x5a6>
 80087fc:	2308      	movs	r3, #8
 80087fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008802:	e07e      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008804:	2310      	movs	r3, #16
 8008806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800880a:	e07a      	b.n	8008902 <UART_SetConfig+0x5a6>
 800880c:	2320      	movs	r3, #32
 800880e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008812:	e076      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008814:	2340      	movs	r3, #64	@ 0x40
 8008816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800881a:	e072      	b.n	8008902 <UART_SetConfig+0x5a6>
 800881c:	2380      	movs	r3, #128	@ 0x80
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008822:	e06e      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a75      	ldr	r2, [pc, #468]	@ (8008a00 <UART_SetConfig+0x6a4>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d130      	bne.n	8008890 <UART_SetConfig+0x534>
 800882e:	4b72      	ldr	r3, [pc, #456]	@ (80089f8 <UART_SetConfig+0x69c>)
 8008830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	2b05      	cmp	r3, #5
 8008838:	d826      	bhi.n	8008888 <UART_SetConfig+0x52c>
 800883a:	a201      	add	r2, pc, #4	@ (adr r2, 8008840 <UART_SetConfig+0x4e4>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	08008859 	.word	0x08008859
 8008844:	08008861 	.word	0x08008861
 8008848:	08008869 	.word	0x08008869
 800884c:	08008871 	.word	0x08008871
 8008850:	08008879 	.word	0x08008879
 8008854:	08008881 	.word	0x08008881
 8008858:	2300      	movs	r3, #0
 800885a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885e:	e050      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008860:	2304      	movs	r3, #4
 8008862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008866:	e04c      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008868:	2308      	movs	r3, #8
 800886a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800886e:	e048      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008870:	2310      	movs	r3, #16
 8008872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008876:	e044      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008878:	2320      	movs	r3, #32
 800887a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887e:	e040      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008880:	2340      	movs	r3, #64	@ 0x40
 8008882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008886:	e03c      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008888:	2380      	movs	r3, #128	@ 0x80
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888e:	e038      	b.n	8008902 <UART_SetConfig+0x5a6>
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a5b      	ldr	r2, [pc, #364]	@ (8008a04 <UART_SetConfig+0x6a8>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d130      	bne.n	80088fc <UART_SetConfig+0x5a0>
 800889a:	4b57      	ldr	r3, [pc, #348]	@ (80089f8 <UART_SetConfig+0x69c>)
 800889c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800889e:	f003 0307 	and.w	r3, r3, #7
 80088a2:	2b05      	cmp	r3, #5
 80088a4:	d826      	bhi.n	80088f4 <UART_SetConfig+0x598>
 80088a6:	a201      	add	r2, pc, #4	@ (adr r2, 80088ac <UART_SetConfig+0x550>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	080088c5 	.word	0x080088c5
 80088b0:	080088cd 	.word	0x080088cd
 80088b4:	080088d5 	.word	0x080088d5
 80088b8:	080088dd 	.word	0x080088dd
 80088bc:	080088e5 	.word	0x080088e5
 80088c0:	080088ed 	.word	0x080088ed
 80088c4:	2302      	movs	r3, #2
 80088c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ca:	e01a      	b.n	8008902 <UART_SetConfig+0x5a6>
 80088cc:	2304      	movs	r3, #4
 80088ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d2:	e016      	b.n	8008902 <UART_SetConfig+0x5a6>
 80088d4:	2308      	movs	r3, #8
 80088d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088da:	e012      	b.n	8008902 <UART_SetConfig+0x5a6>
 80088dc:	2310      	movs	r3, #16
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e2:	e00e      	b.n	8008902 <UART_SetConfig+0x5a6>
 80088e4:	2320      	movs	r3, #32
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ea:	e00a      	b.n	8008902 <UART_SetConfig+0x5a6>
 80088ec:	2340      	movs	r3, #64	@ 0x40
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f2:	e006      	b.n	8008902 <UART_SetConfig+0x5a6>
 80088f4:	2380      	movs	r3, #128	@ 0x80
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fa:	e002      	b.n	8008902 <UART_SetConfig+0x5a6>
 80088fc:	2380      	movs	r3, #128	@ 0x80
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a3f      	ldr	r2, [pc, #252]	@ (8008a04 <UART_SetConfig+0x6a8>)
 8008908:	4293      	cmp	r3, r2
 800890a:	f040 80f8 	bne.w	8008afe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800890e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008912:	2b20      	cmp	r3, #32
 8008914:	dc46      	bgt.n	80089a4 <UART_SetConfig+0x648>
 8008916:	2b02      	cmp	r3, #2
 8008918:	f2c0 8082 	blt.w	8008a20 <UART_SetConfig+0x6c4>
 800891c:	3b02      	subs	r3, #2
 800891e:	2b1e      	cmp	r3, #30
 8008920:	d87e      	bhi.n	8008a20 <UART_SetConfig+0x6c4>
 8008922:	a201      	add	r2, pc, #4	@ (adr r2, 8008928 <UART_SetConfig+0x5cc>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	080089ab 	.word	0x080089ab
 800892c:	08008a21 	.word	0x08008a21
 8008930:	080089b3 	.word	0x080089b3
 8008934:	08008a21 	.word	0x08008a21
 8008938:	08008a21 	.word	0x08008a21
 800893c:	08008a21 	.word	0x08008a21
 8008940:	080089c3 	.word	0x080089c3
 8008944:	08008a21 	.word	0x08008a21
 8008948:	08008a21 	.word	0x08008a21
 800894c:	08008a21 	.word	0x08008a21
 8008950:	08008a21 	.word	0x08008a21
 8008954:	08008a21 	.word	0x08008a21
 8008958:	08008a21 	.word	0x08008a21
 800895c:	08008a21 	.word	0x08008a21
 8008960:	080089d3 	.word	0x080089d3
 8008964:	08008a21 	.word	0x08008a21
 8008968:	08008a21 	.word	0x08008a21
 800896c:	08008a21 	.word	0x08008a21
 8008970:	08008a21 	.word	0x08008a21
 8008974:	08008a21 	.word	0x08008a21
 8008978:	08008a21 	.word	0x08008a21
 800897c:	08008a21 	.word	0x08008a21
 8008980:	08008a21 	.word	0x08008a21
 8008984:	08008a21 	.word	0x08008a21
 8008988:	08008a21 	.word	0x08008a21
 800898c:	08008a21 	.word	0x08008a21
 8008990:	08008a21 	.word	0x08008a21
 8008994:	08008a21 	.word	0x08008a21
 8008998:	08008a21 	.word	0x08008a21
 800899c:	08008a21 	.word	0x08008a21
 80089a0:	08008a13 	.word	0x08008a13
 80089a4:	2b40      	cmp	r3, #64	@ 0x40
 80089a6:	d037      	beq.n	8008a18 <UART_SetConfig+0x6bc>
 80089a8:	e03a      	b.n	8008a20 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80089aa:	f7fd fb17 	bl	8005fdc <HAL_RCCEx_GetD3PCLK1Freq>
 80089ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089b0:	e03c      	b.n	8008a2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fd fb26 	bl	8006008 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c0:	e034      	b.n	8008a2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089c2:	f107 0318 	add.w	r3, r7, #24
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fd fc72 	bl	80062b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089d0:	e02c      	b.n	8008a2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089d2:	4b09      	ldr	r3, [pc, #36]	@ (80089f8 <UART_SetConfig+0x69c>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0320 	and.w	r3, r3, #32
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d016      	beq.n	8008a0c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089de:	4b06      	ldr	r3, [pc, #24]	@ (80089f8 <UART_SetConfig+0x69c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	08db      	lsrs	r3, r3, #3
 80089e4:	f003 0303 	and.w	r3, r3, #3
 80089e8:	4a07      	ldr	r2, [pc, #28]	@ (8008a08 <UART_SetConfig+0x6ac>)
 80089ea:	fa22 f303 	lsr.w	r3, r2, r3
 80089ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089f0:	e01c      	b.n	8008a2c <UART_SetConfig+0x6d0>
 80089f2:	bf00      	nop
 80089f4:	40011400 	.word	0x40011400
 80089f8:	58024400 	.word	0x58024400
 80089fc:	40007800 	.word	0x40007800
 8008a00:	40007c00 	.word	0x40007c00
 8008a04:	58000c00 	.word	0x58000c00
 8008a08:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008a0c:	4b9d      	ldr	r3, [pc, #628]	@ (8008c84 <UART_SetConfig+0x928>)
 8008a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a10:	e00c      	b.n	8008a2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a12:	4b9d      	ldr	r3, [pc, #628]	@ (8008c88 <UART_SetConfig+0x92c>)
 8008a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a16:	e009      	b.n	8008a2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a1e:	e005      	b.n	8008a2c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a2a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 81de 	beq.w	8008df0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a38:	4a94      	ldr	r2, [pc, #592]	@ (8008c8c <UART_SetConfig+0x930>)
 8008a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a42:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a46:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	4413      	add	r3, r2
 8008a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d305      	bcc.n	8008a64 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d903      	bls.n	8008a6c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008a6a:	e1c1      	b.n	8008df0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a6e:	2200      	movs	r2, #0
 8008a70:	60bb      	str	r3, [r7, #8]
 8008a72:	60fa      	str	r2, [r7, #12]
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a78:	4a84      	ldr	r2, [pc, #528]	@ (8008c8c <UART_SetConfig+0x930>)
 8008a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	2200      	movs	r2, #0
 8008a82:	603b      	str	r3, [r7, #0]
 8008a84:	607a      	str	r2, [r7, #4]
 8008a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a8e:	f7f7 fc23 	bl	80002d8 <__aeabi_uldivmod>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	4610      	mov	r0, r2
 8008a98:	4619      	mov	r1, r3
 8008a9a:	f04f 0200 	mov.w	r2, #0
 8008a9e:	f04f 0300 	mov.w	r3, #0
 8008aa2:	020b      	lsls	r3, r1, #8
 8008aa4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008aa8:	0202      	lsls	r2, r0, #8
 8008aaa:	6979      	ldr	r1, [r7, #20]
 8008aac:	6849      	ldr	r1, [r1, #4]
 8008aae:	0849      	lsrs	r1, r1, #1
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	eb12 0804 	adds.w	r8, r2, r4
 8008aba:	eb43 0905 	adc.w	r9, r3, r5
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	469a      	mov	sl, r3
 8008ac6:	4693      	mov	fp, r2
 8008ac8:	4652      	mov	r2, sl
 8008aca:	465b      	mov	r3, fp
 8008acc:	4640      	mov	r0, r8
 8008ace:	4649      	mov	r1, r9
 8008ad0:	f7f7 fc02 	bl	80002d8 <__aeabi_uldivmod>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4613      	mov	r3, r2
 8008ada:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ade:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ae2:	d308      	bcc.n	8008af6 <UART_SetConfig+0x79a>
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aea:	d204      	bcs.n	8008af6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008af2:	60da      	str	r2, [r3, #12]
 8008af4:	e17c      	b.n	8008df0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008afc:	e178      	b.n	8008df0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	69db      	ldr	r3, [r3, #28]
 8008b02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b06:	f040 80c5 	bne.w	8008c94 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008b0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b0e:	2b20      	cmp	r3, #32
 8008b10:	dc48      	bgt.n	8008ba4 <UART_SetConfig+0x848>
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	db7b      	blt.n	8008c0e <UART_SetConfig+0x8b2>
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	d879      	bhi.n	8008c0e <UART_SetConfig+0x8b2>
 8008b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b20 <UART_SetConfig+0x7c4>)
 8008b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b20:	08008bab 	.word	0x08008bab
 8008b24:	08008bb3 	.word	0x08008bb3
 8008b28:	08008c0f 	.word	0x08008c0f
 8008b2c:	08008c0f 	.word	0x08008c0f
 8008b30:	08008bbb 	.word	0x08008bbb
 8008b34:	08008c0f 	.word	0x08008c0f
 8008b38:	08008c0f 	.word	0x08008c0f
 8008b3c:	08008c0f 	.word	0x08008c0f
 8008b40:	08008bcb 	.word	0x08008bcb
 8008b44:	08008c0f 	.word	0x08008c0f
 8008b48:	08008c0f 	.word	0x08008c0f
 8008b4c:	08008c0f 	.word	0x08008c0f
 8008b50:	08008c0f 	.word	0x08008c0f
 8008b54:	08008c0f 	.word	0x08008c0f
 8008b58:	08008c0f 	.word	0x08008c0f
 8008b5c:	08008c0f 	.word	0x08008c0f
 8008b60:	08008bdb 	.word	0x08008bdb
 8008b64:	08008c0f 	.word	0x08008c0f
 8008b68:	08008c0f 	.word	0x08008c0f
 8008b6c:	08008c0f 	.word	0x08008c0f
 8008b70:	08008c0f 	.word	0x08008c0f
 8008b74:	08008c0f 	.word	0x08008c0f
 8008b78:	08008c0f 	.word	0x08008c0f
 8008b7c:	08008c0f 	.word	0x08008c0f
 8008b80:	08008c0f 	.word	0x08008c0f
 8008b84:	08008c0f 	.word	0x08008c0f
 8008b88:	08008c0f 	.word	0x08008c0f
 8008b8c:	08008c0f 	.word	0x08008c0f
 8008b90:	08008c0f 	.word	0x08008c0f
 8008b94:	08008c0f 	.word	0x08008c0f
 8008b98:	08008c0f 	.word	0x08008c0f
 8008b9c:	08008c0f 	.word	0x08008c0f
 8008ba0:	08008c01 	.word	0x08008c01
 8008ba4:	2b40      	cmp	r3, #64	@ 0x40
 8008ba6:	d02e      	beq.n	8008c06 <UART_SetConfig+0x8aa>
 8008ba8:	e031      	b.n	8008c0e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008baa:	f7fb ffe1 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 8008bae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bb0:	e033      	b.n	8008c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bb2:	f7fb fff3 	bl	8004b9c <HAL_RCC_GetPCLK2Freq>
 8008bb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bb8:	e02f      	b.n	8008c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fd fa22 	bl	8006008 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bc8:	e027      	b.n	8008c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bca:	f107 0318 	add.w	r3, r7, #24
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fd fb6e 	bl	80062b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bd8:	e01f      	b.n	8008c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bda:	4b2d      	ldr	r3, [pc, #180]	@ (8008c90 <UART_SetConfig+0x934>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0320 	and.w	r3, r3, #32
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d009      	beq.n	8008bfa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008be6:	4b2a      	ldr	r3, [pc, #168]	@ (8008c90 <UART_SetConfig+0x934>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	08db      	lsrs	r3, r3, #3
 8008bec:	f003 0303 	and.w	r3, r3, #3
 8008bf0:	4a24      	ldr	r2, [pc, #144]	@ (8008c84 <UART_SetConfig+0x928>)
 8008bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008bf8:	e00f      	b.n	8008c1a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008bfa:	4b22      	ldr	r3, [pc, #136]	@ (8008c84 <UART_SetConfig+0x928>)
 8008bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bfe:	e00c      	b.n	8008c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c00:	4b21      	ldr	r3, [pc, #132]	@ (8008c88 <UART_SetConfig+0x92c>)
 8008c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c04:	e009      	b.n	8008c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c0c:	e005      	b.n	8008c1a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 80e7 	beq.w	8008df0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c26:	4a19      	ldr	r2, [pc, #100]	@ (8008c8c <UART_SetConfig+0x930>)
 8008c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c34:	005a      	lsls	r2, r3, #1
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	085b      	lsrs	r3, r3, #1
 8008c3c:	441a      	add	r2, r3
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c46:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4a:	2b0f      	cmp	r3, #15
 8008c4c:	d916      	bls.n	8008c7c <UART_SetConfig+0x920>
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c54:	d212      	bcs.n	8008c7c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	f023 030f 	bic.w	r3, r3, #15
 8008c5e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c62:	085b      	lsrs	r3, r3, #1
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008c78:	60da      	str	r2, [r3, #12]
 8008c7a:	e0b9      	b.n	8008df0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008c82:	e0b5      	b.n	8008df0 <UART_SetConfig+0xa94>
 8008c84:	03d09000 	.word	0x03d09000
 8008c88:	003d0900 	.word	0x003d0900
 8008c8c:	080095b0 	.word	0x080095b0
 8008c90:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c94:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c98:	2b20      	cmp	r3, #32
 8008c9a:	dc49      	bgt.n	8008d30 <UART_SetConfig+0x9d4>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	db7c      	blt.n	8008d9a <UART_SetConfig+0xa3e>
 8008ca0:	2b20      	cmp	r3, #32
 8008ca2:	d87a      	bhi.n	8008d9a <UART_SetConfig+0xa3e>
 8008ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8008cac <UART_SetConfig+0x950>)
 8008ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008caa:	bf00      	nop
 8008cac:	08008d37 	.word	0x08008d37
 8008cb0:	08008d3f 	.word	0x08008d3f
 8008cb4:	08008d9b 	.word	0x08008d9b
 8008cb8:	08008d9b 	.word	0x08008d9b
 8008cbc:	08008d47 	.word	0x08008d47
 8008cc0:	08008d9b 	.word	0x08008d9b
 8008cc4:	08008d9b 	.word	0x08008d9b
 8008cc8:	08008d9b 	.word	0x08008d9b
 8008ccc:	08008d57 	.word	0x08008d57
 8008cd0:	08008d9b 	.word	0x08008d9b
 8008cd4:	08008d9b 	.word	0x08008d9b
 8008cd8:	08008d9b 	.word	0x08008d9b
 8008cdc:	08008d9b 	.word	0x08008d9b
 8008ce0:	08008d9b 	.word	0x08008d9b
 8008ce4:	08008d9b 	.word	0x08008d9b
 8008ce8:	08008d9b 	.word	0x08008d9b
 8008cec:	08008d67 	.word	0x08008d67
 8008cf0:	08008d9b 	.word	0x08008d9b
 8008cf4:	08008d9b 	.word	0x08008d9b
 8008cf8:	08008d9b 	.word	0x08008d9b
 8008cfc:	08008d9b 	.word	0x08008d9b
 8008d00:	08008d9b 	.word	0x08008d9b
 8008d04:	08008d9b 	.word	0x08008d9b
 8008d08:	08008d9b 	.word	0x08008d9b
 8008d0c:	08008d9b 	.word	0x08008d9b
 8008d10:	08008d9b 	.word	0x08008d9b
 8008d14:	08008d9b 	.word	0x08008d9b
 8008d18:	08008d9b 	.word	0x08008d9b
 8008d1c:	08008d9b 	.word	0x08008d9b
 8008d20:	08008d9b 	.word	0x08008d9b
 8008d24:	08008d9b 	.word	0x08008d9b
 8008d28:	08008d9b 	.word	0x08008d9b
 8008d2c:	08008d8d 	.word	0x08008d8d
 8008d30:	2b40      	cmp	r3, #64	@ 0x40
 8008d32:	d02e      	beq.n	8008d92 <UART_SetConfig+0xa36>
 8008d34:	e031      	b.n	8008d9a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d36:	f7fb ff1b 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 8008d3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d3c:	e033      	b.n	8008da6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d3e:	f7fb ff2d 	bl	8004b9c <HAL_RCC_GetPCLK2Freq>
 8008d42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d44:	e02f      	b.n	8008da6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fd f95c 	bl	8006008 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d54:	e027      	b.n	8008da6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d56:	f107 0318 	add.w	r3, r7, #24
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fd faa8 	bl	80062b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d64:	e01f      	b.n	8008da6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d66:	4b2d      	ldr	r3, [pc, #180]	@ (8008e1c <UART_SetConfig+0xac0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0320 	and.w	r3, r3, #32
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d009      	beq.n	8008d86 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d72:	4b2a      	ldr	r3, [pc, #168]	@ (8008e1c <UART_SetConfig+0xac0>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	08db      	lsrs	r3, r3, #3
 8008d78:	f003 0303 	and.w	r3, r3, #3
 8008d7c:	4a28      	ldr	r2, [pc, #160]	@ (8008e20 <UART_SetConfig+0xac4>)
 8008d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d84:	e00f      	b.n	8008da6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008d86:	4b26      	ldr	r3, [pc, #152]	@ (8008e20 <UART_SetConfig+0xac4>)
 8008d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d8a:	e00c      	b.n	8008da6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d8c:	4b25      	ldr	r3, [pc, #148]	@ (8008e24 <UART_SetConfig+0xac8>)
 8008d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d90:	e009      	b.n	8008da6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d98:	e005      	b.n	8008da6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008da4:	bf00      	nop
    }

    if (pclk != 0U)
 8008da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d021      	beq.n	8008df0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e28 <UART_SetConfig+0xacc>)
 8008db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008db6:	461a      	mov	r2, r3
 8008db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dba:	fbb3 f2f2 	udiv	r2, r3, r2
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	085b      	lsrs	r3, r3, #1
 8008dc4:	441a      	add	r2, r3
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd2:	2b0f      	cmp	r3, #15
 8008dd4:	d909      	bls.n	8008dea <UART_SetConfig+0xa8e>
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ddc:	d205      	bcs.n	8008dea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	60da      	str	r2, [r3, #12]
 8008de8:	e002      	b.n	8008df0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	2200      	movs	r2, #0
 8008e04:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008e0c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3748      	adds	r7, #72	@ 0x48
 8008e14:	46bd      	mov	sp, r7
 8008e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e1a:	bf00      	nop
 8008e1c:	58024400 	.word	0x58024400
 8008e20:	03d09000 	.word	0x03d09000
 8008e24:	003d0900 	.word	0x003d0900
 8008e28:	080095b0 	.word	0x080095b0

08008e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e38:	f003 0308 	and.w	r3, r3, #8
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00a      	beq.n	8008e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00a      	beq.n	8008e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	430a      	orrs	r2, r1
 8008e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e7c:	f003 0302 	and.w	r3, r3, #2
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00a      	beq.n	8008e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	430a      	orrs	r2, r1
 8008e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9e:	f003 0304 	and.w	r3, r3, #4
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00a      	beq.n	8008ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	430a      	orrs	r2, r1
 8008eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec0:	f003 0310 	and.w	r3, r3, #16
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00a      	beq.n	8008ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	430a      	orrs	r2, r1
 8008edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee2:	f003 0320 	and.w	r3, r3, #32
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00a      	beq.n	8008f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	430a      	orrs	r2, r1
 8008efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d01a      	beq.n	8008f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	430a      	orrs	r2, r1
 8008f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f2a:	d10a      	bne.n	8008f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00a      	beq.n	8008f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	430a      	orrs	r2, r1
 8008f62:	605a      	str	r2, [r3, #4]
  }
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b098      	sub	sp, #96	@ 0x60
 8008f74:	af02      	add	r7, sp, #8
 8008f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f80:	f7fa f90e 	bl	80031a0 <HAL_GetTick>
 8008f84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0308 	and.w	r3, r3, #8
 8008f90:	2b08      	cmp	r3, #8
 8008f92:	d12f      	bne.n	8008ff4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f88e 	bl	80090c4 <UART_WaitOnFlagUntilTimeout>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d022      	beq.n	8008ff4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb6:	e853 3f00 	ldrex	r3, [r3]
 8008fba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fd4:	e841 2300 	strex	r3, r2, [r1]
 8008fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1e6      	bne.n	8008fae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2220      	movs	r2, #32
 8008fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e063      	b.n	80090bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0304 	and.w	r3, r3, #4
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	d149      	bne.n	8009096 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009002:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800900a:	2200      	movs	r2, #0
 800900c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f857 	bl	80090c4 <UART_WaitOnFlagUntilTimeout>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d03c      	beq.n	8009096 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009024:	e853 3f00 	ldrex	r3, [r3]
 8009028:	623b      	str	r3, [r7, #32]
   return(result);
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009030:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	461a      	mov	r2, r3
 8009038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800903a:	633b      	str	r3, [r7, #48]	@ 0x30
 800903c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009042:	e841 2300 	strex	r3, r2, [r1]
 8009046:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1e6      	bne.n	800901c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3308      	adds	r3, #8
 8009054:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	e853 3f00 	ldrex	r3, [r3]
 800905c:	60fb      	str	r3, [r7, #12]
   return(result);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f023 0301 	bic.w	r3, r3, #1
 8009064:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3308      	adds	r3, #8
 800906c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800906e:	61fa      	str	r2, [r7, #28]
 8009070:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009072:	69b9      	ldr	r1, [r7, #24]
 8009074:	69fa      	ldr	r2, [r7, #28]
 8009076:	e841 2300 	strex	r3, r2, [r1]
 800907a:	617b      	str	r3, [r7, #20]
   return(result);
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1e5      	bne.n	800904e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2220      	movs	r2, #32
 8009086:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e012      	b.n	80090bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2220      	movs	r2, #32
 800909a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3758      	adds	r7, #88	@ 0x58
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	603b      	str	r3, [r7, #0]
 80090d0:	4613      	mov	r3, r2
 80090d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090d4:	e04f      	b.n	8009176 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090dc:	d04b      	beq.n	8009176 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090de:	f7fa f85f 	bl	80031a0 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d302      	bcc.n	80090f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e04e      	b.n	8009196 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0304 	and.w	r3, r3, #4
 8009102:	2b00      	cmp	r3, #0
 8009104:	d037      	beq.n	8009176 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2b80      	cmp	r3, #128	@ 0x80
 800910a:	d034      	beq.n	8009176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	2b40      	cmp	r3, #64	@ 0x40
 8009110:	d031      	beq.n	8009176 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	69db      	ldr	r3, [r3, #28]
 8009118:	f003 0308 	and.w	r3, r3, #8
 800911c:	2b08      	cmp	r3, #8
 800911e:	d110      	bne.n	8009142 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2208      	movs	r2, #8
 8009126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 f839 	bl	80091a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2208      	movs	r2, #8
 8009132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e029      	b.n	8009196 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	69db      	ldr	r3, [r3, #28]
 8009148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800914c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009150:	d111      	bne.n	8009176 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800915a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f000 f81f 	bl	80091a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2220      	movs	r2, #32
 8009166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e00f      	b.n	8009196 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	69da      	ldr	r2, [r3, #28]
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	4013      	ands	r3, r2
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	429a      	cmp	r2, r3
 8009184:	bf0c      	ite	eq
 8009186:	2301      	moveq	r3, #1
 8009188:	2300      	movne	r3, #0
 800918a:	b2db      	uxtb	r3, r3
 800918c:	461a      	mov	r2, r3
 800918e:	79fb      	ldrb	r3, [r7, #7]
 8009190:	429a      	cmp	r2, r3
 8009192:	d0a0      	beq.n	80090d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
	...

080091a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b095      	sub	sp, #84	@ 0x54
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	461a      	mov	r2, r3
 80091c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80091c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e6      	bne.n	80091a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3308      	adds	r3, #8
 80091e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e2:	6a3b      	ldr	r3, [r7, #32]
 80091e4:	e853 3f00 	ldrex	r3, [r3]
 80091e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80091ea:	69fa      	ldr	r2, [r7, #28]
 80091ec:	4b1e      	ldr	r3, [pc, #120]	@ (8009268 <UART_EndRxTransfer+0xc8>)
 80091ee:	4013      	ands	r3, r2
 80091f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3308      	adds	r3, #8
 80091f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009202:	e841 2300 	strex	r3, r2, [r1]
 8009206:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1e5      	bne.n	80091da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009212:	2b01      	cmp	r3, #1
 8009214:	d118      	bne.n	8009248 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	60bb      	str	r3, [r7, #8]
   return(result);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	f023 0310 	bic.w	r3, r3, #16
 800922a:	647b      	str	r3, [r7, #68]	@ 0x44
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	461a      	mov	r2, r3
 8009232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009234:	61bb      	str	r3, [r7, #24]
 8009236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	6979      	ldr	r1, [r7, #20]
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	e841 2300 	strex	r3, r2, [r1]
 8009240:	613b      	str	r3, [r7, #16]
   return(result);
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e6      	bne.n	8009216 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2220      	movs	r2, #32
 800924c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800925c:	bf00      	nop
 800925e:	3754      	adds	r7, #84	@ 0x54
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	effffffe 	.word	0xeffffffe

0800926c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800927a:	2b01      	cmp	r3, #1
 800927c:	d101      	bne.n	8009282 <HAL_UARTEx_DisableFifoMode+0x16>
 800927e:	2302      	movs	r3, #2
 8009280:	e027      	b.n	80092d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2224      	movs	r2, #36	@ 0x24
 800928e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f022 0201 	bic.w	r2, r2, #1
 80092a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80092b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2220      	movs	r2, #32
 80092c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d101      	bne.n	80092f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092f2:	2302      	movs	r3, #2
 80092f4:	e02d      	b.n	8009352 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2224      	movs	r2, #36	@ 0x24
 8009302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0201 	bic.w	r2, r2, #1
 800931c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f850 	bl	80093d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2220      	movs	r2, #32
 8009344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800936a:	2b01      	cmp	r3, #1
 800936c:	d101      	bne.n	8009372 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800936e:	2302      	movs	r3, #2
 8009370:	e02d      	b.n	80093ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2224      	movs	r2, #36	@ 0x24
 800937e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f022 0201 	bic.w	r2, r2, #1
 8009398:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f812 	bl	80093d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2220      	movs	r2, #32
 80093c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
	...

080093d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d108      	bne.n	80093fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093f8:	e031      	b.n	800945e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093fa:	2310      	movs	r3, #16
 80093fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093fe:	2310      	movs	r3, #16
 8009400:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	0e5b      	lsrs	r3, r3, #25
 800940a:	b2db      	uxtb	r3, r3
 800940c:	f003 0307 	and.w	r3, r3, #7
 8009410:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	0f5b      	lsrs	r3, r3, #29
 800941a:	b2db      	uxtb	r3, r3
 800941c:	f003 0307 	and.w	r3, r3, #7
 8009420:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009422:	7bbb      	ldrb	r3, [r7, #14]
 8009424:	7b3a      	ldrb	r2, [r7, #12]
 8009426:	4911      	ldr	r1, [pc, #68]	@ (800946c <UARTEx_SetNbDataToProcess+0x94>)
 8009428:	5c8a      	ldrb	r2, [r1, r2]
 800942a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800942e:	7b3a      	ldrb	r2, [r7, #12]
 8009430:	490f      	ldr	r1, [pc, #60]	@ (8009470 <UARTEx_SetNbDataToProcess+0x98>)
 8009432:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009434:	fb93 f3f2 	sdiv	r3, r3, r2
 8009438:	b29a      	uxth	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	7b7a      	ldrb	r2, [r7, #13]
 8009444:	4909      	ldr	r1, [pc, #36]	@ (800946c <UARTEx_SetNbDataToProcess+0x94>)
 8009446:	5c8a      	ldrb	r2, [r1, r2]
 8009448:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800944c:	7b7a      	ldrb	r2, [r7, #13]
 800944e:	4908      	ldr	r1, [pc, #32]	@ (8009470 <UARTEx_SetNbDataToProcess+0x98>)
 8009450:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009452:	fb93 f3f2 	sdiv	r3, r3, r2
 8009456:	b29a      	uxth	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800945e:	bf00      	nop
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	080095c8 	.word	0x080095c8
 8009470:	080095d0 	.word	0x080095d0

08009474 <memset>:
 8009474:	4402      	add	r2, r0
 8009476:	4603      	mov	r3, r0
 8009478:	4293      	cmp	r3, r2
 800947a:	d100      	bne.n	800947e <memset+0xa>
 800947c:	4770      	bx	lr
 800947e:	f803 1b01 	strb.w	r1, [r3], #1
 8009482:	e7f9      	b.n	8009478 <memset+0x4>

08009484 <__libc_init_array>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	4d0d      	ldr	r5, [pc, #52]	@ (80094bc <__libc_init_array+0x38>)
 8009488:	4c0d      	ldr	r4, [pc, #52]	@ (80094c0 <__libc_init_array+0x3c>)
 800948a:	1b64      	subs	r4, r4, r5
 800948c:	10a4      	asrs	r4, r4, #2
 800948e:	2600      	movs	r6, #0
 8009490:	42a6      	cmp	r6, r4
 8009492:	d109      	bne.n	80094a8 <__libc_init_array+0x24>
 8009494:	4d0b      	ldr	r5, [pc, #44]	@ (80094c4 <__libc_init_array+0x40>)
 8009496:	4c0c      	ldr	r4, [pc, #48]	@ (80094c8 <__libc_init_array+0x44>)
 8009498:	f000 f818 	bl	80094cc <_init>
 800949c:	1b64      	subs	r4, r4, r5
 800949e:	10a4      	asrs	r4, r4, #2
 80094a0:	2600      	movs	r6, #0
 80094a2:	42a6      	cmp	r6, r4
 80094a4:	d105      	bne.n	80094b2 <__libc_init_array+0x2e>
 80094a6:	bd70      	pop	{r4, r5, r6, pc}
 80094a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ac:	4798      	blx	r3
 80094ae:	3601      	adds	r6, #1
 80094b0:	e7ee      	b.n	8009490 <__libc_init_array+0xc>
 80094b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b6:	4798      	blx	r3
 80094b8:	3601      	adds	r6, #1
 80094ba:	e7f2      	b.n	80094a2 <__libc_init_array+0x1e>
 80094bc:	080095e0 	.word	0x080095e0
 80094c0:	080095e0 	.word	0x080095e0
 80094c4:	080095e0 	.word	0x080095e0
 80094c8:	080095e4 	.word	0x080095e4

080094cc <_init>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr

080094d8 <_fini>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	bf00      	nop
 80094dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094de:	bc08      	pop	{r3}
 80094e0:	469e      	mov	lr, r3
 80094e2:	4770      	bx	lr
