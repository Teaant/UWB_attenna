
antenna_6UWB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5d0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800c870  0800c870  0000d870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cd20  0800cd20  0000dd20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cd28  0800cd28  0000dd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800cd2c  0800cd2c  0000dd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  24000000  0800cd30  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a94  240001e8  0800cf18  0000e1e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000c7c  0800cf18  0000ec7c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023eeb  00000000  00000000  0000e216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000460c  00000000  00000000  00032101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b30  00000000  00000000  00036710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014fb  00000000  00000000  00038240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e6d6  00000000  00000000  0003973b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026665  00000000  00000000  00077e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00173e11  00000000  00000000  0009e476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00212287  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008128  00000000  00000000  002122cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  0021a3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00000092  00000000  00000000  0021a449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c858 	.word	0x0800c858

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800c858 	.word	0x0800c858

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <enqueueData>:
//U_Task tasks_fifo[QUEUE_SIZE];
uint8_t params_fifo[QUEUE_SIZE];
uint8_t front = 0, rear;


uint8_t enqueueData( uint8_t id){
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	//队列满
	if((rear+1)%QUEUE_SIZE == front){
 800068a:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <enqueueData+0x6c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	1c59      	adds	r1, r3, #1
 8000690:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <enqueueData+0x70>)
 8000692:	fb83 2301 	smull	r2, r3, r3, r1
 8000696:	105a      	asrs	r2, r3, #1
 8000698:	17cb      	asrs	r3, r1, #31
 800069a:	1ad2      	subs	r2, r2, r3
 800069c:	4613      	mov	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4413      	add	r3, r2
 80006a2:	1aca      	subs	r2, r1, r3
 80006a4:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <enqueueData+0x74>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d101      	bne.n	80006b0 <enqueueData+0x30>
		return 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	e016      	b.n	80006de <enqueueData+0x5e>
	}else{
		params_fifo[rear] = id;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <enqueueData+0x6c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	4a10      	ldr	r2, [pc, #64]	@ (80006f8 <enqueueData+0x78>)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	5453      	strb	r3, [r2, r1]
		rear = (rear+1)%QUEUE_SIZE;
 80006bc:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <enqueueData+0x6c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	1c5a      	adds	r2, r3, #1
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <enqueueData+0x70>)
 80006c4:	fb83 1302 	smull	r1, r3, r3, r2
 80006c8:	1059      	asrs	r1, r3, #1
 80006ca:	17d3      	asrs	r3, r2, #31
 80006cc:	1ac9      	subs	r1, r1, r3
 80006ce:	460b      	mov	r3, r1
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	440b      	add	r3, r1
 80006d4:	1ad1      	subs	r1, r2, r3
 80006d6:	b2ca      	uxtb	r2, r1
 80006d8:	4b04      	ldr	r3, [pc, #16]	@ (80006ec <enqueueData+0x6c>)
 80006da:	701a      	strb	r2, [r3, #0]
		return 1;
 80006dc:	2301      	movs	r3, #1
	}
}
 80006de:	4618      	mov	r0, r3
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	2400020a 	.word	0x2400020a
 80006f0:	66666667 	.word	0x66666667
 80006f4:	24000209 	.word	0x24000209
 80006f8:	24000204 	.word	0x24000204

080006fc <dequeueData>:

uint8_t dequeueData(void){
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
	//队列空
	uint8_t dwt_id;

	if(front == rear){
 8000702:	4b12      	ldr	r3, [pc, #72]	@ (800074c <dequeueData+0x50>)
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <dequeueData+0x54>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	429a      	cmp	r2, r3
 800070c:	d101      	bne.n	8000712 <dequeueData+0x16>
		return 255;
 800070e:	23ff      	movs	r3, #255	@ 0xff
 8000710:	e016      	b.n	8000740 <dequeueData+0x44>
	}else{
		dwt_id = params_fifo[front];
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <dequeueData+0x50>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <dequeueData+0x58>)
 800071a:	5c9b      	ldrb	r3, [r3, r2]
 800071c:	71fb      	strb	r3, [r7, #7]
		front = (front+1)%QUEUE_SIZE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <dequeueData+0x50>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <dequeueData+0x5c>)
 8000726:	fb83 1302 	smull	r1, r3, r3, r2
 800072a:	1059      	asrs	r1, r3, #1
 800072c:	17d3      	asrs	r3, r2, #31
 800072e:	1ac9      	subs	r1, r1, r3
 8000730:	460b      	mov	r3, r1
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	440b      	add	r3, r1
 8000736:	1ad1      	subs	r1, r2, r3
 8000738:	b2ca      	uxtb	r2, r1
 800073a:	4b04      	ldr	r3, [pc, #16]	@ (800074c <dequeueData+0x50>)
 800073c:	701a      	strb	r2, [r3, #0]
		return dwt_id;
 800073e:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	24000209 	.word	0x24000209
 8000750:	2400020a 	.word	0x2400020a
 8000754:	24000204 	.word	0x24000204
 8000758:	66666667 	.word	0x66666667

0800075c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	@ 0x30
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	4bb3      	ldr	r3, [pc, #716]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000778:	4ab1      	ldr	r2, [pc, #708]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 800077a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000782:	4baf      	ldr	r3, [pc, #700]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4bab      	ldr	r3, [pc, #684]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000796:	4aaa      	ldr	r2, [pc, #680]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a0:	4ba7      	ldr	r3, [pc, #668]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4ba4      	ldr	r3, [pc, #656]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b4:	4aa2      	ldr	r2, [pc, #648]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007be:	4ba0      	ldr	r3, [pc, #640]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c4:	f003 0302 	and.w	r3, r3, #2
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007cc:	4b9c      	ldr	r3, [pc, #624]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d2:	4a9b      	ldr	r2, [pc, #620]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 80007d4:	f043 0310 	orr.w	r3, r3, #16
 80007d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007dc:	4b98      	ldr	r3, [pc, #608]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e2:	f003 0310 	and.w	r3, r3, #16
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	4b95      	ldr	r3, [pc, #596]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f0:	4a93      	ldr	r2, [pc, #588]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007fa:	4b91      	ldr	r3, [pc, #580]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000800:	f003 0308 	and.w	r3, r3, #8
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000808:	4b8d      	ldr	r3, [pc, #564]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 800080a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800080e:	4a8c      	ldr	r2, [pc, #560]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000818:	4b89      	ldr	r3, [pc, #548]	@ (8000a40 <MX_GPIO_Init+0x2e4>)
 800081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UWB1_RESET_Pin|UWB1_CSn_Pin, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	2106      	movs	r1, #6
 800082a:	4886      	ldr	r0, [pc, #536]	@ (8000a44 <MX_GPIO_Init+0x2e8>)
 800082c:	f003 fbe6 	bl	8003ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, UWB1_WAKEUP_Pin|UWB2_WAKEUP_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 5102 	mov.w	r1, #8320	@ 0x2080
 8000836:	4884      	ldr	r0, [pc, #528]	@ (8000a48 <MX_GPIO_Init+0x2ec>)
 8000838:	f003 fbe0 	bl	8003ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, UWB2_RESET_Pin|UWB2_CSn_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000842:	4881      	ldr	r0, [pc, #516]	@ (8000a48 <MX_GPIO_Init+0x2ec>)
 8000844:	f003 fbda 	bl	8003ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, UWB3_RESET_Pin|UWB3_CSn_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800084e:	487f      	ldr	r0, [pc, #508]	@ (8000a4c <MX_GPIO_Init+0x2f0>)
 8000850:	f003 fbd4 	bl	8003ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UWB3_WAKEUP_GPIO_Port, UWB3_WAKEUP_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800085a:	487c      	ldr	r0, [pc, #496]	@ (8000a4c <MX_GPIO_Init+0x2f0>)
 800085c:	f003 fbce 	bl	8003ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UWB4_RESET_Pin|UWB4_CSn_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8000866:	487a      	ldr	r0, [pc, #488]	@ (8000a50 <MX_GPIO_Init+0x2f4>)
 8000868:	f003 fbc8 	bl	8003ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UWB4_WAKEUP_GPIO_Port, UWB4_WAKEUP_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000872:	4877      	ldr	r0, [pc, #476]	@ (8000a50 <MX_GPIO_Init+0x2f4>)
 8000874:	f003 fbc2 	bl	8003ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYNC_EN_GPIO_Port, SYNC_EN_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800087e:	4875      	ldr	r0, [pc, #468]	@ (8000a54 <MX_GPIO_Init+0x2f8>)
 8000880:	f003 fbbc 	bl	8003ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800088a:	486e      	ldr	r0, [pc, #440]	@ (8000a44 <MX_GPIO_Init+0x2e8>)
 800088c:	f003 fbb6 	bl	8003ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB1_IRQ_Pin;
 8000890:	2301      	movs	r3, #1
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000894:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UWB1_IRQ_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4867      	ldr	r0, [pc, #412]	@ (8000a44 <MX_GPIO_Init+0x2e8>)
 80008a6:	f003 f9e1 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB1_RESET_Pin;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008ae:	2311      	movs	r3, #17
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UWB1_RESET_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4860      	ldr	r0, [pc, #384]	@ (8000a44 <MX_GPIO_Init+0x2e8>)
 80008c2:	f003 f9d3 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB9 */
  GPIO_InitStruct.Pin = UWB1_CSn_Pin|GPIO_PIN_9;
 80008c6:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4859      	ldr	r0, [pc, #356]	@ (8000a44 <MX_GPIO_Init+0x2e8>)
 80008e0:	f003 f9c4 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = UWB1_WAKEUP_Pin|UWB2_CSn_Pin|UWB2_WAKEUP_Pin;
 80008e4:	f44f 5342 	mov.w	r3, #12416	@ 0x3080
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4852      	ldr	r0, [pc, #328]	@ (8000a48 <MX_GPIO_Init+0x2ec>)
 80008fe:	f003 f9b5 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB2_IRQ_Pin;
 8000902:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000908:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UWB2_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	484b      	ldr	r0, [pc, #300]	@ (8000a48 <MX_GPIO_Init+0x2ec>)
 800091a:	f003 f9a7 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB2_RESET_Pin;
 800091e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000924:	2311      	movs	r3, #17
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UWB2_RESET_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4844      	ldr	r0, [pc, #272]	@ (8000a48 <MX_GPIO_Init+0x2ec>)
 8000938:	f003 f998 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB3_IRQ_Pin;
 800093c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000942:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UWB3_IRQ_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	483e      	ldr	r0, [pc, #248]	@ (8000a4c <MX_GPIO_Init+0x2f0>)
 8000954:	f003 f98a 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB3_RESET_Pin;
 8000958:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800095e:	2311      	movs	r3, #17
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UWB3_RESET_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4836      	ldr	r0, [pc, #216]	@ (8000a4c <MX_GPIO_Init+0x2f0>)
 8000972:	f003 f97b 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = UWB3_CSn_Pin|UWB3_WAKEUP_Pin;
 8000976:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	482f      	ldr	r0, [pc, #188]	@ (8000a4c <MX_GPIO_Init+0x2f0>)
 8000990:	f003 f96c 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB4_IRQ_Pin;
 8000994:	2340      	movs	r3, #64	@ 0x40
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000998:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UWB4_IRQ_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4829      	ldr	r0, [pc, #164]	@ (8000a50 <MX_GPIO_Init+0x2f4>)
 80009aa:	f003 f95f 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB4_RESET_Pin;
 80009ae:	2380      	movs	r3, #128	@ 0x80
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009b2:	2311      	movs	r3, #17
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UWB4_RESET_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4822      	ldr	r0, [pc, #136]	@ (8000a50 <MX_GPIO_Init+0x2f4>)
 80009c6:	f003 f951 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = UWB4_CSn_Pin|UWB4_WAKEUP_Pin;
 80009ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	481b      	ldr	r0, [pc, #108]	@ (8000a50 <MX_GPIO_Init+0x2f4>)
 80009e4:	f003 f942 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SYNC_EN_Pin;
 80009e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SYNC_EN_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4814      	ldr	r0, [pc, #80]	@ (8000a54 <MX_GPIO_Init+0x2f8>)
 8000a02:	f003 f933 	bl	8003c6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2006      	movs	r0, #6
 8000a0c:	f003 f881 	bl	8003b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a10:	2006      	movs	r0, #6
 8000a12:	f003 f898 	bl	8003b46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2017      	movs	r0, #23
 8000a1c:	f003 f879 	bl	8003b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a20:	2017      	movs	r0, #23
 8000a22:	f003 f890 	bl	8003b46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2028      	movs	r0, #40	@ 0x28
 8000a2c:	f003 f871 	bl	8003b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a30:	2028      	movs	r0, #40	@ 0x28
 8000a32:	f003 f888 	bl	8003b46 <HAL_NVIC_EnableIRQ>

}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	@ 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	58024400 	.word	0x58024400
 8000a44:	58020400 	.word	0x58020400
 8000a48:	58021000 	.word	0x58021000
 8000a4c:	58020c00 	.word	0x58020c00
 8000a50:	58020800 	.word	0x58020800
 8000a54:	58020000 	.word	0x58020000

08000a58 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <MX_I2C1_Init+0x74>)
 8000a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad0 <MX_I2C1_Init+0x78>)
 8000a60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	@ (8000acc <MX_I2C1_Init+0x74>)
 8000a64:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad4 <MX_I2C1_Init+0x7c>)
 8000a66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a68:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <MX_I2C1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6e:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <MX_I2C1_Init+0x74>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a74:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <MX_I2C1_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <MX_I2C1_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <MX_I2C1_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a86:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_I2C1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <MX_I2C1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a92:	480e      	ldr	r0, [pc, #56]	@ (8000acc <MX_I2C1_Init+0x74>)
 8000a94:	f003 fae6 	bl	8004064 <HAL_I2C_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a9e:	f000 f9c5 	bl	8000e2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4809      	ldr	r0, [pc, #36]	@ (8000acc <MX_I2C1_Init+0x74>)
 8000aa6:	f003 fb79 	bl	800419c <HAL_I2CEx_ConfigAnalogFilter>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ab0:	f000 f9bc 	bl	8000e2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_I2C1_Init+0x74>)
 8000ab8:	f003 fbbb 	bl	8004232 <HAL_I2CEx_ConfigDigitalFilter>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ac2:	f000 f9b3 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2400020c 	.word	0x2400020c
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	00c0eaff 	.word	0x00c0eaff

08000ad8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b0ba      	sub	sp, #232	@ 0xe8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	22c0      	movs	r2, #192	@ 0xc0
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f009 fe38 	bl	800a76e <memset>
  if(i2cHandle->Instance==I2C1)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a26      	ldr	r2, [pc, #152]	@ (8000b9c <HAL_I2C_MspInit+0xc4>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d145      	bne.n	8000b94 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b08:	f04f 0208 	mov.w	r2, #8
 8000b0c:	f04f 0300 	mov.w	r3, #0
 8000b10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 fbf4 	bl	800530c <HAL_RCCEx_PeriphCLKConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000b2a:	f000 f97f 	bl	8000e2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <HAL_I2C_MspInit+0xc8>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b34:	4a1a      	ldr	r2, [pc, #104]	@ (8000ba0 <HAL_I2C_MspInit+0xc8>)
 8000b36:	f043 0302 	orr.w	r3, r3, #2
 8000b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <HAL_I2C_MspInit+0xc8>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b4c:	23c0      	movs	r3, #192	@ 0xc0
 8000b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b52:	2312      	movs	r3, #18
 8000b54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b64:	2304      	movs	r3, #4
 8000b66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <HAL_I2C_MspInit+0xcc>)
 8000b72:	f003 f87b 	bl	8003c6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <HAL_I2C_MspInit+0xc8>)
 8000b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b7c:	4a08      	ldr	r2, [pc, #32]	@ (8000ba0 <HAL_I2C_MspInit+0xc8>)
 8000b7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_I2C_MspInit+0xc8>)
 8000b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b94:	bf00      	nop
 8000b96:	37e8      	adds	r7, #232	@ 0xe8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	58024400 	.word	0x58024400
 8000ba4:	58020400 	.word	0x58020400

08000ba8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bac:	f3bf 8f4f 	dsb	sy
}
 8000bb0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <__NVIC_SystemReset+0x24>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000bba:	4904      	ldr	r1, [pc, #16]	@ (8000bcc <__NVIC_SystemReset+0x24>)
 8000bbc:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <__NVIC_SystemReset+0x28>)
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bc2:	f3bf 8f4f 	dsb	sy
}
 8000bc6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <__NVIC_SystemReset+0x20>
 8000bcc:	e000ed00 	.word	0xe000ed00
 8000bd0:	05fa0004 	.word	0x05fa0004

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000bda:	f000 f8fb 	bl	8000dd4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f002 fdfb 	bl	80037d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f87b 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f7ff fdb9 	bl	800075c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bea:	f7ff ff35 	bl	8000a58 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bee:	f000 f923 	bl	8000e38 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000bf2:	f000 fc1b 	bl	800142c <MX_TIM1_Init>
  MX_SPI2_Init();
 8000bf6:	f000 f975 	bl	8000ee4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000bfa:	f000 fc6b 	bl	80014d4 <MX_TIM2_Init>
  MX_UART4_Init();
 8000bfe:	f000 fd7d 	bl	80016fc <MX_UART4_Init>
	 * 否则Antenna_Array_Init()时DW1000内部还没开始工作 SPI通信会失败
	 * 错过了Antenna_Array_Init()这次初始化后只能复位STM32
	 *
	 * RSTn引脚被DW1000内部拉高标志着进入了INIT状态
	 */
	if(  Antenna_Array_Init() != UWB_OK ||Check_DW1000RSTn(100) != UWB_OK)
 8000c02:	f000 fe43 	bl	800188c <Antenna_Array_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d105      	bne.n	8000c18 <main+0x44>
 8000c0c:	2064      	movs	r0, #100	@ 0x64
 8000c0e:	f001 f95d 	bl	8001ecc <Check_DW1000RSTn>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <main+0x4c>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
//	if( Antenna_Array_Init() != UWB_OK)
	{
		/* 只需成功 不需失败 重启*/
		__disable_irq();
		NVIC_SystemReset();
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__NVIC_SystemReset>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	for (int i = 0; i < DWT_NUM_DW_DEV; i++) {
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	e026      	b.n	8000c74 <main+0xa0>
		if (UWB_device_array[i].port.available == 1) {
 8000c26:	4a2b      	ldr	r2, [pc, #172]	@ (8000cd4 <main+0x100>)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000c2e:	fb01 f303 	mul.w	r3, r1, r3
 8000c32:	4413      	add	r3, r2
 8000c34:	3331      	adds	r3, #49	@ 0x31
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d117      	bne.n	8000c6e <main+0x9a>
			/* Set expected response's delay and timeout. See NOTE 4, 5 and 6 below.
			 * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
			// 			dwt_setrxaftertxdelay(0, pports);  //若是不设置呢，我希望在代码中设置的，若是不进入rx我希�???
			dwt_setrxtimeout(0, &UWB_device_array[i].port);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8000c44:	fb02 f303 	mul.w	r3, r2, r3
 8000c48:	3308      	adds	r3, #8
 8000c4a:	4a22      	ldr	r2, [pc, #136]	@ (8000cd4 <main+0x100>)
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2000      	movs	r0, #0
 8000c52:	f002 fa3b 	bl	80030cc <dwt_setrxtimeout>
			dwt_rxenable(DWT_START_RX_IMMEDIATE, &UWB_device_array[i].port);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8000c5c:	fb02 f303 	mul.w	r3, r2, r3
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd4 <main+0x100>)
 8000c64:	4413      	add	r3, r2
 8000c66:	4619      	mov	r1, r3
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f002 f9e8 	bl	800303e <dwt_rxenable>
	for (int i = 0; i < DWT_NUM_DW_DEV; i++) {
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	3301      	adds	r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	ddd5      	ble.n	8000c26 <main+0x52>
		}
	}

	volatile uint8_t index = 255;
 8000c7a:	23ff      	movs	r3, #255	@ 0xff
 8000c7c:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		index = dequeueData();
 8000c7e:	f7ff fd3d 	bl	80006fc <dequeueData>
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
		if (index != 255) {
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2bff      	cmp	r3, #255	@ 0xff
 8000c8c:	d0f7      	beq.n	8000c7e <main+0xaa>
			DW1000_Port_t *pa = &UWB_device_array[index].port;
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	461a      	mov	r2, r3
 8000c94:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	3308      	adds	r3, #8
 8000c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <main+0x100>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
			//可增加
			printf("%u,%u,%f,%f\n", pa->aoa_param.sequence, index, pa->aoa_param.phi, pa->aoa_param.beta);
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	f8d3 1130 	ldr.w	r1, [r3, #304]	@ 0x130
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 8000cb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	edd3 6a4e 	vldr	s13, [r3, #312]	@ 0x138
 8000cc0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000cc4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000cc8:	ed8d 7b00 	vstr	d7, [sp]
 8000ccc:	4802      	ldr	r0, [pc, #8]	@ (8000cd8 <main+0x104>)
 8000cce:	f009 fcf9 	bl	800a6c4 <iprintf>
		index = dequeueData();
 8000cd2:	e7d4      	b.n	8000c7e <main+0xaa>
 8000cd4:	24000260 	.word	0x24000260
 8000cd8:	0800c870 	.word	0x0800c870

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b09c      	sub	sp, #112	@ 0x70
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce6:	224c      	movs	r2, #76	@ 0x4c
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f009 fd3f 	bl	800a76e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2220      	movs	r2, #32
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f009 fd39 	bl	800a76e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	f003 fae5 	bl	80042cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b31      	ldr	r3, [pc, #196]	@ (8000dcc <SystemClock_Config+0xf0>)
 8000d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d0a:	4a30      	ldr	r2, [pc, #192]	@ (8000dcc <SystemClock_Config+0xf0>)
 8000d0c:	f023 0301 	bic.w	r3, r3, #1
 8000d10:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d12:	4b2e      	ldr	r3, [pc, #184]	@ (8000dcc <SystemClock_Config+0xf0>)
 8000d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd0 <SystemClock_Config+0xf4>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d24:	4a2a      	ldr	r2, [pc, #168]	@ (8000dd0 <SystemClock_Config+0xf4>)
 8000d26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b28      	ldr	r3, [pc, #160]	@ (8000dd0 <SystemClock_Config+0xf4>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d38:	bf00      	nop
 8000d3a:	4b25      	ldr	r3, [pc, #148]	@ (8000dd0 <SystemClock_Config+0xf4>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d46:	d1f8      	bne.n	8000d3a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d52:	2302      	movs	r3, #2
 8000d54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d56:	2302      	movs	r3, #2
 8000d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000d5e:	2320      	movs	r3, #32
 8000d60:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d66:	2304      	movs	r3, #4
 8000d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 fade 	bl	8004340 <HAL_RCC_OscConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d8a:	f000 f84f 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8e:	233f      	movs	r3, #63	@ 0x3f
 8000d90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d92:	2303      	movs	r3, #3
 8000d94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d9e:	2340      	movs	r3, #64	@ 0x40
 8000da0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000da2:	2350      	movs	r3, #80	@ 0x50
 8000da4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000daa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dac:	2340      	movs	r3, #64	@ 0x40
 8000dae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2104      	movs	r1, #4
 8000db4:	4618      	mov	r0, r3
 8000db6:	f003 ff1d 	bl	8004bf4 <HAL_RCC_ClockConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000dc0:	f000 f834 	bl	8000e2c <Error_Handler>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	3770      	adds	r7, #112	@ 0x70
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	58000400 	.word	0x58000400
 8000dd0:	58024800 	.word	0x58024800

08000dd4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000de6:	f002 fec9 	bl	8003b7c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000dea:	2301      	movs	r3, #1
 8000dec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000df6:	231f      	movs	r3, #31
 8000df8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000dfa:	2387      	movs	r3, #135	@ 0x87
 8000dfc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e02:	2300      	movs	r3, #0
 8000e04:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e06:	2301      	movs	r3, #1
 8000e08:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e16:	463b      	mov	r3, r7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fee7 	bl	8003bec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e1e:	2004      	movs	r0, #4
 8000e20:	f002 fec4 	bl	8003bac <HAL_MPU_Enable>

}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <Error_Handler+0x8>

08000e38 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e3c:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e3e:	4a28      	ldr	r2, [pc, #160]	@ (8000ee0 <MX_SPI1_Init+0xa8>)
 8000e40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e42:	4b26      	ldr	r3, [pc, #152]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e44:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e4a:	4b24      	ldr	r3, [pc, #144]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e50:	4b22      	ldr	r3, [pc, #136]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e52:	2203      	movs	r2, #3
 8000e54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e56:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e62:	4b1e      	ldr	r3, [pc, #120]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e64:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e76:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e7c:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e82:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e88:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e8e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	@ (8000edc <MX_SPI1_Init+0xa4>)
 8000ec8:	f006 f84c 	bl	8006f64 <HAL_SPI_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000ed2:	f7ff ffab 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	24000800 	.word	0x24000800
 8000ee0:	40013000 	.word	0x40013000

08000ee4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ee8:	4b27      	ldr	r3, [pc, #156]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000eea:	4a28      	ldr	r2, [pc, #160]	@ (8000f8c <MX_SPI2_Init+0xa8>)
 8000eec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eee:	4b26      	ldr	r3, [pc, #152]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000ef0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ef4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef6:	4b24      	ldr	r3, [pc, #144]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000efc:	4b22      	ldr	r3, [pc, #136]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000efe:	2203      	movs	r2, #3
 8000f00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f02:	4b21      	ldr	r3, [pc, #132]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f22:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f28:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000f2e:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f34:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f60:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f74:	f005 fff6 	bl	8006f64 <HAL_SPI_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000f7e:	f7ff ff55 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	24000888 	.word	0x24000888
 8000f8c:	40003800 	.word	0x40003800

08000f90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0bc      	sub	sp, #240	@ 0xf0
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	22c0      	movs	r2, #192	@ 0xc0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f009 fbdc 	bl	800a76e <memset>
  if(spiHandle->Instance==SPI1)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a4c      	ldr	r2, [pc, #304]	@ (80010ec <HAL_SPI_MspInit+0x15c>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d145      	bne.n	800104c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000fc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f004 f999 	bl	800530c <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000fe0:	f7ff ff24 	bl	8000e2c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe4:	4b42      	ldr	r3, [pc, #264]	@ (80010f0 <HAL_SPI_MspInit+0x160>)
 8000fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fea:	4a41      	ldr	r2, [pc, #260]	@ (80010f0 <HAL_SPI_MspInit+0x160>)
 8000fec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ff0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80010f0 <HAL_SPI_MspInit+0x160>)
 8000ff6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ffa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b3b      	ldr	r3, [pc, #236]	@ (80010f0 <HAL_SPI_MspInit+0x160>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001008:	4a39      	ldr	r2, [pc, #228]	@ (80010f0 <HAL_SPI_MspInit+0x160>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001012:	4b37      	ldr	r3, [pc, #220]	@ (80010f0 <HAL_SPI_MspInit+0x160>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001020:	23e0      	movs	r3, #224	@ 0xe0
 8001022:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001038:	2305      	movs	r3, #5
 800103a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001042:	4619      	mov	r1, r3
 8001044:	482b      	ldr	r0, [pc, #172]	@ (80010f4 <HAL_SPI_MspInit+0x164>)
 8001046:	f002 fe11 	bl	8003c6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800104a:	e04a      	b.n	80010e2 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a29      	ldr	r2, [pc, #164]	@ (80010f8 <HAL_SPI_MspInit+0x168>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d145      	bne.n	80010e2 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001056:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800105a:	f04f 0300 	mov.w	r3, #0
 800105e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001062:	2300      	movs	r3, #0
 8001064:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001066:	f107 0318 	add.w	r3, r7, #24
 800106a:	4618      	mov	r0, r3
 800106c:	f004 f94e 	bl	800530c <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8001076:	f7ff fed9 	bl	8000e2c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800107a:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <HAL_SPI_MspInit+0x160>)
 800107c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001080:	4a1b      	ldr	r2, [pc, #108]	@ (80010f0 <HAL_SPI_MspInit+0x160>)
 8001082:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001086:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800108a:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <HAL_SPI_MspInit+0x160>)
 800108c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <HAL_SPI_MspInit+0x160>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109e:	4a14      	ldr	r2, [pc, #80]	@ (80010f0 <HAL_SPI_MspInit+0x160>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <HAL_SPI_MspInit+0x160>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010b6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80010ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010d0:	2305      	movs	r3, #5
 80010d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010da:	4619      	mov	r1, r3
 80010dc:	4807      	ldr	r0, [pc, #28]	@ (80010fc <HAL_SPI_MspInit+0x16c>)
 80010de:	f002 fdc5 	bl	8003c6c <HAL_GPIO_Init>
}
 80010e2:	bf00      	nop
 80010e4:	37f0      	adds	r7, #240	@ 0xf0
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40013000 	.word	0x40013000
 80010f0:	58024400 	.word	0x58024400
 80010f4:	58020000 	.word	0x58020000
 80010f8:	40003800 	.word	0x40003800
 80010fc:	58020400 	.word	0x58020400

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_MspInit+0x30>)
 8001108:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800110c:	4a08      	ldr	r2, [pc, #32]	@ (8001130 <HAL_MspInit+0x30>)
 800110e:	f043 0302 	orr.w	r3, r3, #2
 8001112:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_MspInit+0x30>)
 8001118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	58024400 	.word	0x58024400

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <NMI_Handler+0x4>

0800113c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <MemManage_Handler+0x4>

0800114c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <UsageFault_Handler+0x4>

0800115c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118a:	f002 fb97 	bl	80038bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}

08001192 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UWB1_IRQ_Pin);
 8001196:	2001      	movs	r0, #1
 8001198:	f002 ff49 	bl	800402e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}

080011a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UWB4_IRQ_Pin);
 80011a4:	2040      	movs	r0, #64	@ 0x40
 80011a6:	f002 ff42 	bl	800402e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UWB2_IRQ_Pin);
 80011aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011ae:	f002 ff3e 	bl	800402e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UWB3_IRQ_Pin);
 80011ba:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80011be:	f002 ff36 	bl	800402e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  return 1;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_kill>:

int _kill(int pid, int sig)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011e0:	f009 fb18 	bl	800a814 <__errno>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2216      	movs	r2, #22
 80011e8:	601a      	str	r2, [r3, #0]
  return -1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_exit>:

void _exit (int status)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffe7 	bl	80011d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <_exit+0x12>

0800120c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e00a      	b.n	8001234 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800121e:	f3af 8000 	nop.w
 8001222:	4601      	mov	r1, r0
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	60ba      	str	r2, [r7, #8]
 800122a:	b2ca      	uxtb	r2, r1
 800122c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	429a      	cmp	r2, r3
 800123a:	dbf0      	blt.n	800121e <_read+0x12>
  }

  return len;
 800123c:	687b      	ldr	r3, [r7, #4]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800126e:	605a      	str	r2, [r3, #4]
  return 0;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <_isatty>:

int _isatty(int file)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b8:	4a14      	ldr	r2, [pc, #80]	@ (800130c <_sbrk+0x5c>)
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <_sbrk+0x60>)
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c4:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <_sbrk+0x64>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <_sbrk+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d207      	bcs.n	80012f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e0:	f009 fa98 	bl	800a814 <__errno>
 80012e4:	4603      	mov	r3, r0
 80012e6:	220c      	movs	r2, #12
 80012e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	e009      	b.n	8001304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f0:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f6:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a05      	ldr	r2, [pc, #20]	@ (8001314 <_sbrk+0x64>)
 8001300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	24080000 	.word	0x24080000
 8001310:	00000400 	.word	0x00000400
 8001314:	24000910 	.word	0x24000910
 8001318:	24000c80 	.word	0x24000c80

0800131c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001320:	4b37      	ldr	r3, [pc, #220]	@ (8001400 <SystemInit+0xe4>)
 8001322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001326:	4a36      	ldr	r2, [pc, #216]	@ (8001400 <SystemInit+0xe4>)
 8001328:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800132c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001330:	4b34      	ldr	r3, [pc, #208]	@ (8001404 <SystemInit+0xe8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 030f 	and.w	r3, r3, #15
 8001338:	2b06      	cmp	r3, #6
 800133a:	d807      	bhi.n	800134c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800133c:	4b31      	ldr	r3, [pc, #196]	@ (8001404 <SystemInit+0xe8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 030f 	bic.w	r3, r3, #15
 8001344:	4a2f      	ldr	r2, [pc, #188]	@ (8001404 <SystemInit+0xe8>)
 8001346:	f043 0307 	orr.w	r3, r3, #7
 800134a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800134c:	4b2e      	ldr	r3, [pc, #184]	@ (8001408 <SystemInit+0xec>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a2d      	ldr	r2, [pc, #180]	@ (8001408 <SystemInit+0xec>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001358:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <SystemInit+0xec>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800135e:	4b2a      	ldr	r3, [pc, #168]	@ (8001408 <SystemInit+0xec>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4929      	ldr	r1, [pc, #164]	@ (8001408 <SystemInit+0xec>)
 8001364:	4b29      	ldr	r3, [pc, #164]	@ (800140c <SystemInit+0xf0>)
 8001366:	4013      	ands	r3, r2
 8001368:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800136a:	4b26      	ldr	r3, [pc, #152]	@ (8001404 <SystemInit+0xe8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d007      	beq.n	8001386 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001376:	4b23      	ldr	r3, [pc, #140]	@ (8001404 <SystemInit+0xe8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 030f 	bic.w	r3, r3, #15
 800137e:	4a21      	ldr	r2, [pc, #132]	@ (8001404 <SystemInit+0xe8>)
 8001380:	f043 0307 	orr.w	r3, r3, #7
 8001384:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001386:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <SystemInit+0xec>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800138c:	4b1e      	ldr	r3, [pc, #120]	@ (8001408 <SystemInit+0xec>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001392:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <SystemInit+0xec>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <SystemInit+0xec>)
 800139a:	4a1d      	ldr	r2, [pc, #116]	@ (8001410 <SystemInit+0xf4>)
 800139c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <SystemInit+0xec>)
 80013a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001414 <SystemInit+0xf8>)
 80013a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013a4:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <SystemInit+0xec>)
 80013a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001418 <SystemInit+0xfc>)
 80013a8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013aa:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <SystemInit+0xec>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013b0:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <SystemInit+0xec>)
 80013b2:	4a19      	ldr	r2, [pc, #100]	@ (8001418 <SystemInit+0xfc>)
 80013b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013b6:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <SystemInit+0xec>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <SystemInit+0xec>)
 80013be:	4a16      	ldr	r2, [pc, #88]	@ (8001418 <SystemInit+0xfc>)
 80013c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <SystemInit+0xec>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <SystemInit+0xec>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001408 <SystemInit+0xec>)
 80013ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <SystemInit+0xec>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <SystemInit+0x100>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <SystemInit+0x104>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013e6:	d202      	bcs.n	80013ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <SystemInit+0x108>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <SystemInit+0x10c>)
 80013f0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00
 8001404:	52002000 	.word	0x52002000
 8001408:	58024400 	.word	0x58024400
 800140c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001410:	02020200 	.word	0x02020200
 8001414:	01ff0000 	.word	0x01ff0000
 8001418:	01010280 	.word	0x01010280
 800141c:	5c001000 	.word	0x5c001000
 8001420:	ffff0000 	.word	0xffff0000
 8001424:	51008108 	.word	0x51008108
 8001428:	52004000 	.word	0x52004000

0800142c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800144a:	4b20      	ldr	r3, [pc, #128]	@ (80014cc <MX_TIM1_Init+0xa0>)
 800144c:	4a20      	ldr	r2, [pc, #128]	@ (80014d0 <MX_TIM1_Init+0xa4>)
 800144e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001450:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <MX_TIM1_Init+0xa0>)
 8001452:	2200      	movs	r2, #0
 8001454:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001456:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <MX_TIM1_Init+0xa0>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <MX_TIM1_Init+0xa0>)
 800145e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001462:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <MX_TIM1_Init+0xa0>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800146a:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <MX_TIM1_Init+0xa0>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_TIM1_Init+0xa0>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001476:	4815      	ldr	r0, [pc, #84]	@ (80014cc <MX_TIM1_Init+0xa0>)
 8001478:	f006 fbef 	bl	8007c5a <HAL_TIM_Base_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001482:	f7ff fcd3 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001486:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800148a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	4619      	mov	r1, r3
 8001492:	480e      	ldr	r0, [pc, #56]	@ (80014cc <MX_TIM1_Init+0xa0>)
 8001494:	f006 fd14 	bl	8007ec0 <HAL_TIM_ConfigClockSource>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800149e:	f7ff fcc5 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	@ (80014cc <MX_TIM1_Init+0xa0>)
 80014b4:	f007 fa16 	bl	80088e4 <HAL_TIMEx_MasterConfigSynchronization>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014be:	f7ff fcb5 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	3720      	adds	r7, #32
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	24000914 	.word	0x24000914
 80014d0:	40010000 	.word	0x40010000

080014d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	@ 0x38
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f4:	463b      	mov	r3, r7
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001506:	4b30      	ldr	r3, [pc, #192]	@ (80015c8 <MX_TIM2_Init+0xf4>)
 8001508:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800150c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800150e:	4b2e      	ldr	r3, [pc, #184]	@ (80015c8 <MX_TIM2_Init+0xf4>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001514:	4b2c      	ldr	r3, [pc, #176]	@ (80015c8 <MX_TIM2_Init+0xf4>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800151a:	4b2b      	ldr	r3, [pc, #172]	@ (80015c8 <MX_TIM2_Init+0xf4>)
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001522:	4b29      	ldr	r3, [pc, #164]	@ (80015c8 <MX_TIM2_Init+0xf4>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001528:	4b27      	ldr	r3, [pc, #156]	@ (80015c8 <MX_TIM2_Init+0xf4>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800152e:	4826      	ldr	r0, [pc, #152]	@ (80015c8 <MX_TIM2_Init+0xf4>)
 8001530:	f006 fb93 	bl	8007c5a <HAL_TIM_Base_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800153a:	f7ff fc77 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800153e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001542:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	@ 0x30
  sClockSourceConfig.ClockFilter = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001550:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001554:	4619      	mov	r1, r3
 8001556:	481c      	ldr	r0, [pc, #112]	@ (80015c8 <MX_TIM2_Init+0xf4>)
 8001558:	f006 fcb2 	bl	8007ec0 <HAL_TIM_ConfigClockSource>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001562:	f7ff fc63 	bl	8000e2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001566:	4818      	ldr	r0, [pc, #96]	@ (80015c8 <MX_TIM2_Init+0xf4>)
 8001568:	f006 fbce 	bl	8007d08 <HAL_TIM_OC_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001572:	f7ff fc5b 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4810      	ldr	r0, [pc, #64]	@ (80015c8 <MX_TIM2_Init+0xf4>)
 8001586:	f007 f9ad 	bl	80088e4 <HAL_TIMEx_MasterConfigSynchronization>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8001590:	f7ff fc4c 	bl	8000e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001594:	2300      	movs	r3, #0
 8001596:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	2204      	movs	r2, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	4807      	ldr	r0, [pc, #28]	@ (80015c8 <MX_TIM2_Init+0xf4>)
 80015ac:	f006 fc0e 	bl	8007dcc <HAL_TIM_OC_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80015b6:	f7ff fc39 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015ba:	4803      	ldr	r0, [pc, #12]	@ (80015c8 <MX_TIM2_Init+0xf4>)
 80015bc:	f000 f866 	bl	800168c <HAL_TIM_MspPostInit>

}
 80015c0:	bf00      	nop
 80015c2:	3738      	adds	r7, #56	@ 0x38
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	24000960 	.word	0x24000960

080015cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	@ 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a25      	ldr	r2, [pc, #148]	@ (8001680 <HAL_TIM_Base_MspInit+0xb4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d10f      	bne.n	800160e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ee:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <HAL_TIM_Base_MspInit+0xb8>)
 80015f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015f4:	4a23      	ldr	r2, [pc, #140]	@ (8001684 <HAL_TIM_Base_MspInit+0xb8>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015fe:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <HAL_TIM_Base_MspInit+0xb8>)
 8001600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800160c:	e033      	b.n	8001676 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001616:	d12e      	bne.n	8001676 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001618:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <HAL_TIM_Base_MspInit+0xb8>)
 800161a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800161e:	4a19      	ldr	r2, [pc, #100]	@ (8001684 <HAL_TIM_Base_MspInit+0xb8>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001628:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <HAL_TIM_Base_MspInit+0xb8>)
 800162a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <HAL_TIM_Base_MspInit+0xb8>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163c:	4a11      	ldr	r2, [pc, #68]	@ (8001684 <HAL_TIM_Base_MspInit+0xb8>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <HAL_TIM_Base_MspInit+0xb8>)
 8001648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001654:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001666:	2301      	movs	r3, #1
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	@ (8001688 <HAL_TIM_Base_MspInit+0xbc>)
 8001672:	f002 fafb 	bl	8003c6c <HAL_GPIO_Init>
}
 8001676:	bf00      	nop
 8001678:	3728      	adds	r7, #40	@ 0x28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40010000 	.word	0x40010000
 8001684:	58024400 	.word	0x58024400
 8001688:	58020000 	.word	0x58020000

0800168c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016ac:	d11e      	bne.n	80016ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <HAL_TIM_MspPostInit+0x68>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b4:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <HAL_TIM_MspPostInit+0x68>)
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016be:	4b0d      	ldr	r3, [pc, #52]	@ (80016f4 <HAL_TIM_MspPostInit+0x68>)
 80016c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016cc:	2308      	movs	r3, #8
 80016ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016dc:	2301      	movs	r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	4804      	ldr	r0, [pc, #16]	@ (80016f8 <HAL_TIM_MspPostInit+0x6c>)
 80016e8:	f002 fac0 	bl	8003c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	58024400 	.word	0x58024400
 80016f8:	58020400 	.word	0x58020400

080016fc <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001700:	4b22      	ldr	r3, [pc, #136]	@ (800178c <MX_UART4_Init+0x90>)
 8001702:	4a23      	ldr	r2, [pc, #140]	@ (8001790 <MX_UART4_Init+0x94>)
 8001704:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001706:	4b21      	ldr	r3, [pc, #132]	@ (800178c <MX_UART4_Init+0x90>)
 8001708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800170c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b1f      	ldr	r3, [pc, #124]	@ (800178c <MX_UART4_Init+0x90>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b1d      	ldr	r3, [pc, #116]	@ (800178c <MX_UART4_Init+0x90>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800171a:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <MX_UART4_Init+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <MX_UART4_Init+0x90>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b19      	ldr	r3, [pc, #100]	@ (800178c <MX_UART4_Init+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b17      	ldr	r3, [pc, #92]	@ (800178c <MX_UART4_Init+0x90>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001732:	4b16      	ldr	r3, [pc, #88]	@ (800178c <MX_UART4_Init+0x90>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001738:	4b14      	ldr	r3, [pc, #80]	@ (800178c <MX_UART4_Init+0x90>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800173e:	4b13      	ldr	r3, [pc, #76]	@ (800178c <MX_UART4_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001744:	4811      	ldr	r0, [pc, #68]	@ (800178c <MX_UART4_Init+0x90>)
 8001746:	f007 f95b 	bl	8008a00 <HAL_UART_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001750:	f7ff fb6c 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001754:	2100      	movs	r1, #0
 8001756:	480d      	ldr	r0, [pc, #52]	@ (800178c <MX_UART4_Init+0x90>)
 8001758:	f008 f9f1 	bl	8009b3e <HAL_UARTEx_SetTxFifoThreshold>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001762:	f7ff fb63 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001766:	2100      	movs	r1, #0
 8001768:	4808      	ldr	r0, [pc, #32]	@ (800178c <MX_UART4_Init+0x90>)
 800176a:	f008 fa26 	bl	8009bba <HAL_UARTEx_SetRxFifoThreshold>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001774:	f7ff fb5a 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	@ (800178c <MX_UART4_Init+0x90>)
 800177a:	f008 f9a7 	bl	8009acc <HAL_UARTEx_DisableFifoMode>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001784:	f7ff fb52 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	240009ac 	.word	0x240009ac
 8001790:	40004c00 	.word	0x40004c00

08001794 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b0ba      	sub	sp, #232	@ 0xe8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	22c0      	movs	r2, #192	@ 0xc0
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f008 ffda 	bl	800a76e <memset>
  if(uartHandle->Instance==UART4)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a26      	ldr	r2, [pc, #152]	@ (8001858 <HAL_UART_MspInit+0xc4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d145      	bne.n	8001850 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80017c4:	f04f 0202 	mov.w	r2, #2
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 fd96 	bl	800530c <HAL_RCCEx_PeriphCLKConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017e6:	f7ff fb21 	bl	8000e2c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017ea:	4b1c      	ldr	r3, [pc, #112]	@ (800185c <HAL_UART_MspInit+0xc8>)
 80017ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017f0:	4a1a      	ldr	r2, [pc, #104]	@ (800185c <HAL_UART_MspInit+0xc8>)
 80017f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017fa:	4b18      	ldr	r3, [pc, #96]	@ (800185c <HAL_UART_MspInit+0xc8>)
 80017fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001800:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b14      	ldr	r3, [pc, #80]	@ (800185c <HAL_UART_MspInit+0xc8>)
 800180a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180e:	4a13      	ldr	r2, [pc, #76]	@ (800185c <HAL_UART_MspInit+0xc8>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001818:	4b10      	ldr	r3, [pc, #64]	@ (800185c <HAL_UART_MspInit+0xc8>)
 800181a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001826:	2303      	movs	r3, #3
 8001828:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800183e:	2308      	movs	r3, #8
 8001840:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001848:	4619      	mov	r1, r3
 800184a:	4805      	ldr	r0, [pc, #20]	@ (8001860 <HAL_UART_MspInit+0xcc>)
 800184c:	f002 fa0e 	bl	8003c6c <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001850:	bf00      	nop
 8001852:	37e8      	adds	r7, #232	@ 0xe8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40004c00 	.word	0x40004c00
 800185c:	58024400 	.word	0x58024400
 8001860:	58020000 	.word	0x58020000

08001864 <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
//HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
  HAL_UART_Transmit(&huart4, (uint8_t*)ptr, len, 100);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	b29a      	uxth	r2, r3
 8001874:	2364      	movs	r3, #100	@ 0x64
 8001876:	68b9      	ldr	r1, [r7, #8]
 8001878:	4803      	ldr	r0, [pc, #12]	@ (8001888 <_write+0x24>)
 800187a:	f007 f911 	bl	8008aa0 <HAL_UART_Transmit>

  return len;
 800187e:	687b      	ldr	r3, [r7, #4]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	240009ac 	.word	0x240009ac

0800188c <Antenna_Array_Init>:
//Tanya_add
volatile uint32_t data_sequence = 0;


UWB_StatusTypeDef Antenna_Array_Init()
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	e0b2      	b.n	80019fe <Antenna_Array_Init+0x172>
	{
		UWB_device_array[0].port.index = 0;
 8001898:	4baa      	ldr	r3, [pc, #680]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		UWB_device_array[0].port.hspi = &hspi1;
 80018a0:	4ba8      	ldr	r3, [pc, #672]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80018a2:	4aa9      	ldr	r2, [pc, #676]	@ (8001b48 <Antenna_Array_Init+0x2bc>)
 80018a4:	609a      	str	r2, [r3, #8]
		UWB_device_array[0].port.irq_pin = UWB1_IRQ_Pin;
 80018a6:	4ba7      	ldr	r3, [pc, #668]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	851a      	strh	r2, [r3, #40]	@ 0x28
		UWB_device_array[0].port.irq_port = UWB1_IRQ_GPIO_Port;
 80018ac:	4ba5      	ldr	r3, [pc, #660]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80018ae:	4aa7      	ldr	r2, [pc, #668]	@ (8001b4c <Antenna_Array_Init+0x2c0>)
 80018b0:	625a      	str	r2, [r3, #36]	@ 0x24
		UWB_device_array[0].port.rstn_pin = UWB1_RESET_Pin;
 80018b2:	4ba4      	ldr	r3, [pc, #656]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80018b4:	2202      	movs	r2, #2
 80018b6:	841a      	strh	r2, [r3, #32]
		UWB_device_array[0].port.rstn_port = UWB1_RESET_GPIO_Port;
 80018b8:	4ba2      	ldr	r3, [pc, #648]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80018ba:	4aa4      	ldr	r2, [pc, #656]	@ (8001b4c <Antenna_Array_Init+0x2c0>)
 80018bc:	61da      	str	r2, [r3, #28]
		UWB_device_array[0].port.spi_csn_pin = UWB1_CSn_Pin;
 80018be:	4ba1      	ldr	r3, [pc, #644]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80018c0:	2204      	movs	r2, #4
 80018c2:	821a      	strh	r2, [r3, #16]
		UWB_device_array[0].port.spi_csn_port = UWB1_CSn_GPIO_Port;
 80018c4:	4b9f      	ldr	r3, [pc, #636]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80018c6:	4aa1      	ldr	r2, [pc, #644]	@ (8001b4c <Antenna_Array_Init+0x2c0>)
 80018c8:	60da      	str	r2, [r3, #12]
		UWB_device_array[0].port.wakeup_pin = UWB1_WAKEUP_Pin;
 80018ca:	4b9e      	ldr	r3, [pc, #632]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80018cc:	2280      	movs	r2, #128	@ 0x80
 80018ce:	831a      	strh	r2, [r3, #24]
		UWB_device_array[0].port.wakeup_port = UWB1_WAKEUP_GPIO_Port;
 80018d0:	4b9c      	ldr	r3, [pc, #624]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80018d2:	4a9f      	ldr	r2, [pc, #636]	@ (8001b50 <Antenna_Array_Init+0x2c4>)
 80018d4:	615a      	str	r2, [r3, #20]
		UWB_device_array[0].port.irq = EXTI0_IRQn;
 80018d6:	4b9b      	ldr	r3, [pc, #620]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80018d8:	2206      	movs	r2, #6
 80018da:	62da      	str	r2, [r3, #44]	@ 0x2c

		UWB_device_array[1].port.index = 1;
 80018dc:	4b99      	ldr	r3, [pc, #612]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2198 	strb.w	r2, [r3, #408]	@ 0x198
		UWB_device_array[1].port.hspi = &hspi1;
 80018e4:	4b97      	ldr	r3, [pc, #604]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80018e6:	4a98      	ldr	r2, [pc, #608]	@ (8001b48 <Antenna_Array_Init+0x2bc>)
 80018e8:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
		UWB_device_array[1].port.irq_pin = UWB2_IRQ_Pin;
 80018ec:	4b95      	ldr	r3, [pc, #596]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80018ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018f2:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
		UWB_device_array[1].port.irq_port = UWB2_IRQ_GPIO_Port;
 80018f6:	4b93      	ldr	r3, [pc, #588]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80018f8:	4a95      	ldr	r2, [pc, #596]	@ (8001b50 <Antenna_Array_Init+0x2c4>)
 80018fa:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
		UWB_device_array[1].port.rstn_pin = UWB2_RESET_Pin;
 80018fe:	4b91      	ldr	r3, [pc, #580]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 8001900:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001904:	f8a3 2188 	strh.w	r2, [r3, #392]	@ 0x188
		UWB_device_array[1].port.rstn_port = UWB2_RESET_GPIO_Port;
 8001908:	4b8e      	ldr	r3, [pc, #568]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 800190a:	4a91      	ldr	r2, [pc, #580]	@ (8001b50 <Antenna_Array_Init+0x2c4>)
 800190c:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
		UWB_device_array[1].port.spi_csn_pin = UWB2_CSn_Pin;
 8001910:	4b8c      	ldr	r3, [pc, #560]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 8001912:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001916:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
		UWB_device_array[1].port.spi_csn_port = UWB2_CSn_GPIO_Port;
 800191a:	4b8a      	ldr	r3, [pc, #552]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 800191c:	4a8c      	ldr	r2, [pc, #560]	@ (8001b50 <Antenna_Array_Init+0x2c4>)
 800191e:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
		UWB_device_array[1].port.wakeup_pin = UWB2_WAKEUP_Pin;
 8001922:	4b88      	ldr	r3, [pc, #544]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 8001924:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001928:	f8a3 2180 	strh.w	r2, [r3, #384]	@ 0x180
		UWB_device_array[1].port.wakeup_port = UWB2_WAKEUP_GPIO_Port;
 800192c:	4b85      	ldr	r3, [pc, #532]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 800192e:	4a88      	ldr	r2, [pc, #544]	@ (8001b50 <Antenna_Array_Init+0x2c4>)
 8001930:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
		UWB_device_array[1].port.irq = EXTI9_5_IRQn;
 8001934:	4b83      	ldr	r3, [pc, #524]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 8001936:	2217      	movs	r2, #23
 8001938:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194

		UWB_device_array[2].port.index = 2;
 800193c:	4b81      	ldr	r3, [pc, #516]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 800193e:	2202      	movs	r2, #2
 8001940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
		UWB_device_array[2].port.hspi = &hspi2;
 8001944:	4b7f      	ldr	r3, [pc, #508]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 8001946:	4a83      	ldr	r2, [pc, #524]	@ (8001b54 <Antenna_Array_Init+0x2c8>)
 8001948:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
		UWB_device_array[2].port.irq_pin = UWB3_IRQ_Pin;
 800194c:	4b7d      	ldr	r3, [pc, #500]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 800194e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001952:	f8a3 22f8 	strh.w	r2, [r3, #760]	@ 0x2f8
		UWB_device_array[2].port.irq_port = UWB3_IRQ_GPIO_Port;
 8001956:	4b7b      	ldr	r3, [pc, #492]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 8001958:	4a7f      	ldr	r2, [pc, #508]	@ (8001b58 <Antenna_Array_Init+0x2cc>)
 800195a:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
		UWB_device_array[2].port.rstn_pin = UWB3_RESET_Pin;
 800195e:	4b79      	ldr	r3, [pc, #484]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 8001960:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001964:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0
		UWB_device_array[2].port.rstn_port = UWB3_RESET_GPIO_Port;
 8001968:	4b76      	ldr	r3, [pc, #472]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 800196a:	4a7b      	ldr	r2, [pc, #492]	@ (8001b58 <Antenna_Array_Init+0x2cc>)
 800196c:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
		UWB_device_array[2].port.spi_csn_pin = UWB3_CSn_Pin;
 8001970:	4b74      	ldr	r3, [pc, #464]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 8001972:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001976:	f8a3 22e0 	strh.w	r2, [r3, #736]	@ 0x2e0
		UWB_device_array[2].port.spi_csn_port = UWB3_CSn_GPIO_Port;
 800197a:	4b72      	ldr	r3, [pc, #456]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 800197c:	4a76      	ldr	r2, [pc, #472]	@ (8001b58 <Antenna_Array_Init+0x2cc>)
 800197e:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
		UWB_device_array[2].port.wakeup_pin = UWB3_WAKEUP_Pin;
 8001982:	4b70      	ldr	r3, [pc, #448]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 8001984:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001988:	f8a3 22e8 	strh.w	r2, [r3, #744]	@ 0x2e8
		UWB_device_array[2].port.wakeup_port = UWB3_WAKEUP_GPIO_Port;
 800198c:	4b6d      	ldr	r3, [pc, #436]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 800198e:	4a72      	ldr	r2, [pc, #456]	@ (8001b58 <Antenna_Array_Init+0x2cc>)
 8001990:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
		UWB_device_array[2].port.irq = EXTI15_10_IRQn;
 8001994:	4b6b      	ldr	r3, [pc, #428]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 8001996:	2228      	movs	r2, #40	@ 0x28
 8001998:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc

		UWB_device_array[3].port.index = 3;
 800199c:	4b69      	ldr	r3, [pc, #420]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 800199e:	2203      	movs	r2, #3
 80019a0:	f883 2468 	strb.w	r2, [r3, #1128]	@ 0x468
		UWB_device_array[3].port.hspi = &hspi2;
 80019a4:	4b67      	ldr	r3, [pc, #412]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80019a6:	4a6b      	ldr	r2, [pc, #428]	@ (8001b54 <Antenna_Array_Init+0x2c8>)
 80019a8:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
		UWB_device_array[3].port.irq_pin = UWB4_IRQ_Pin;
 80019ac:	4b65      	ldr	r3, [pc, #404]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80019ae:	2240      	movs	r2, #64	@ 0x40
 80019b0:	f8a3 2460 	strh.w	r2, [r3, #1120]	@ 0x460
		UWB_device_array[3].port.irq_port = UWB4_IRQ_GPIO_Port;
 80019b4:	4b63      	ldr	r3, [pc, #396]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80019b6:	4a69      	ldr	r2, [pc, #420]	@ (8001b5c <Antenna_Array_Init+0x2d0>)
 80019b8:	f8c3 245c 	str.w	r2, [r3, #1116]	@ 0x45c
		UWB_device_array[3].port.rstn_pin = UWB4_RESET_Pin;
 80019bc:	4b61      	ldr	r3, [pc, #388]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80019be:	2280      	movs	r2, #128	@ 0x80
 80019c0:	f8a3 2458 	strh.w	r2, [r3, #1112]	@ 0x458
		UWB_device_array[3].port.rstn_port = UWB4_RESET_GPIO_Port;
 80019c4:	4b5f      	ldr	r3, [pc, #380]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80019c6:	4a65      	ldr	r2, [pc, #404]	@ (8001b5c <Antenna_Array_Init+0x2d0>)
 80019c8:	f8c3 2454 	str.w	r2, [r3, #1108]	@ 0x454
		UWB_device_array[3].port.spi_csn_pin = UWB4_CSn_Pin;
 80019cc:	4b5d      	ldr	r3, [pc, #372]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80019ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019d2:	f8a3 2448 	strh.w	r2, [r3, #1096]	@ 0x448
		UWB_device_array[3].port.spi_csn_port = UWB4_CSn_GPIO_Port;
 80019d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80019d8:	4a60      	ldr	r2, [pc, #384]	@ (8001b5c <Antenna_Array_Init+0x2d0>)
 80019da:	f8c3 2444 	str.w	r2, [r3, #1092]	@ 0x444
		UWB_device_array[3].port.wakeup_pin = UWB4_WAKEUP_Pin;
 80019de:	4b59      	ldr	r3, [pc, #356]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80019e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e4:	f8a3 2450 	strh.w	r2, [r3, #1104]	@ 0x450
		UWB_device_array[3].port.wakeup_port = UWB4_WAKEUP_GPIO_Port;
 80019e8:	4b56      	ldr	r3, [pc, #344]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80019ea:	4a5c      	ldr	r2, [pc, #368]	@ (8001b5c <Antenna_Array_Init+0x2d0>)
 80019ec:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
		UWB_device_array[3].port.irq = EXTI9_5_IRQn;
 80019f0:	4b54      	ldr	r3, [pc, #336]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 80019f2:	2217      	movs	r2, #23
 80019f4:	f8c3 2464 	str.w	r2, [r3, #1124]	@ 0x464
	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	f77f af49 	ble.w	8001898 <Antenna_Array_Init+0xc>

	/* Reset and initialise DW1000.
	 * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
	 * performance. */

	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	e00d      	b.n	8001a28 <Antenna_Array_Init+0x19c>
	{
		reset_DW1000((DW1000_Port_t *)&UWB_device_array[i].port);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	3308      	adds	r3, #8
 8001a18:	4a4a      	ldr	r2, [pc, #296]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 fd9f 	bl	8003560 <reset_DW1000>
	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	3301      	adds	r3, #1
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	ddee      	ble.n	8001a0c <Antenna_Array_Init+0x180>
	}

	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	e07e      	b.n	8001b32 <Antenna_Array_Init+0x2a6>
	{
		DW1000_Port_t *antenna_port = (DW1000_Port_t *) &UWB_device_array[i].port;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	3308      	adds	r3, #8
 8001a40:	4a40      	ldr	r2, [pc, #256]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 8001a42:	4413      	add	r3, r2
 8001a44:	607b      	str	r3, [r7, #4]
		int trys = 10;
 8001a46:	230a      	movs	r3, #10
 8001a48:	60bb      	str	r3, [r7, #8]
		port_set_dw1000_slowrate(antenna_port);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f001 fdad 	bl	80035aa <port_set_dw1000_slowrate>

		dwt_setlocaldataptr(i);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 faa4 	bl	8001fa0 <dwt_setlocaldataptr>

		do
		{
			if(dwt_initialise(DWT_LOADUCODE,
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f000 fabe 	bl	8001fdc <dwt_initialise>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10a      	bne.n	8001a7c <Antenna_Array_Init+0x1f0>
							  antenna_port) == DWT_SUCCESS)
			{
				UWB_device_array[i].avalible = 1;
 8001a66:	4a37      	ldr	r2, [pc, #220]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	3304      	adds	r3, #4
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	e010      	b.n	8001a9e <Antenna_Array_Init+0x212>
			}
			else
			{
				reset_DW1000((DW1000_Port_t *)&UWB_device_array[i].port);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	3308      	adds	r3, #8
 8001a88:	4a2e      	ldr	r2, [pc, #184]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 fd67 	bl	8003560 <reset_DW1000>
				deca_sleep(5);
 8001a92:	2005      	movs	r0, #5
 8001a94:	f001 fc5b 	bl	800334e <deca_sleep>
				trys--;
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	60bb      	str	r3, [r7, #8]
			}
		} while((trys > 0) && UWB_device_array[i].avalible != 1);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	dd0b      	ble.n	8001abc <Antenna_Array_Init+0x230>
 8001aa4:	4a27      	ldr	r2, [pc, #156]	@ (8001b44 <Antenna_Array_Init+0x2b8>)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d1cd      	bne.n	8001a58 <Antenna_Array_Init+0x1cc>
		if(trys <= 0)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	dc01      	bgt.n	8001ac6 <Antenna_Array_Init+0x23a>
		{
			return UWB_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e03a      	b.n	8001b3c <Antenna_Array_Init+0x2b0>
		}

		port_set_dw1000_fastrate(antenna_port);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f001 fd81 	bl	80035ce <port_set_dw1000_fastrate>

		/*Setup Interrupt*/
		dwt_setinterrupt((SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO),
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	2102      	movs	r1, #2
 8001ad0:	4823      	ldr	r0, [pc, #140]	@ (8001b60 <Antenna_Array_Init+0x2d4>)
 8001ad2:	f001 fb4d 	bl	8003170 <dwt_setinterrupt>
						 2,
						 antenna_port);

		//核心 四个回调函数
		dwt_setcallbacks(NULL,
 8001ad6:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <Antenna_Array_Init+0x2d8>)
 8001ad8:	4a23      	ldr	r2, [pc, #140]	@ (8001b68 <Antenna_Array_Init+0x2dc>)
 8001ada:	4924      	ldr	r1, [pc, #144]	@ (8001b6c <Antenna_Array_Init+0x2e0>)
 8001adc:	2000      	movs	r0, #0
 8001ade:	f000 fffd 	bl	8002adc <dwt_setcallbacks>
						 rxOkCallback,
						 rxToCallback,
						 rxErrCallback);
		port_set_deca_isr(dwt_isr,
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4822      	ldr	r0, [pc, #136]	@ (8001b70 <Antenna_Array_Init+0x2e4>)
 8001ae6:	f001 fe57 	bl	8003798 <port_set_deca_isr>
						  antenna_port);

		dwt_write32bitreg(SYS_STATUS_ID,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a21      	ldr	r2, [pc, #132]	@ (8001b74 <Antenna_Array_Init+0x2e8>)
 8001aee:	2100      	movs	r1, #0
 8001af0:	200f      	movs	r0, #15
 8001af2:	f000 ff52 	bl	800299a <dwt_write32bitoffsetreg>
						  SYS_STATUS_ALL_RX_GOOD | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR,
						  antenna_port);

		dwt_configure(&config,
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	481f      	ldr	r0, [pc, #124]	@ (8001b78 <Antenna_Array_Init+0x2ec>)
 8001afa:	f000 fbdf 	bl	80022bc <dwt_configure>
					  antenna_port);

		dwt_setrxantennadelay(RX_ANT_DLY,
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	f244 0043 	movw	r0, #16451	@ 0x4043
 8001b04:	f000 fd5a 	bl	80025bc <dwt_setrxantennadelay>
							  antenna_port);
		dwt_settxantennadelay(TX_ANT_DLY,
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	f244 0043 	movw	r0, #16451	@ 0x4043
 8001b0e:	f000 fd66 	bl	80025de <dwt_settxantennadelay>
							  antenna_port);

		dwt_setpreambledetecttimeout(PRE_TIMEOUT,
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	2000      	movs	r0, #0
 8001b16:	f001 fb1b 	bl	8003150 <dwt_setpreambledetecttimeout>
									 antenna_port);

		/* Configure LED */
		dwt_setleds(1,
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	f001 f907 	bl	8002d30 <dwt_setleds>
					antenna_port);

		/* Set Sync to OSTR*/
		dwt_setecctrl(EC_CTRL_OSTRM,
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001b28:	f001 fbdc 	bl	80032e4 <dwt_setecctrl>
	for(int i = 0; i < DWT_NUM_DW_DEV; i++)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	f77f af7d 	ble.w	8001a34 <Antenna_Array_Init+0x1a8>
					  antenna_port);
	}
	return UWB_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	24000260 	.word	0x24000260
 8001b48:	24000800 	.word	0x24000800
 8001b4c:	58020400 	.word	0x58020400
 8001b50:	58021000 	.word	0x58021000
 8001b54:	24000888 	.word	0x24000888
 8001b58:	58020c00 	.word	0x58020c00
 8001b5c:	58020800 	.word	0x58020800
 8001b60:	2427d000 	.word	0x2427d000
 8001b64:	08001eab 	.word	0x08001eab
 8001b68:	08001e89 	.word	0x08001e89
 8001b6c:	08001e11 	.word	0x08001e11
 8001b70:	08002b1d 	.word	0x08002b1d
 8001b74:	2427ff00 	.word	0x2427ff00
 8001b78:	24000008 	.word	0x24000008

08001b7c <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(DW1000_Port_t *pports)
{
 8001b7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b80:	b088      	sub	sp, #32
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
	uint8 ts_tab[5];
	uint64 ts = 0;
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i;
	dwt_readrxtimestamp(ts_tab,
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 fda6 	bl	80026ea <dwt_readrxtimestamp>
						pports);
	for(i = 4; i >= 0; i--)
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e01f      	b.n	8001be4 <get_rx_timestamp_u64+0x68>
	{
		ts <<= 8;
 8001ba4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	020b      	lsls	r3, r1, #8
 8001bb2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001bb6:	0202      	lsls	r2, r0, #8
 8001bb8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ts |= ts_tab[i];
 8001bbc:	f107 020c 	add.w	r2, r7, #12
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2200      	movs	r2, #0
 8001bca:	461c      	mov	r4, r3
 8001bcc:	4615      	mov	r5, r2
 8001bce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd2:	ea42 0804 	orr.w	r8, r2, r4
 8001bd6:	ea43 0905 	orr.w	r9, r3, r5
 8001bda:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for(i = 4; i >= 0; i--)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	dadc      	bge.n	8001ba4 <get_rx_timestamp_u64+0x28>
	}
	return ts;
 8001bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001bfa <uwb_get_fp_angle>:

static float uwb_get_fp_angle(uint16_t fp_index, DW1000_Port_t *pports)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	6039      	str	r1, [r7, #0]
 8001c04:	80fb      	strh	r3, [r7, #6]
    uint8_t acc_buffer[5];
    uint8_t len = 4;
 8001c06:	2304      	movs	r3, #4
 8001c08:	75fb      	strb	r3, [r7, #23]
    int16_t cir_real, cir_imag;
    dwt_readaccdata(acc_buffer,
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b299      	uxth	r1, r3
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	f107 0010 	add.w	r0, r7, #16
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f000 fd03 	bl	8002628 <dwt_readaccdata>
                    len + 1,
                    4 * fp_index,
                    pports);
    memcpy(&cir_real,
 8001c22:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	81fb      	strh	r3, [r7, #14]
           &acc_buffer[1],
           sizeof(int16_t));
    memcpy(&cir_imag,
 8001c2a:	f8b7 3013 	ldrh.w	r3, [r7, #19]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	81bb      	strh	r3, [r7, #12]
           &acc_buffer[3],
           sizeof(int16_t));
    return atan2f((float) cir_imag,
 8001c32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c42:	ee07 3a10 	vmov	s14, r3
 8001c46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c4a:	eef0 0a47 	vmov.f32	s1, s14
 8001c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c52:	f00a fc41 	bl	800c4d8 <atan2f>
 8001c56:	eef0 7a40 	vmov.f32	s15, s0
                  (float) cir_real);
}
 8001c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	0000      	movs	r0, r0
	...

08001c68 <read_pdoa>:


static void read_pdoa(DW1000_Port_t *antenna_port, uint64 rx_ts)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b0ae      	sub	sp, #184	@ 0xb8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	e9c7 2300 	strd	r2, r3, [r7]
//	uint64_t rx_ts_64 = (uint64_t) get_rx_timestamp_u64(pports);
//	uint32_t rx_ts = (uint32_t) rx_ts_64;
//	uint16_t src_car_id = uwb_node.pdoa_buffer.header.src;
//	uint8_t my_dw_id = pports - &UWB.ports[0];
	uint8_t my_dw_id = antenna_port->index;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001c7a:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	uint8_t rcphase;
	dwt_rxdiag_t tempdiag;
	uint8_t tempacc[129];
	uint16_t fp_index;
	float fp_angle;
	AoADiagnosticTypeDef *pdiag = &(antenna_port->aoa_diagnose);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8001c84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

	dwt_readrcphase(&rcphase, antenna_port);
 8001c88:	f107 03a7 	add.w	r3, r7, #167	@ 0xa7
 8001c8c:	68f9      	ldr	r1, [r7, #12]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f001 fb01 	bl	8003296 <dwt_readrcphase>
	dwt_readdiagnostics(&tempdiag, antenna_port);
 8001c94:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001c98:	68f9      	ldr	r1, [r7, #12]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fce1 	bl	8002662 <dwt_readdiagnostics>
	fp_index = (uint16_t) round(((float) (tempdiag.firstPath & 0x3F) / 0x3F))
 8001ca0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8001ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb0:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8001e08 <read_pdoa+0x1a0>
 8001cb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cbc:	eeb0 0b47 	vmov.f64	d0, d7
 8001cc0:	f00a fc0c 	bl	800c4dc <round>
 8001cc4:	eeb0 7b40 	vmov.f64	d7, d0
 8001cc8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ccc:	ee17 3a90 	vmov	r3, s15
 8001cd0:	b29a      	uxth	r2, r3
			+ (tempdiag.firstPath >> 6);
 8001cd2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8001cd6:	099b      	lsrs	r3, r3, #6
 8001cd8:	b29b      	uxth	r3, r3
	fp_index = (uint16_t) round(((float) (tempdiag.firstPath & 0x3F) / 0x3F))
 8001cda:	4413      	add	r3, r2
 8001cdc:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
	fp_angle = uwb_get_fp_angle(fp_index, antenna_port);
 8001ce0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8001ce4:	68f9      	ldr	r1, [r7, #12]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff87 	bl	8001bfa <uwb_get_fp_angle>
 8001cec:	ed87 0a2a 	vstr	s0, [r7, #168]	@ 0xa8

	//私以为这些都没什么必要的？或可也打印出去
	pdiag->avalible = 1;
 8001cf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	769a      	strb	r2, [r3, #26]
	pdiag->fp_amp1 = tempdiag.firstPathAmp1;
 8001cf8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8001cfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d00:	81da      	strh	r2, [r3, #14]
	pdiag->fp_amp2 = tempdiag.firstPathAmp2;
 8001d02:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8001d06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d0a:	821a      	strh	r2, [r3, #16]
	pdiag->fp_amp3 = tempdiag.firstPathAmp3;
 8001d0c:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8001d10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d14:	825a      	strh	r2, [r3, #18]
	pdiag->fp_amp_sum = pdiag->fp_amp1 + pdiag->fp_amp2 + pdiag->fp_amp3;
 8001d16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d1a:	89db      	ldrh	r3, [r3, #14]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d22:	8a1b      	ldrh	r3, [r3, #16]
 8001d24:	4413      	add	r3, r2
 8001d26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001d2a:	8a52      	ldrh	r2, [r2, #18]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d34:	615a      	str	r2, [r3, #20]
	pdiag->fp_angle = fp_angle;
 8001d36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001d3e:	609a      	str	r2, [r3, #8]
	pdiag->fp_index = fp_index;
 8001d40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d44:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8001d48:	819a      	strh	r2, [r3, #12]
	pdiag->my_dw_id = my_dw_id;
 8001d4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d4e:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8001d52:	701a      	strb	r2, [r3, #0]
	pdiag->rcphase = rcphase;
 8001d54:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8001d58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d5c:	705a      	strb	r2, [r3, #1]
	pdiag->rx_ts = rx_ts;
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d64:	605a      	str	r2, [r3, #4]
	pdiag->std_noise = tempdiag.stdNoise;
 8001d66:	f8b7 2098 	ldrh.w	r2, [r7, #152]	@ 0x98
 8001d6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d6e:	831a      	strh	r2, [r3, #24]
	pdiag->cir_pwr = tempdiag.maxGrowthCIR;
 8001d70:	f8b7 209e 	ldrh.w	r2, [r7, #158]	@ 0x9e
 8001d74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d78:	841a      	strh	r2, [r3, #32]
	pdiag->rxpacc = tempdiag.rxPreamCount;
 8001d7a:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	@ 0xa0
 8001d7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d82:	839a      	strh	r2, [r3, #28]
	pdiag->rxpacc_nosat = tempdiag.rxPreamCountNOSAT;
 8001d84:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8001d88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d8c:	83da      	strh	r2, [r3, #30]

	//test
	if (pdiag->fp_amp1 < (uint16_t) 256) {
 8001d8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d92:	89db      	ldrh	r3, [r3, #14]
 8001d94:	2bff      	cmp	r3, #255	@ 0xff
 8001d96:	d804      	bhi.n	8001da2 <read_pdoa+0x13a>
		pdiag->avalible = 0;
 8001d98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	769a      	strb	r2, [r3, #26]
 8001da0:	e024      	b.n	8001dec <read_pdoa+0x184>
		return;
	}

	antenna_port->aoa_param.phi = fp_angle;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001da8:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
	antenna_port->aoa_param.beta = (float) rcphase / 64.0 * PI;
 8001dac:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001db0:	ee07 3a90 	vmov	s15, r3
 8001db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001dbc:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 8001df8 <read_pdoa+0x190>
 8001dc0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001dc4:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8001e00 <read_pdoa+0x198>
 8001dc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001dcc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
	antenna_port->aoa_param.sequence = data_sequence;
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <read_pdoa+0x1a4>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

	/**
	 * @TODO enqueueData  (with index)
	 */
	enqueueData(antenna_port->index);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fc4a 	bl	8000680 <enqueueData>

}
 8001dec:	37b8      	adds	r7, #184	@ 0xb8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	f3af 8000 	nop.w
 8001df8:	00000000 	.word	0x00000000
 8001dfc:	40500000 	.word	0x40500000
 8001e00:	4d12d84a 	.word	0x4d12d84a
 8001e04:	400921fb 	.word	0x400921fb
 8001e08:	427c0000 	.word	0x427c0000
 8001e0c:	24000a40 	.word	0x24000a40

08001e10 <rxOkCallback>:



void rxOkCallback(const dwt_cb_data_t *cbData, DW1000_Port_t *antenna_port)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
	uint64 rx_timestamp = 0;
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9c7 2304 	strd	r2, r3, [r7, #16]
	/* Clear reception timeout to start next ranging process. */
	dwt_setrxtimeout(0,
 8001e26:	6839      	ldr	r1, [r7, #0]
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f001 f94f 	bl	80030cc <dwt_setrxtimeout>
					 antenna_port);

	/* Activate reception immediately. */
	dwt_rxenable(DWT_START_RX_IMMEDIATE,
 8001e2e:	6839      	ldr	r1, [r7, #0]
 8001e30:	2000      	movs	r0, #0
 8001e32:	f001 f904 	bl	800303e <dwt_rxenable>
				 antenna_port);

	dwt_readrxdata(antenna_port->antenna_buffer.rxBuffer,
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f103 00ac 	add.w	r0, r3, #172	@ 0xac
				   cbData->datalength,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8899      	ldrh	r1, [r3, #4]
	dwt_readrxdata(antenna_port->antenna_buffer.rxBuffer,
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f000 fbdb 	bl	80025fe <dwt_readrxdata>
				   0,
				   antenna_port);

	rx_timestamp = get_rx_timestamp_u64(antenna_port);
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f7ff fe97 	bl	8001b7c <get_rx_timestamp_u64>
 8001e4e:	e9c7 0104 	strd	r0, r1, [r7, #16]

	UWB_Msg_Header_t* pmsg = (UWB_Msg_Header_t*)(antenna_port->antenna_buffer.rxBuffer);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	33ac      	adds	r3, #172	@ 0xac
 8001e56:	60fb      	str	r3, [r7, #12]
	data_sequence = pmsg->sequence;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	789b      	ldrb	r3, [r3, #2]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <rxOkCallback+0x74>)
 8001e60:	601a      	str	r2, [r3, #0]

	read_pdoa(antenna_port, rx_timestamp);
 8001e62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e66:	6838      	ldr	r0, [r7, #0]
 8001e68:	f7ff fefe 	bl	8001c68 <read_pdoa>

	/* Clear reception timeout to start next ranging process. */
	dwt_setrxtimeout(0, antenna_port);
 8001e6c:	6839      	ldr	r1, [r7, #0]
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f001 f92c 	bl	80030cc <dwt_setrxtimeout>

	/* Activate reception immediately. */
	dwt_rxenable(DWT_START_RX_IMMEDIATE, antenna_port);
 8001e74:	6839      	ldr	r1, [r7, #0]
 8001e76:	2000      	movs	r0, #0
 8001e78:	f001 f8e1 	bl	800303e <dwt_rxenable>

}
 8001e7c:	bf00      	nop
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	24000a40 	.word	0x24000a40

08001e88 <rxToCallback>:


void rxToCallback(const dwt_cb_data_t *cbData, DW1000_Port_t *antenna_port)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
	/* Clear reception timeout to start next ranging process. */
	dwt_setrxtimeout(0,
 8001e92:	6839      	ldr	r1, [r7, #0]
 8001e94:	2000      	movs	r0, #0
 8001e96:	f001 f919 	bl	80030cc <dwt_setrxtimeout>
					 antenna_port);

	/* Activate reception immediately. */
	dwt_rxenable(DWT_START_RX_IMMEDIATE,
 8001e9a:	6839      	ldr	r1, [r7, #0]
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f001 f8ce 	bl	800303e <dwt_rxenable>
				 antenna_port);
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <rxErrCallback>:

void rxErrCallback(const dwt_cb_data_t *cbData, DW1000_Port_t *antenna_port)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]

	/* Clear reception timeout to start next ranging process. */
	dwt_setrxtimeout(0,
 8001eb4:	6839      	ldr	r1, [r7, #0]
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f001 f908 	bl	80030cc <dwt_setrxtimeout>
					 antenna_port);

	/* Activate reception immediately. */
	dwt_rxenable(DWT_START_RX_IMMEDIATE,
 8001ebc:	6839      	ldr	r1, [r7, #0]
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f001 f8bd 	bl	800303e <dwt_rxenable>
				 antenna_port);
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <Check_DW1000RSTn>:
												 2)) / powf(adjusted_rxpacc,
															2)) - A_PRF64M;
}

UWB_StatusTypeDef Check_DW1000RSTn(uint32_t Timeout)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8001ed4:	f001 fd06 	bl	80038e4 <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]
	 * When the I/O port is programmed as output:
	 * The data present on the I/O pin are sampled into the input data register every AHB clock cycle
	 * A read access to the input data register gets the I/O state
	 */

	while(HAL_GPIO_ReadPin(UWB1_RESET_GPIO_Port,
 8001eda:	e009      	b.n	8001ef0 <Check_DW1000RSTn+0x24>
		  && HAL_GPIO_ReadPin(UWB3_RESET_GPIO_Port,
							  UWB3_RESET_Pin) == GPIO_PIN_RESET
		  && HAL_GPIO_ReadPin(UWB4_RESET_GPIO_Port,
							  UWB4_RESET_Pin) == GPIO_PIN_RESET)
	{
		if((HAL_GetTick() - tickstart) > Timeout)
 8001edc:	f001 fd02 	bl	80038e4 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d201      	bcs.n	8001ef0 <Check_DW1000RSTn+0x24>
		{
			return UWB_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e021      	b.n	8001f34 <Check_DW1000RSTn+0x68>
	while(HAL_GPIO_ReadPin(UWB1_RESET_GPIO_Port,
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	4812      	ldr	r0, [pc, #72]	@ (8001f3c <Check_DW1000RSTn+0x70>)
 8001ef4:	f002 f86a 	bl	8003fcc <HAL_GPIO_ReadPin>
 8001ef8:	4603      	mov	r3, r0
		  && HAL_GPIO_ReadPin(UWB4_RESET_GPIO_Port,
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d116      	bne.n	8001f2c <Check_DW1000RSTn+0x60>
		  && HAL_GPIO_ReadPin(UWB2_RESET_GPIO_Port,
 8001efe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f02:	480f      	ldr	r0, [pc, #60]	@ (8001f40 <Check_DW1000RSTn+0x74>)
 8001f04:	f002 f862 	bl	8003fcc <HAL_GPIO_ReadPin>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10e      	bne.n	8001f2c <Check_DW1000RSTn+0x60>
		  && HAL_GPIO_ReadPin(UWB3_RESET_GPIO_Port,
 8001f0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f12:	480c      	ldr	r0, [pc, #48]	@ (8001f44 <Check_DW1000RSTn+0x78>)
 8001f14:	f002 f85a 	bl	8003fcc <HAL_GPIO_ReadPin>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <Check_DW1000RSTn+0x60>
		  && HAL_GPIO_ReadPin(UWB4_RESET_GPIO_Port,
 8001f1e:	2180      	movs	r1, #128	@ 0x80
 8001f20:	4809      	ldr	r0, [pc, #36]	@ (8001f48 <Check_DW1000RSTn+0x7c>)
 8001f22:	f002 f853 	bl	8003fcc <HAL_GPIO_ReadPin>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0d7      	beq.n	8001edc <Check_DW1000RSTn+0x10>
		}
	}

	/*从INIT到IDLE还需要几us 等1ms足够*/
	deca_sleep(1);
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f001 fa0e 	bl	800334e <deca_sleep>

	return UWB_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	58020400 	.word	0x58020400
 8001f40:	58021000 	.word	0x58021000
 8001f44:	58020c00 	.word	0x58020c00
 8001f48:	58020800 	.word	0x58020800

08001f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f50:	f7ff f9e4 	bl	800131c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f54:	480c      	ldr	r0, [pc, #48]	@ (8001f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f56:	490d      	ldr	r1, [pc, #52]	@ (8001f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f7a:	f008 fc51 	bl	800a820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f7e:	f7fe fe29 	bl	8000bd4 <main>
  bx  lr
 8001f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f8c:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8001f90:	0800cd30 	.word	0x0800cd30
  ldr r2, =_sbss
 8001f94:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8001f98:	24000c7c 	.word	0x24000c7c

08001f9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <ADC3_IRQHandler>
	...

08001fa0 <dwt_setlocaldataptr>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_setlocaldataptr(unsigned int index)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    // Check the index is within the array bounds
    if (DWT_NUM_DW_DEV <= index) // return error if index outside the array bounds
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d902      	bls.n	8001fb4 <dwt_setlocaldataptr+0x14>
    {
        return DWT_ERROR ;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	e009      	b.n	8001fc8 <dwt_setlocaldataptr+0x28>
    }

    pdw1000local = &dw1000local[index];
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4a05      	ldr	r2, [pc, #20]	@ (8001fd4 <dwt_setlocaldataptr+0x34>)
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4a05      	ldr	r2, [pc, #20]	@ (8001fd8 <dwt_setlocaldataptr+0x38>)
 8001fc4:	6013      	str	r3, [r2, #0]

    return DWT_SUCCESS ;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	24000a44 	.word	0x24000a44
 8001fd8:	24000014 	.word	0x24000014

08001fdc <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config, DW1000_Port_t *antenna_port)
{
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
    uint16 otp_xtaltrim_and_rev = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8001fee:	4b8c      	ldr	r3, [pc, #560]	@ (8002220 <dwt_initialise+0x244>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8001ff6:	4b8a      	ldr	r3, [pc, #552]	@ (8002220 <dwt_initialise+0x244>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8001ffe:	4b88      	ldr	r3, [pc, #544]	@ (8002220 <dwt_initialise+0x244>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2200      	movs	r2, #0
 8002004:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8002006:	4b86      	ldr	r3, [pc, #536]	@ (8002220 <dwt_initialise+0x244>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2200      	movs	r2, #0
 800200c:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 800200e:	4b84      	ldr	r3, [pc, #528]	@ (8002220 <dwt_initialise+0x244>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2200      	movs	r2, #0
 8002014:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 8002016:	4b82      	ldr	r3, [pc, #520]	@ (8002220 <dwt_initialise+0x244>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2200      	movs	r2, #0
 800201c:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 800201e:	4b80      	ldr	r3, [pc, #512]	@ (8002220 <dwt_initialise+0x244>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	635a      	str	r2, [r3, #52]	@ 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid(antenna_port)) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8002026:	6838      	ldr	r0, [r7, #0]
 8002028:	f000 f93a 	bl	80022a0 <dwt_readdevid>
 800202c:	4603      	mov	r3, r0
 800202e:	4a7d      	ldr	r2, [pc, #500]	@ (8002224 <dwt_initialise+0x248>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d002      	beq.n	800203a <dwt_initialise+0x5e>
    {
        return DWT_ERROR ;
 8002034:	f04f 33ff 	mov.w	r3, #4294967295
 8002038:	e12c      	b.n	8002294 <dwt_initialise+0x2b8>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <dwt_initialise+0x6e>
    {
        dwt_softreset(antenna_port); // Make sure the device is completely reset before starting initialisation
 8002044:	6838      	ldr	r0, [r7, #0]
 8002046:	f001 f8dd 	bl	8003204 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d004      	beq.n	800205e <dwt_initialise+0x82>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d103      	bne.n	8002066 <dwt_initialise+0x8a>
    {
        _dwt_enableclocks(FORCE_SYS_XTI, antenna_port); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800205e:	6839      	ldr	r1, [r7, #0]
 8002060:	2000      	movs	r0, #0
 8002062:	f000 fedf 	bl	8002e24 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK, antenna_port);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2204      	movs	r2, #4
 800206a:	2100      	movs	r1, #0
 800206c:	2024      	movs	r0, #36	@ 0x24
 800206e:	f000 fc5d 	bl	800292c <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d118      	bne.n	80020ae <dwt_initialise+0xd2>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS, antenna_port);
 800207c:	6839      	ldr	r1, [r7, #0]
 800207e:	2004      	movs	r0, #4
 8002080:	f000 fcb6 	bl	80029f0 <_dwt_otpread>
 8002084:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d021      	beq.n	80020d2 <dwt_initialise+0xf6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK, antenna_port); // Set load LDO kick bit
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2202      	movs	r2, #2
 8002092:	2112      	movs	r1, #18
 8002094:	202d      	movs	r0, #45	@ 0x2d
 8002096:	f000 fc49 	bl	800292c <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800209a:	4b61      	ldr	r3, [pc, #388]	@ (8002220 <dwt_initialise+0x244>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	8ada      	ldrh	r2, [r3, #22]
 80020a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002220 <dwt_initialise+0x244>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020a8:	b292      	uxth	r2, r2
 80020aa:	82da      	strh	r2, [r3, #22]
 80020ac:	e011      	b.n	80020d2 <dwt_initialise+0xf6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE, antenna_port) != LDOTUNE_DEFAULT)
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	2130      	movs	r1, #48	@ 0x30
 80020b2:	2028      	movs	r0, #40	@ 0x28
 80020b4:	f000 fbd9 	bl	800286a <dwt_read32bitoffsetreg>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f1b3 3f88 	cmp.w	r3, #2290649224	@ 0x88888888
 80020be:	d008      	beq.n	80020d2 <dwt_initialise+0xf6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80020c0:	4b57      	ldr	r3, [pc, #348]	@ (8002220 <dwt_initialise+0x244>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	8ada      	ldrh	r2, [r3, #22]
 80020c6:	4b56      	ldr	r3, [pc, #344]	@ (8002220 <dwt_initialise+0x244>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020ce:	b292      	uxth	r2, r2
 80020d0:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d009      	beq.n	80020f0 <dwt_initialise+0x114>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d012      	beq.n	800210c <dwt_initialise+0x130>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00d      	beq.n	800210c <dwt_initialise+0x130>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS, antenna_port) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80020f0:	6839      	ldr	r1, [r7, #0]
 80020f2:	201e      	movs	r0, #30
 80020f4:	f000 fc7c 	bl	80029f0 <_dwt_otpread>
 80020f8:	4603      	mov	r3, r0
 80020fa:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80020fc:	8afb      	ldrh	r3, [r7, #22]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	b29a      	uxth	r2, r3
 8002102:	4b47      	ldr	r3, [pc, #284]	@ (8002220 <dwt_initialise+0x244>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	72da      	strb	r2, [r3, #11]
 800210a:	e003      	b.n	8002114 <dwt_initialise+0x138>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800210c:	4b44      	ldr	r3, [pc, #272]	@ (8002220 <dwt_initialise+0x244>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2200      	movs	r2, #0
 8002112:	72da      	strb	r2, [r3, #11]
    // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10c      	bne.n	8002138 <dwt_initialise+0x15c>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800211e:	8afb      	ldrh	r3, [r7, #22]
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <dwt_initialise+0x150>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8002128:	2310      	movs	r3, #16
 800212a:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev, antenna_port);
 800212c:	8afb      	ldrh	r3, [r7, #22]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	6839      	ldr	r1, [r7, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f001 f896 	bl	8003264 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d008      	beq.n	8002154 <dwt_initialise+0x178>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS, antenna_port);
 8002142:	4b37      	ldr	r3, [pc, #220]	@ (8002220 <dwt_initialise+0x244>)
 8002144:	681c      	ldr	r4, [r3, #0]
 8002146:	6839      	ldr	r1, [r7, #0]
 8002148:	2006      	movs	r0, #6
 800214a:	f000 fc51 	bl	80029f0 <_dwt_otpread>
 800214e:	4603      	mov	r3, r0
 8002150:	6023      	str	r3, [r4, #0]
 8002152:	e003      	b.n	800215c <dwt_initialise+0x180>
    }
    else
    {
        pdw1000local->partID = 0;
 8002154:	4b32      	ldr	r3, [pc, #200]	@ (8002220 <dwt_initialise+0x244>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b00      	cmp	r3, #0
 8002164:	d008      	beq.n	8002178 <dwt_initialise+0x19c>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS, antenna_port);
 8002166:	4b2e      	ldr	r3, [pc, #184]	@ (8002220 <dwt_initialise+0x244>)
 8002168:	681c      	ldr	r4, [r3, #0]
 800216a:	6839      	ldr	r1, [r7, #0]
 800216c:	2007      	movs	r0, #7
 800216e:	f000 fc3f 	bl	80029f0 <_dwt_otpread>
 8002172:	4603      	mov	r3, r0
 8002174:	6063      	str	r3, [r4, #4]
 8002176:	e003      	b.n	8002180 <dwt_initialise+0x1a4>
    }
    else
    {
        pdw1000local->lotID = 0;
 8002178:	4b29      	ldr	r3, [pc, #164]	@ (8002220 <dwt_initialise+0x244>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2200      	movs	r2, #0
 800217e:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d009      	beq.n	800219e <dwt_initialise+0x1c2>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS, antenna_port) & 0xff;
 800218a:	6839      	ldr	r1, [r7, #0]
 800218c:	2008      	movs	r0, #8
 800218e:	f000 fc2f 	bl	80029f0 <_dwt_otpread>
 8002192:	4602      	mov	r2, r0
 8002194:	4b22      	ldr	r3, [pc, #136]	@ (8002220 <dwt_initialise+0x244>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	721a      	strb	r2, [r3, #8]
 800219c:	e003      	b.n	80021a6 <dwt_initialise+0x1ca>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800219e:	4b20      	ldr	r3, [pc, #128]	@ (8002220 <dwt_initialise+0x244>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d009      	beq.n	80021c4 <dwt_initialise+0x1e8>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS, antenna_port) & 0xff;
 80021b0:	6839      	ldr	r1, [r7, #0]
 80021b2:	2009      	movs	r0, #9
 80021b4:	f000 fc1c 	bl	80029f0 <_dwt_otpread>
 80021b8:	4602      	mov	r2, r0
 80021ba:	4b19      	ldr	r3, [pc, #100]	@ (8002220 <dwt_initialise+0x244>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	725a      	strb	r2, [r3, #9]
 80021c2:	e003      	b.n	80021cc <dwt_initialise+0x1f0>
    }
    else
    {
        pdw1000local->tempP = 0;
 80021c4:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <dwt_initialise+0x244>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2200      	movs	r2, #0
 80021ca:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d128      	bne.n	8002228 <dwt_initialise+0x24c>
    {
        if(DWT_LOADUCODE & config)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00c      	beq.n	80021fa <dwt_initialise+0x21e>
        {
            _dwt_loaducodefromrom(antenna_port);
 80021e0:	6838      	ldr	r0, [r7, #0]
 80021e2:	f000 fc60 	bl	8002aa6 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80021e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <dwt_initialise+0x244>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	8ada      	ldrh	r2, [r3, #22]
 80021ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <dwt_initialise+0x244>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021f4:	b292      	uxth	r2, r2
 80021f6:	82da      	strh	r2, [r3, #22]
 80021f8:	e024      	b.n	8002244 <dwt_initialise+0x268>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, antenna_port) ;
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	2105      	movs	r1, #5
 80021fe:	2036      	movs	r0, #54	@ 0x36
 8002200:	f000 fb5e 	bl	80028c0 <dwt_read16bitoffsetreg>
 8002204:	4603      	mov	r3, r0
 8002206:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8002208:	89fb      	ldrh	r3, [r7, #14]
 800220a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800220e:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega, antenna_port) ;
 8002210:	89fa      	ldrh	r2, [r7, #14]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2105      	movs	r1, #5
 8002216:	2036      	movs	r0, #54	@ 0x36
 8002218:	f000 fb9f 	bl	800295a <dwt_write16bitoffsetreg>
 800221c:	e012      	b.n	8002244 <dwt_initialise+0x268>
 800221e:	bf00      	nop
 8002220:	24000014 	.word	0x24000014
 8002224:	deca0130 	.word	0xdeca0130
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d108      	bne.n	8002244 <dwt_initialise+0x268>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8002232:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <dwt_initialise+0x2c0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	8ada      	ldrh	r2, [r3, #22]
 8002238:	4b18      	ldr	r3, [pc, #96]	@ (800229c <dwt_initialise+0x2c0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002240:	b292      	uxth	r2, r2
 8002242:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ, antenna_port); // Enable clocks for sequencing
 8002244:	6839      	ldr	r1, [r7, #0]
 8002246:	2001      	movs	r0, #1
 8002248:	f000 fdec 	bl	8002e24 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00, antenna_port);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2200      	movs	r2, #0
 8002250:	210a      	movs	r1, #10
 8002252:	202c      	movs	r0, #44	@ 0x2c
 8002254:	f000 fb6a 	bl	800292c <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID, antenna_port); // Read sysconfig register
 8002258:	4b10      	ldr	r3, [pc, #64]	@ (800229c <dwt_initialise+0x2c0>)
 800225a:	681c      	ldr	r4, [r3, #0]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	2100      	movs	r1, #0
 8002260:	2004      	movs	r0, #4
 8002262:	f000 fb02 	bl	800286a <dwt_read32bitoffsetreg>
 8002266:	4603      	mov	r3, r0
 8002268:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800226a:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <dwt_initialise+0x2c0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b09      	ldr	r3, [pc, #36]	@ (800229c <dwt_initialise+0x2c0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f002 0203 	and.w	r2, r2, #3
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID, antenna_port) ;
 8002280:	4b06      	ldr	r3, [pc, #24]	@ (800229c <dwt_initialise+0x2c0>)
 8002282:	681c      	ldr	r4, [r3, #0]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	2100      	movs	r1, #0
 8002288:	2008      	movs	r0, #8
 800228a:	f000 faee 	bl	800286a <dwt_read32bitoffsetreg>
 800228e:	4603      	mov	r3, r0
 8002290:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8002292:	2300      	movs	r3, #0

} // end dwt_initialise()
 8002294:	4618      	mov	r0, r3
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}
 800229c:	24000014 	.word	0x24000014

080022a0 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(DW1000_Port_t *antenna_port)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
    return dwt_read32bitoffsetreg(DEV_ID_ID,0,antenna_port);
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	2100      	movs	r1, #0
 80022ac:	2000      	movs	r0, #0
 80022ae:	f000 fadc 	bl	800286a <dwt_read32bitoffsetreg>
 80022b2:	4603      	mov	r3, r0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config, DW1000_Port_t *antenna_port)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
    uint8 nsSfd_result  = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	795b      	ldrb	r3, [r3, #5]
 80022d8:	461a      	mov	r2, r3
 80022da:	4bab      	ldr	r3, [pc, #684]	@ (8002588 <dwt_configure+0x2cc>)
 80022dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80022e0:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	785b      	ldrb	r3, [r3, #1]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80022ea:	7cfb      	ldrb	r3, [r7, #19]
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d002      	beq.n	80022f6 <dwt_configure+0x3a>
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b07      	cmp	r3, #7
 80022f4:	d101      	bne.n	80022fa <dwt_configure+0x3e>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <dwt_configure+0x40>
 80022fa:	2300      	movs	r3, #0
 80022fc:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	79db      	ldrb	r3, [r3, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10b      	bne.n	800231e <dwt_configure+0x62>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8002306:	4ba1      	ldr	r3, [pc, #644]	@ (800258c <dwt_configure+0x2d0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	4b9f      	ldr	r3, [pc, #636]	@ (800258c <dwt_configure+0x2d0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002314:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8002316:	8abb      	ldrh	r3, [r7, #20]
 8002318:	08db      	lsrs	r3, r3, #3
 800231a:	82bb      	strh	r3, [r7, #20]
 800231c:	e007      	b.n	800232e <dwt_configure+0x72>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 800231e:	4b9b      	ldr	r3, [pc, #620]	@ (800258c <dwt_configure+0x2d0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	4b99      	ldr	r3, [pc, #612]	@ (800258c <dwt_configure+0x2d0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 800232c:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 800232e:	4b97      	ldr	r3, [pc, #604]	@ (800258c <dwt_configure+0x2d0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	7a12      	ldrb	r2, [r2, #8]
 8002336:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8002338:	4b94      	ldr	r3, [pc, #592]	@ (800258c <dwt_configure+0x2d0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	4b93      	ldr	r3, [pc, #588]	@ (800258c <dwt_configure+0x2d0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002346:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8002348:	4b90      	ldr	r3, [pc, #576]	@ (800258c <dwt_configure+0x2d0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6919      	ldr	r1, [r3, #16]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7a1b      	ldrb	r3, [r3, #8]
 8002352:	041b      	lsls	r3, r3, #16
 8002354:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002358:	4b8c      	ldr	r3, [pc, #560]	@ (800258c <dwt_configure+0x2d0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg, antenna_port) ;
 8002360:	4b8a      	ldr	r3, [pc, #552]	@ (800258c <dwt_configure+0x2d0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2100      	movs	r1, #0
 800236a:	2004      	movs	r0, #4
 800236c:	f000 fb15 	bl	800299a <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16, antenna_port) ;
 8002370:	8aba      	ldrh	r2, [r7, #20]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f642 0104 	movw	r1, #10244	@ 0x2804
 8002378:	202e      	movs	r0, #46	@ 0x2e
 800237a:	f000 faee 	bl	800295a <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex, antenna_port);
 800237e:	7cbb      	ldrb	r3, [r7, #18]
 8002380:	6839      	ldr	r1, [r7, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fb6b 	bl	8002a5e <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]], antenna_port);
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	4a81      	ldr	r2, [pc, #516]	@ (8002590 <dwt_configure+0x2d4>)
 800238c:	5cd3      	ldrb	r3, [r2, r3]
 800238e:	461a      	mov	r2, r3
 8002390:	4b80      	ldr	r3, [pc, #512]	@ (8002594 <dwt_configure+0x2d8>)
 8002392:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2107      	movs	r1, #7
 800239a:	202b      	movs	r0, #43	@ 0x2b
 800239c:	f000 fafd 	bl	800299a <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]], antenna_port);
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	4a7b      	ldr	r2, [pc, #492]	@ (8002590 <dwt_configure+0x2d4>)
 80023a4:	5cd3      	ldrb	r3, [r2, r3]
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002598 <dwt_configure+0x2dc>)
 80023aa:	5c9a      	ldrb	r2, [r3, r2]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	210b      	movs	r1, #11
 80023b0:	202b      	movs	r0, #43	@ 0x2b
 80023b2:	f000 fabb 	bl	800292c <dwt_write8bitoffsetreg>

    // Configure Pulse Generator Delay
    dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGDELAY_OFFSET, tc_pgdelay[chan_idx[chan]], antenna_port);
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	4a75      	ldr	r2, [pc, #468]	@ (8002590 <dwt_configure+0x2d4>)
 80023ba:	5cd3      	ldrb	r3, [r2, r3]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b77      	ldr	r3, [pc, #476]	@ (800259c <dwt_configure+0x2e0>)
 80023c0:	5c9a      	ldrb	r2, [r3, r2]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	210b      	movs	r1, #11
 80023c6:	202a      	movs	r0, #42	@ 0x2a
 80023c8:	f000 fab0 	bl	800292c <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw], antenna_port);
 80023cc:	7c7b      	ldrb	r3, [r7, #17]
 80023ce:	4a74      	ldr	r2, [pc, #464]	@ (80025a0 <dwt_configure+0x2e4>)
 80023d0:	5cd2      	ldrb	r2, [r2, r3]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	210b      	movs	r1, #11
 80023d6:	2028      	movs	r0, #40	@ 0x28
 80023d8:	f000 faa8 	bl	800292c <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]], antenna_port);
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	4a6c      	ldr	r2, [pc, #432]	@ (8002590 <dwt_configure+0x2d4>)
 80023e0:	5cd3      	ldrb	r3, [r2, r3]
 80023e2:	461a      	mov	r2, r3
 80023e4:	4b6f      	ldr	r3, [pc, #444]	@ (80025a4 <dwt_configure+0x2e8>)
 80023e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	210c      	movs	r1, #12
 80023ee:	2028      	movs	r0, #40	@ 0x28
 80023f0:	f000 fad3 	bl	800299a <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD], antenna_port);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	79db      	ldrb	r3, [r3, #7]
 80023f8:	4618      	mov	r0, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	799b      	ldrb	r3, [r3, #6]
 80023fe:	4619      	mov	r1, r3
 8002400:	4a69      	ldr	r2, [pc, #420]	@ (80025a8 <dwt_configure+0x2ec>)
 8002402:	0043      	lsls	r3, r0, #1
 8002404:	440b      	add	r3, r1
 8002406:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2102      	movs	r1, #2
 800240e:	2027      	movs	r0, #39	@ 0x27
 8002410:	f000 faa3 	bl	800295a <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex], antenna_port);
 8002414:	7cbb      	ldrb	r3, [r7, #18]
 8002416:	4a65      	ldr	r2, [pc, #404]	@ (80025ac <dwt_configure+0x2f0>)
 8002418:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2104      	movs	r1, #4
 8002420:	2027      	movs	r0, #39	@ 0x27
 8002422:	f000 fa9a 	bl	800295a <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	79db      	ldrb	r3, [r3, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <dwt_configure+0x180>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K, antenna_port);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2264      	movs	r2, #100	@ 0x64
 8002432:	2106      	movs	r1, #6
 8002434:	2027      	movs	r0, #39	@ 0x27
 8002436:	f000 fa90 	bl	800295a <dwt_write16bitoffsetreg>
 800243a:	e01c      	b.n	8002476 <dwt_configure+0x1ba>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	789b      	ldrb	r3, [r3, #2]
 8002440:	2b04      	cmp	r3, #4
 8002442:	d10c      	bne.n	800245e <dwt_configure+0x1a2>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64, antenna_port);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2210      	movs	r2, #16
 8002448:	2106      	movs	r1, #6
 800244a:	2027      	movs	r0, #39	@ 0x27
 800244c:	f000 fa85 	bl	800295a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64, antenna_port);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2210      	movs	r2, #16
 8002454:	2126      	movs	r1, #38	@ 0x26
 8002456:	2027      	movs	r0, #39	@ 0x27
 8002458:	f000 fa68 	bl	800292c <dwt_write8bitoffsetreg>
 800245c:	e00b      	b.n	8002476 <dwt_configure+0x1ba>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8, antenna_port);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2220      	movs	r2, #32
 8002462:	2106      	movs	r1, #6
 8002464:	2027      	movs	r0, #39	@ 0x27
 8002466:	f000 fa78 	bl	800295a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS, antenna_port);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2228      	movs	r2, #40	@ 0x28
 800246e:	2126      	movs	r1, #38	@ 0x26
 8002470:	2027      	movs	r0, #39	@ 0x27
 8002472:	f000 fa5b 	bl	800292c <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC], antenna_port);
 8002476:	7cbb      	ldrb	r3, [r7, #18]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	78d2      	ldrb	r2, [r2, #3]
 800247c:	4611      	mov	r1, r2
 800247e:	4a4c      	ldr	r2, [pc, #304]	@ (80025b0 <dwt_configure+0x2f4>)
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2108      	movs	r1, #8
 800248c:	2027      	movs	r0, #39	@ 0x27
 800248e:	f000 fa84 	bl	800299a <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	895b      	ldrh	r3, [r3, #10]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d103      	bne.n	80024a2 <dwt_configure+0x1e6>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f241 0241 	movw	r2, #4161	@ 0x1041
 80024a0:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO, antenna_port);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	895a      	ldrh	r2, [r3, #10]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2120      	movs	r1, #32
 80024aa:	2027      	movs	r0, #39	@ 0x27
 80024ac:	f000 fa55 	bl	800295a <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32, antenna_port);
 80024b0:	4b40      	ldr	r3, [pc, #256]	@ (80025b4 <dwt_configure+0x2f8>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	210c      	movs	r1, #12
 80024b8:	2023      	movs	r0, #35	@ 0x23
 80024ba:	f000 fa6e 	bl	800299a <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex], antenna_port);
 80024be:	7cbb      	ldrb	r3, [r7, #18]
 80024c0:	4a3c      	ldr	r2, [pc, #240]	@ (80025b4 <dwt_configure+0x2f8>)
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	889a      	ldrh	r2, [r3, #4]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2104      	movs	r1, #4
 80024cc:	2023      	movs	r0, #35	@ 0x23
 80024ce:	f000 fa44 	bl	800295a <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	799b      	ldrb	r3, [r3, #6]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00d      	beq.n	80024f6 <dwt_configure+0x23a>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate], antenna_port);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	79db      	ldrb	r3, [r3, #7]
 80024de:	461a      	mov	r2, r3
 80024e0:	4b35      	ldr	r3, [pc, #212]	@ (80025b8 <dwt_configure+0x2fc>)
 80024e2:	5c9a      	ldrb	r2, [r3, r2]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2100      	movs	r1, #0
 80024e8:	2021      	movs	r0, #33	@ 0x21
 80024ea:	f000 fa1f 	bl	800292c <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 80024ee:	2303      	movs	r3, #3
 80024f0:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 80024f2:	2301      	movs	r3, #1
 80024f4:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002502:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	785b      	ldrb	r3, [r3, #1]
 8002508:	049b      	lsls	r3, r3, #18
 800250a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800250e:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	051b      	lsls	r3, r3, #20
 8002514:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8002518:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800251a:	7dbb      	ldrb	r3, [r7, #22]
 800251c:	045b      	lsls	r3, r3, #17
 800251e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8002522:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	791b      	ldrb	r3, [r3, #4]
 8002528:	059b      	lsls	r3, r3, #22
 800252a:	f003 63f8 	and.w	r3, r3, #130023424	@ 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800252e:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	795b      	ldrb	r3, [r3, #5]
 8002534:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval, antenna_port) ;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	2100      	movs	r1, #0
 8002540:	201f      	movs	r0, #31
 8002542:	f000 fa2a 	bl	800299a <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	789a      	ldrb	r2, [r3, #2]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	785b      	ldrb	r3, [r3, #1]
 800254e:	4313      	orrs	r3, r2
 8002550:	b2db      	uxtb	r3, r3
 8002552:	0419      	lsls	r1, r3, #16
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	79db      	ldrb	r3, [r3, #7]
 8002558:	035a      	lsls	r2, r3, #13
 800255a:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <dwt_configure+0x2d0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL, antenna_port);
 8002562:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <dwt_configure+0x2d0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2100      	movs	r1, #0
 800256c:	2008      	movs	r0, #8
 800256e:	f000 fa14 	bl	800299a <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF, antenna_port); // Request TX start and TRX off at the same time
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2242      	movs	r2, #66	@ 0x42
 8002576:	2100      	movs	r1, #0
 8002578:	200d      	movs	r0, #13
 800257a:	f000 f9d7 	bl	800292c <dwt_write8bitoffsetreg>
} // end dwt_configure()
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	0800c918 	.word	0x0800c918
 800258c:	24000014 	.word	0x24000014
 8002590:	0800c890 	.word	0x0800c890
 8002594:	0800c8b0 	.word	0x0800c8b0
 8002598:	0800c8c8 	.word	0x0800c8c8
 800259c:	0800c8d0 	.word	0x0800c8d0
 80025a0:	0800c8d8 	.word	0x0800c8d8
 80025a4:	0800c898 	.word	0x0800c898
 80025a8:	0800c8e8 	.word	0x0800c8e8
 80025ac:	0800c8f4 	.word	0x0800c8f4
 80025b0:	0800c8f8 	.word	0x0800c8f8
 80025b4:	0800c8dc 	.word	0x0800c8dc
 80025b8:	0800c8e4 	.word	0x0800c8e4

080025bc <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay, DW1000_Port_t *antenna_port)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay, antenna_port);
 80025c8:	88fa      	ldrh	r2, [r7, #6]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	f641 0104 	movw	r1, #6148	@ 0x1804
 80025d0:	202e      	movs	r0, #46	@ 0x2e
 80025d2:	f000 f9c2 	bl	800295a <dwt_write16bitoffsetreg>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay, DW1000_Port_t *antenna_port)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	6039      	str	r1, [r7, #0]
 80025e8:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay, antenna_port);
 80025ea:	88fa      	ldrh	r2, [r7, #6]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2100      	movs	r1, #0
 80025f0:	2018      	movs	r0, #24
 80025f2:	f000 f9b2 	bl	800295a <dwt_write16bitoffsetreg>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset, DW1000_Port_t *antenna_port)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af02      	add	r7, sp, #8
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	817b      	strh	r3, [r7, #10]
 800260c:	4613      	mov	r3, r2
 800260e:	813b      	strh	r3, [r7, #8]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer,antenna_port) ;
 8002610:	897a      	ldrh	r2, [r7, #10]
 8002612:	8939      	ldrh	r1, [r7, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2011      	movs	r0, #17
 800261c:	f000 f8cf 	bl	80027be <dwt_readfromdevice>
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <dwt_readaccdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readaccdata(uint8 *buffer, uint16 len, uint16 accOffset, DW1000_Port_t *antenna_port)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af02      	add	r7, sp, #8
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	817b      	strh	r3, [r7, #10]
 8002636:	4613      	mov	r3, r2
 8002638:	813b      	strh	r3, [r7, #8]
    // Force on the ACC clocks if we are sequenced
    _dwt_enableclocks(READ_ACC_ON, antenna_port);
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	2007      	movs	r0, #7
 800263e:	f000 fbf1 	bl	8002e24 <_dwt_enableclocks>

    dwt_readfromdevice(ACC_MEM_ID,accOffset,len,buffer,antenna_port) ;
 8002642:	897a      	ldrh	r2, [r7, #10]
 8002644:	8939      	ldrh	r1, [r7, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2025      	movs	r0, #37	@ 0x25
 800264e:	f000 f8b6 	bl	80027be <dwt_readfromdevice>

    _dwt_enableclocks(READ_ACC_OFF, antenna_port); // Revert clocks back
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	2008      	movs	r0, #8
 8002656:	f000 fbe5 	bl	8002e24 <_dwt_enableclocks>
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <dwt_readdiagnostics>:
 * output parameters
 *
 * no return value
 */
void dwt_readdiagnostics(dwt_rxdiag_t *diagnostics, DW1000_Port_t *antenna_port)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af02      	add	r7, sp, #8
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
    // Read the HW FP index
    diagnostics->firstPath = dwt_read16bitoffsetreg(RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, antenna_port);
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	2105      	movs	r1, #5
 8002670:	2015      	movs	r0, #21
 8002672:	f000 f925 	bl	80028c0 <dwt_read16bitoffsetreg>
 8002676:	4603      	mov	r3, r0
 8002678:	461a      	mov	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	821a      	strh	r2, [r3, #16]

    // LDE diagnostic data
    diagnostics->maxNoise = dwt_read16bitoffsetreg(LDE_IF_ID, LDE_THRESH_OFFSET, antenna_port);
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	2100      	movs	r1, #0
 8002682:	202e      	movs	r0, #46	@ 0x2e
 8002684:	f000 f91c 	bl	80028c0 <dwt_read16bitoffsetreg>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	801a      	strh	r2, [r3, #0]

    // Read all 8 bytes in one SPI transaction
    dwt_readfromdevice(RX_FQUAL_ID, 0x0, 8, (uint8*)&diagnostics->stdNoise, antenna_port);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	1d1a      	adds	r2, r3, #4
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	4613      	mov	r3, r2
 800269a:	2208      	movs	r2, #8
 800269c:	2100      	movs	r1, #0
 800269e:	2012      	movs	r0, #18
 80026a0:	f000 f88d 	bl	80027be <dwt_readfromdevice>

    diagnostics->firstPathAmp1 = dwt_read16bitoffsetreg(RX_TIME_ID, RX_TIME_FP_AMPL1_OFFSET, antenna_port);
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	2107      	movs	r1, #7
 80026a8:	2015      	movs	r0, #21
 80026aa:	f000 f909 	bl	80028c0 <dwt_read16bitoffsetreg>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	805a      	strh	r2, [r3, #2]

    diagnostics->rxPreamCount = (dwt_read32bitreg(RX_FINFO_ID, antenna_port) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT  ;
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	2100      	movs	r1, #0
 80026ba:	2010      	movs	r0, #16
 80026bc:	f000 f8d5 	bl	800286a <dwt_read32bitoffsetreg>
 80026c0:	4603      	mov	r3, r0
 80026c2:	0d1b      	lsrs	r3, r3, #20
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	819a      	strh	r2, [r3, #12]

    diagnostics->rxPreamCountNOSAT = dwt_read16bitoffsetreg(DRX_CONF_ID, RXPACC_NOSAT_OFFSET, antenna_port);
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	212c      	movs	r1, #44	@ 0x2c
 80026d4:	2027      	movs	r0, #39	@ 0x27
 80026d6:	f000 f8f3 	bl	80028c0 <dwt_read16bitoffsetreg>
 80026da:	4603      	mov	r3, r0
 80026dc:	461a      	mov	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	81da      	strh	r2, [r3, #14]
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp, DW1000_Port_t *antenna_port)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af02      	add	r7, sp, #8
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp, antenna_port) ; // Get the adjusted time of arrival
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2205      	movs	r2, #5
 80026fc:	2100      	movs	r1, #0
 80026fe:	2015      	movs	r0, #21
 8002700:	f000 f85d 	bl	80027be <dwt_readfromdevice>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <dwt_writetodevice>:
                uint16  index,
                uint32        length,
                const uint8   *buffer,
                DW1000_Port_t *antenna_port
        )
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af02      	add	r7, sp, #8
 8002712:	60ba      	str	r2, [r7, #8]
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	4603      	mov	r3, r0
 8002718:	81fb      	strh	r3, [r7, #14]
 800271a:	460b      	mov	r3, r1
 800271c:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8002722:	89bb      	ldrh	r3, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10c      	bne.n	8002742 <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002728:	89fb      	ldrh	r3, [r7, #14]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	1c59      	adds	r1, r3, #1
 8002730:	6179      	str	r1, [r7, #20]
 8002732:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	3318      	adds	r3, #24
 800273a:	443b      	add	r3, r7
 800273c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002740:	e02f      	b.n	80027a2 <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8002742:	89fb      	ldrh	r3, [r7, #14]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	1c59      	adds	r1, r3, #1
 800274a:	6179      	str	r1, [r7, #20]
 800274c:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	3318      	adds	r3, #24
 8002754:	443b      	add	r3, r7
 8002756:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800275a:	89bb      	ldrh	r3, [r7, #12]
 800275c:	2b7f      	cmp	r3, #127	@ 0x7f
 800275e:	d809      	bhi.n	8002774 <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	617a      	str	r2, [r7, #20]
 8002766:	89ba      	ldrh	r2, [r7, #12]
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	3318      	adds	r3, #24
 800276c:	443b      	add	r3, r7
 800276e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002772:	e016      	b.n	80027a2 <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8002774:	89bb      	ldrh	r3, [r7, #12]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	1c59      	adds	r1, r3, #1
 800277c:	6179      	str	r1, [r7, #20]
 800277e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	3318      	adds	r3, #24
 8002786:	443b      	add	r3, r7
 8002788:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800278c:	89bb      	ldrh	r3, [r7, #12]
 800278e:	09db      	lsrs	r3, r3, #7
 8002790:	b299      	uxth	r1, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	617a      	str	r2, [r7, #20]
 8002798:	b2ca      	uxtb	r2, r1
 800279a:	3318      	adds	r3, #24
 800279c:	443b      	add	r3, r7
 800279e:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer,antenna_port);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	b298      	uxth	r0, r3
 80027a6:	f107 0110 	add.w	r1, r7, #16
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	f000 fdd7 	bl	8003364 <writetospi>
} // end dwt_writetodevice()
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <dwt_readfromdevice>:
                uint16  index,
                uint32        length,
                uint8         *buffer,
                DW1000_Port_t *antenna_port
        )
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b088      	sub	sp, #32
 80027c2:	af02      	add	r7, sp, #8
 80027c4:	60ba      	str	r2, [r7, #8]
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	4603      	mov	r3, r0
 80027ca:	81fb      	strh	r3, [r7, #14]
 80027cc:	460b      	mov	r3, r1
 80027ce:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80027d4:	89bb      	ldrh	r3, [r7, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	617a      	str	r2, [r7, #20]
 80027e0:	89fa      	ldrh	r2, [r7, #14]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	3318      	adds	r3, #24
 80027e6:	443b      	add	r3, r7
 80027e8:	f803 2c08 	strb.w	r2, [r3, #-8]
 80027ec:	e02f      	b.n	800284e <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80027ee:	89fb      	ldrh	r3, [r7, #14]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	1c59      	adds	r1, r3, #1
 80027f6:	6179      	str	r1, [r7, #20]
 80027f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	3318      	adds	r3, #24
 8002800:	443b      	add	r3, r7
 8002802:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8002806:	89bb      	ldrh	r3, [r7, #12]
 8002808:	2b7f      	cmp	r3, #127	@ 0x7f
 800280a:	d809      	bhi.n	8002820 <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	617a      	str	r2, [r7, #20]
 8002812:	89ba      	ldrh	r2, [r7, #12]
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	3318      	adds	r3, #24
 8002818:	443b      	add	r3, r7
 800281a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800281e:	e016      	b.n	800284e <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8002820:	89bb      	ldrh	r3, [r7, #12]
 8002822:	b2da      	uxtb	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	1c59      	adds	r1, r3, #1
 8002828:	6179      	str	r1, [r7, #20]
 800282a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	3318      	adds	r3, #24
 8002832:	443b      	add	r3, r7
 8002834:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8002838:	89bb      	ldrh	r3, [r7, #12]
 800283a:	09db      	lsrs	r3, r3, #7
 800283c:	b299      	uxth	r1, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	617a      	str	r2, [r7, #20]
 8002844:	b2ca      	uxtb	r2, r1
 8002846:	3318      	adds	r3, #24
 8002848:	443b      	add	r3, r7
 800284a:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer, antenna_port);  // result is stored in the buffer
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	b298      	uxth	r0, r3
 8002852:	f107 0110 	add.w	r1, r7, #16
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	f000 fdb5 	bl	80033cc <readfromspi>
} // end dwt_readfromdevice()
 8002862:	bf00      	nop
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset, DW1000_Port_t *antenna_port)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b08a      	sub	sp, #40	@ 0x28
 800286e:	af02      	add	r7, sp, #8
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
    uint32  regval = 0 ;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer,antenna_port); // Read 4 bytes (32-bits) register into buffer
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	b298      	uxth	r0, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	b299      	uxth	r1, r3
 8002882:	f107 0214 	add.w	r2, r7, #20
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	2204      	movs	r2, #4
 800288e:	f7ff ff96 	bl	80027be <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8002892:	2303      	movs	r3, #3
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	e00b      	b.n	80028b0 <dwt_read32bitoffsetreg+0x46>
    {
        regval = (regval << 8) + buffer[j] ;
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	f107 0114 	add.w	r1, r7, #20
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	440a      	add	r2, r1
 80028a4:	7812      	ldrb	r2, [r2, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	61fb      	str	r3, [r7, #28]
    for (j = 3 ; j >= 0 ; j --)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	daf0      	bge.n	8002898 <dwt_read32bitoffsetreg+0x2e>
    }
    return regval ;
 80028b6:	69fb      	ldr	r3, [r7, #28]

} // end dwt_read32bitoffsetreg()
 80028b8:	4618      	mov	r0, r3
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset, DW1000_Port_t *antenna_port)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
    uint16  regval = 0 ;
 80028cc:	2300      	movs	r3, #0
 80028ce:	82fb      	strh	r3, [r7, #22]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer,antenna_port); // Read 2 bytes (16-bits) register into buffer
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	b298      	uxth	r0, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	b299      	uxth	r1, r3
 80028d8:	f107 0214 	add.w	r2, r7, #20
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	2202      	movs	r2, #2
 80028e4:	f7ff ff6b 	bl	80027be <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 80028e8:	7d7b      	ldrb	r3, [r7, #21]
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	7d3a      	ldrb	r2, [r7, #20]
 80028f0:	4413      	add	r3, r2
 80028f2:	82fb      	strh	r3, [r7, #22]
    return regval ;
 80028f4:	8afb      	ldrh	r3, [r7, #22]

} // end dwt_read16bitoffsetreg()
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset, DW1000_Port_t *antenna_port)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b088      	sub	sp, #32
 8002902:	af02      	add	r7, sp, #8
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	607a      	str	r2, [r7, #4]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval, antenna_port);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	b298      	uxth	r0, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	b299      	uxth	r1, r3
 8002912:	f107 0217 	add.w	r2, r7, #23
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	4613      	mov	r3, r2
 800291c:	2201      	movs	r2, #1
 800291e:	f7ff ff4e 	bl	80027be <dwt_readfromdevice>

    return regval ;
 8002922:	7dfb      	ldrb	r3, [r7, #23]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval, DW1000_Port_t *antenna_port)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	4613      	mov	r3, r2
 800293a:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval, antenna_port);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	b298      	uxth	r0, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	b299      	uxth	r1, r3
 8002944:	1dfa      	adds	r2, r7, #7
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	4613      	mov	r3, r2
 800294c:	2201      	movs	r2, #1
 800294e:	f7ff fedd 	bl	800270c <dwt_writetodevice>
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval, DW1000_Port_t *antenna_port)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b088      	sub	sp, #32
 800295e:	af02      	add	r7, sp, #8
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	b29b      	uxth	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer,antenna_port);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	b298      	uxth	r0, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	b299      	uxth	r1, r3
 8002982:	f107 0214 	add.w	r2, r7, #20
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	4613      	mov	r3, r2
 800298c:	2202      	movs	r2, #2
 800298e:	f7ff febd 	bl	800270c <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8002992:	bf00      	nop
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval, DW1000_Port_t *antenna_port)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b088      	sub	sp, #32
 800299e:	af02      	add	r7, sp, #8
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	e00d      	b.n	80029ca <dwt_write32bitoffsetreg+0x30>
    {
        buffer[j] = regval & 0xff ;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	b2d9      	uxtb	r1, r3
 80029b2:	f107 0210 	add.w	r2, r7, #16
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	4413      	add	r3, r2
 80029ba:	460a      	mov	r2, r1
 80029bc:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3301      	adds	r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	ddee      	ble.n	80029ae <dwt_write32bitoffsetreg+0x14>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer,antenna_port);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	b298      	uxth	r0, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	b299      	uxth	r1, r3
 80029d8:	f107 0210 	add.w	r2, r7, #16
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	2204      	movs	r2, #4
 80029e4:	f7ff fe92 	bl	800270c <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 80029e8:	bf00      	nop
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address, DW1000_Port_t *antenna_port)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address, antenna_port);
 80029fc:	88fa      	ldrh	r2, [r7, #6]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2104      	movs	r1, #4
 8002a02:	202d      	movs	r0, #45	@ 0x2d
 8002a04:	f7ff ffa9 	bl	800295a <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN, antenna_port);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	2106      	movs	r1, #6
 8002a0e:	202d      	movs	r0, #45	@ 0x2d
 8002a10:	f7ff ff8c 	bl	800292c <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00, antenna_port); // OTPREAD is self clearing but OTPRDEN is not
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2200      	movs	r2, #0
 8002a18:	2106      	movs	r1, #6
 8002a1a:	202d      	movs	r0, #45	@ 0x2d
 8002a1c:	f7ff ff86 	bl	800292c <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT, antenna_port);
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	210a      	movs	r1, #10
 8002a24:	202d      	movs	r0, #45	@ 0x2d
 8002a26:	f7ff ff20 	bl	800286a <dwt_read32bitoffsetreg>
 8002a2a:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(DW1000_Port_t *antenna_port)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00, antenna_port); // Clear the register
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	2102      	movs	r1, #2
 8002a44:	202c      	movs	r0, #44	@ 0x2c
 8002a46:	f7ff ff71 	bl	800292c <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, antenna_port);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	2102      	movs	r1, #2
 8002a50:	202c      	movs	r0, #44	@ 0x2c
 8002a52:	f7ff ff6b 	bl	800292c <dwt_write8bitoffsetreg>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex, DW1000_Port_t *antenna_port)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1, antenna_port); // 8-bit configuration register
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	226d      	movs	r2, #109	@ 0x6d
 8002a6c:	f640 0106 	movw	r1, #2054	@ 0x806
 8002a70:	202e      	movs	r0, #46	@ 0x2e
 8002a72:	f7ff ff5b 	bl	800292c <dwt_write8bitoffsetreg>

    if(prfIndex)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <_dwt_configlde+0x30>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64, antenna_port); // 16-bit LDE configuration tuning register
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	f240 6207 	movw	r2, #1543	@ 0x607
 8002a82:	f641 0106 	movw	r1, #6150	@ 0x1806
 8002a86:	202e      	movs	r0, #46	@ 0x2e
 8002a88:	f7ff ff67 	bl	800295a <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16, antenna_port);
    }
}
 8002a8c:	e007      	b.n	8002a9e <_dwt_configlde+0x40>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16, antenna_port);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f241 6207 	movw	r2, #5639	@ 0x1607
 8002a94:	f641 0106 	movw	r1, #6150	@ 0x1806
 8002a98:	202e      	movs	r0, #46	@ 0x2e
 8002a9a:	f7ff ff5e 	bl	800295a <dwt_write16bitoffsetreg>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(DW1000_Port_t *antenna_port)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE, antenna_port);
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	200e      	movs	r0, #14
 8002ab2:	f000 f9b7 	bl	8002e24 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD, antenna_port); // Set load LDE kick bit
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002abc:	2106      	movs	r1, #6
 8002abe:	202d      	movs	r0, #45	@ 0x2d
 8002ac0:	f7ff ff4b 	bl	800295a <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f000 fc42 	bl	800334e <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ, antenna_port); // Enable clocks for sequencing
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	2001      	movs	r0, #1
 8002ace:	f000 f9a9 	bl	8002e24 <_dwt_enableclocks>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <dwt_setcallbacks>:
 * output parameters
 *
 * no return value
 */
void dwt_setcallbacks(dwt_cb_t cbTxDone, dwt_cb_t cbRxOk, dwt_cb_t cbRxTo, dwt_cb_t cbRxErr)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
    pdw1000local->cbTxDone = cbTxDone;
 8002aea:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <dwt_setcallbacks+0x3c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = cbRxOk;
 8002af2:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <dwt_setcallbacks+0x3c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = cbRxTo;
 8002afa:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <dwt_setcallbacks+0x3c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = cbRxErr;
 8002b02:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <dwt_setcallbacks+0x3c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	24000014 	.word	0x24000014

08002b1c <dwt_isr>:
 * output parameters
 *
 * no return value
 */
void dwt_isr(DW1000_Port_t *antenna_port)
{
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b08b      	sub	sp, #44	@ 0x2c
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	6078      	str	r0, [r7, #4]
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID, antenna_port); // Read status register low 32bits
 8002b24:	4b80      	ldr	r3, [pc, #512]	@ (8002d28 <dwt_isr+0x20c>)
 8002b26:	681c      	ldr	r4, [r3, #0]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	200f      	movs	r0, #15
 8002b2e:	f7ff fe9c 	bl	800286a <dwt_read32bitoffsetreg>
 8002b32:	4603      	mov	r3, r0
 8002b34:	61e3      	str	r3, [r4, #28]
 8002b36:	69e3      	ldr	r3, [r4, #28]
 8002b38:	61bb      	str	r3, [r7, #24]

    // Handle RX good frame event
    if(status & SYS_STATUS_RXFCG) //疑问: 为什么不是SYS_STATUS_RXDFR
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d076      	beq.n	8002c32 <dwt_isr+0x116>
    {
        uint16 finfo16;
        uint16 len;

        /* RXPRD(前导码检测) -> RXSFDD(SFD检测) -> RXPHD(PHY Header检测) -> RXFCG(crc正确) -> RXDFR(接收完成) */
        dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXPRD | \
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f44f 42d6 	mov.w	r2, #27392	@ 0x6b00
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	200f      	movs	r0, #15
 8002b4e:	f7ff ff24 	bl	800299a <dwt_write32bitoffsetreg>
                SYS_STATUS_RXSFDD | SYS_STATUS_RXPHD ), antenna_port); // Clear all receive status bits

        pdw1000local->cbData.rx_flags = 0;
 8002b52:	4b75      	ldr	r3, [pc, #468]	@ (8002d28 <dwt_isr+0x20c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        // Read frame info - Only the first two bytes of the register are used here.
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET, antenna_port);
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	2100      	movs	r1, #0
 8002b60:	2010      	movs	r0, #16
 8002b62:	f7ff fead 	bl	80028c0 <dwt_read16bitoffsetreg>
 8002b66:	4603      	mov	r3, r0
 8002b68:	82fb      	strh	r3, [r7, #22]

        // Report frame length - Standard frame length up to 127, extended frame length up to 1023 bytes
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
 8002b6a:	8afb      	ldrh	r3, [r7, #22]
 8002b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b70:	83fb      	strh	r3, [r7, #30]
        if(pdw1000local->longFrames == 0)
 8002b72:	4b6d      	ldr	r3, [pc, #436]	@ (8002d28 <dwt_isr+0x20c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	7a9b      	ldrb	r3, [r3, #10]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d103      	bne.n	8002b84 <dwt_isr+0x68>
        {
            len &= RX_FINFO_RXFLEN_MASK;
 8002b7c:	8bfb      	ldrh	r3, [r7, #30]
 8002b7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b82:	83fb      	strh	r3, [r7, #30]
        }
        pdw1000local->cbData.datalength = len;
 8002b84:	4b68      	ldr	r3, [pc, #416]	@ (8002d28 <dwt_isr+0x20c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	8bfa      	ldrh	r2, [r7, #30]
 8002b8a:	841a      	strh	r2, [r3, #32]

        // Report ranging bit
        if(finfo16 & RX_FINFO_RNG)
 8002b8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	da0a      	bge.n	8002baa <dwt_isr+0x8e>
        {
            pdw1000local->cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
 8002b94:	4b64      	ldr	r3, [pc, #400]	@ (8002d28 <dwt_isr+0x20c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8002b9c:	4b62      	ldr	r3, [pc, #392]	@ (8002d28 <dwt_isr+0x20c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        // Report frame control - First bytes of the received frame.
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, pdw1000local->cbData.fctrl, antenna_port);
 8002baa:	4b5f      	ldr	r3, [pc, #380]	@ (8002d28 <dwt_isr+0x20c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	2202      	movs	r2, #2
 8002bba:	2100      	movs	r1, #0
 8002bbc:	2011      	movs	r0, #17
 8002bbe:	f7ff fdfe 	bl	80027be <dwt_readfromdevice>

        // Because of a previous frame not being received properly, AAT bit can be set upon the proper reception of a frame not requesting for
        // acknowledgement (ACK frame is not actually sent though). If the AAT bit is set, check ACK request bit in frame control to confirm (this
        // implementation works only for IEEE802.15.4-2011 compliant frames).
        // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
        if((status & SYS_STATUS_AAT) && ((pdw1000local->cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d019      	beq.n	8002c00 <dwt_isr+0xe4>
 8002bcc:	4b56      	ldr	r3, [pc, #344]	@ (8002d28 <dwt_isr+0x20c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d111      	bne.n	8002c00 <dwt_isr+0xe4>
        {
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT, antenna_port); // Clear AAT status bit in register
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2208      	movs	r2, #8
 8002be0:	2100      	movs	r1, #0
 8002be2:	200f      	movs	r0, #15
 8002be4:	f7ff fed9 	bl	800299a <dwt_write32bitoffsetreg>
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
 8002be8:	4b4f      	ldr	r3, [pc, #316]	@ (8002d28 <dwt_isr+0x20c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69da      	ldr	r2, [r3, #28]
 8002bee:	4b4e      	ldr	r3, [pc, #312]	@ (8002d28 <dwt_isr+0x20c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0208 	bic.w	r2, r2, #8
 8002bf6:	61da      	str	r2, [r3, #28]
            pdw1000local->wait4resp = 0;
 8002bf8:	4b4b      	ldr	r3, [pc, #300]	@ (8002d28 <dwt_isr+0x20c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	755a      	strb	r2, [r3, #21]
        }

        // Call the corresponding callback if present
        if(pdw1000local->cbRxOk != NULL)
 8002c00:	4b49      	ldr	r3, [pc, #292]	@ (8002d28 <dwt_isr+0x20c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <dwt_isr+0x100>
        {
            pdw1000local->cbRxOk(&pdw1000local->cbData, antenna_port);
 8002c0a:	4b47      	ldr	r3, [pc, #284]	@ (8002d28 <dwt_isr+0x20c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c10:	4a45      	ldr	r2, [pc, #276]	@ (8002d28 <dwt_isr+0x20c>)
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	321c      	adds	r2, #28
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4798      	blx	r3
        }

        if (pdw1000local->dblbuffon)
 8002c1c:	4b42      	ldr	r3, [pc, #264]	@ (8002d28 <dwt_isr+0x20c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	7d1b      	ldrb	r3, [r3, #20]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <dwt_isr+0x116>
        {
            // Toggle the Host side Receive Buffer Pointer
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1, antenna_port);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	2103      	movs	r1, #3
 8002c2c:	200d      	movs	r0, #13
 8002c2e:	f7ff fe7d 	bl	800292c <dwt_write8bitoffsetreg>
        }
    }

    // Handle TX confirmation event
    if(status & SYS_STATUS_TXFRS)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d023      	beq.n	8002c84 <dwt_isr+0x168>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX, antenna_port); // Clear TX event bits  就是啊，这边会自动清除的啊，为什么还要什么东西呢？
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	22f8      	movs	r2, #248	@ 0xf8
 8002c40:	2100      	movs	r1, #0
 8002c42:	200f      	movs	r0, #15
 8002c44:	f7ff fea9 	bl	800299a <dwt_write32bitoffsetreg>
        // In the case where this TXFRS interrupt is due to the automatic transmission of an ACK solicited by a response (with ACK request bit set)
        // that we receive through using wait4resp to a previous TX (and assuming that the IRQ processing of that TX has already been handled), then
        // we need to handle the IC issue which turns on the RX again in this situation (i.e. because it is wrongly applying the wait4resp after the
        // ACK TX).
        // See section "Transmit and automatically wait for response" in DW1000 User Manual
        if((status & SYS_STATUS_AAT) && pdw1000local->wait4resp)   //wait4resp是在tx的时候设置了expect_resp, 但是这个什么SYS_STATUS_AAT不知道是在哪里设置的啊
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <dwt_isr+0x14c>
 8002c52:	4b35      	ldr	r3, [pc, #212]	@ (8002d28 <dwt_isr+0x20c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	7d5b      	ldrb	r3, [r3, #21]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <dwt_isr+0x14c>
        {
            dwt_forcetrxoff(antenna_port); // Turn the RX off
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f997 	bl	8002f90 <dwt_forcetrxoff>
            dwt_rxreset(antenna_port); // Reset in case we were late and a frame was already being received
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 faba 	bl	80031dc <dwt_rxreset>
        }

        // Call the corresponding callback if present
        if(pdw1000local->cbTxDone != NULL)
 8002c68:	4b2f      	ldr	r3, [pc, #188]	@ (8002d28 <dwt_isr+0x20c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d008      	beq.n	8002c84 <dwt_isr+0x168>
        {
            pdw1000local->cbTxDone(&pdw1000local->cbData, antenna_port);
 8002c72:	4b2d      	ldr	r3, [pc, #180]	@ (8002d28 <dwt_isr+0x20c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c78:	4a2b      	ldr	r2, [pc, #172]	@ (8002d28 <dwt_isr+0x20c>)
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	321c      	adds	r2, #28
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4610      	mov	r0, r2
 8002c82:	4798      	blx	r3
        }
    }

    // Handle frame reception/preamble detect timeout events
    if(status & SYS_STATUS_ALL_RX_TO)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f403 1308 	and.w	r3, r3, #2228224	@ 0x220000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01e      	beq.n	8002ccc <dwt_isr+0x1b0>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO, antenna_port); // Clear RX timeout event bits
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f44f 1208 	mov.w	r2, #2228224	@ 0x220000
 8002c94:	2100      	movs	r1, #0
 8002c96:	200f      	movs	r0, #15
 8002c98:	f7ff fe7f 	bl	800299a <dwt_write32bitoffsetreg>

        pdw1000local->wait4resp = 0;
 8002c9c:	4b22      	ldr	r3, [pc, #136]	@ (8002d28 <dwt_isr+0x20c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	755a      	strb	r2, [r3, #21]

        // Because of an issue with receiver restart after error conditions, an RX reset must be applied after any error or timeout event to ensure
        // the next good frame's timestamp is computed correctly.
        // See section "RX Message timestamp" in DW1000 User Manual.
        dwt_forcetrxoff(antenna_port);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f973 	bl	8002f90 <dwt_forcetrxoff>
        dwt_rxreset(antenna_port);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa96 	bl	80031dc <dwt_rxreset>

        // Call the corresponding callback if present
        if(pdw1000local->cbRxTo != NULL)
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <dwt_isr+0x20c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d008      	beq.n	8002ccc <dwt_isr+0x1b0>
        {
            pdw1000local->cbRxTo(&pdw1000local->cbData, antenna_port);
 8002cba:	4b1b      	ldr	r3, [pc, #108]	@ (8002d28 <dwt_isr+0x20c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc0:	4a19      	ldr	r2, [pc, #100]	@ (8002d28 <dwt_isr+0x20c>)
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	321c      	adds	r2, #28
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4798      	blx	r3
        }
    }

    // Handle RX errors events
    if(status & SYS_STATUS_ALL_RX_ERR)
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4b17      	ldr	r3, [pc, #92]	@ (8002d2c <dwt_isr+0x210>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01a      	beq.n	8002d0c <dwt_isr+0x1f0>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR, antenna_port); // Clear RX error event bits
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a14      	ldr	r2, [pc, #80]	@ (8002d2c <dwt_isr+0x210>)
 8002cda:	2100      	movs	r1, #0
 8002cdc:	200f      	movs	r0, #15
 8002cde:	f7ff fe5c 	bl	800299a <dwt_write32bitoffsetreg>

        pdw1000local->wait4resp = 0;
 8002ce2:	4b11      	ldr	r3, [pc, #68]	@ (8002d28 <dwt_isr+0x20c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	755a      	strb	r2, [r3, #21]

        // Because of an issue with receiver restart after error conditions, an RX reset must be applied after any error or timeout event to ensure
        // the next good frame's timestamp is computed correctly.
        // See section "RX Message timestamp" in DW1000 User Manual.
        //        dwt_forcetrxoff();
        dwt_rxreset(antenna_port);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa76 	bl	80031dc <dwt_rxreset>

        // Call the corresponding callback if present
        if(pdw1000local->cbRxErr != NULL)
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <dwt_isr+0x20c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <dwt_isr+0x1f0>
        {
            pdw1000local->cbRxErr(&pdw1000local->cbData, antenna_port);
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <dwt_isr+0x20c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d00:	4a09      	ldr	r2, [pc, #36]	@ (8002d28 <dwt_isr+0x20c>)
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	321c      	adds	r2, #28
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4798      	blx	r3
        }
    }

    uint32 sysconfig1;
    sysconfig1 = dwt_read32bitreg(SYS_CFG_ID, antenna_port) ; // Read sysconfig register
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	2100      	movs	r1, #0
 8002d10:	2004      	movs	r0, #4
 8002d12:	f7ff fdaa 	bl	800286a <dwt_read32bitoffsetreg>
 8002d16:	6138      	str	r0, [r7, #16]
    int a;
    a++;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]
}
 8002d1e:	bf00      	nop
 8002d20:	3724      	adds	r7, #36	@ 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd90      	pop	{r4, r7, pc}
 8002d26:	bf00      	nop
 8002d28:	24000014 	.word	0x24000014
 8002d2c:	24059000 	.word	0x24059000

08002d30 <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode, DW1000_Port_t *antenna_port)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	71fb      	strb	r3, [r7, #7]
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d059      	beq.n	8002dfa <dwt_setleds+0xca>
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, antenna_port);
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	2100      	movs	r1, #0
 8002d4a:	2026      	movs	r0, #38	@ 0x26
 8002d4c:	f7ff fd8d 	bl	800286a <dwt_read32bitoffsetreg>
 8002d50:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8002d58:	60fb      	str	r3, [r7, #12]
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8002d60:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, antenna_port);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	2100      	movs	r1, #0
 8002d68:	2026      	movs	r0, #38	@ 0x26
 8002d6a:	f7ff fe16 	bl	800299a <dwt_write32bitoffsetreg>



        //RXOK GPIO0
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, antenna_port);
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	2100      	movs	r1, #0
 8002d72:	2026      	movs	r0, #38	@ 0x26
 8002d74:	f7ff fd79 	bl	800286a <dwt_read32bitoffsetreg>
 8002d78:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP0_MASK | GPIO_MSGP3_MASK);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f423 5343 	bic.w	r3, r3, #12480	@ 0x30c0
 8002d80:	60fb      	str	r3, [r7, #12]
        reg |= (0x00000040 | GPIO_PIN3_TXLED);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f443 5382 	orr.w	r3, r3, #4160	@ 0x1040
 8002d88:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, antenna_port);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	2100      	movs	r1, #0
 8002d90:	2026      	movs	r0, #38	@ 0x26
 8002d92:	f7ff fe02 	bl	800299a <dwt_write32bitoffsetreg>




        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, antenna_port);
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	2100      	movs	r1, #0
 8002d9a:	2036      	movs	r0, #54	@ 0x36
 8002d9c:	f7ff fd65 	bl	800286a <dwt_read32bitoffsetreg>
 8002da0:	60f8      	str	r0, [r7, #12]
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f443 0304 	orr.w	r3, r3, #8650752	@ 0x840000
 8002da8:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg, antenna_port);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	2100      	movs	r1, #0
 8002db0:	2036      	movs	r0, #54	@ 0x36
 8002db2:	f7ff fdf2 	bl	800299a <dwt_write32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
 8002db6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002dba:	60fb      	str	r3, [r7, #12]
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <dwt_setleds+0x9e>
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8002dcc:	60fb      	str	r3, [r7, #12]
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg, antenna_port);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	2128      	movs	r1, #40	@ 0x28
 8002dd4:	2036      	movs	r0, #54	@ 0x36
 8002dd6:	f7ff fde0 	bl	800299a <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01a      	beq.n	8002e1a <dwt_setleds+0xea>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8002dea:	60fb      	str	r3, [r7, #12]
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg, antenna_port);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	2128      	movs	r1, #40	@ 0x28
 8002df2:	2036      	movs	r0, #54	@ 0x36
 8002df4:	f7ff fdd1 	bl	800299a <dwt_write32bitoffsetreg>
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, antenna_port);
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, antenna_port);
    }
}
 8002df8:	e00f      	b.n	8002e1a <dwt_setleds+0xea>
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, antenna_port);
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	2026      	movs	r0, #38	@ 0x26
 8002e00:	f7ff fd33 	bl	800286a <dwt_read32bitoffsetreg>
 8002e04:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8002e0c:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, antenna_port);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	2100      	movs	r1, #0
 8002e14:	2026      	movs	r0, #38	@ 0x26
 8002e16:	f7ff fdc0 	bl	800299a <dwt_write32bitoffsetreg>
}
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks, DW1000_Port_t *antenna_port)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg, antenna_port);
 8002e2e:	f107 020c 	add.w	r2, r7, #12
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	2202      	movs	r2, #2
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	2036      	movs	r0, #54	@ 0x36
 8002e3e:	f7ff fcbe 	bl	80027be <dwt_readfromdevice>
    switch(clocks)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b0e      	cmp	r3, #14
 8002e46:	d876      	bhi.n	8002f36 <_dwt_enableclocks+0x112>
 8002e48:	a201      	add	r2, pc, #4	@ (adr r2, 8002e50 <_dwt_enableclocks+0x2c>)
 8002e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4e:	bf00      	nop
 8002e50:	08002e9d 	.word	0x08002e9d
 8002e54:	08002e8d 	.word	0x08002e8d
 8002e58:	08002eb3 	.word	0x08002eb3
 8002e5c:	08002f37 	.word	0x08002f37
 8002e60:	08002f37 	.word	0x08002f37
 8002e64:	08002f37 	.word	0x08002f37
 8002e68:	08002f37 	.word	0x08002f37
 8002e6c:	08002ec9 	.word	0x08002ec9
 8002e70:	08002ee9 	.word	0x08002ee9
 8002e74:	08002f37 	.word	0x08002f37
 8002e78:	08002f37 	.word	0x08002f37
 8002e7c:	08002eff 	.word	0x08002eff
 8002e80:	08002f0b 	.word	0x08002f0b
 8002e84:	08002f17 	.word	0x08002f17
 8002e88:	08002f2d 	.word	0x08002f2d
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8002e90:	7b7b      	ldrb	r3, [r7, #13]
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	737b      	strb	r3, [r7, #13]
        }
            break;
 8002e9a:	e04d      	b.n	8002f38 <_dwt_enableclocks+0x114>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8002e9c:	7b3b      	ldrb	r3, [r7, #12]
 8002e9e:	b25b      	sxtb	r3, r3
 8002ea0:	f023 0303 	bic.w	r3, r3, #3
 8002ea4:	b25b      	sxtb	r3, r3
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	b25b      	sxtb	r3, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	733b      	strb	r3, [r7, #12]
        }
            break;
 8002eb0:	e042      	b.n	8002f38 <_dwt_enableclocks+0x114>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8002eb2:	7b3b      	ldrb	r3, [r7, #12]
 8002eb4:	b25b      	sxtb	r3, r3
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	b25b      	sxtb	r3, r3
 8002ebc:	f043 0302 	orr.w	r3, r3, #2
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	733b      	strb	r3, [r7, #12]
        }
            break;
 8002ec6:	e037      	b.n	8002f38 <_dwt_enableclocks+0x114>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8002ec8:	7b3b      	ldrb	r3, [r7, #12]
 8002eca:	b25b      	sxtb	r3, r3
 8002ecc:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	f043 0348 	orr.w	r3, r3, #72	@ 0x48
 8002ed6:	b25b      	sxtb	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8002edc:	7b7b      	ldrb	r3, [r7, #13]
 8002ede:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	737b      	strb	r3, [r7, #13]
        }
            break;
 8002ee6:	e027      	b.n	8002f38 <_dwt_enableclocks+0x114>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8002ee8:	7b3b      	ldrb	r3, [r7, #12]
 8002eea:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8002ef2:	7b7b      	ldrb	r3, [r7, #13]
 8002ef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	737b      	strb	r3, [r7, #13]
        }
            break;
 8002efc:	e01c      	b.n	8002f38 <_dwt_enableclocks+0x114>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8002efe:	7b7b      	ldrb	r3, [r7, #13]
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	737b      	strb	r3, [r7, #13]
        }
            break;
 8002f08:	e016      	b.n	8002f38 <_dwt_enableclocks+0x114>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8002f0a:	7b7b      	ldrb	r3, [r7, #13]
 8002f0c:	f023 0302 	bic.w	r3, r3, #2
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	737b      	strb	r3, [r7, #13]
        }
            break;
 8002f14:	e010      	b.n	8002f38 <_dwt_enableclocks+0x114>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8002f16:	7b3b      	ldrb	r3, [r7, #12]
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002f1e:	b25b      	sxtb	r3, r3
 8002f20:	f043 0320 	orr.w	r3, r3, #32
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	733b      	strb	r3, [r7, #12]
        }
            break;
 8002f2a:	e005      	b.n	8002f38 <_dwt_enableclocks+0x114>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8002f30:	2303      	movs	r3, #3
 8002f32:	737b      	strb	r3, [r7, #13]
        }
            break;
 8002f34:	e000      	b.n	8002f38 <_dwt_enableclocks+0x114>
        default:
            break;
 8002f36:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0], antenna_port);
 8002f38:	f107 020c 	add.w	r2, r7, #12
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	2201      	movs	r2, #1
 8002f44:	2100      	movs	r1, #0
 8002f46:	2036      	movs	r0, #54	@ 0x36
 8002f48:	f7ff fbe0 	bl	800270c <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1], antenna_port);
 8002f4c:	f107 030c 	add.w	r3, r7, #12
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	4613      	mov	r3, r2
 8002f58:	2201      	movs	r2, #1
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	2036      	movs	r0, #54	@ 0x36
 8002f5e:	f7ff fbd5 	bl	800270c <dwt_writetodevice>

} // end _dwt_enableclocks()
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop

08002f6c <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(DW1000_Port_t *antenna_port) // Disable sequencing and go to state "INIT"
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
    _dwt_enableclocks(FORCE_SYS_XTI, antenna_port); // Set system clock to XTI
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7ff ff54 	bl	8002e24 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, antenna_port); // Disable PMSC ctrl of RF and RX clk blocks
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2104      	movs	r1, #4
 8002f82:	2036      	movs	r0, #54	@ 0x36
 8002f84:	f7ff fce9 	bl	800295a <dwt_write16bitoffsetreg>
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(DW1000_Port_t *antenna_port)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID, antenna_port) ; // Read set interrupt mask
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	200e      	movs	r0, #14
 8002f9e:	f7ff fc64 	bl	800286a <dwt_read32bitoffsetreg>
 8002fa2:	60f8      	str	r0, [r7, #12]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon(antenna_port) ;
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f9af 	bl	8003308 <decamutexon>
 8002faa:	60b8      	str	r0, [r7, #8]

    dwt_write32bitreg(SYS_MASK_ID, 0, antenna_port) ; // Clear interrupt mask - so we don't get any unwanted events
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	200e      	movs	r0, #14
 8002fb4:	f7ff fcf1 	bl	800299a <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF, antenna_port) ; // Disable the radio
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2240      	movs	r2, #64	@ 0x40
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	200d      	movs	r0, #13
 8002fc0:	f7ff fcb4 	bl	800292c <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD), antenna_port);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8002ffc <dwt_forcetrxoff+0x6c>)
 8002fc8:	2100      	movs	r1, #0
 8002fca:	200f      	movs	r0, #15
 8002fcc:	f7ff fce5 	bl	800299a <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs(antenna_port);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f817 	bl	8003004 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask, antenna_port) ; // Set interrupt mask to what it was
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	2100      	movs	r1, #0
 8002fdc:	200e      	movs	r0, #14
 8002fde:	f7ff fcdc 	bl	800299a <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat, antenna_port) ;
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	68b8      	ldr	r0, [r7, #8]
 8002fe6:	f000 f9a3 	bl	8003330 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8002fea:	4b05      	ldr	r3, [pc, #20]	@ (8003000 <dwt_forcetrxoff+0x70>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2427fff8 	.word	0x2427fff8
 8003000:	24000014 	.word	0x24000014

08003004 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(DW1000_Port_t *antenna_port)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3, antenna_port); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	2103      	movs	r1, #3
 8003010:	200f      	movs	r0, #15
 8003012:	f7ff fc74 	bl	80028fe <dwt_read8bitoffsetreg>
 8003016:	4603      	mov	r3, r0
 8003018:	73fb      	strb	r3, [r7, #15]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800301a:	7bfa      	ldrb	r2, [r7, #15]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8003020:	4053      	eors	r3, r2
 8003022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <dwt_syncrxbufptrs+0x32>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01, antenna_port) ; // We need to swap RX buffer status reg (write one to toggle internally)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	2103      	movs	r1, #3
 8003030:	200d      	movs	r0, #13
 8003032:	f7ff fc7b 	bl	800292c <dwt_write8bitoffsetreg>
    }
}
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode, DW1000_Port_t *antenna_port)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <dwt_rxenable+0x1a>
    {
        dwt_syncrxbufptrs(antenna_port);
 8003052:	6838      	ldr	r0, [r7, #0]
 8003054:	f7ff ffd6 	bl	8003004 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8003058:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800305c:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <dwt_rxenable+0x32>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8003068:	89fb      	ldrh	r3, [r7, #14]
 800306a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800306e:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp, antenna_port);
 8003070:	89fa      	ldrh	r2, [r7, #14]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2100      	movs	r1, #0
 8003076:	200d      	movs	r0, #13
 8003078:	f7ff fc6f 	bl	800295a <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d01d      	beq.n	80030c2 <dwt_rxenable+0x84>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3, antenna_port); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	2103      	movs	r1, #3
 800308a:	200f      	movs	r0, #15
 800308c:	f7ff fc37 	bl	80028fe <dwt_read8bitoffsetreg>
 8003090:	4603      	mov	r3, r0
 8003092:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8003094:	7b7b      	ldrb	r3, [r7, #13]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d011      	beq.n	80030c2 <dwt_rxenable+0x84>
        {
            dwt_forcetrxoff(antenna_port); // turn the delayed receive off
 800309e:	6838      	ldr	r0, [r7, #0]
 80030a0:	f7ff ff76 	bl	8002f90 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <dwt_rxenable+0x7e>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB, antenna_port);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030b4:	2100      	movs	r1, #0
 80030b6:	200d      	movs	r0, #13
 80030b8:	f7ff fc4f 	bl	800295a <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295
 80030c0:	e000      	b.n	80030c4 <dwt_rxenable+0x86>
        }
    }

    return DWT_SUCCESS;
 80030c2:	2300      	movs	r3, #0
} // end dwt_rxenable()
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time, DW1000_Port_t *antenna_port)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3, antenna_port); // Read at offset 3 to get the upper byte only
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	2103      	movs	r1, #3
 80030dc:	2004      	movs	r0, #4
 80030de:	f7ff fc0e 	bl	80028fe <dwt_read8bitoffsetreg>
 80030e2:	4603      	mov	r3, r0
 80030e4:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d018      	beq.n	800311e <dwt_setrxtimeout+0x52>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time, antenna_port) ;
 80030ec:	88fa      	ldrh	r2, [r7, #6]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2100      	movs	r1, #0
 80030f2:	200c      	movs	r0, #12
 80030f4:	f7ff fc31 	bl	800295a <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	f043 0310 	orr.w	r3, r3, #16
 80030fe:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 8003100:	4b12      	ldr	r3, [pc, #72]	@ (800314c <dwt_setrxtimeout+0x80>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	4b11      	ldr	r3, [pc, #68]	@ (800314c <dwt_setrxtimeout+0x80>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800310e:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp, antenna_port); // Write at offset 3 to write the upper byte only
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2103      	movs	r1, #3
 8003116:	2004      	movs	r0, #4
 8003118:	f7ff fc08 	bl	800292c <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp, antenna_port); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 800311c:	e011      	b.n	8003142 <dwt_setrxtimeout+0x76>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	f023 0310 	bic.w	r3, r3, #16
 8003124:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 8003126:	4b09      	ldr	r3, [pc, #36]	@ (800314c <dwt_setrxtimeout+0x80>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	4b07      	ldr	r3, [pc, #28]	@ (800314c <dwt_setrxtimeout+0x80>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003134:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp, antenna_port); // Write at offset 3 to write the upper byte only
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2103      	movs	r1, #3
 800313c:	2004      	movs	r0, #4
 800313e:	f7ff fbf5 	bl	800292c <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	24000014 	.word	0x24000014

08003150 <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout, DW1000_Port_t *antenna_port)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	6039      	str	r1, [r7, #0]
 800315a:	80fb      	strh	r3, [r7, #6]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout, antenna_port);
 800315c:	88fa      	ldrh	r2, [r7, #6]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2124      	movs	r1, #36	@ 0x24
 8003162:	2027      	movs	r0, #39	@ 0x27
 8003164:	f7ff fbf9 	bl	800295a <dwt_write16bitoffsetreg>
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <dwt_setinterrupt>:
 * output parameters
 *
 * no return value
 */
void dwt_setinterrupt(uint32 bitmask, uint8 operation, DW1000_Port_t *antenna_port)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	460b      	mov	r3, r1
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	72fb      	strb	r3, [r7, #11]
    decaIrqStatus_t stat ;
    uint32 mask ;

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    stat = decamutexon(antenna_port) ;
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f8c2 	bl	8003308 <decamutexon>
 8003184:	6138      	str	r0, [r7, #16]

    if(operation == 2)
 8003186:	7afb      	ldrb	r3, [r7, #11]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d106      	bne.n	800319a <dwt_setinterrupt+0x2a>
    {
        dwt_write32bitreg(SYS_MASK_ID, bitmask, antenna_port) ; // New value
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	2100      	movs	r1, #0
 8003192:	200e      	movs	r0, #14
 8003194:	f7ff fc01 	bl	800299a <dwt_write32bitoffsetreg>
 8003198:	e018      	b.n	80031cc <dwt_setinterrupt+0x5c>
    }
    else
    {
        mask = dwt_read32bitreg(SYS_MASK_ID, antenna_port) ; // Read register
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	2100      	movs	r1, #0
 800319e:	200e      	movs	r0, #14
 80031a0:	f7ff fb63 	bl	800286a <dwt_read32bitoffsetreg>
 80031a4:	6178      	str	r0, [r7, #20]
        if(operation == 1)
 80031a6:	7afb      	ldrb	r3, [r7, #11]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d104      	bne.n	80031b6 <dwt_setinterrupt+0x46>
        {
            mask |= bitmask ;
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	e004      	b.n	80031c0 <dwt_setinterrupt+0x50>
        }
        else
        {
            mask &= ~bitmask ; // Clear the bit
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4013      	ands	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
        }
        dwt_write32bitreg(SYS_MASK_ID, mask, antenna_port) ; // New value
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	2100      	movs	r1, #0
 80031c6:	200e      	movs	r0, #14
 80031c8:	f7ff fbe7 	bl	800299a <dwt_write32bitoffsetreg>
    }

    decamutexoff(stat,antenna_port) ;
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	6938      	ldr	r0, [r7, #16]
 80031d0:	f000 f8ae 	bl	8003330 <decamutexoff>
}
 80031d4:	bf00      	nop
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(DW1000_Port_t *antenna_port)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX, antenna_port);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	22e0      	movs	r2, #224	@ 0xe0
 80031e8:	2103      	movs	r1, #3
 80031ea:	2036      	movs	r0, #54	@ 0x36
 80031ec:	f7ff fb9e 	bl	800292c <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, antenna_port);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	22f0      	movs	r2, #240	@ 0xf0
 80031f4:	2103      	movs	r1, #3
 80031f6:	2036      	movs	r0, #54	@ 0x36
 80031f8:	f7ff fb98 	bl	800292c <dwt_write8bitoffsetreg>
}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(DW1000_Port_t *antenna_port)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
    _dwt_disablesequencing(antenna_port);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fead 	bl	8002f6c <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00, antenna_port);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	2100      	movs	r1, #0
 8003218:	202c      	movs	r0, #44	@ 0x2c
 800321a:	f7ff fb9e 	bl	800295a <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00, antenna_port);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	2106      	movs	r1, #6
 8003224:	202c      	movs	r0, #44	@ 0x2c
 8003226:	f7ff fb81 	bl	800292c <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload(antenna_port);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fc03 	bl	8002a36 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL, antenna_port);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	2103      	movs	r1, #3
 8003236:	2036      	movs	r0, #54	@ 0x36
 8003238:	f7ff fb78 	bl	800292c <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800323c:	2001      	movs	r0, #1
 800323e:	f000 f886 	bl	800334e <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, antenna_port);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	22f0      	movs	r2, #240	@ 0xf0
 8003246:	2103      	movs	r1, #3
 8003248:	2036      	movs	r0, #54	@ 0x36
 800324a:	f7ff fb6f 	bl	800292c <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800324e:	4b04      	ldr	r3, [pc, #16]	@ (8003260 <dwt_softreset+0x5c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	755a      	strb	r2, [r3, #21]
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	24000014 	.word	0x24000014

08003264 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value, DW1000_Port_t *antenna_port)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8003270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	b25b      	sxtb	r3, r3
 800327a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800327e:	b25b      	sxtb	r3, r3
 8003280:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val, antenna_port);
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	210e      	movs	r1, #14
 8003288:	202b      	movs	r0, #43	@ 0x2b
 800328a:	f7ff fb4f 	bl	800292c <dwt_write8bitoffsetreg>
}
 800328e:	bf00      	nop
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <dwt_readrcphase>:
*/

// read RCPHASE register

void dwt_readrcphase(uint8_t *phase, DW1000_Port_t *antenna_port)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af02      	add	r7, sp, #8
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
    uint64_t temp={0};
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    dwt_readfromdevice(RX_TTCKO_ID, 0, RX_TTCKO_LEN, (uint8_t*)&temp, antenna_port);
 80032ac:	f107 0208 	add.w	r2, r7, #8
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	2205      	movs	r2, #5
 80032b8:	2100      	movs	r1, #0
 80032ba:	2014      	movs	r0, #20
 80032bc:	f7ff fa7f 	bl	80027be <dwt_readfromdevice>

    *phase = (temp & RX_TTCKO_RCPHASE_MASK) >> 32;
 80032c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	000a      	movs	r2, r1
 80032ce:	2300      	movs	r3, #0
 80032d0:	b2d3      	uxtb	r3, r2
 80032d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	701a      	strb	r2, [r3, #0]
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <dwt_setecctrl>:
// set EC_CTRL OSTRM (One Shot Timebase Reset)
void dwt_setecctrl(uint32_t reg, DW1000_Port_t *antenna_port)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
    dwt_writetodevice(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_LEN, &reg, antenna_port);
 80032ee:	1d3a      	adds	r2, r7, #4
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	2204      	movs	r2, #4
 80032f8:	2100      	movs	r1, #0
 80032fa:	2024      	movs	r0, #36	@ 0x24
 80032fc:	f7ff fa06 	bl	800270c <dwt_writetodevice>
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(DW1000_Port_t *antenna_port)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
	decaIrqStatus_t s = (decaIrqStatus_t)port_GetEXT_IRQStatus(antenna_port);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fa21 	bl	8003758 <port_GetEXT_IRQStatus>
 8003316:	4603      	mov	r3, r0
 8003318:	60fb      	str	r3, [r7, #12]

	if(s) {
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <decamutexon+0x1e>
		port_DisableEXT_IRQ(antenna_port); //disable the external interrupt line
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f9fd 	bl	8003720 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8003326:	68fb      	ldr	r3, [r7, #12]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s, DW1000_Port_t *antenna_port)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <decamutexoff+0x16>
		port_EnableEXT_IRQ(antenna_port);
 8003340:	6838      	ldr	r0, [r7, #0]
 8003342:	f000 f9fb 	bl	800373c <port_EnableEXT_IRQ>
	}
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8d9 	bl	800350e <Sleep>
}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <writetospi>:
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer,
               DW1000_Port_t *antenna_port)
{
 8003364:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	4683      	mov	fp, r0
 800336c:	468a      	mov	sl, r1
 800336e:	4690      	mov	r8, r2
 8003370:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8003372:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    SPI_HandleTypeDef *hspi = antenna_port->hspi;
    stat = decamutexon(antenna_port);
 8003374:	4630      	mov	r0, r6
    SPI_HandleTypeDef *hspi = antenna_port->hspi;
 8003376:	6835      	ldr	r5, [r6, #0]
    stat = decamutexon(antenna_port);
 8003378:	f7ff ffc6 	bl	8003308 <decamutexon>
 800337c:	9001      	str	r0, [sp, #4]

    while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY);
 800337e:	4628      	mov	r0, r5
 8003380:	f004 fb74 	bl	8007a6c <HAL_SPI_GetState>
 8003384:	2801      	cmp	r0, #1
 8003386:	4604      	mov	r4, r0
 8003388:	d1f9      	bne.n	800337e <writetospi+0x1a>

    HAL_GPIO_WritePin(antenna_port->spi_csn_port, antenna_port->spi_csn_pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800338a:	8931      	ldrh	r1, [r6, #8]
 800338c:	2200      	movs	r2, #0
 800338e:	6870      	ldr	r0, [r6, #4]
 8003390:	f000 fe34 	bl	8003ffc <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hspi, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8003394:	465a      	mov	r2, fp
 8003396:	4651      	mov	r1, sl
 8003398:	f04f 33ff 	mov.w	r3, #4294967295
 800339c:	4628      	mov	r0, r5
 800339e:	f003 ff05 	bl	80071ac <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295
 80033a6:	4649      	mov	r1, r9
 80033a8:	fa1f f288 	uxth.w	r2, r8
 80033ac:	4628      	mov	r0, r5
 80033ae:	f003 fefd 	bl	80071ac <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(antenna_port->spi_csn_port, antenna_port->spi_csn_pin, GPIO_PIN_SET); /**< Put chip select line high */
 80033b2:	4622      	mov	r2, r4
 80033b4:	8931      	ldrh	r1, [r6, #8]
 80033b6:	6870      	ldr	r0, [r6, #4]
 80033b8:	f000 fe20 	bl	8003ffc <HAL_GPIO_WritePin>

    decamutexoff(stat, antenna_port);
 80033bc:	9801      	ldr	r0, [sp, #4]
 80033be:	4631      	mov	r1, r6
 80033c0:	f7ff ffb6 	bl	8003330 <decamutexoff>

    return 0;
} // end writetospi()
 80033c4:	2000      	movs	r0, #0
 80033c6:	b002      	add	sp, #8
 80033c8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

080033cc <readfromspi>:
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer,
                DW1000_Port_t *antenna_port)
{
 80033cc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	4683      	mov	fp, r0
 80033d4:	468a      	mov	sl, r1
 80033d6:	4690      	mov	r8, r2
 80033d8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80033da:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    SPI_HandleTypeDef *hspi = antenna_port->hspi;
    stat = decamutexon(antenna_port) ;
 80033dc:	4630      	mov	r0, r6
    SPI_HandleTypeDef *hspi = antenna_port->hspi;
 80033de:	6835      	ldr	r5, [r6, #0]
    stat = decamutexon(antenna_port) ;
 80033e0:	f7ff ff92 	bl	8003308 <decamutexon>
 80033e4:	9001      	str	r0, [sp, #4]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY);
 80033e6:	4628      	mov	r0, r5
 80033e8:	f004 fb40 	bl	8007a6c <HAL_SPI_GetState>
 80033ec:	2801      	cmp	r0, #1
 80033ee:	4604      	mov	r4, r0
 80033f0:	d1f9      	bne.n	80033e6 <readfromspi+0x1a>

    HAL_GPIO_WritePin(antenna_port->spi_csn_port, antenna_port->spi_csn_pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80033f2:	8931      	ldrh	r1, [r6, #8]
 80033f4:	2200      	movs	r2, #0
 80033f6:	6870      	ldr	r0, [r6, #4]
 80033f8:	f000 fe00 	bl	8003ffc <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hspi, headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 80033fc:	465a      	mov	r2, fp
 80033fe:	4651      	mov	r1, sl
 8003400:	f04f 33ff 	mov.w	r3, #4294967295
 8003404:	4628      	mov	r0, r5
 8003406:	f003 fed1 	bl	80071ac <HAL_SPI_Transmit>

    HAL_SPI_Receive(hspi, readBuffer, readlength, HAL_MAX_DELAY);
 800340a:	f04f 33ff 	mov.w	r3, #4294967295
 800340e:	4649      	mov	r1, r9
 8003410:	fa1f f288 	uxth.w	r2, r8
 8003414:	4628      	mov	r0, r5
 8003416:	f004 f8b7 	bl	8007588 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(antenna_port->spi_csn_port, antenna_port->spi_csn_pin, GPIO_PIN_SET); /**< Put chip select line high */
 800341a:	4622      	mov	r2, r4
 800341c:	8931      	ldrh	r1, [r6, #8]
 800341e:	6870      	ldr	r0, [r6, #4]
 8003420:	f000 fdec 	bl	8003ffc <HAL_GPIO_WritePin>

    decamutexoff(stat, antenna_port);
 8003424:	9801      	ldr	r0, [sp, #4]
 8003426:	4631      	mov	r1, r6
 8003428:	f7ff ff82 	bl	8003330 <decamutexoff>

    return 0;
} // end readfromspi()
 800342c:	2000      	movs	r0, #0
 800342e:	b002      	add	sp, #8
 8003430:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003434 <__NVIC_EnableIRQ>:
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800343e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003442:	2b00      	cmp	r3, #0
 8003444:	db0b      	blt.n	800345e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	4907      	ldr	r1, [pc, #28]	@ (800346c <__NVIC_EnableIRQ+0x38>)
 800344e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2001      	movs	r0, #1
 8003456:	fa00 f202 	lsl.w	r2, r0, r2
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_DisableIRQ>:
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800347a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800347e:	2b00      	cmp	r3, #0
 8003480:	db12      	blt.n	80034a8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	f003 021f 	and.w	r2, r3, #31
 8003488:	490a      	ldr	r1, [pc, #40]	@ (80034b4 <__NVIC_DisableIRQ+0x44>)
 800348a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	2001      	movs	r0, #1
 8003492:	fa00 f202 	lsl.w	r2, r0, r2
 8003496:	3320      	adds	r3, #32
 8003498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800349c:	f3bf 8f4f 	dsb	sy
}
 80034a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034a2:	f3bf 8f6f 	isb	sy
}
 80034a6:	bf00      	nop
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000e100 	.word	0xe000e100

080034b8 <usleep>:
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")

int usleep(uint16_t usec)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	80fb      	strh	r3, [r7, #6]
    int i, j;
#pragma GCC ivdep
    for(i = 0; i < usec; i++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e012      	b.n	80034ee <usleep+0x36>
    {
#pragma GCC ivdep
        for(j = 0; j < 2; j++)
 80034c8:	2300      	movs	r3, #0
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	e004      	b.n	80034d8 <usleep+0x20>
        {
            __NOP();
 80034ce:	bf00      	nop
            __NOP();
 80034d0:	bf00      	nop
        for(j = 0; j < 2; j++)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	3301      	adds	r3, #1
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	bfd4      	ite	le
 80034de:	2301      	movle	r3, #1
 80034e0:	2300      	movgt	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f2      	bne.n	80034ce <usleep+0x16>
    for(i = 0; i < usec; i++)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3301      	adds	r3, #1
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	bfb4      	ite	lt
 80034f6:	2301      	movlt	r3, #1
 80034f8:	2300      	movge	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e3      	bne.n	80034c8 <usleep+0x10>
        }
    }
    return 0;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f9f0 	bl	80038fc <HAL_Delay>
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t) x) >> 5UL)] & \
 800352c:	4a0b      	ldr	r2, [pc, #44]	@ (800355c <EXTI_GetITEnStatus+0x38>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t) (1UL << (((uint32_t) x) & 0x1FUL))) == (uint32_t) RESET) ? (RESET) : (SET);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf14      	ite	ne
 8003548:	2301      	movne	r3, #1
 800354a:	2300      	moveq	r3, #0
 800354c:	b2db      	uxtb	r3, r3
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	e000e100 	.word	0xe000e100

08003560 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(DW1000_Port_t *antenna_port)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
    //拉低开漏的RESET引脚
    HAL_GPIO_WritePin(antenna_port->rstn_port,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6958      	ldr	r0, [r3, #20]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8b1b      	ldrh	r3, [r3, #24]
 8003570:	2200      	movs	r2, #0
 8003572:	4619      	mov	r1, r3
 8003574:	f000 fd42 	bl	8003ffc <HAL_GPIO_WritePin>
                      antenna_port->rstn_pin,
                      GPIO_PIN_RESET);

    usleep(1);
 8003578:	2001      	movs	r0, #1
 800357a:	f7ff ff9d 	bl	80034b8 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0, antenna_port);
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	2000      	movs	r0, #0
 8003582:	f000 f807 	bl	8003594 <setup_DW1000RSTnIRQ>

    Sleep(2);
 8003586:	2002      	movs	r0, #2
 8003588:	f7ff ffc1 	bl	800350e <Sleep>
}
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <setup_DW1000RSTnIRQ>:
 * 主要是用来唤醒DW1000  唤醒后进入init模式  DW1000自动拉高RESET
 * @param enable
 * @param antenna_port
 */
void setup_DW1000RSTnIRQ(int enable, DW1000_Port_t *antenna_port)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
//                      &GPIO_InitStruct);
//        HAL_GPIO_WritePin(antenna_port->rstn_port,
//                          antenna_port->rstn_pin,
//                          GPIO_PIN_SET);
//    }
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <port_set_dw1000_slowrate>:
/**
 * @brief 好像是强制初始化(Init中会关闭SPI) 可能需要加锁(ing)
 * @param antenna_port
 */
void port_set_dw1000_slowrate(DW1000_Port_t *antenna_port)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
    antenna_port->hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80035ba:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(antenna_port->hspi);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f003 fccf 	bl	8006f64 <HAL_SPI_Init>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(DW1000_Port_t *antenna_port)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
    antenna_port->hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035de:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(antenna_port->hspi);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f003 fcbd 	bl	8006f64 <HAL_SPI_Init>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_GPIO_EXTI_Callback>:
 * 这里需要根据GPIO_Port和GPIO_Pin分辨出是哪个DW1000引起的中断
 * 本函数和不同的引脚连接有关 因此不同的项目移植本函数都要进行修改(还没有想到通用移植办法)
 * @param GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	80fb      	strh	r3, [r7, #6]
    uint8_t pin_index = __builtin_ctz(GPIO_Pin);
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	fab3 f383 	clz	r3, r3
 8003608:	75fb      	strb	r3, [r7, #23]
    uint32_t syscfg_exticr = SYSCFG->EXTICR[pin_index / 4];
 800360a:	4a34      	ldr	r2, [pc, #208]	@ (80036dc <HAL_GPIO_EXTI_Callback+0xe8>)
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	b2db      	uxtb	r3, r3
 8003612:	3302      	adds	r3, #2
 8003614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003618:	613b      	str	r3, [r7, #16]
    uint8_t port_index = (syscfg_exticr >> (4 * (pin_index % 4))) & 0xFF;
 800361a:	7dfb      	ldrb	r3, [r7, #23]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
 8003628:	73fb      	strb	r3, [r7, #15]

	/* 这里的dwt_setlocaldataptr(index)非常重要 index一定要和UWB_device_array[]的索引对上 */
    if(GPIO_Pin == UWB1_IRQ_Pin && (GPIO_PORT_INDEX(UWB1_IRQ_GPIO_Port) == port_index))
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d109      	bne.n	8003644 <HAL_GPIO_EXTI_Callback+0x50>
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d106      	bne.n	8003644 <HAL_GPIO_EXTI_Callback+0x50>
    {
        dwt_setlocaldataptr(0);
 8003636:	2000      	movs	r0, #0
 8003638:	f7fe fcb2 	bl	8001fa0 <dwt_setlocaldataptr>
        process_deca_irq(&UWB_device_array[0].port);
 800363c:	4828      	ldr	r0, [pc, #160]	@ (80036e0 <HAL_GPIO_EXTI_Callback+0xec>)
 800363e:	f000 f859 	bl	80036f4 <process_deca_irq>
 8003642:	e046      	b.n	80036d2 <HAL_GPIO_EXTI_Callback+0xde>
    }
    else if(GPIO_Pin == UWB2_IRQ_Pin && (GPIO_PORT_INDEX(UWB2_IRQ_GPIO_Port) == port_index))
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800364a:	d109      	bne.n	8003660 <HAL_GPIO_EXTI_Callback+0x6c>
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	2b04      	cmp	r3, #4
 8003650:	d106      	bne.n	8003660 <HAL_GPIO_EXTI_Callback+0x6c>
	{
		dwt_setlocaldataptr(1);
 8003652:	2001      	movs	r0, #1
 8003654:	f7fe fca4 	bl	8001fa0 <dwt_setlocaldataptr>
		process_deca_irq(&UWB_device_array[1].port);
 8003658:	4822      	ldr	r0, [pc, #136]	@ (80036e4 <HAL_GPIO_EXTI_Callback+0xf0>)
 800365a:	f000 f84b 	bl	80036f4 <process_deca_irq>
 800365e:	e038      	b.n	80036d2 <HAL_GPIO_EXTI_Callback+0xde>
	}
	else if(GPIO_Pin == UWB3_IRQ_Pin && (GPIO_PORT_INDEX(UWB3_IRQ_GPIO_Port) == port_index))
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003666:	d109      	bne.n	800367c <HAL_GPIO_EXTI_Callback+0x88>
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b03      	cmp	r3, #3
 800366c:	d106      	bne.n	800367c <HAL_GPIO_EXTI_Callback+0x88>
	{
		dwt_setlocaldataptr(2);
 800366e:	2002      	movs	r0, #2
 8003670:	f7fe fc96 	bl	8001fa0 <dwt_setlocaldataptr>
		process_deca_irq(&UWB_device_array[2].port);
 8003674:	481c      	ldr	r0, [pc, #112]	@ (80036e8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003676:	f000 f83d 	bl	80036f4 <process_deca_irq>
 800367a:	e02a      	b.n	80036d2 <HAL_GPIO_EXTI_Callback+0xde>
	}
	else if(GPIO_Pin == UWB4_IRQ_Pin && (GPIO_PORT_INDEX(UWB4_IRQ_GPIO_Port) == port_index))
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	2b40      	cmp	r3, #64	@ 0x40
 8003680:	d109      	bne.n	8003696 <HAL_GPIO_EXTI_Callback+0xa2>
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d106      	bne.n	8003696 <HAL_GPIO_EXTI_Callback+0xa2>
	{
		dwt_setlocaldataptr(3);
 8003688:	2003      	movs	r0, #3
 800368a:	f7fe fc89 	bl	8001fa0 <dwt_setlocaldataptr>
		process_deca_irq(&UWB_device_array[3].port);
 800368e:	4817      	ldr	r0, [pc, #92]	@ (80036ec <HAL_GPIO_EXTI_Callback+0xf8>)
 8003690:	f000 f830 	bl	80036f4 <process_deca_irq>
 8003694:	e01d      	b.n	80036d2 <HAL_GPIO_EXTI_Callback+0xde>
	}
    else if((GPIO_Pin == UWB1_RESET_Pin && (GPIO_PORT_INDEX(UWB1_RESET_GPIO_Port) == port_index))
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d102      	bne.n	80036a2 <HAL_GPIO_EXTI_Callback+0xae>
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d013      	beq.n	80036ca <HAL_GPIO_EXTI_Callback+0xd6>
			|| (GPIO_Pin == UWB2_RESET_Pin && (GPIO_PORT_INDEX(UWB2_RESET_GPIO_Port) == port_index))
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036a8:	d102      	bne.n	80036b0 <HAL_GPIO_EXTI_Callback+0xbc>
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d00c      	beq.n	80036ca <HAL_GPIO_EXTI_Callback+0xd6>
				|| (GPIO_Pin == UWB3_RESET_Pin && (GPIO_PORT_INDEX(UWB3_RESET_GPIO_Port) == port_index))
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036b6:	d102      	bne.n	80036be <HAL_GPIO_EXTI_Callback+0xca>
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d005      	beq.n	80036ca <HAL_GPIO_EXTI_Callback+0xd6>
					|| (GPIO_Pin == UWB4_RESET_Pin && (GPIO_PORT_INDEX(UWB4_RESET_GPIO_Port) == port_index)))
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	2b80      	cmp	r3, #128	@ 0x80
 80036c2:	d106      	bne.n	80036d2 <HAL_GPIO_EXTI_Callback+0xde>
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d103      	bne.n	80036d2 <HAL_GPIO_EXTI_Callback+0xde>
    {
        signalResetDone = 1;
 80036ca:	4b09      	ldr	r3, [pc, #36]	@ (80036f0 <HAL_GPIO_EXTI_Callback+0xfc>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
    }
}
 80036d0:	e7ff      	b.n	80036d2 <HAL_GPIO_EXTI_Callback+0xde>
 80036d2:	bf00      	nop
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	58000400 	.word	0x58000400
 80036e0:	24000268 	.word	0x24000268
 80036e4:	240003d0 	.word	0x240003d0
 80036e8:	24000538 	.word	0x24000538
 80036ec:	240006a0 	.word	0x240006a0
 80036f0:	24000b24 	.word	0x24000b24

080036f4 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(DW1000_Port_t *antenna_port)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
    while(port_CheckEXT_IRQ(antenna_port) != 0)
 80036fc:	e003      	b.n	8003706 <process_deca_irq+0x12>
    {

        port_deca_isr(antenna_port);
 80036fe:	4b07      	ldr	r3, [pc, #28]	@ (800371c <process_deca_irq+0x28>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
    while(port_CheckEXT_IRQ(antenna_port) != 0)
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f834 	bl	8003774 <port_CheckEXT_IRQ>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f5      	bne.n	80036fe <process_deca_irq+0xa>

    } //while DW1000 IRQ line active
}
 8003712:	bf00      	nop
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	24000b28 	.word	0x24000b28

08003720 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(DW1000_Port_t *antenna_port)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(antenna_port->irq);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	b21b      	sxth	r3, r3
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff fe9e 	bl	8003470 <__NVIC_DisableIRQ>
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(DW1000_Port_t *antenna_port)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(antenna_port->irq);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	b21b      	sxth	r3, r3
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fe72 	bl	8003434 <__NVIC_EnableIRQ>
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(DW1000_Port_t *antenna_port)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
    return EXTI_GetITEnStatus(antenna_port->irq);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fedd 	bl	8003524 <EXTI_GetITEnStatus>
 800376a:	4603      	mov	r3, r0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(DW1000_Port_t *antenna_port)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(antenna_port->irq_port,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8c1b      	ldrh	r3, [r3, #32]
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f000 fc20 	bl	8003fcc <HAL_GPIO_ReadPin>
 800378c:	4603      	mov	r3, r0
                            antenna_port->irq_pin);
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <port_set_deca_isr>:
 * @param deca_isr function pointer to DW1000 interrupt handler to install
 *
 * @return none
 */
void port_set_deca_isr(port_deca_isr_t deca_isr, DW1000_Port_t *antenna_port)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
    /* Check DW1000 IRQ activation status. */
    ITStatus en = port_GetEXT_IRQStatus(antenna_port);
 80037a2:	6838      	ldr	r0, [r7, #0]
 80037a4:	f7ff ffd8 	bl	8003758 <port_GetEXT_IRQStatus>
 80037a8:	4603      	mov	r3, r0
 80037aa:	73fb      	strb	r3, [r7, #15]

    /* If needed, deactivate DW1000 IRQ during the installation of the new handler. */
    if(en)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <port_set_deca_isr+0x20>
    {
        port_DisableEXT_IRQ(antenna_port);
 80037b2:	6838      	ldr	r0, [r7, #0]
 80037b4:	f7ff ffb4 	bl	8003720 <port_DisableEXT_IRQ>
    }
    port_deca_isr = deca_isr;
 80037b8:	4a06      	ldr	r2, [pc, #24]	@ (80037d4 <port_set_deca_isr+0x3c>)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6013      	str	r3, [r2, #0]
    if(en)
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <port_set_deca_isr+0x32>
    {
        port_EnableEXT_IRQ(antenna_port);
 80037c4:	6838      	ldr	r0, [r7, #0]
 80037c6:	f7ff ffb9 	bl	800373c <port_EnableEXT_IRQ>
    }
}
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	24000b28 	.word	0x24000b28

080037d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037de:	2003      	movs	r0, #3
 80037e0:	f000 f98c 	bl	8003afc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037e4:	f001 fbbc 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b15      	ldr	r3, [pc, #84]	@ (8003840 <HAL_Init+0x68>)
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	4913      	ldr	r1, [pc, #76]	@ (8003844 <HAL_Init+0x6c>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003800:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003802:	4b0f      	ldr	r3, [pc, #60]	@ (8003840 <HAL_Init+0x68>)
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	4a0e      	ldr	r2, [pc, #56]	@ (8003844 <HAL_Init+0x6c>)
 800380c:	5cd3      	ldrb	r3, [r2, r3]
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
 8003818:	4a0b      	ldr	r2, [pc, #44]	@ (8003848 <HAL_Init+0x70>)
 800381a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800381c:	4a0b      	ldr	r2, [pc, #44]	@ (800384c <HAL_Init+0x74>)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003822:	200f      	movs	r0, #15
 8003824:	f000 f814 	bl	8003850 <HAL_InitTick>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e002      	b.n	8003838 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003832:	f7fd fc65 	bl	8001100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	58024400 	.word	0x58024400
 8003844:	0800c880 	.word	0x0800c880
 8003848:	24000004 	.word	0x24000004
 800384c:	24000000 	.word	0x24000000

08003850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003858:	4b15      	ldr	r3, [pc, #84]	@ (80038b0 <HAL_InitTick+0x60>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e021      	b.n	80038a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003864:	4b13      	ldr	r3, [pc, #76]	@ (80038b4 <HAL_InitTick+0x64>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4b11      	ldr	r3, [pc, #68]	@ (80038b0 <HAL_InitTick+0x60>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	4619      	mov	r1, r3
 800386e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003872:	fbb3 f3f1 	udiv	r3, r3, r1
 8003876:	fbb2 f3f3 	udiv	r3, r2, r3
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f971 	bl	8003b62 <HAL_SYSTICK_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e00e      	b.n	80038a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b0f      	cmp	r3, #15
 800388e:	d80a      	bhi.n	80038a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003890:	2200      	movs	r2, #0
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	f04f 30ff 	mov.w	r0, #4294967295
 8003898:	f000 f93b 	bl	8003b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800389c:	4a06      	ldr	r2, [pc, #24]	@ (80038b8 <HAL_InitTick+0x68>)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e000      	b.n	80038a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	2400001c 	.word	0x2400001c
 80038b4:	24000000 	.word	0x24000000
 80038b8:	24000018 	.word	0x24000018

080038bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038c0:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <HAL_IncTick+0x20>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_IncTick+0x24>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4413      	add	r3, r2
 80038cc:	4a04      	ldr	r2, [pc, #16]	@ (80038e0 <HAL_IncTick+0x24>)
 80038ce:	6013      	str	r3, [r2, #0]
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	2400001c 	.word	0x2400001c
 80038e0:	24000b2c 	.word	0x24000b2c

080038e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return uwTick;
 80038e8:	4b03      	ldr	r3, [pc, #12]	@ (80038f8 <HAL_GetTick+0x14>)
 80038ea:	681b      	ldr	r3, [r3, #0]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	24000b2c 	.word	0x24000b2c

080038fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003904:	f7ff ffee 	bl	80038e4 <HAL_GetTick>
 8003908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d005      	beq.n	8003922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003916:	4b0a      	ldr	r3, [pc, #40]	@ (8003940 <HAL_Delay+0x44>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4413      	add	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003922:	bf00      	nop
 8003924:	f7ff ffde 	bl	80038e4 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	429a      	cmp	r2, r3
 8003932:	d8f7      	bhi.n	8003924 <HAL_Delay+0x28>
  {
  }
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	2400001c 	.word	0x2400001c

08003944 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003948:	4b03      	ldr	r3, [pc, #12]	@ (8003958 <HAL_GetREVID+0x14>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	0c1b      	lsrs	r3, r3, #16
}
 800394e:	4618      	mov	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	5c001000 	.word	0x5c001000

0800395c <__NVIC_SetPriorityGrouping>:
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800396c:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <__NVIC_SetPriorityGrouping+0x40>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003978:	4013      	ands	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003984:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003986:	4313      	orrs	r3, r2
 8003988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800398a:	4a04      	ldr	r2, [pc, #16]	@ (800399c <__NVIC_SetPriorityGrouping+0x40>)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	60d3      	str	r3, [r2, #12]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000ed00 	.word	0xe000ed00
 80039a0:	05fa0000 	.word	0x05fa0000

080039a4 <__NVIC_GetPriorityGrouping>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a8:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <__NVIC_GetPriorityGrouping+0x18>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	0a1b      	lsrs	r3, r3, #8
 80039ae:	f003 0307 	and.w	r3, r3, #7
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <__NVIC_EnableIRQ>:
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	db0b      	blt.n	80039ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	f003 021f 	and.w	r2, r3, #31
 80039d8:	4907      	ldr	r1, [pc, #28]	@ (80039f8 <__NVIC_EnableIRQ+0x38>)
 80039da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2001      	movs	r0, #1
 80039e2:	fa00 f202 	lsl.w	r2, r0, r2
 80039e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	e000e100 	.word	0xe000e100

080039fc <__NVIC_SetPriority>:
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	db0a      	blt.n	8003a26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	490c      	ldr	r1, [pc, #48]	@ (8003a48 <__NVIC_SetPriority+0x4c>)
 8003a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a1a:	0112      	lsls	r2, r2, #4
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	440b      	add	r3, r1
 8003a20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a24:	e00a      	b.n	8003a3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	4908      	ldr	r1, [pc, #32]	@ (8003a4c <__NVIC_SetPriority+0x50>)
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	3b04      	subs	r3, #4
 8003a34:	0112      	lsls	r2, r2, #4
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	440b      	add	r3, r1
 8003a3a:	761a      	strb	r2, [r3, #24]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000e100 	.word	0xe000e100
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <NVIC_EncodePriority>:
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	@ 0x24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f1c3 0307 	rsb	r3, r3, #7
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	bf28      	it	cs
 8003a6e:	2304      	movcs	r3, #4
 8003a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3304      	adds	r3, #4
 8003a76:	2b06      	cmp	r3, #6
 8003a78:	d902      	bls.n	8003a80 <NVIC_EncodePriority+0x30>
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3b03      	subs	r3, #3
 8003a7e:	e000      	b.n	8003a82 <NVIC_EncodePriority+0x32>
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a84:	f04f 32ff 	mov.w	r2, #4294967295
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	401a      	ands	r2, r3
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a98:	f04f 31ff 	mov.w	r1, #4294967295
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	43d9      	mvns	r1, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa8:	4313      	orrs	r3, r2
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3724      	adds	r7, #36	@ 0x24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ac8:	d301      	bcc.n	8003ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aca:	2301      	movs	r3, #1
 8003acc:	e00f      	b.n	8003aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ace:	4a0a      	ldr	r2, [pc, #40]	@ (8003af8 <SysTick_Config+0x40>)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ad6:	210f      	movs	r1, #15
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8003adc:	f7ff ff8e 	bl	80039fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae0:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <SysTick_Config+0x40>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ae6:	4b04      	ldr	r3, [pc, #16]	@ (8003af8 <SysTick_Config+0x40>)
 8003ae8:	2207      	movs	r2, #7
 8003aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	e000e010 	.word	0xe000e010

08003afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff ff29 	bl	800395c <__NVIC_SetPriorityGrouping>
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	4603      	mov	r3, r0
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
 8003b1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b20:	f7ff ff40 	bl	80039a4 <__NVIC_GetPriorityGrouping>
 8003b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	6978      	ldr	r0, [r7, #20]
 8003b2c:	f7ff ff90 	bl	8003a50 <NVIC_EncodePriority>
 8003b30:	4602      	mov	r2, r0
 8003b32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b36:	4611      	mov	r1, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff5f 	bl	80039fc <__NVIC_SetPriority>
}
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff ff33 	bl	80039c0 <__NVIC_EnableIRQ>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff ffa4 	bl	8003ab8 <SysTick_Config>
 8003b70:	4603      	mov	r3, r0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003b80:	f3bf 8f5f 	dmb	sy
}
 8003b84:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003b86:	4b07      	ldr	r3, [pc, #28]	@ (8003ba4 <HAL_MPU_Disable+0x28>)
 8003b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8a:	4a06      	ldr	r2, [pc, #24]	@ (8003ba4 <HAL_MPU_Disable+0x28>)
 8003b8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b90:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003b92:	4b05      	ldr	r3, [pc, #20]	@ (8003ba8 <HAL_MPU_Disable+0x2c>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	605a      	str	r2, [r3, #4]
}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	e000ed00 	.word	0xe000ed00
 8003ba8:	e000ed90 	.word	0xe000ed90

08003bac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8003be4 <HAL_MPU_Enable+0x38>)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003be8 <HAL_MPU_Enable+0x3c>)
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	4a09      	ldr	r2, [pc, #36]	@ (8003be8 <HAL_MPU_Enable+0x3c>)
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003bca:	f3bf 8f4f 	dsb	sy
}
 8003bce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bd0:	f3bf 8f6f 	isb	sy
}
 8003bd4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000ed90 	.word	0xe000ed90
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	785a      	ldrb	r2, [r3, #1]
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c68 <HAL_MPU_ConfigRegion+0x7c>)
 8003bfa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c68 <HAL_MPU_ConfigRegion+0x7c>)
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	4a19      	ldr	r2, [pc, #100]	@ (8003c68 <HAL_MPU_ConfigRegion+0x7c>)
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003c08:	4a17      	ldr	r2, [pc, #92]	@ (8003c68 <HAL_MPU_ConfigRegion+0x7c>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	7b1b      	ldrb	r3, [r3, #12]
 8003c14:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	7adb      	ldrb	r3, [r3, #11]
 8003c1a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	7a9b      	ldrb	r3, [r3, #10]
 8003c22:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7b5b      	ldrb	r3, [r3, #13]
 8003c2a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003c2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	7b9b      	ldrb	r3, [r3, #14]
 8003c32:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	7bdb      	ldrb	r3, [r3, #15]
 8003c3a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003c3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	7a5b      	ldrb	r3, [r3, #9]
 8003c42:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003c44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	7a1b      	ldrb	r3, [r3, #8]
 8003c4a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003c4c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	7812      	ldrb	r2, [r2, #0]
 8003c52:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c54:	4a04      	ldr	r2, [pc, #16]	@ (8003c68 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c56:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c58:	6113      	str	r3, [r2, #16]
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	e000ed90 	.word	0xe000ed90

08003c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b089      	sub	sp, #36	@ 0x24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003c7a:	4b89      	ldr	r3, [pc, #548]	@ (8003ea0 <HAL_GPIO_Init+0x234>)
 8003c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c7e:	e194      	b.n	8003faa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	2101      	movs	r1, #1
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8186 	beq.w	8003fa4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d005      	beq.n	8003cb0 <HAL_GPIO_Init+0x44>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d130      	bne.n	8003d12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	2203      	movs	r2, #3
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	f003 0201 	and.w	r2, r3, #1
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d017      	beq.n	8003d4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d123      	bne.n	8003da2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	08da      	lsrs	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3208      	adds	r2, #8
 8003d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	220f      	movs	r2, #15
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43db      	mvns	r3, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	08da      	lsrs	r2, r3, #3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3208      	adds	r2, #8
 8003d9c:	69b9      	ldr	r1, [r7, #24]
 8003d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	2203      	movs	r2, #3
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f003 0203 	and.w	r2, r3, #3
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80e0 	beq.w	8003fa4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de4:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea4 <HAL_GPIO_Init+0x238>)
 8003de6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003dea:	4a2e      	ldr	r2, [pc, #184]	@ (8003ea4 <HAL_GPIO_Init+0x238>)
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003df4:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea4 <HAL_GPIO_Init+0x238>)
 8003df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e02:	4a29      	ldr	r2, [pc, #164]	@ (8003ea8 <HAL_GPIO_Init+0x23c>)
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	3302      	adds	r3, #2
 8003e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	220f      	movs	r2, #15
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4013      	ands	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a20      	ldr	r2, [pc, #128]	@ (8003eac <HAL_GPIO_Init+0x240>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d052      	beq.n	8003ed4 <HAL_GPIO_Init+0x268>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb0 <HAL_GPIO_Init+0x244>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d031      	beq.n	8003e9a <HAL_GPIO_Init+0x22e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a1e      	ldr	r2, [pc, #120]	@ (8003eb4 <HAL_GPIO_Init+0x248>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d02b      	beq.n	8003e96 <HAL_GPIO_Init+0x22a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb8 <HAL_GPIO_Init+0x24c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d025      	beq.n	8003e92 <HAL_GPIO_Init+0x226>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a1c      	ldr	r2, [pc, #112]	@ (8003ebc <HAL_GPIO_Init+0x250>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01f      	beq.n	8003e8e <HAL_GPIO_Init+0x222>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a1b      	ldr	r2, [pc, #108]	@ (8003ec0 <HAL_GPIO_Init+0x254>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d019      	beq.n	8003e8a <HAL_GPIO_Init+0x21e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a1a      	ldr	r2, [pc, #104]	@ (8003ec4 <HAL_GPIO_Init+0x258>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d013      	beq.n	8003e86 <HAL_GPIO_Init+0x21a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a19      	ldr	r2, [pc, #100]	@ (8003ec8 <HAL_GPIO_Init+0x25c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00d      	beq.n	8003e82 <HAL_GPIO_Init+0x216>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a18      	ldr	r2, [pc, #96]	@ (8003ecc <HAL_GPIO_Init+0x260>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <HAL_GPIO_Init+0x212>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a17      	ldr	r2, [pc, #92]	@ (8003ed0 <HAL_GPIO_Init+0x264>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <HAL_GPIO_Init+0x20e>
 8003e76:	2309      	movs	r3, #9
 8003e78:	e02d      	b.n	8003ed6 <HAL_GPIO_Init+0x26a>
 8003e7a:	230a      	movs	r3, #10
 8003e7c:	e02b      	b.n	8003ed6 <HAL_GPIO_Init+0x26a>
 8003e7e:	2308      	movs	r3, #8
 8003e80:	e029      	b.n	8003ed6 <HAL_GPIO_Init+0x26a>
 8003e82:	2307      	movs	r3, #7
 8003e84:	e027      	b.n	8003ed6 <HAL_GPIO_Init+0x26a>
 8003e86:	2306      	movs	r3, #6
 8003e88:	e025      	b.n	8003ed6 <HAL_GPIO_Init+0x26a>
 8003e8a:	2305      	movs	r3, #5
 8003e8c:	e023      	b.n	8003ed6 <HAL_GPIO_Init+0x26a>
 8003e8e:	2304      	movs	r3, #4
 8003e90:	e021      	b.n	8003ed6 <HAL_GPIO_Init+0x26a>
 8003e92:	2303      	movs	r3, #3
 8003e94:	e01f      	b.n	8003ed6 <HAL_GPIO_Init+0x26a>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e01d      	b.n	8003ed6 <HAL_GPIO_Init+0x26a>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e01b      	b.n	8003ed6 <HAL_GPIO_Init+0x26a>
 8003e9e:	bf00      	nop
 8003ea0:	58000080 	.word	0x58000080
 8003ea4:	58024400 	.word	0x58024400
 8003ea8:	58000400 	.word	0x58000400
 8003eac:	58020000 	.word	0x58020000
 8003eb0:	58020400 	.word	0x58020400
 8003eb4:	58020800 	.word	0x58020800
 8003eb8:	58020c00 	.word	0x58020c00
 8003ebc:	58021000 	.word	0x58021000
 8003ec0:	58021400 	.word	0x58021400
 8003ec4:	58021800 	.word	0x58021800
 8003ec8:	58021c00 	.word	0x58021c00
 8003ecc:	58022000 	.word	0x58022000
 8003ed0:	58022400 	.word	0x58022400
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	f002 0203 	and.w	r2, r2, #3
 8003edc:	0092      	lsls	r2, r2, #2
 8003ede:	4093      	lsls	r3, r2
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ee6:	4938      	ldr	r1, [pc, #224]	@ (8003fc8 <HAL_GPIO_Init+0x35c>)
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	089b      	lsrs	r3, r3, #2
 8003eec:	3302      	adds	r3, #2
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003f1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003f48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4013      	ands	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f47f ae63 	bne.w	8003c80 <HAL_GPIO_Init+0x14>
  }
}
 8003fba:	bf00      	nop
 8003fbc:	bf00      	nop
 8003fbe:	3724      	adds	r7, #36	@ 0x24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	58000400 	.word	0x58000400

08003fcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	887b      	ldrh	r3, [r7, #2]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
 8003fe8:	e001      	b.n	8003fee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fea:	2300      	movs	r3, #0
 8003fec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	807b      	strh	r3, [r7, #2]
 8004008:	4613      	mov	r3, r2
 800400a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800400c:	787b      	ldrb	r3, [r7, #1]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004012:	887a      	ldrh	r2, [r7, #2]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004018:	e003      	b.n	8004022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800401a:	887b      	ldrh	r3, [r7, #2]
 800401c:	041a      	lsls	r2, r3, #16
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	619a      	str	r2, [r3, #24]
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800403c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004048:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff facd 	bl	80035f4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e08b      	b.n	800418e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fc fd24 	bl	8000ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2224      	movs	r2, #36	@ 0x24
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80040b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d107      	bne.n	80040de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	e006      	b.n	80040ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80040ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d108      	bne.n	8004106 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004102:	605a      	str	r2, [r3, #4]
 8004104:	e007      	b.n	8004116 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004114:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6859      	ldr	r1, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4b1d      	ldr	r3, [pc, #116]	@ (8004198 <HAL_I2C_Init+0x134>)
 8004122:	430b      	orrs	r3, r1
 8004124:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004134:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	02008000 	.word	0x02008000

0800419c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d138      	bne.n	8004224 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041bc:	2302      	movs	r3, #2
 80041be:	e032      	b.n	8004226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2224      	movs	r2, #36	@ 0x24
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6819      	ldr	r1, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	e000      	b.n	8004226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004224:	2302      	movs	r3, #2
  }
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004232:	b480      	push	{r7}
 8004234:	b085      	sub	sp, #20
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b20      	cmp	r3, #32
 8004246:	d139      	bne.n	80042bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004252:	2302      	movs	r3, #2
 8004254:	e033      	b.n	80042be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2224      	movs	r2, #36	@ 0x24
 8004262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0201 	bic.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004284:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e000      	b.n	80042be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042bc:	2302      	movs	r3, #2
  }
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80042d4:	4b19      	ldr	r3, [pc, #100]	@ (800433c <HAL_PWREx_ConfigSupply+0x70>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d00a      	beq.n	80042f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042e0:	4b16      	ldr	r3, [pc, #88]	@ (800433c <HAL_PWREx_ConfigSupply+0x70>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d001      	beq.n	80042f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e01f      	b.n	8004332 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e01d      	b.n	8004332 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80042f6:	4b11      	ldr	r3, [pc, #68]	@ (800433c <HAL_PWREx_ConfigSupply+0x70>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f023 0207 	bic.w	r2, r3, #7
 80042fe:	490f      	ldr	r1, [pc, #60]	@ (800433c <HAL_PWREx_ConfigSupply+0x70>)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4313      	orrs	r3, r2
 8004304:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004306:	f7ff faed 	bl	80038e4 <HAL_GetTick>
 800430a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800430c:	e009      	b.n	8004322 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800430e:	f7ff fae9 	bl	80038e4 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800431c:	d901      	bls.n	8004322 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e007      	b.n	8004332 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004322:	4b06      	ldr	r3, [pc, #24]	@ (800433c <HAL_PWREx_ConfigSupply+0x70>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800432a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800432e:	d1ee      	bne.n	800430e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	58024800 	.word	0x58024800

08004340 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08c      	sub	sp, #48	@ 0x30
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f000 bc48 	b.w	8004be4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8088 	beq.w	8004472 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004362:	4b99      	ldr	r3, [pc, #612]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800436a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800436c:	4b96      	ldr	r3, [pc, #600]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 800436e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004370:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004374:	2b10      	cmp	r3, #16
 8004376:	d007      	beq.n	8004388 <HAL_RCC_OscConfig+0x48>
 8004378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437a:	2b18      	cmp	r3, #24
 800437c:	d111      	bne.n	80043a2 <HAL_RCC_OscConfig+0x62>
 800437e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d10c      	bne.n	80043a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004388:	4b8f      	ldr	r3, [pc, #572]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d06d      	beq.n	8004470 <HAL_RCC_OscConfig+0x130>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d169      	bne.n	8004470 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f000 bc21 	b.w	8004be4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043aa:	d106      	bne.n	80043ba <HAL_RCC_OscConfig+0x7a>
 80043ac:	4b86      	ldr	r3, [pc, #536]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a85      	ldr	r2, [pc, #532]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	e02e      	b.n	8004418 <HAL_RCC_OscConfig+0xd8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0x9c>
 80043c2:	4b81      	ldr	r3, [pc, #516]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a80      	ldr	r2, [pc, #512]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	4b7e      	ldr	r3, [pc, #504]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a7d      	ldr	r2, [pc, #500]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e01d      	b.n	8004418 <HAL_RCC_OscConfig+0xd8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0xc0>
 80043e6:	4b78      	ldr	r3, [pc, #480]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a77      	ldr	r2, [pc, #476]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	4b75      	ldr	r3, [pc, #468]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a74      	ldr	r2, [pc, #464]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	e00b      	b.n	8004418 <HAL_RCC_OscConfig+0xd8>
 8004400:	4b71      	ldr	r3, [pc, #452]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a70      	ldr	r2, [pc, #448]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	4b6e      	ldr	r3, [pc, #440]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a6d      	ldr	r2, [pc, #436]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d013      	beq.n	8004448 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7ff fa60 	bl	80038e4 <HAL_GetTick>
 8004424:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004428:	f7ff fa5c 	bl	80038e4 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	@ 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e3d4      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800443a:	4b63      	ldr	r3, [pc, #396]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0xe8>
 8004446:	e014      	b.n	8004472 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7ff fa4c 	bl	80038e4 <HAL_GetTick>
 800444c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004450:	f7ff fa48 	bl	80038e4 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b64      	cmp	r3, #100	@ 0x64
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e3c0      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004462:	4b59      	ldr	r3, [pc, #356]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x110>
 800446e:	e000      	b.n	8004472 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 80ca 	beq.w	8004614 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004480:	4b51      	ldr	r3, [pc, #324]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004488:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800448a:	4b4f      	ldr	r3, [pc, #316]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 800448c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <HAL_RCC_OscConfig+0x166>
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	2b18      	cmp	r3, #24
 800449a:	d156      	bne.n	800454a <HAL_RCC_OscConfig+0x20a>
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d151      	bne.n	800454a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a6:	4b48      	ldr	r3, [pc, #288]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d005      	beq.n	80044be <HAL_RCC_OscConfig+0x17e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e392      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044be:	4b42      	ldr	r3, [pc, #264]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 0219 	bic.w	r2, r3, #25
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	493f      	ldr	r1, [pc, #252]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7ff fa08 	bl	80038e4 <HAL_GetTick>
 80044d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d8:	f7ff fa04 	bl	80038e4 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e37c      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ea:	4b37      	ldr	r3, [pc, #220]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f6:	f7ff fa25 	bl	8003944 <HAL_GetREVID>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004500:	4293      	cmp	r3, r2
 8004502:	d817      	bhi.n	8004534 <HAL_RCC_OscConfig+0x1f4>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	2b40      	cmp	r3, #64	@ 0x40
 800450a:	d108      	bne.n	800451e <HAL_RCC_OscConfig+0x1de>
 800450c:	4b2e      	ldr	r3, [pc, #184]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004514:	4a2c      	ldr	r2, [pc, #176]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800451a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800451c:	e07a      	b.n	8004614 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451e:	4b2a      	ldr	r3, [pc, #168]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	031b      	lsls	r3, r3, #12
 800452c:	4926      	ldr	r1, [pc, #152]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 800452e:	4313      	orrs	r3, r2
 8004530:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004532:	e06f      	b.n	8004614 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004534:	4b24      	ldr	r3, [pc, #144]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	4921      	ldr	r1, [pc, #132]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004544:	4313      	orrs	r3, r2
 8004546:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004548:	e064      	b.n	8004614 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d047      	beq.n	80045e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004552:	4b1d      	ldr	r3, [pc, #116]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 0219 	bic.w	r2, r3, #25
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	491a      	ldr	r1, [pc, #104]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004560:	4313      	orrs	r3, r2
 8004562:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7ff f9be 	bl	80038e4 <HAL_GetTick>
 8004568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800456c:	f7ff f9ba 	bl	80038e4 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e332      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800457e:	4b12      	ldr	r3, [pc, #72]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458a:	f7ff f9db 	bl	8003944 <HAL_GetREVID>
 800458e:	4603      	mov	r3, r0
 8004590:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004594:	4293      	cmp	r3, r2
 8004596:	d819      	bhi.n	80045cc <HAL_RCC_OscConfig+0x28c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	2b40      	cmp	r3, #64	@ 0x40
 800459e:	d108      	bne.n	80045b2 <HAL_RCC_OscConfig+0x272>
 80045a0:	4b09      	ldr	r3, [pc, #36]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80045a8:	4a07      	ldr	r2, [pc, #28]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80045aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ae:	6053      	str	r3, [r2, #4]
 80045b0:	e030      	b.n	8004614 <HAL_RCC_OscConfig+0x2d4>
 80045b2:	4b05      	ldr	r3, [pc, #20]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	031b      	lsls	r3, r3, #12
 80045c0:	4901      	ldr	r1, [pc, #4]	@ (80045c8 <HAL_RCC_OscConfig+0x288>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	604b      	str	r3, [r1, #4]
 80045c6:	e025      	b.n	8004614 <HAL_RCC_OscConfig+0x2d4>
 80045c8:	58024400 	.word	0x58024400
 80045cc:	4b9a      	ldr	r3, [pc, #616]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	4997      	ldr	r1, [pc, #604]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
 80045e0:	e018      	b.n	8004614 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e2:	4b95      	ldr	r3, [pc, #596]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a94      	ldr	r2, [pc, #592]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80045e8:	f023 0301 	bic.w	r3, r3, #1
 80045ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ee:	f7ff f979 	bl	80038e4 <HAL_GetTick>
 80045f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f6:	f7ff f975 	bl	80038e4 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e2ed      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004608:	4b8b      	ldr	r3, [pc, #556]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80a9 	beq.w	8004774 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004622:	4b85      	ldr	r3, [pc, #532]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800462a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800462c:	4b82      	ldr	r3, [pc, #520]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800462e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004630:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d007      	beq.n	8004648 <HAL_RCC_OscConfig+0x308>
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b18      	cmp	r3, #24
 800463c:	d13a      	bne.n	80046b4 <HAL_RCC_OscConfig+0x374>
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	2b01      	cmp	r3, #1
 8004646:	d135      	bne.n	80046b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004648:	4b7b      	ldr	r3, [pc, #492]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_RCC_OscConfig+0x320>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	2b80      	cmp	r3, #128	@ 0x80
 800465a:	d001      	beq.n	8004660 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e2c1      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004660:	f7ff f970 	bl	8003944 <HAL_GetREVID>
 8004664:	4603      	mov	r3, r0
 8004666:	f241 0203 	movw	r2, #4099	@ 0x1003
 800466a:	4293      	cmp	r3, r2
 800466c:	d817      	bhi.n	800469e <HAL_RCC_OscConfig+0x35e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	2b20      	cmp	r3, #32
 8004674:	d108      	bne.n	8004688 <HAL_RCC_OscConfig+0x348>
 8004676:	4b70      	ldr	r3, [pc, #448]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800467e:	4a6e      	ldr	r2, [pc, #440]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004680:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004684:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004686:	e075      	b.n	8004774 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004688:	4b6b      	ldr	r3, [pc, #428]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	069b      	lsls	r3, r3, #26
 8004696:	4968      	ldr	r1, [pc, #416]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800469c:	e06a      	b.n	8004774 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800469e:	4b66      	ldr	r3, [pc, #408]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	061b      	lsls	r3, r3, #24
 80046ac:	4962      	ldr	r1, [pc, #392]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046b2:	e05f      	b.n	8004774 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d042      	beq.n	8004742 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80046bc:	4b5e      	ldr	r3, [pc, #376]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a5d      	ldr	r2, [pc, #372]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80046c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c8:	f7ff f90c 	bl	80038e4 <HAL_GetTick>
 80046cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046d0:	f7ff f908 	bl	80038e4 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e280      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046e2:	4b55      	ldr	r3, [pc, #340]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046ee:	f7ff f929 	bl	8003944 <HAL_GetREVID>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d817      	bhi.n	800472c <HAL_RCC_OscConfig+0x3ec>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	2b20      	cmp	r3, #32
 8004702:	d108      	bne.n	8004716 <HAL_RCC_OscConfig+0x3d6>
 8004704:	4b4c      	ldr	r3, [pc, #304]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800470c:	4a4a      	ldr	r2, [pc, #296]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800470e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004712:	6053      	str	r3, [r2, #4]
 8004714:	e02e      	b.n	8004774 <HAL_RCC_OscConfig+0x434>
 8004716:	4b48      	ldr	r3, [pc, #288]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	069b      	lsls	r3, r3, #26
 8004724:	4944      	ldr	r1, [pc, #272]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004726:	4313      	orrs	r3, r2
 8004728:	604b      	str	r3, [r1, #4]
 800472a:	e023      	b.n	8004774 <HAL_RCC_OscConfig+0x434>
 800472c:	4b42      	ldr	r3, [pc, #264]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	061b      	lsls	r3, r3, #24
 800473a:	493f      	ldr	r1, [pc, #252]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800473c:	4313      	orrs	r3, r2
 800473e:	60cb      	str	r3, [r1, #12]
 8004740:	e018      	b.n	8004774 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004742:	4b3d      	ldr	r3, [pc, #244]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a3c      	ldr	r2, [pc, #240]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004748:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800474c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474e:	f7ff f8c9 	bl	80038e4 <HAL_GetTick>
 8004752:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004756:	f7ff f8c5 	bl	80038e4 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e23d      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004768:	4b33      	ldr	r3, [pc, #204]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f0      	bne.n	8004756 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d036      	beq.n	80047ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d019      	beq.n	80047bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004788:	4b2b      	ldr	r3, [pc, #172]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800478a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800478c:	4a2a      	ldr	r2, [pc, #168]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004794:	f7ff f8a6 	bl	80038e4 <HAL_GetTick>
 8004798:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800479c:	f7ff f8a2 	bl	80038e4 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e21a      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047ae:	4b22      	ldr	r3, [pc, #136]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80047b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x45c>
 80047ba:	e018      	b.n	80047ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80047be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c8:	f7ff f88c 	bl	80038e4 <HAL_GetTick>
 80047cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d0:	f7ff f888 	bl	80038e4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e200      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047e2:	4b15      	ldr	r3, [pc, #84]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 80047e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d039      	beq.n	800486e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01c      	beq.n	800483c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004802:	4b0d      	ldr	r3, [pc, #52]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a0c      	ldr	r2, [pc, #48]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 8004808:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800480c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800480e:	f7ff f869 	bl	80038e4 <HAL_GetTick>
 8004812:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004816:	f7ff f865 	bl	80038e4 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e1dd      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004828:	4b03      	ldr	r3, [pc, #12]	@ (8004838 <HAL_RCC_OscConfig+0x4f8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x4d6>
 8004834:	e01b      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
 8004836:	bf00      	nop
 8004838:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800483c:	4b9b      	ldr	r3, [pc, #620]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a9a      	ldr	r2, [pc, #616]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004842:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004846:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004848:	f7ff f84c 	bl	80038e4 <HAL_GetTick>
 800484c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004850:	f7ff f848 	bl	80038e4 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e1c0      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004862:	4b92      	ldr	r3, [pc, #584]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8081 	beq.w	800497e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800487c:	4b8c      	ldr	r3, [pc, #560]	@ (8004ab0 <HAL_RCC_OscConfig+0x770>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a8b      	ldr	r2, [pc, #556]	@ (8004ab0 <HAL_RCC_OscConfig+0x770>)
 8004882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004886:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004888:	f7ff f82c 	bl	80038e4 <HAL_GetTick>
 800488c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004890:	f7ff f828 	bl	80038e4 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	@ 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e1a0      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048a2:	4b83      	ldr	r3, [pc, #524]	@ (8004ab0 <HAL_RCC_OscConfig+0x770>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d106      	bne.n	80048c4 <HAL_RCC_OscConfig+0x584>
 80048b6:	4b7d      	ldr	r3, [pc, #500]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ba:	4a7c      	ldr	r2, [pc, #496]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c2:	e02d      	b.n	8004920 <HAL_RCC_OscConfig+0x5e0>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10c      	bne.n	80048e6 <HAL_RCC_OscConfig+0x5a6>
 80048cc:	4b77      	ldr	r3, [pc, #476]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d0:	4a76      	ldr	r2, [pc, #472]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048d8:	4b74      	ldr	r3, [pc, #464]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048dc:	4a73      	ldr	r2, [pc, #460]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048de:	f023 0304 	bic.w	r3, r3, #4
 80048e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80048e4:	e01c      	b.n	8004920 <HAL_RCC_OscConfig+0x5e0>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b05      	cmp	r3, #5
 80048ec:	d10c      	bne.n	8004908 <HAL_RCC_OscConfig+0x5c8>
 80048ee:	4b6f      	ldr	r3, [pc, #444]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f2:	4a6e      	ldr	r2, [pc, #440]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048f4:	f043 0304 	orr.w	r3, r3, #4
 80048f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048fa:	4b6c      	ldr	r3, [pc, #432]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fe:	4a6b      	ldr	r2, [pc, #428]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	6713      	str	r3, [r2, #112]	@ 0x70
 8004906:	e00b      	b.n	8004920 <HAL_RCC_OscConfig+0x5e0>
 8004908:	4b68      	ldr	r3, [pc, #416]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 800490a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490c:	4a67      	ldr	r2, [pc, #412]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 800490e:	f023 0301 	bic.w	r3, r3, #1
 8004912:	6713      	str	r3, [r2, #112]	@ 0x70
 8004914:	4b65      	ldr	r3, [pc, #404]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004918:	4a64      	ldr	r2, [pc, #400]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 800491a:	f023 0304 	bic.w	r3, r3, #4
 800491e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d015      	beq.n	8004954 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004928:	f7fe ffdc 	bl	80038e4 <HAL_GetTick>
 800492c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800492e:	e00a      	b.n	8004946 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004930:	f7fe ffd8 	bl	80038e4 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e14e      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004946:	4b59      	ldr	r3, [pc, #356]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0ee      	beq.n	8004930 <HAL_RCC_OscConfig+0x5f0>
 8004952:	e014      	b.n	800497e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004954:	f7fe ffc6 	bl	80038e4 <HAL_GetTick>
 8004958:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800495a:	e00a      	b.n	8004972 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495c:	f7fe ffc2 	bl	80038e4 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e138      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004972:	4b4e      	ldr	r3, [pc, #312]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1ee      	bne.n	800495c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 812d 	beq.w	8004be2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004988:	4b48      	ldr	r3, [pc, #288]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004990:	2b18      	cmp	r3, #24
 8004992:	f000 80bd 	beq.w	8004b10 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	2b02      	cmp	r3, #2
 800499c:	f040 809e 	bne.w	8004adc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a0:	4b42      	ldr	r3, [pc, #264]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a41      	ldr	r2, [pc, #260]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 80049a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fe ff9a 	bl	80038e4 <HAL_GetTick>
 80049b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b4:	f7fe ff96 	bl	80038e4 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e10e      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049c6:	4b39      	ldr	r3, [pc, #228]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049d2:	4b36      	ldr	r3, [pc, #216]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 80049d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049d6:	4b37      	ldr	r3, [pc, #220]	@ (8004ab4 <HAL_RCC_OscConfig+0x774>)
 80049d8:	4013      	ands	r3, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049e2:	0112      	lsls	r2, r2, #4
 80049e4:	430a      	orrs	r2, r1
 80049e6:	4931      	ldr	r1, [pc, #196]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f0:	3b01      	subs	r3, #1
 80049f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049fa:	3b01      	subs	r3, #1
 80049fc:	025b      	lsls	r3, r3, #9
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a06:	3b01      	subs	r3, #1
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a14:	3b01      	subs	r3, #1
 8004a16:	061b      	lsls	r3, r3, #24
 8004a18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a1c:	4923      	ldr	r1, [pc, #140]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004a22:	4b22      	ldr	r3, [pc, #136]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a26:	4a21      	ldr	r2, [pc, #132]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a32:	4b21      	ldr	r3, [pc, #132]	@ (8004ab8 <HAL_RCC_OscConfig+0x778>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a3a:	00d2      	lsls	r2, r2, #3
 8004a3c:	491b      	ldr	r1, [pc, #108]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a42:	4b1a      	ldr	r3, [pc, #104]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a46:	f023 020c 	bic.w	r2, r3, #12
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4e:	4917      	ldr	r1, [pc, #92]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a54:	4b15      	ldr	r3, [pc, #84]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	f023 0202 	bic.w	r2, r3, #2
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a60:	4912      	ldr	r1, [pc, #72]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a66:	4b11      	ldr	r3, [pc, #68]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6a:	4a10      	ldr	r2, [pc, #64]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a72:	4b0e      	ldr	r3, [pc, #56]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a76:	4a0d      	ldr	r2, [pc, #52]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a82:	4a0a      	ldr	r2, [pc, #40]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004a8a:	4b08      	ldr	r3, [pc, #32]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8e:	4a07      	ldr	r2, [pc, #28]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a96:	4b05      	ldr	r3, [pc, #20]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a04      	ldr	r2, [pc, #16]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 8004a9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa2:	f7fe ff1f 	bl	80038e4 <HAL_GetTick>
 8004aa6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004aa8:	e011      	b.n	8004ace <HAL_RCC_OscConfig+0x78e>
 8004aaa:	bf00      	nop
 8004aac:	58024400 	.word	0x58024400
 8004ab0:	58024800 	.word	0x58024800
 8004ab4:	fffffc0c 	.word	0xfffffc0c
 8004ab8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fe ff12 	bl	80038e4 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e08a      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ace:	4b47      	ldr	r3, [pc, #284]	@ (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x77c>
 8004ada:	e082      	b.n	8004be2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004adc:	4b43      	ldr	r3, [pc, #268]	@ (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a42      	ldr	r2, [pc, #264]	@ (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fe fefc 	bl	80038e4 <HAL_GetTick>
 8004aec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fe fef8 	bl	80038e4 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e070      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b02:	4b3a      	ldr	r3, [pc, #232]	@ (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x7b0>
 8004b0e:	e068      	b.n	8004be2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b10:	4b36      	ldr	r3, [pc, #216]	@ (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b16:	4b35      	ldr	r3, [pc, #212]	@ (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d031      	beq.n	8004b88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f003 0203 	and.w	r2, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d12a      	bne.n	8004b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d122      	bne.n	8004b88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d11a      	bne.n	8004b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	0a5b      	lsrs	r3, r3, #9
 8004b56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d111      	bne.n	8004b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	0c1b      	lsrs	r3, r3, #16
 8004b68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d108      	bne.n	8004b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	0e1b      	lsrs	r3, r3, #24
 8004b7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d001      	beq.n	8004b8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e02b      	b.n	8004be4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004b8c:	4b17      	ldr	r3, [pc, #92]	@ (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b90:	08db      	lsrs	r3, r3, #3
 8004b92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b96:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d01f      	beq.n	8004be2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004ba2:	4b12      	ldr	r3, [pc, #72]	@ (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba6:	4a11      	ldr	r2, [pc, #68]	@ (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bae:	f7fe fe99 	bl	80038e4 <HAL_GetTick>
 8004bb2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004bb4:	bf00      	nop
 8004bb6:	f7fe fe95 	bl	80038e4 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d0f9      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004bc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf0 <HAL_RCC_OscConfig+0x8b0>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004bce:	00d2      	lsls	r2, r2, #3
 8004bd0:	4906      	ldr	r1, [pc, #24]	@ (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004bd6:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	4a04      	ldr	r2, [pc, #16]	@ (8004bec <HAL_RCC_OscConfig+0x8ac>)
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3730      	adds	r7, #48	@ 0x30
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	58024400 	.word	0x58024400
 8004bf0:	ffff0007 	.word	0xffff0007

08004bf4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e19c      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c08:	4b8a      	ldr	r3, [pc, #552]	@ (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d910      	bls.n	8004c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b87      	ldr	r3, [pc, #540]	@ (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 020f 	bic.w	r2, r3, #15
 8004c1e:	4985      	ldr	r1, [pc, #532]	@ (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c26:	4b83      	ldr	r3, [pc, #524]	@ (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d001      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e184      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d010      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	4b7b      	ldr	r3, [pc, #492]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d908      	bls.n	8004c66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c54:	4b78      	ldr	r3, [pc, #480]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	4975      	ldr	r1, [pc, #468]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d010      	beq.n	8004c94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	4b70      	ldr	r3, [pc, #448]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d908      	bls.n	8004c94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c82:	4b6d      	ldr	r3, [pc, #436]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	496a      	ldr	r1, [pc, #424]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d010      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699a      	ldr	r2, [r3, #24]
 8004ca4:	4b64      	ldr	r3, [pc, #400]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d908      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004cb0:	4b61      	ldr	r3, [pc, #388]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	495e      	ldr	r1, [pc, #376]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d010      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69da      	ldr	r2, [r3, #28]
 8004cd2:	4b59      	ldr	r3, [pc, #356]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d908      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004cde:	4b56      	ldr	r3, [pc, #344]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	4953      	ldr	r1, [pc, #332]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d010      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	4b4d      	ldr	r3, [pc, #308]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d908      	bls.n	8004d1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d0c:	4b4a      	ldr	r3, [pc, #296]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	f023 020f 	bic.w	r2, r3, #15
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4947      	ldr	r1, [pc, #284]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d055      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d2a:	4b43      	ldr	r3, [pc, #268]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4940      	ldr	r1, [pc, #256]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d107      	bne.n	8004d54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d44:	4b3c      	ldr	r3, [pc, #240]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d121      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0f6      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d107      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d5c:	4b36      	ldr	r3, [pc, #216]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d115      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0ea      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d107      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d74:	4b30      	ldr	r3, [pc, #192]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d109      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0de      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d84:	4b2c      	ldr	r3, [pc, #176]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0d6      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d94:	4b28      	ldr	r3, [pc, #160]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f023 0207 	bic.w	r2, r3, #7
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	4925      	ldr	r1, [pc, #148]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da6:	f7fe fd9d 	bl	80038e4 <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dac:	e00a      	b.n	8004dc4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dae:	f7fe fd99 	bl	80038e4 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e0be      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d1eb      	bne.n	8004dae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d010      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	4b14      	ldr	r3, [pc, #80]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d208      	bcs.n	8004e04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df2:	4b11      	ldr	r3, [pc, #68]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f023 020f 	bic.w	r2, r3, #15
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	490e      	ldr	r1, [pc, #56]	@ (8004e38 <HAL_RCC_ClockConfig+0x244>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e04:	4b0b      	ldr	r3, [pc, #44]	@ (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d214      	bcs.n	8004e3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e12:	4b08      	ldr	r3, [pc, #32]	@ (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f023 020f 	bic.w	r2, r3, #15
 8004e1a:	4906      	ldr	r1, [pc, #24]	@ (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e22:	4b04      	ldr	r3, [pc, #16]	@ (8004e34 <HAL_RCC_ClockConfig+0x240>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d005      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e086      	b.n	8004f42 <HAL_RCC_ClockConfig+0x34e>
 8004e34:	52002000 	.word	0x52002000
 8004e38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d010      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d208      	bcs.n	8004e6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e58:	4b3c      	ldr	r3, [pc, #240]	@ (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	4939      	ldr	r1, [pc, #228]	@ (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d010      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695a      	ldr	r2, [r3, #20]
 8004e7a:	4b34      	ldr	r3, [pc, #208]	@ (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d208      	bcs.n	8004e98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e86:	4b31      	ldr	r3, [pc, #196]	@ (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	492e      	ldr	r1, [pc, #184]	@ (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d010      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699a      	ldr	r2, [r3, #24]
 8004ea8:	4b28      	ldr	r3, [pc, #160]	@ (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d208      	bcs.n	8004ec6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004eb4:	4b25      	ldr	r3, [pc, #148]	@ (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	4922      	ldr	r1, [pc, #136]	@ (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d010      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69da      	ldr	r2, [r3, #28]
 8004ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d208      	bcs.n	8004ef4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	4917      	ldr	r1, [pc, #92]	@ (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ef4:	f000 f834 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	4b14      	ldr	r3, [pc, #80]	@ (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	4912      	ldr	r1, [pc, #72]	@ (8004f50 <HAL_RCC_ClockConfig+0x35c>)
 8004f06:	5ccb      	ldrb	r3, [r1, r3]
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f12:	4b0e      	ldr	r3, [pc, #56]	@ (8004f4c <HAL_RCC_ClockConfig+0x358>)
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8004f50 <HAL_RCC_ClockConfig+0x35c>)
 8004f1c:	5cd3      	ldrb	r3, [r2, r3]
 8004f1e:	f003 031f 	and.w	r3, r3, #31
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
 8004f28:	4a0a      	ldr	r2, [pc, #40]	@ (8004f54 <HAL_RCC_ClockConfig+0x360>)
 8004f2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8004f58 <HAL_RCC_ClockConfig+0x364>)
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004f32:	4b0a      	ldr	r3, [pc, #40]	@ (8004f5c <HAL_RCC_ClockConfig+0x368>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fe fc8a 	bl	8003850 <HAL_InitTick>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	58024400 	.word	0x58024400
 8004f50:	0800c880 	.word	0x0800c880
 8004f54:	24000004 	.word	0x24000004
 8004f58:	24000000 	.word	0x24000000
 8004f5c:	24000018 	.word	0x24000018

08004f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b089      	sub	sp, #36	@ 0x24
 8004f64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f66:	4bb3      	ldr	r3, [pc, #716]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f6e:	2b18      	cmp	r3, #24
 8004f70:	f200 8155 	bhi.w	800521e <HAL_RCC_GetSysClockFreq+0x2be>
 8004f74:	a201      	add	r2, pc, #4	@ (adr r2, 8004f7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fe1 	.word	0x08004fe1
 8004f80:	0800521f 	.word	0x0800521f
 8004f84:	0800521f 	.word	0x0800521f
 8004f88:	0800521f 	.word	0x0800521f
 8004f8c:	0800521f 	.word	0x0800521f
 8004f90:	0800521f 	.word	0x0800521f
 8004f94:	0800521f 	.word	0x0800521f
 8004f98:	0800521f 	.word	0x0800521f
 8004f9c:	08005007 	.word	0x08005007
 8004fa0:	0800521f 	.word	0x0800521f
 8004fa4:	0800521f 	.word	0x0800521f
 8004fa8:	0800521f 	.word	0x0800521f
 8004fac:	0800521f 	.word	0x0800521f
 8004fb0:	0800521f 	.word	0x0800521f
 8004fb4:	0800521f 	.word	0x0800521f
 8004fb8:	0800521f 	.word	0x0800521f
 8004fbc:	0800500d 	.word	0x0800500d
 8004fc0:	0800521f 	.word	0x0800521f
 8004fc4:	0800521f 	.word	0x0800521f
 8004fc8:	0800521f 	.word	0x0800521f
 8004fcc:	0800521f 	.word	0x0800521f
 8004fd0:	0800521f 	.word	0x0800521f
 8004fd4:	0800521f 	.word	0x0800521f
 8004fd8:	0800521f 	.word	0x0800521f
 8004fdc:	08005013 	.word	0x08005013
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fe0:	4b94      	ldr	r3, [pc, #592]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d009      	beq.n	8005000 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fec:	4b91      	ldr	r3, [pc, #580]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	08db      	lsrs	r3, r3, #3
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	4a90      	ldr	r2, [pc, #576]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004ffe:	e111      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005000:	4b8d      	ldr	r3, [pc, #564]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005002:	61bb      	str	r3, [r7, #24]
      break;
 8005004:	e10e      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005006:	4b8d      	ldr	r3, [pc, #564]	@ (800523c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005008:	61bb      	str	r3, [r7, #24]
      break;
 800500a:	e10b      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800500c:	4b8c      	ldr	r3, [pc, #560]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800500e:	61bb      	str	r3, [r7, #24]
      break;
 8005010:	e108      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005012:	4b88      	ldr	r3, [pc, #544]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800501c:	4b85      	ldr	r3, [pc, #532]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800501e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005026:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005028:	4b82      	ldr	r3, [pc, #520]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800502a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005032:	4b80      	ldr	r3, [pc, #512]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005036:	08db      	lsrs	r3, r3, #3
 8005038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	fb02 f303 	mul.w	r3, r2, r3
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80e1 	beq.w	8005218 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b02      	cmp	r3, #2
 800505a:	f000 8083 	beq.w	8005164 <HAL_RCC_GetSysClockFreq+0x204>
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b02      	cmp	r3, #2
 8005062:	f200 80a1 	bhi.w	80051a8 <HAL_RCC_GetSysClockFreq+0x248>
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_RCC_GetSysClockFreq+0x114>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d056      	beq.n	8005120 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005072:	e099      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005074:	4b6f      	ldr	r3, [pc, #444]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d02d      	beq.n	80050dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005080:	4b6c      	ldr	r3, [pc, #432]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	08db      	lsrs	r3, r3, #3
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	4a6b      	ldr	r2, [pc, #428]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800508c:	fa22 f303 	lsr.w	r3, r2, r3
 8005090:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	ee07 3a90 	vmov	s15, r3
 8005098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050aa:	4b62      	ldr	r3, [pc, #392]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80050be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005244 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80050da:	e087      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005248 <HAL_RCC_GetSysClockFreq+0x2e8>
 80050ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ee:	4b51      	ldr	r3, [pc, #324]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005102:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005244 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800511e:	e065      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800524c <HAL_RCC_GetSysClockFreq+0x2ec>
 800512e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005132:	4b40      	ldr	r3, [pc, #256]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005142:	ed97 6a02 	vldr	s12, [r7, #8]
 8005146:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005244 <HAL_RCC_GetSysClockFreq+0x2e4>
 800514a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800515a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005162:	e043      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005250 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005176:	4b2f      	ldr	r3, [pc, #188]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005186:	ed97 6a02 	vldr	s12, [r7, #8]
 800518a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005244 <HAL_RCC_GetSysClockFreq+0x2e4>
 800518e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800519a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051a6:	e021      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800524c <HAL_RCC_GetSysClockFreq+0x2ec>
 80051b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005244 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80051ec:	4b11      	ldr	r3, [pc, #68]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f0:	0a5b      	lsrs	r3, r3, #9
 80051f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051f6:	3301      	adds	r3, #1
 80051f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	ee07 3a90 	vmov	s15, r3
 8005200:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005204:	edd7 6a07 	vldr	s13, [r7, #28]
 8005208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800520c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005210:	ee17 3a90 	vmov	r3, s15
 8005214:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005216:	e005      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	61bb      	str	r3, [r7, #24]
      break;
 800521c:	e002      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800521e:	4b07      	ldr	r3, [pc, #28]	@ (800523c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005220:	61bb      	str	r3, [r7, #24]
      break;
 8005222:	bf00      	nop
  }

  return sysclockfreq;
 8005224:	69bb      	ldr	r3, [r7, #24]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3724      	adds	r7, #36	@ 0x24
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	58024400 	.word	0x58024400
 8005238:	03d09000 	.word	0x03d09000
 800523c:	003d0900 	.word	0x003d0900
 8005240:	017d7840 	.word	0x017d7840
 8005244:	46000000 	.word	0x46000000
 8005248:	4c742400 	.word	0x4c742400
 800524c:	4a742400 	.word	0x4a742400
 8005250:	4bbebc20 	.word	0x4bbebc20

08005254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800525a:	f7ff fe81 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 800525e:	4602      	mov	r2, r0
 8005260:	4b10      	ldr	r3, [pc, #64]	@ (80052a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	0a1b      	lsrs	r3, r3, #8
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	490f      	ldr	r1, [pc, #60]	@ (80052a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800526c:	5ccb      	ldrb	r3, [r1, r3]
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	fa22 f303 	lsr.w	r3, r2, r3
 8005276:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005278:	4b0a      	ldr	r3, [pc, #40]	@ (80052a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	4a09      	ldr	r2, [pc, #36]	@ (80052a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005282:	5cd3      	ldrb	r3, [r2, r3]
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	fa22 f303 	lsr.w	r3, r2, r3
 800528e:	4a07      	ldr	r2, [pc, #28]	@ (80052ac <HAL_RCC_GetHCLKFreq+0x58>)
 8005290:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005292:	4a07      	ldr	r2, [pc, #28]	@ (80052b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005298:	4b04      	ldr	r3, [pc, #16]	@ (80052ac <HAL_RCC_GetHCLKFreq+0x58>)
 800529a:	681b      	ldr	r3, [r3, #0]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	58024400 	.word	0x58024400
 80052a8:	0800c880 	.word	0x0800c880
 80052ac:	24000004 	.word	0x24000004
 80052b0:	24000000 	.word	0x24000000

080052b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80052b8:	f7ff ffcc 	bl	8005254 <HAL_RCC_GetHCLKFreq>
 80052bc:	4602      	mov	r2, r0
 80052be:	4b06      	ldr	r3, [pc, #24]	@ (80052d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	091b      	lsrs	r3, r3, #4
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	4904      	ldr	r1, [pc, #16]	@ (80052dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80052ca:	5ccb      	ldrb	r3, [r1, r3]
 80052cc:	f003 031f 	and.w	r3, r3, #31
 80052d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	58024400 	.word	0x58024400
 80052dc:	0800c880 	.word	0x0800c880

080052e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80052e4:	f7ff ffb6 	bl	8005254 <HAL_RCC_GetHCLKFreq>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4b06      	ldr	r3, [pc, #24]	@ (8005304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	4904      	ldr	r1, [pc, #16]	@ (8005308 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052f6:	5ccb      	ldrb	r3, [r1, r3]
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005300:	4618      	mov	r0, r3
 8005302:	bd80      	pop	{r7, pc}
 8005304:	58024400 	.word	0x58024400
 8005308:	0800c880 	.word	0x0800c880

0800530c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800530c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005310:	b0ca      	sub	sp, #296	@ 0x128
 8005312:	af00      	add	r7, sp, #0
 8005314:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005318:	2300      	movs	r3, #0
 800531a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800531e:	2300      	movs	r3, #0
 8005320:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005330:	2500      	movs	r5, #0
 8005332:	ea54 0305 	orrs.w	r3, r4, r5
 8005336:	d049      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800533e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005342:	d02f      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005344:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005348:	d828      	bhi.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800534a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800534e:	d01a      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005350:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005354:	d822      	bhi.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800535a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800535e:	d007      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005360:	e01c      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005362:	4bb8      	ldr	r3, [pc, #736]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	4ab7      	ldr	r2, [pc, #732]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800536c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800536e:	e01a      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005374:	3308      	adds	r3, #8
 8005376:	2102      	movs	r1, #2
 8005378:	4618      	mov	r0, r3
 800537a:	f001 fc8f 	bl	8006c9c <RCCEx_PLL2_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005384:	e00f      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538a:	3328      	adds	r3, #40	@ 0x28
 800538c:	2102      	movs	r1, #2
 800538e:	4618      	mov	r0, r3
 8005390:	f001 fd36 	bl	8006e00 <RCCEx_PLL3_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800539a:	e004      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053a2:	e000      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80053a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80053ae:	4ba5      	ldr	r3, [pc, #660]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80053b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053bc:	4aa1      	ldr	r2, [pc, #644]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053be:	430b      	orrs	r3, r1
 80053c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80053c2:	e003      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80053d8:	f04f 0900 	mov.w	r9, #0
 80053dc:	ea58 0309 	orrs.w	r3, r8, r9
 80053e0:	d047      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80053e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d82a      	bhi.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80053ec:	a201      	add	r2, pc, #4	@ (adr r2, 80053f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80053ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f2:	bf00      	nop
 80053f4:	08005409 	.word	0x08005409
 80053f8:	08005417 	.word	0x08005417
 80053fc:	0800542d 	.word	0x0800542d
 8005400:	0800544b 	.word	0x0800544b
 8005404:	0800544b 	.word	0x0800544b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005408:	4b8e      	ldr	r3, [pc, #568]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800540a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540c:	4a8d      	ldr	r2, [pc, #564]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800540e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005414:	e01a      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800541a:	3308      	adds	r3, #8
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f001 fc3c 	bl	8006c9c <RCCEx_PLL2_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800542a:	e00f      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800542c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005430:	3328      	adds	r3, #40	@ 0x28
 8005432:	2100      	movs	r1, #0
 8005434:	4618      	mov	r0, r3
 8005436:	f001 fce3 	bl	8006e00 <RCCEx_PLL3_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005440:	e004      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005448:	e000      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800544a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800544c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005454:	4b7b      	ldr	r3, [pc, #492]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005458:	f023 0107 	bic.w	r1, r3, #7
 800545c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005462:	4a78      	ldr	r2, [pc, #480]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005464:	430b      	orrs	r3, r1
 8005466:	6513      	str	r3, [r2, #80]	@ 0x50
 8005468:	e003      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800546e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800547e:	f04f 0b00 	mov.w	fp, #0
 8005482:	ea5a 030b 	orrs.w	r3, sl, fp
 8005486:	d04c      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800548e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005492:	d030      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005498:	d829      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800549a:	2bc0      	cmp	r3, #192	@ 0xc0
 800549c:	d02d      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800549e:	2bc0      	cmp	r3, #192	@ 0xc0
 80054a0:	d825      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80054a2:	2b80      	cmp	r3, #128	@ 0x80
 80054a4:	d018      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80054a6:	2b80      	cmp	r3, #128	@ 0x80
 80054a8:	d821      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80054ae:	2b40      	cmp	r3, #64	@ 0x40
 80054b0:	d007      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80054b2:	e01c      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b4:	4b63      	ldr	r3, [pc, #396]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	4a62      	ldr	r2, [pc, #392]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054c0:	e01c      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c6:	3308      	adds	r3, #8
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 fbe6 	bl	8006c9c <RCCEx_PLL2_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054d6:	e011      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054dc:	3328      	adds	r3, #40	@ 0x28
 80054de:	2100      	movs	r1, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 fc8d 	bl	8006e00 <RCCEx_PLL3_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054ec:	e006      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054f4:	e002      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80054f6:	bf00      	nop
 80054f8:	e000      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80054fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005504:	4b4f      	ldr	r3, [pc, #316]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005508:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800550c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005512:	4a4c      	ldr	r2, [pc, #304]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005514:	430b      	orrs	r3, r1
 8005516:	6513      	str	r3, [r2, #80]	@ 0x50
 8005518:	e003      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800551e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800552e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005532:	2300      	movs	r3, #0
 8005534:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005538:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800553c:	460b      	mov	r3, r1
 800553e:	4313      	orrs	r3, r2
 8005540:	d053      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005546:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800554a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800554e:	d035      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005550:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005554:	d82e      	bhi.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005556:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800555a:	d031      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800555c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005560:	d828      	bhi.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005562:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005566:	d01a      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005568:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800556c:	d822      	bhi.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005572:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005576:	d007      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005578:	e01c      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800557a:	4b32      	ldr	r3, [pc, #200]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800557c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557e:	4a31      	ldr	r2, [pc, #196]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005584:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005586:	e01c      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800558c:	3308      	adds	r3, #8
 800558e:	2100      	movs	r1, #0
 8005590:	4618      	mov	r0, r3
 8005592:	f001 fb83 	bl	8006c9c <RCCEx_PLL2_Config>
 8005596:	4603      	mov	r3, r0
 8005598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800559c:	e011      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800559e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a2:	3328      	adds	r3, #40	@ 0x28
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 fc2a 	bl	8006e00 <RCCEx_PLL3_Config>
 80055ac:	4603      	mov	r3, r0
 80055ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055b2:	e006      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055ba:	e002      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055bc:	bf00      	nop
 80055be:	e000      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80055ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055da:	4a1a      	ldr	r2, [pc, #104]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055dc:	430b      	orrs	r3, r1
 80055de:	6593      	str	r3, [r2, #88]	@ 0x58
 80055e0:	e003      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80055f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80055fa:	2300      	movs	r3, #0
 80055fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005600:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005604:	460b      	mov	r3, r1
 8005606:	4313      	orrs	r3, r2
 8005608:	d056      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005612:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005616:	d038      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005618:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800561c:	d831      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800561e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005622:	d034      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005624:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005628:	d82b      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800562a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800562e:	d01d      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005630:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005634:	d825      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d006      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800563a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800563e:	d00a      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005640:	e01f      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005642:	bf00      	nop
 8005644:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005648:	4ba2      	ldr	r3, [pc, #648]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	4aa1      	ldr	r2, [pc, #644]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800564e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005654:	e01c      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565a:	3308      	adds	r3, #8
 800565c:	2100      	movs	r1, #0
 800565e:	4618      	mov	r0, r3
 8005660:	f001 fb1c 	bl	8006c9c <RCCEx_PLL2_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800566a:	e011      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005670:	3328      	adds	r3, #40	@ 0x28
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fbc3 	bl	8006e00 <RCCEx_PLL3_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005680:	e006      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005688:	e002      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800568a:	bf00      	nop
 800568c:	e000      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800568e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10b      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005698:	4b8e      	ldr	r3, [pc, #568]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800569a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800569c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056a8:	4a8a      	ldr	r2, [pc, #552]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056aa:	430b      	orrs	r3, r1
 80056ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80056ae:	e003      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80056c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056c8:	2300      	movs	r3, #0
 80056ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80056d2:	460b      	mov	r3, r1
 80056d4:	4313      	orrs	r3, r2
 80056d6:	d03a      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80056d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056de:	2b30      	cmp	r3, #48	@ 0x30
 80056e0:	d01f      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80056e2:	2b30      	cmp	r3, #48	@ 0x30
 80056e4:	d819      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d00c      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d815      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d019      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80056f2:	2b10      	cmp	r3, #16
 80056f4:	d111      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f6:	4b77      	ldr	r3, [pc, #476]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fa:	4a76      	ldr	r2, [pc, #472]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005700:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005702:	e011      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005708:	3308      	adds	r3, #8
 800570a:	2102      	movs	r1, #2
 800570c:	4618      	mov	r0, r3
 800570e:	f001 fac5 	bl	8006c9c <RCCEx_PLL2_Config>
 8005712:	4603      	mov	r3, r0
 8005714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005718:	e006      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005720:	e002      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10a      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005730:	4b68      	ldr	r3, [pc, #416]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005734:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800573e:	4a65      	ldr	r2, [pc, #404]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005740:	430b      	orrs	r3, r1
 8005742:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005744:	e003      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800574a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800574e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005756:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800575a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800575e:	2300      	movs	r3, #0
 8005760:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005764:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005768:	460b      	mov	r3, r1
 800576a:	4313      	orrs	r3, r2
 800576c:	d051      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800576e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005778:	d035      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800577a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800577e:	d82e      	bhi.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005780:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005784:	d031      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005786:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800578a:	d828      	bhi.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800578c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005790:	d01a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005796:	d822      	bhi.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800579c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a0:	d007      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80057a2:	e01c      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a4:	4b4b      	ldr	r3, [pc, #300]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	4a4a      	ldr	r2, [pc, #296]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057b0:	e01c      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b6:	3308      	adds	r3, #8
 80057b8:	2100      	movs	r1, #0
 80057ba:	4618      	mov	r0, r3
 80057bc:	f001 fa6e 	bl	8006c9c <RCCEx_PLL2_Config>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057c6:	e011      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057cc:	3328      	adds	r3, #40	@ 0x28
 80057ce:	2100      	movs	r1, #0
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 fb15 	bl	8006e00 <RCCEx_PLL3_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057dc:	e006      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057e4:	e002      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80057e6:	bf00      	nop
 80057e8:	e000      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80057ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80057f4:	4b37      	ldr	r3, [pc, #220]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80057fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005802:	4a34      	ldr	r2, [pc, #208]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005804:	430b      	orrs	r3, r1
 8005806:	6513      	str	r3, [r2, #80]	@ 0x50
 8005808:	e003      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800580e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800581e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005822:	2300      	movs	r3, #0
 8005824:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005828:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800582c:	460b      	mov	r3, r1
 800582e:	4313      	orrs	r3, r2
 8005830:	d056      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005838:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800583c:	d033      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800583e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005842:	d82c      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005844:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005848:	d02f      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800584a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800584e:	d826      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005850:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005854:	d02b      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005856:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800585a:	d820      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800585c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005860:	d012      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005862:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005866:	d81a      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d022      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800586c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005870:	d115      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005876:	3308      	adds	r3, #8
 8005878:	2101      	movs	r1, #1
 800587a:	4618      	mov	r0, r3
 800587c:	f001 fa0e 	bl	8006c9c <RCCEx_PLL2_Config>
 8005880:	4603      	mov	r3, r0
 8005882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005886:	e015      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588c:	3328      	adds	r3, #40	@ 0x28
 800588e:	2101      	movs	r1, #1
 8005890:	4618      	mov	r0, r3
 8005892:	f001 fab5 	bl	8006e00 <RCCEx_PLL3_Config>
 8005896:	4603      	mov	r3, r0
 8005898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800589c:	e00a      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058a4:	e006      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058a6:	bf00      	nop
 80058a8:	e004      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058aa:	bf00      	nop
 80058ac:	e002      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10d      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80058bc:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058ca:	4a02      	ldr	r2, [pc, #8]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80058d0:	e006      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80058d2:	bf00      	nop
 80058d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80058ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058f0:	2300      	movs	r3, #0
 80058f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4313      	orrs	r3, r2
 80058fe:	d055      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005904:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005908:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800590c:	d033      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800590e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005912:	d82c      	bhi.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005918:	d02f      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800591a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800591e:	d826      	bhi.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005920:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005924:	d02b      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005926:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800592a:	d820      	bhi.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800592c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005930:	d012      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005936:	d81a      	bhi.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d022      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800593c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005940:	d115      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005946:	3308      	adds	r3, #8
 8005948:	2101      	movs	r1, #1
 800594a:	4618      	mov	r0, r3
 800594c:	f001 f9a6 	bl	8006c9c <RCCEx_PLL2_Config>
 8005950:	4603      	mov	r3, r0
 8005952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005956:	e015      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595c:	3328      	adds	r3, #40	@ 0x28
 800595e:	2101      	movs	r1, #1
 8005960:	4618      	mov	r0, r3
 8005962:	f001 fa4d 	bl	8006e00 <RCCEx_PLL3_Config>
 8005966:	4603      	mov	r3, r0
 8005968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800596c:	e00a      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005974:	e006      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005976:	bf00      	nop
 8005978:	e004      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800597a:	bf00      	nop
 800597c:	e002      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800597e:	bf00      	nop
 8005980:	e000      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800598c:	4ba3      	ldr	r3, [pc, #652]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800598e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005990:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800599c:	4a9f      	ldr	r2, [pc, #636]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800599e:	430b      	orrs	r3, r1
 80059a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80059a2:	e003      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80059b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059bc:	2300      	movs	r3, #0
 80059be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80059c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059c6:	460b      	mov	r3, r1
 80059c8:	4313      	orrs	r3, r2
 80059ca:	d037      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80059cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059d6:	d00e      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80059d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059dc:	d816      	bhi.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d018      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80059e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059e6:	d111      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059e8:	4b8c      	ldr	r3, [pc, #560]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ec:	4a8b      	ldr	r2, [pc, #556]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059f4:	e00f      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fa:	3308      	adds	r3, #8
 80059fc:	2101      	movs	r1, #1
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 f94c 	bl	8006c9c <RCCEx_PLL2_Config>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a0a:	e004      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a12:	e000      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a1e:	4b7f      	ldr	r3, [pc, #508]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a22:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a2c:	4a7b      	ldr	r2, [pc, #492]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a32:	e003      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005a48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005a52:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	d039      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d81c      	bhi.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005a66:	a201      	add	r2, pc, #4	@ (adr r2, 8005a6c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005aa9 	.word	0x08005aa9
 8005a70:	08005a7d 	.word	0x08005a7d
 8005a74:	08005a8b 	.word	0x08005a8b
 8005a78:	08005aa9 	.word	0x08005aa9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a7c:	4b67      	ldr	r3, [pc, #412]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a80:	4a66      	ldr	r2, [pc, #408]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a88:	e00f      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8e:	3308      	adds	r3, #8
 8005a90:	2102      	movs	r1, #2
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 f902 	bl	8006c9c <RCCEx_PLL2_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a9e:	e004      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aa6:	e000      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ab2:	4b5a      	ldr	r3, [pc, #360]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ab6:	f023 0103 	bic.w	r1, r3, #3
 8005aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ac0:	4a56      	ldr	r2, [pc, #344]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ac6:	e003      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005acc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005adc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ae6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005aea:	460b      	mov	r3, r1
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f000 809f 	beq.w	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005af2:	4b4b      	ldr	r3, [pc, #300]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a4a      	ldr	r2, [pc, #296]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005afc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005afe:	f7fd fef1 	bl	80038e4 <HAL_GetTick>
 8005b02:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b06:	e00b      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b08:	f7fd feec 	bl	80038e4 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b64      	cmp	r3, #100	@ 0x64
 8005b16:	d903      	bls.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b1e:	e005      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b20:	4b3f      	ldr	r3, [pc, #252]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0ed      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d179      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b34:	4b39      	ldr	r3, [pc, #228]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b40:	4053      	eors	r3, r2
 8005b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d015      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b4a:	4b34      	ldr	r3, [pc, #208]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b56:	4b31      	ldr	r3, [pc, #196]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b5a:	4a30      	ldr	r2, [pc, #192]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b60:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b62:	4b2e      	ldr	r3, [pc, #184]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b66:	4a2d      	ldr	r2, [pc, #180]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b6c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b74:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b82:	d118      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b84:	f7fd feae 	bl	80038e4 <HAL_GetTick>
 8005b88:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b8c:	e00d      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b8e:	f7fd fea9 	bl	80038e4 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005b98:	1ad2      	subs	r2, r2, r3
 8005b9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d903      	bls.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005ba8:	e005      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005baa:	4b1c      	ldr	r3, [pc, #112]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0eb      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d129      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bce:	d10e      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005bd0:	4b12      	ldr	r3, [pc, #72]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005be0:	091a      	lsrs	r2, r3, #4
 8005be2:	4b10      	ldr	r3, [pc, #64]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	4a0d      	ldr	r2, [pc, #52]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005be8:	430b      	orrs	r3, r1
 8005bea:	6113      	str	r3, [r2, #16]
 8005bec:	e005      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005bee:	4b0b      	ldr	r3, [pc, #44]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bf4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005bf8:	6113      	str	r3, [r2, #16]
 8005bfa:	4b08      	ldr	r3, [pc, #32]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bfc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c0a:	4a04      	ldr	r2, [pc, #16]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c10:	e00e      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005c1a:	e009      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005c1c:	58024400 	.word	0x58024400
 8005c20:	58024800 	.word	0x58024800
 8005c24:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f002 0301 	and.w	r3, r2, #1
 8005c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c40:	2300      	movs	r3, #0
 8005c42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f000 8089 	beq.w	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c58:	2b28      	cmp	r3, #40	@ 0x28
 8005c5a:	d86b      	bhi.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005d3d 	.word	0x08005d3d
 8005c68:	08005d35 	.word	0x08005d35
 8005c6c:	08005d35 	.word	0x08005d35
 8005c70:	08005d35 	.word	0x08005d35
 8005c74:	08005d35 	.word	0x08005d35
 8005c78:	08005d35 	.word	0x08005d35
 8005c7c:	08005d35 	.word	0x08005d35
 8005c80:	08005d35 	.word	0x08005d35
 8005c84:	08005d09 	.word	0x08005d09
 8005c88:	08005d35 	.word	0x08005d35
 8005c8c:	08005d35 	.word	0x08005d35
 8005c90:	08005d35 	.word	0x08005d35
 8005c94:	08005d35 	.word	0x08005d35
 8005c98:	08005d35 	.word	0x08005d35
 8005c9c:	08005d35 	.word	0x08005d35
 8005ca0:	08005d35 	.word	0x08005d35
 8005ca4:	08005d1f 	.word	0x08005d1f
 8005ca8:	08005d35 	.word	0x08005d35
 8005cac:	08005d35 	.word	0x08005d35
 8005cb0:	08005d35 	.word	0x08005d35
 8005cb4:	08005d35 	.word	0x08005d35
 8005cb8:	08005d35 	.word	0x08005d35
 8005cbc:	08005d35 	.word	0x08005d35
 8005cc0:	08005d35 	.word	0x08005d35
 8005cc4:	08005d3d 	.word	0x08005d3d
 8005cc8:	08005d35 	.word	0x08005d35
 8005ccc:	08005d35 	.word	0x08005d35
 8005cd0:	08005d35 	.word	0x08005d35
 8005cd4:	08005d35 	.word	0x08005d35
 8005cd8:	08005d35 	.word	0x08005d35
 8005cdc:	08005d35 	.word	0x08005d35
 8005ce0:	08005d35 	.word	0x08005d35
 8005ce4:	08005d3d 	.word	0x08005d3d
 8005ce8:	08005d35 	.word	0x08005d35
 8005cec:	08005d35 	.word	0x08005d35
 8005cf0:	08005d35 	.word	0x08005d35
 8005cf4:	08005d35 	.word	0x08005d35
 8005cf8:	08005d35 	.word	0x08005d35
 8005cfc:	08005d35 	.word	0x08005d35
 8005d00:	08005d35 	.word	0x08005d35
 8005d04:	08005d3d 	.word	0x08005d3d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	2101      	movs	r1, #1
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 ffc3 	bl	8006c9c <RCCEx_PLL2_Config>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d1c:	e00f      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d22:	3328      	adds	r3, #40	@ 0x28
 8005d24:	2101      	movs	r1, #1
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 f86a 	bl	8006e00 <RCCEx_PLL3_Config>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d32:	e004      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d3a:	e000      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d46:	4bbf      	ldr	r3, [pc, #764]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d54:	4abb      	ldr	r2, [pc, #748]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d56:	430b      	orrs	r3, r1
 8005d58:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d5a:	e003      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f002 0302 	and.w	r3, r2, #2
 8005d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d74:	2300      	movs	r3, #0
 8005d76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4313      	orrs	r3, r2
 8005d82:	d041      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d8a:	2b05      	cmp	r3, #5
 8005d8c:	d824      	bhi.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d94 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005de1 	.word	0x08005de1
 8005d98:	08005dad 	.word	0x08005dad
 8005d9c:	08005dc3 	.word	0x08005dc3
 8005da0:	08005de1 	.word	0x08005de1
 8005da4:	08005de1 	.word	0x08005de1
 8005da8:	08005de1 	.word	0x08005de1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db0:	3308      	adds	r3, #8
 8005db2:	2101      	movs	r1, #1
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 ff71 	bl	8006c9c <RCCEx_PLL2_Config>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005dc0:	e00f      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc6:	3328      	adds	r3, #40	@ 0x28
 8005dc8:	2101      	movs	r1, #1
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f001 f818 	bl	8006e00 <RCCEx_PLL3_Config>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005dd6:	e004      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dde:	e000      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005dea:	4b96      	ldr	r3, [pc, #600]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dee:	f023 0107 	bic.w	r1, r3, #7
 8005df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005df8:	4a92      	ldr	r2, [pc, #584]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dfa:	430b      	orrs	r3, r1
 8005dfc:	6553      	str	r3, [r2, #84]	@ 0x54
 8005dfe:	e003      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	f002 0304 	and.w	r3, r2, #4
 8005e14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4313      	orrs	r3, r2
 8005e26:	d044      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e30:	2b05      	cmp	r3, #5
 8005e32:	d825      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005e34:	a201      	add	r2, pc, #4	@ (adr r2, 8005e3c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3a:	bf00      	nop
 8005e3c:	08005e89 	.word	0x08005e89
 8005e40:	08005e55 	.word	0x08005e55
 8005e44:	08005e6b 	.word	0x08005e6b
 8005e48:	08005e89 	.word	0x08005e89
 8005e4c:	08005e89 	.word	0x08005e89
 8005e50:	08005e89 	.word	0x08005e89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e58:	3308      	adds	r3, #8
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 ff1d 	bl	8006c9c <RCCEx_PLL2_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e68:	e00f      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6e:	3328      	adds	r3, #40	@ 0x28
 8005e70:	2101      	movs	r1, #1
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 ffc4 	bl	8006e00 <RCCEx_PLL3_Config>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e7e:	e004      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e86:	e000      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e92:	4b6c      	ldr	r3, [pc, #432]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e96:	f023 0107 	bic.w	r1, r3, #7
 8005e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ea2:	4a68      	ldr	r2, [pc, #416]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ea8:	e003      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	f002 0320 	and.w	r3, r2, #32
 8005ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	d055      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ede:	d033      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ee4:	d82c      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eea:	d02f      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef0:	d826      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ef2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ef6:	d02b      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005ef8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005efc:	d820      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005efe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f02:	d012      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f08:	d81a      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d022      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005f0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f12:	d115      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f18:	3308      	adds	r3, #8
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 febd 	bl	8006c9c <RCCEx_PLL2_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f28:	e015      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2e:	3328      	adds	r3, #40	@ 0x28
 8005f30:	2102      	movs	r1, #2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 ff64 	bl	8006e00 <RCCEx_PLL3_Config>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f3e:	e00a      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f46:	e006      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f48:	bf00      	nop
 8005f4a:	e004      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f4c:	bf00      	nop
 8005f4e:	e002      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f50:	bf00      	nop
 8005f52:	e000      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10b      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f5e:	4b39      	ldr	r3, [pc, #228]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f6e:	4a35      	ldr	r2, [pc, #212]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f70:	430b      	orrs	r3, r1
 8005f72:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f74:	e003      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	d058      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fa6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005faa:	d033      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005fac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005fb0:	d82c      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fb6:	d02f      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fbc:	d826      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fc2:	d02b      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005fc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fc8:	d820      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fce:	d012      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005fd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fd4:	d81a      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d022      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fde:	d115      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fe57 	bl	8006c9c <RCCEx_PLL2_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ff4:	e015      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffa:	3328      	adds	r3, #40	@ 0x28
 8005ffc:	2102      	movs	r1, #2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fefe 	bl	8006e00 <RCCEx_PLL3_Config>
 8006004:	4603      	mov	r3, r0
 8006006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800600a:	e00a      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006012:	e006      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006014:	bf00      	nop
 8006016:	e004      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006018:	bf00      	nop
 800601a:	e002      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800601c:	bf00      	nop
 800601e:	e000      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10e      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800602a:	4b06      	ldr	r3, [pc, #24]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800602c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006036:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800603a:	4a02      	ldr	r2, [pc, #8]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800603c:	430b      	orrs	r3, r1
 800603e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006040:	e006      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006042:	bf00      	nop
 8006044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800604c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800605c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006060:	2300      	movs	r3, #0
 8006062:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006066:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800606a:	460b      	mov	r3, r1
 800606c:	4313      	orrs	r3, r2
 800606e:	d055      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006074:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006078:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800607c:	d033      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800607e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006082:	d82c      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006088:	d02f      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800608a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800608e:	d826      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006090:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006094:	d02b      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006096:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800609a:	d820      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800609c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060a0:	d012      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80060a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060a6:	d81a      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d022      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80060ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060b0:	d115      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b6:	3308      	adds	r3, #8
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fdee 	bl	8006c9c <RCCEx_PLL2_Config>
 80060c0:	4603      	mov	r3, r0
 80060c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060c6:	e015      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060cc:	3328      	adds	r3, #40	@ 0x28
 80060ce:	2102      	movs	r1, #2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fe95 	bl	8006e00 <RCCEx_PLL3_Config>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060dc:	e00a      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060e4:	e006      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060e6:	bf00      	nop
 80060e8:	e004      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060ea:	bf00      	nop
 80060ec:	e002      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060ee:	bf00      	nop
 80060f0:	e000      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10b      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80060fc:	4ba1      	ldr	r3, [pc, #644]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006100:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006108:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800610c:	4a9d      	ldr	r2, [pc, #628]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800610e:	430b      	orrs	r3, r1
 8006110:	6593      	str	r3, [r2, #88]	@ 0x58
 8006112:	e003      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006118:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	f002 0308 	and.w	r3, r2, #8
 8006128:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800612c:	2300      	movs	r3, #0
 800612e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006132:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006136:	460b      	mov	r3, r1
 8006138:	4313      	orrs	r3, r2
 800613a:	d01e      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006140:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006148:	d10c      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800614a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614e:	3328      	adds	r3, #40	@ 0x28
 8006150:	2102      	movs	r1, #2
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fe54 	bl	8006e00 <RCCEx_PLL3_Config>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006164:	4b87      	ldr	r3, [pc, #540]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006168:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800616c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006174:	4a83      	ldr	r2, [pc, #524]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006176:	430b      	orrs	r3, r1
 8006178:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f002 0310 	and.w	r3, r2, #16
 8006186:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800618a:	2300      	movs	r3, #0
 800618c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006190:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006194:	460b      	mov	r3, r1
 8006196:	4313      	orrs	r3, r2
 8006198:	d01e      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061a6:	d10c      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ac:	3328      	adds	r3, #40	@ 0x28
 80061ae:	2102      	movs	r1, #2
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fe25 	bl	8006e00 <RCCEx_PLL3_Config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061c2:	4b70      	ldr	r3, [pc, #448]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061d2:	4a6c      	ldr	r2, [pc, #432]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061d4:	430b      	orrs	r3, r1
 80061d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80061e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061e8:	2300      	movs	r3, #0
 80061ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80061f2:	460b      	mov	r3, r1
 80061f4:	4313      	orrs	r3, r2
 80061f6:	d03e      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80061f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006200:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006204:	d022      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006206:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800620a:	d81b      	bhi.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006214:	d00b      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006216:	e015      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621c:	3308      	adds	r3, #8
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fd3b 	bl	8006c9c <RCCEx_PLL2_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800622c:	e00f      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800622e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006232:	3328      	adds	r3, #40	@ 0x28
 8006234:	2102      	movs	r1, #2
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fde2 	bl	8006e00 <RCCEx_PLL3_Config>
 800623c:	4603      	mov	r3, r0
 800623e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006242:	e004      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800624a:	e000      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800624c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800624e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10b      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006256:	4b4b      	ldr	r3, [pc, #300]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800625a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006262:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006266:	4a47      	ldr	r2, [pc, #284]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006268:	430b      	orrs	r3, r1
 800626a:	6593      	str	r3, [r2, #88]	@ 0x58
 800626c:	e003      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006282:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006284:	2300      	movs	r3, #0
 8006286:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006288:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800628c:	460b      	mov	r3, r1
 800628e:	4313      	orrs	r3, r2
 8006290:	d03b      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800629a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800629e:	d01f      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80062a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062a4:	d818      	bhi.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80062a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062aa:	d003      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80062ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062b0:	d007      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80062b2:	e011      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b4:	4b33      	ldr	r3, [pc, #204]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b8:	4a32      	ldr	r2, [pc, #200]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80062c0:	e00f      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c6:	3328      	adds	r3, #40	@ 0x28
 80062c8:	2101      	movs	r1, #1
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fd98 	bl	8006e00 <RCCEx_PLL3_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80062d6:	e004      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062de:	e000      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80062e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10b      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062ea:	4b26      	ldr	r3, [pc, #152]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80062f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062fa:	4a22      	ldr	r2, [pc, #136]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062fc:	430b      	orrs	r3, r1
 80062fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8006300:	e003      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006306:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800630a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006312:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006316:	673b      	str	r3, [r7, #112]	@ 0x70
 8006318:	2300      	movs	r3, #0
 800631a:	677b      	str	r3, [r7, #116]	@ 0x74
 800631c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006320:	460b      	mov	r3, r1
 8006322:	4313      	orrs	r3, r2
 8006324:	d034      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006334:	d007      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006336:	e011      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006338:	4b12      	ldr	r3, [pc, #72]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800633a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633c:	4a11      	ldr	r2, [pc, #68]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800633e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006344:	e00e      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634a:	3308      	adds	r3, #8
 800634c:	2102      	movs	r1, #2
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fca4 	bl	8006c9c <RCCEx_PLL2_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800635a:	e003      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10d      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800636c:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800636e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006370:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800637a:	4a02      	ldr	r2, [pc, #8]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800637c:	430b      	orrs	r3, r1
 800637e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006380:	e006      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006382:	bf00      	nop
 8006384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800638c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800639c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800639e:	2300      	movs	r3, #0
 80063a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80063a6:	460b      	mov	r3, r1
 80063a8:	4313      	orrs	r3, r2
 80063aa:	d00c      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b0:	3328      	adds	r3, #40	@ 0x28
 80063b2:	2102      	movs	r1, #2
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 fd23 	bl	8006e00 <RCCEx_PLL3_Config>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80063c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80063d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80063d4:	2300      	movs	r3, #0
 80063d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80063d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80063dc:	460b      	mov	r3, r1
 80063de:	4313      	orrs	r3, r2
 80063e0:	d038      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80063e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063ee:	d018      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80063f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063f4:	d811      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80063f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063fa:	d014      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80063fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006400:	d80b      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d011      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800640a:	d106      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800640c:	4bc3      	ldr	r3, [pc, #780]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	4ac2      	ldr	r2, [pc, #776]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006418:	e008      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006420:	e004      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006422:	bf00      	nop
 8006424:	e002      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006426:	bf00      	nop
 8006428:	e000      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800642a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800642c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10b      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006434:	4bb9      	ldr	r3, [pc, #740]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006438:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006444:	4ab5      	ldr	r2, [pc, #724]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006446:	430b      	orrs	r3, r1
 8006448:	6553      	str	r3, [r2, #84]	@ 0x54
 800644a:	e003      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006450:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006460:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006462:	2300      	movs	r3, #0
 8006464:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006466:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800646a:	460b      	mov	r3, r1
 800646c:	4313      	orrs	r3, r2
 800646e:	d009      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006470:	4baa      	ldr	r3, [pc, #680]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006474:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800647e:	4aa7      	ldr	r2, [pc, #668]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006480:	430b      	orrs	r3, r1
 8006482:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006490:	653b      	str	r3, [r7, #80]	@ 0x50
 8006492:	2300      	movs	r3, #0
 8006494:	657b      	str	r3, [r7, #84]	@ 0x54
 8006496:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800649a:	460b      	mov	r3, r1
 800649c:	4313      	orrs	r3, r2
 800649e:	d00a      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80064a0:	4b9e      	ldr	r3, [pc, #632]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80064a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80064b0:	4a9a      	ldr	r2, [pc, #616]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064b2:	430b      	orrs	r3, r1
 80064b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80064c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064c4:	2300      	movs	r3, #0
 80064c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80064cc:	460b      	mov	r3, r1
 80064ce:	4313      	orrs	r3, r2
 80064d0:	d009      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064d2:	4b92      	ldr	r3, [pc, #584]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064d6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064e0:	4a8e      	ldr	r2, [pc, #568]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064e2:	430b      	orrs	r3, r1
 80064e4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ee:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80064f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80064f4:	2300      	movs	r3, #0
 80064f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80064f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80064fc:	460b      	mov	r3, r1
 80064fe:	4313      	orrs	r3, r2
 8006500:	d00e      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006502:	4b86      	ldr	r3, [pc, #536]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	4a85      	ldr	r2, [pc, #532]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006508:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800650c:	6113      	str	r3, [r2, #16]
 800650e:	4b83      	ldr	r3, [pc, #524]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006510:	6919      	ldr	r1, [r3, #16]
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006516:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800651a:	4a80      	ldr	r2, [pc, #512]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800651c:	430b      	orrs	r3, r1
 800651e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800652c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800652e:	2300      	movs	r3, #0
 8006530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006532:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006536:	460b      	mov	r3, r1
 8006538:	4313      	orrs	r3, r2
 800653a:	d009      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800653c:	4b77      	ldr	r3, [pc, #476]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800653e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006540:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800654a:	4a74      	ldr	r2, [pc, #464]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800654c:	430b      	orrs	r3, r1
 800654e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800655c:	633b      	str	r3, [r7, #48]	@ 0x30
 800655e:	2300      	movs	r3, #0
 8006560:	637b      	str	r3, [r7, #52]	@ 0x34
 8006562:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006566:	460b      	mov	r3, r1
 8006568:	4313      	orrs	r3, r2
 800656a:	d00a      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800656c:	4b6b      	ldr	r3, [pc, #428]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800656e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006570:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800657c:	4a67      	ldr	r2, [pc, #412]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800657e:	430b      	orrs	r3, r1
 8006580:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	2100      	movs	r1, #0
 800658c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006594:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006598:	460b      	mov	r3, r1
 800659a:	4313      	orrs	r3, r2
 800659c:	d011      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800659e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a2:	3308      	adds	r3, #8
 80065a4:	2100      	movs	r1, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fb78 	bl	8006c9c <RCCEx_PLL2_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80065b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80065c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	2100      	movs	r1, #0
 80065cc:	6239      	str	r1, [r7, #32]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80065d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065d8:	460b      	mov	r3, r1
 80065da:	4313      	orrs	r3, r2
 80065dc:	d011      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e2:	3308      	adds	r3, #8
 80065e4:	2101      	movs	r1, #1
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fb58 	bl	8006c9c <RCCEx_PLL2_Config>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80065f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	2100      	movs	r1, #0
 800660c:	61b9      	str	r1, [r7, #24]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	61fb      	str	r3, [r7, #28]
 8006614:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006618:	460b      	mov	r3, r1
 800661a:	4313      	orrs	r3, r2
 800661c:	d011      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006622:	3308      	adds	r3, #8
 8006624:	2102      	movs	r1, #2
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fb38 	bl	8006c9c <RCCEx_PLL2_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800663e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	2100      	movs	r1, #0
 800664c:	6139      	str	r1, [r7, #16]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006658:	460b      	mov	r3, r1
 800665a:	4313      	orrs	r3, r2
 800665c:	d011      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006662:	3328      	adds	r3, #40	@ 0x28
 8006664:	2100      	movs	r1, #0
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fbca 	bl	8006e00 <RCCEx_PLL3_Config>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800667e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	2100      	movs	r1, #0
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	f003 0310 	and.w	r3, r3, #16
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006698:	460b      	mov	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	d011      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800669e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a2:	3328      	adds	r3, #40	@ 0x28
 80066a4:	2101      	movs	r1, #1
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fbaa 	bl	8006e00 <RCCEx_PLL3_Config>
 80066ac:	4603      	mov	r3, r0
 80066ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	2100      	movs	r1, #0
 80066cc:	6039      	str	r1, [r7, #0]
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	607b      	str	r3, [r7, #4]
 80066d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80066d8:	460b      	mov	r3, r1
 80066da:	4313      	orrs	r3, r2
 80066dc:	d011      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e2:	3328      	adds	r3, #40	@ 0x28
 80066e4:	2102      	movs	r1, #2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fb8a 	bl	8006e00 <RCCEx_PLL3_Config>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006702:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	e000      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
}
 8006710:	4618      	mov	r0, r3
 8006712:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006716:	46bd      	mov	sp, r7
 8006718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800671c:	58024400 	.word	0x58024400

08006720 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006724:	f7fe fd96 	bl	8005254 <HAL_RCC_GetHCLKFreq>
 8006728:	4602      	mov	r2, r0
 800672a:	4b06      	ldr	r3, [pc, #24]	@ (8006744 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	091b      	lsrs	r3, r3, #4
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	4904      	ldr	r1, [pc, #16]	@ (8006748 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006736:	5ccb      	ldrb	r3, [r1, r3]
 8006738:	f003 031f 	and.w	r3, r3, #31
 800673c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006740:	4618      	mov	r0, r3
 8006742:	bd80      	pop	{r7, pc}
 8006744:	58024400 	.word	0x58024400
 8006748:	0800c880 	.word	0x0800c880

0800674c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800674c:	b480      	push	{r7}
 800674e:	b089      	sub	sp, #36	@ 0x24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006754:	4ba1      	ldr	r3, [pc, #644]	@ (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800675e:	4b9f      	ldr	r3, [pc, #636]	@ (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006762:	0b1b      	lsrs	r3, r3, #12
 8006764:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006768:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800676a:	4b9c      	ldr	r3, [pc, #624]	@ (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800676c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676e:	091b      	lsrs	r3, r3, #4
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006776:	4b99      	ldr	r3, [pc, #612]	@ (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800677a:	08db      	lsrs	r3, r3, #3
 800677c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	fb02 f303 	mul.w	r3, r2, r3
 8006786:	ee07 3a90 	vmov	s15, r3
 800678a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 8111 	beq.w	80069bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b02      	cmp	r3, #2
 800679e:	f000 8083 	beq.w	80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	f200 80a1 	bhi.w	80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d056      	beq.n	8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80067b6:	e099      	b.n	80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067b8:	4b88      	ldr	r3, [pc, #544]	@ (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d02d      	beq.n	8006820 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067c4:	4b85      	ldr	r3, [pc, #532]	@ (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	08db      	lsrs	r3, r3, #3
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	4a84      	ldr	r2, [pc, #528]	@ (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067d0:	fa22 f303 	lsr.w	r3, r2, r3
 80067d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	ee07 3a90 	vmov	s15, r3
 80067dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ee:	4b7b      	ldr	r3, [pc, #492]	@ (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006802:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80069e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800681e:	e087      	b.n	8006930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80069e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800682e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006832:	4b6a      	ldr	r3, [pc, #424]	@ (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683a:	ee07 3a90 	vmov	s15, r3
 800683e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006842:	ed97 6a03 	vldr	s12, [r7, #12]
 8006846:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80069e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800684a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800684e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800685a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006862:	e065      	b.n	8006930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006876:	4b59      	ldr	r3, [pc, #356]	@ (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006886:	ed97 6a03 	vldr	s12, [r7, #12]
 800688a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80069e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800688e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800689a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800689e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068a6:	e043      	b.n	8006930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80068b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ba:	4b48      	ldr	r3, [pc, #288]	@ (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80069e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068ea:	e021      	b.n	8006930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068fe:	4b37      	ldr	r3, [pc, #220]	@ (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006906:	ee07 3a90 	vmov	s15, r3
 800690a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800690e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006912:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80069e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800691a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800691e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800692a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800692e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006930:	4b2a      	ldr	r3, [pc, #168]	@ (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006934:	0a5b      	lsrs	r3, r3, #9
 8006936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006942:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006946:	ee37 7a87 	vadd.f32	s14, s15, s14
 800694a:	edd7 6a07 	vldr	s13, [r7, #28]
 800694e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006956:	ee17 2a90 	vmov	r2, s15
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800695e:	4b1f      	ldr	r3, [pc, #124]	@ (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006962:	0c1b      	lsrs	r3, r3, #16
 8006964:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006968:	ee07 3a90 	vmov	s15, r3
 800696c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006970:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006974:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006978:	edd7 6a07 	vldr	s13, [r7, #28]
 800697c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006984:	ee17 2a90 	vmov	r2, s15
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800698c:	4b13      	ldr	r3, [pc, #76]	@ (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800698e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006990:	0e1b      	lsrs	r3, r3, #24
 8006992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80069aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069b2:	ee17 2a90 	vmov	r2, s15
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80069ba:	e008      	b.n	80069ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	609a      	str	r2, [r3, #8]
}
 80069ce:	bf00      	nop
 80069d0:	3724      	adds	r7, #36	@ 0x24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	58024400 	.word	0x58024400
 80069e0:	03d09000 	.word	0x03d09000
 80069e4:	46000000 	.word	0x46000000
 80069e8:	4c742400 	.word	0x4c742400
 80069ec:	4a742400 	.word	0x4a742400
 80069f0:	4bbebc20 	.word	0x4bbebc20

080069f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b089      	sub	sp, #36	@ 0x24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069fc:	4ba1      	ldr	r3, [pc, #644]	@ (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006a06:	4b9f      	ldr	r3, [pc, #636]	@ (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0a:	0d1b      	lsrs	r3, r3, #20
 8006a0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a12:	4b9c      	ldr	r3, [pc, #624]	@ (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a16:	0a1b      	lsrs	r3, r3, #8
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006a1e:	4b99      	ldr	r3, [pc, #612]	@ (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a22:	08db      	lsrs	r3, r3, #3
 8006a24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	fb02 f303 	mul.w	r3, r2, r3
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8111 	beq.w	8006c64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	f000 8083 	beq.w	8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	f200 80a1 	bhi.w	8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d056      	beq.n	8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a5e:	e099      	b.n	8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a60:	4b88      	ldr	r3, [pc, #544]	@ (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d02d      	beq.n	8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a6c:	4b85      	ldr	r3, [pc, #532]	@ (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	08db      	lsrs	r3, r3, #3
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	4a84      	ldr	r2, [pc, #528]	@ (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	ee07 3a90 	vmov	s15, r3
 8006a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a96:	4b7b      	ldr	r3, [pc, #492]	@ (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aaa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ac6:	e087      	b.n	8006bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006c90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ada:	4b6a      	ldr	r3, [pc, #424]	@ (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b0a:	e065      	b.n	8006bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b1e:	4b59      	ldr	r3, [pc, #356]	@ (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b4e:	e043      	b.n	8006bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b62:	4b48      	ldr	r3, [pc, #288]	@ (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b92:	e021      	b.n	8006bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba6:	4b37      	ldr	r3, [pc, #220]	@ (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bdc:	0a5b      	lsrs	r3, r3, #9
 8006bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bfe:	ee17 2a90 	vmov	r2, s15
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006c06:	4b1f      	ldr	r3, [pc, #124]	@ (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0a:	0c1b      	lsrs	r3, r3, #16
 8006c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c10:	ee07 3a90 	vmov	s15, r3
 8006c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c2c:	ee17 2a90 	vmov	r2, s15
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c34:	4b13      	ldr	r3, [pc, #76]	@ (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c38:	0e1b      	lsrs	r3, r3, #24
 8006c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c5a:	ee17 2a90 	vmov	r2, s15
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c62:	e008      	b.n	8006c76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	609a      	str	r2, [r3, #8]
}
 8006c76:	bf00      	nop
 8006c78:	3724      	adds	r7, #36	@ 0x24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	58024400 	.word	0x58024400
 8006c88:	03d09000 	.word	0x03d09000
 8006c8c:	46000000 	.word	0x46000000
 8006c90:	4c742400 	.word	0x4c742400
 8006c94:	4a742400 	.word	0x4a742400
 8006c98:	4bbebc20 	.word	0x4bbebc20

08006c9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006caa:	4b53      	ldr	r3, [pc, #332]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d101      	bne.n	8006cba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e099      	b.n	8006dee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006cba:	4b4f      	ldr	r3, [pc, #316]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a4e      	ldr	r2, [pc, #312]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006cc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cc6:	f7fc fe0d 	bl	80038e4 <HAL_GetTick>
 8006cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ccc:	e008      	b.n	8006ce0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cce:	f7fc fe09 	bl	80038e4 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d901      	bls.n	8006ce0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e086      	b.n	8006dee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ce0:	4b45      	ldr	r3, [pc, #276]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1f0      	bne.n	8006cce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006cec:	4b42      	ldr	r3, [pc, #264]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	031b      	lsls	r3, r3, #12
 8006cfa:	493f      	ldr	r1, [pc, #252]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	3b01      	subs	r3, #1
 8006d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	025b      	lsls	r3, r3, #9
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	041b      	lsls	r3, r3, #16
 8006d1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	061b      	lsls	r3, r3, #24
 8006d2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d30:	4931      	ldr	r1, [pc, #196]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d36:	4b30      	ldr	r3, [pc, #192]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	492d      	ldr	r1, [pc, #180]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d48:	4b2b      	ldr	r3, [pc, #172]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4c:	f023 0220 	bic.w	r2, r3, #32
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	4928      	ldr	r1, [pc, #160]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d5a:	4b27      	ldr	r3, [pc, #156]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5e:	4a26      	ldr	r2, [pc, #152]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d60:	f023 0310 	bic.w	r3, r3, #16
 8006d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d66:	4b24      	ldr	r3, [pc, #144]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d6a:	4b24      	ldr	r3, [pc, #144]	@ (8006dfc <RCCEx_PLL2_Config+0x160>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	69d2      	ldr	r2, [r2, #28]
 8006d72:	00d2      	lsls	r2, r2, #3
 8006d74:	4920      	ldr	r1, [pc, #128]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d80:	f043 0310 	orr.w	r3, r3, #16
 8006d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d106      	bne.n	8006d9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d90:	4a19      	ldr	r2, [pc, #100]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006d92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d98:	e00f      	b.n	8006dba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d106      	bne.n	8006dae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006da0:	4b15      	ldr	r3, [pc, #84]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da4:	4a14      	ldr	r2, [pc, #80]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006da6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006daa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006dac:	e005      	b.n	8006dba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006dae:	4b12      	ldr	r3, [pc, #72]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db2:	4a11      	ldr	r2, [pc, #68]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006db4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006db8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006dba:	4b0f      	ldr	r3, [pc, #60]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006dc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc6:	f7fc fd8d 	bl	80038e4 <HAL_GetTick>
 8006dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dcc:	e008      	b.n	8006de0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dce:	f7fc fd89 	bl	80038e4 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d901      	bls.n	8006de0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e006      	b.n	8006dee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006de0:	4b05      	ldr	r3, [pc, #20]	@ (8006df8 <RCCEx_PLL2_Config+0x15c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0f0      	beq.n	8006dce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	58024400 	.word	0x58024400
 8006dfc:	ffff0007 	.word	0xffff0007

08006e00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e0e:	4b53      	ldr	r3, [pc, #332]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e12:	f003 0303 	and.w	r3, r3, #3
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d101      	bne.n	8006e1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e099      	b.n	8006f52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a4e      	ldr	r2, [pc, #312]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e2a:	f7fc fd5b 	bl	80038e4 <HAL_GetTick>
 8006e2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e30:	e008      	b.n	8006e44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e32:	f7fc fd57 	bl	80038e4 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d901      	bls.n	8006e44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e086      	b.n	8006f52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e44:	4b45      	ldr	r3, [pc, #276]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1f0      	bne.n	8006e32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e50:	4b42      	ldr	r3, [pc, #264]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e54:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	051b      	lsls	r3, r3, #20
 8006e5e:	493f      	ldr	r1, [pc, #252]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	025b      	lsls	r3, r3, #9
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	041b      	lsls	r3, r3, #16
 8006e82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	061b      	lsls	r3, r3, #24
 8006e90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e94:	4931      	ldr	r1, [pc, #196]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e9a:	4b30      	ldr	r3, [pc, #192]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	492d      	ldr	r1, [pc, #180]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006eac:	4b2b      	ldr	r3, [pc, #172]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	4928      	ldr	r1, [pc, #160]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006ebe:	4b27      	ldr	r3, [pc, #156]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec2:	4a26      	ldr	r2, [pc, #152]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006eca:	4b24      	ldr	r3, [pc, #144]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ecc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ece:	4b24      	ldr	r3, [pc, #144]	@ (8006f60 <RCCEx_PLL3_Config+0x160>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	69d2      	ldr	r2, [r2, #28]
 8006ed6:	00d2      	lsls	r2, r2, #3
 8006ed8:	4920      	ldr	r1, [pc, #128]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006ede:	4b1f      	ldr	r3, [pc, #124]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d106      	bne.n	8006efe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef4:	4a19      	ldr	r2, [pc, #100]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006ef6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006efa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006efc:	e00f      	b.n	8006f1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d106      	bne.n	8006f12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f04:	4b15      	ldr	r3, [pc, #84]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f08:	4a14      	ldr	r2, [pc, #80]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006f0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f10:	e005      	b.n	8006f1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f12:	4b12      	ldr	r3, [pc, #72]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f16:	4a11      	ldr	r2, [pc, #68]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006f18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a0e      	ldr	r2, [pc, #56]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f2a:	f7fc fcdb 	bl	80038e4 <HAL_GetTick>
 8006f2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f30:	e008      	b.n	8006f44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f32:	f7fc fcd7 	bl	80038e4 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e006      	b.n	8006f52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f44:	4b05      	ldr	r3, [pc, #20]	@ (8006f5c <RCCEx_PLL3_Config+0x15c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0f0      	beq.n	8006f32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	58024400 	.word	0x58024400
 8006f60:	ffff0007 	.word	0xffff0007

08006f64 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e10f      	b.n	8007196 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a87      	ldr	r2, [pc, #540]	@ (80071a0 <HAL_SPI_Init+0x23c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00f      	beq.n	8006fa6 <HAL_SPI_Init+0x42>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a86      	ldr	r2, [pc, #536]	@ (80071a4 <HAL_SPI_Init+0x240>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00a      	beq.n	8006fa6 <HAL_SPI_Init+0x42>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a84      	ldr	r2, [pc, #528]	@ (80071a8 <HAL_SPI_Init+0x244>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d005      	beq.n	8006fa6 <HAL_SPI_Init+0x42>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	2b0f      	cmp	r3, #15
 8006fa0:	d901      	bls.n	8006fa6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e0f7      	b.n	8007196 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fe3c 	bl	8007c24 <SPI_GetPacketSize>
 8006fac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a7b      	ldr	r2, [pc, #492]	@ (80071a0 <HAL_SPI_Init+0x23c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00c      	beq.n	8006fd2 <HAL_SPI_Init+0x6e>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a79      	ldr	r2, [pc, #484]	@ (80071a4 <HAL_SPI_Init+0x240>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d007      	beq.n	8006fd2 <HAL_SPI_Init+0x6e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a78      	ldr	r2, [pc, #480]	@ (80071a8 <HAL_SPI_Init+0x244>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d002      	beq.n	8006fd2 <HAL_SPI_Init+0x6e>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	d811      	bhi.n	8006ff6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006fd6:	4a72      	ldr	r2, [pc, #456]	@ (80071a0 <HAL_SPI_Init+0x23c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d009      	beq.n	8006ff0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a70      	ldr	r2, [pc, #448]	@ (80071a4 <HAL_SPI_Init+0x240>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_SPI_Init+0x8c>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a6f      	ldr	r2, [pc, #444]	@ (80071a8 <HAL_SPI_Init+0x244>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d104      	bne.n	8006ffa <HAL_SPI_Init+0x96>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b10      	cmp	r3, #16
 8006ff4:	d901      	bls.n	8006ffa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e0cd      	b.n	8007196 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d106      	bne.n	8007014 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7f9 ffbe 	bl	8000f90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0201 	bic.w	r2, r2, #1
 800702a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007036:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007040:	d119      	bne.n	8007076 <HAL_SPI_Init+0x112>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800704a:	d103      	bne.n	8007054 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007050:	2b00      	cmp	r3, #0
 8007052:	d008      	beq.n	8007066 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10c      	bne.n	8007076 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007064:	d107      	bne.n	8007076 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007074:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00f      	beq.n	80070a2 <HAL_SPI_Init+0x13e>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	2b06      	cmp	r3, #6
 8007088:	d90b      	bls.n	80070a2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	e007      	b.n	80070b2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	69da      	ldr	r2, [r3, #28]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ba:	431a      	orrs	r2, r3
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	431a      	orrs	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c4:	ea42 0103 	orr.w	r1, r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e2:	431a      	orrs	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	431a      	orrs	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	431a      	orrs	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	431a      	orrs	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	431a      	orrs	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007106:	431a      	orrs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007112:	ea42 0103 	orr.w	r1, r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d113      	bne.n	8007152 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800713c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007150:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0201 	bic.w	r2, r2, #1
 8007160:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	40013000 	.word	0x40013000
 80071a4:	40003800 	.word	0x40003800
 80071a8:	40003c00 	.word	0x40003c00

080071ac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	4613      	mov	r3, r2
 80071ba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3320      	adds	r3, #32
 80071c2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071c4:	f7fc fb8e 	bl	80038e4 <HAL_GetTick>
 80071c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d001      	beq.n	80071da <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80071d6:	2302      	movs	r3, #2
 80071d8:	e1d1      	b.n	800757e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <HAL_SPI_Transmit+0x3a>
 80071e0:	88fb      	ldrh	r3, [r7, #6]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e1c9      	b.n	800757e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_SPI_Transmit+0x4c>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e1c2      	b.n	800757e <HAL_SPI_Transmit+0x3d2>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2203      	movs	r2, #3
 8007204:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	88fa      	ldrh	r2, [r7, #6]
 800721a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	88fa      	ldrh	r2, [r7, #6]
 8007222:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007250:	d108      	bne.n	8007264 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	e009      	b.n	8007278 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007276:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	4b96      	ldr	r3, [pc, #600]	@ (80074d8 <HAL_SPI_Transmit+0x32c>)
 8007280:	4013      	ands	r3, r2
 8007282:	88f9      	ldrh	r1, [r7, #6]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	6812      	ldr	r2, [r2, #0]
 8007288:	430b      	orrs	r3, r1
 800728a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0201 	orr.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072a4:	d107      	bne.n	80072b6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	2b0f      	cmp	r3, #15
 80072bc:	d947      	bls.n	800734e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80072be:	e03f      	b.n	8007340 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d114      	bne.n	80072f8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6812      	ldr	r2, [r2, #0]
 80072d8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072de:	1d1a      	adds	r2, r3, #4
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80072f6:	e023      	b.n	8007340 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072f8:	f7fc faf4 	bl	80038e4 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	429a      	cmp	r2, r3
 8007306:	d803      	bhi.n	8007310 <HAL_SPI_Transmit+0x164>
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730e:	d102      	bne.n	8007316 <HAL_SPI_Transmit+0x16a>
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d114      	bne.n	8007340 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 fbb6 	bl	8007a88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007322:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e11e      	b.n	800757e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007346:	b29b      	uxth	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1b9      	bne.n	80072c0 <HAL_SPI_Transmit+0x114>
 800734c:	e0f1      	b.n	8007532 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	2b07      	cmp	r3, #7
 8007354:	f240 80e6 	bls.w	8007524 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007358:	e05d      	b.n	8007416 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b02      	cmp	r3, #2
 8007366:	d132      	bne.n	80073ce <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b01      	cmp	r3, #1
 8007372:	d918      	bls.n	80073a6 <HAL_SPI_Transmit+0x1fa>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007378:	2b00      	cmp	r3, #0
 800737a:	d014      	beq.n	80073a6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800738c:	1d1a      	adds	r2, r3, #4
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b02      	subs	r3, #2
 800739c:	b29a      	uxth	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80073a4:	e037      	b.n	8007416 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073aa:	881a      	ldrh	r2, [r3, #0]
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b4:	1c9a      	adds	r2, r3, #2
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80073cc:	e023      	b.n	8007416 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073ce:	f7fc fa89 	bl	80038e4 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d803      	bhi.n	80073e6 <HAL_SPI_Transmit+0x23a>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e4:	d102      	bne.n	80073ec <HAL_SPI_Transmit+0x240>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d114      	bne.n	8007416 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 fb4b 	bl	8007a88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e0b3      	b.n	800757e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d19b      	bne.n	800735a <HAL_SPI_Transmit+0x1ae>
 8007422:	e086      	b.n	8007532 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b02      	cmp	r3, #2
 8007430:	d154      	bne.n	80074dc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007438:	b29b      	uxth	r3, r3
 800743a:	2b03      	cmp	r3, #3
 800743c:	d918      	bls.n	8007470 <HAL_SPI_Transmit+0x2c4>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007442:	2b40      	cmp	r3, #64	@ 0x40
 8007444:	d914      	bls.n	8007470 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6812      	ldr	r2, [r2, #0]
 8007450:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007456:	1d1a      	adds	r2, r3, #4
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007462:	b29b      	uxth	r3, r3
 8007464:	3b04      	subs	r3, #4
 8007466:	b29a      	uxth	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800746e:	e059      	b.n	8007524 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007476:	b29b      	uxth	r3, r3
 8007478:	2b01      	cmp	r3, #1
 800747a:	d917      	bls.n	80074ac <HAL_SPI_Transmit+0x300>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007480:	2b00      	cmp	r3, #0
 8007482:	d013      	beq.n	80074ac <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007488:	881a      	ldrh	r2, [r3, #0]
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007492:	1c9a      	adds	r2, r3, #2
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800749e:	b29b      	uxth	r3, r3
 80074a0:	3b02      	subs	r3, #2
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80074aa:	e03b      	b.n	8007524 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3320      	adds	r3, #32
 80074b6:	7812      	ldrb	r2, [r2, #0]
 80074b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80074d6:	e025      	b.n	8007524 <HAL_SPI_Transmit+0x378>
 80074d8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074dc:	f7fc fa02 	bl	80038e4 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d803      	bhi.n	80074f4 <HAL_SPI_Transmit+0x348>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f2:	d102      	bne.n	80074fa <HAL_SPI_Transmit+0x34e>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d114      	bne.n	8007524 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 fac4 	bl	8007a88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007506:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e02c      	b.n	800757e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800752a:	b29b      	uxth	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	f47f af79 	bne.w	8007424 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2200      	movs	r2, #0
 800753a:	2108      	movs	r1, #8
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 fb43 	bl	8007bc8 <SPI_WaitOnFlagUntilTimeout>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800754e:	f043 0220 	orr.w	r2, r3, #32
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 fa95 	bl	8007a88 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e000      	b.n	800757e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800757c:	2300      	movs	r3, #0
  }
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop

08007588 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	603b      	str	r3, [r7, #0]
 8007594:	4613      	mov	r3, r2
 8007596:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759c:	095b      	lsrs	r3, r3, #5
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3301      	adds	r3, #1
 80075a2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3330      	adds	r3, #48	@ 0x30
 80075aa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075ac:	f7fc f99a 	bl	80038e4 <HAL_GetTick>
 80075b0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d001      	beq.n	80075c2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80075be:	2302      	movs	r3, #2
 80075c0:	e250      	b.n	8007a64 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <HAL_SPI_Receive+0x46>
 80075c8:	88fb      	ldrh	r3, [r7, #6]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e248      	b.n	8007a64 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d101      	bne.n	80075e0 <HAL_SPI_Receive+0x58>
 80075dc:	2302      	movs	r3, #2
 80075de:	e241      	b.n	8007a64 <HAL_SPI_Receive+0x4dc>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2204      	movs	r2, #4
 80075ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	88fa      	ldrh	r2, [r7, #6]
 8007602:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	88fa      	ldrh	r2, [r7, #6]
 800760a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007638:	d108      	bne.n	800764c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	e009      	b.n	8007660 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800765e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	4b95      	ldr	r3, [pc, #596]	@ (80078bc <HAL_SPI_Receive+0x334>)
 8007668:	4013      	ands	r3, r2
 800766a:	88f9      	ldrh	r1, [r7, #6]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	6812      	ldr	r2, [r2, #0]
 8007670:	430b      	orrs	r3, r1
 8007672:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0201 	orr.w	r2, r2, #1
 8007682:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800768c:	d107      	bne.n	800769e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800769c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	2b0f      	cmp	r3, #15
 80076a4:	d96c      	bls.n	8007780 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80076a6:	e064      	b.n	8007772 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d114      	bne.n	80076e8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80076c8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076ce:	1d1a      	adds	r2, r3, #4
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076da:	b29b      	uxth	r3, r3
 80076dc:	3b01      	subs	r3, #1
 80076de:	b29a      	uxth	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80076e6:	e044      	b.n	8007772 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	8bfa      	ldrh	r2, [r7, #30]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d919      	bls.n	800772a <HAL_SPI_Receive+0x1a2>
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d014      	beq.n	800772a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007708:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800770a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007710:	1d1a      	adds	r2, r3, #4
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800771c:	b29b      	uxth	r3, r3
 800771e:	3b01      	subs	r3, #1
 8007720:	b29a      	uxth	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007728:	e023      	b.n	8007772 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800772a:	f7fc f8db 	bl	80038e4 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d803      	bhi.n	8007742 <HAL_SPI_Receive+0x1ba>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007740:	d102      	bne.n	8007748 <HAL_SPI_Receive+0x1c0>
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d114      	bne.n	8007772 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 f99d 	bl	8007a88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007754:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e178      	b.n	8007a64 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007778:	b29b      	uxth	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d194      	bne.n	80076a8 <HAL_SPI_Receive+0x120>
 800777e:	e15e      	b.n	8007a3e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	2b07      	cmp	r3, #7
 8007786:	f240 8153 	bls.w	8007a30 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800778a:	e08f      	b.n	80078ac <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d114      	bne.n	80077cc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	8812      	ldrh	r2, [r2, #0]
 80077aa:	b292      	uxth	r2, r2
 80077ac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077b2:	1c9a      	adds	r2, r3, #2
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80077ca:	e06f      	b.n	80078ac <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	8bfa      	ldrh	r2, [r7, #30]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d924      	bls.n	8007824 <HAL_SPI_Receive+0x29c>
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d01f      	beq.n	8007824 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	8812      	ldrh	r2, [r2, #0]
 80077ec:	b292      	uxth	r2, r2
 80077ee:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077f4:	1c9a      	adds	r2, r3, #2
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	8812      	ldrh	r2, [r2, #0]
 8007802:	b292      	uxth	r2, r2
 8007804:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800780a:	1c9a      	adds	r2, r3, #2
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007816:	b29b      	uxth	r3, r3
 8007818:	3b02      	subs	r3, #2
 800781a:	b29a      	uxth	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007822:	e043      	b.n	80078ac <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800782a:	b29b      	uxth	r3, r3
 800782c:	2b01      	cmp	r3, #1
 800782e:	d119      	bne.n	8007864 <HAL_SPI_Receive+0x2dc>
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d014      	beq.n	8007864 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	8812      	ldrh	r2, [r2, #0]
 8007842:	b292      	uxth	r2, r2
 8007844:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800784a:	1c9a      	adds	r2, r3, #2
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007856:	b29b      	uxth	r3, r3
 8007858:	3b01      	subs	r3, #1
 800785a:	b29a      	uxth	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007862:	e023      	b.n	80078ac <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007864:	f7fc f83e 	bl	80038e4 <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d803      	bhi.n	800787c <HAL_SPI_Receive+0x2f4>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787a:	d102      	bne.n	8007882 <HAL_SPI_Receive+0x2fa>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d114      	bne.n	80078ac <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 f900 	bl	8007a88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800788e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e0db      	b.n	8007a64 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f47f af69 	bne.w	800778c <HAL_SPI_Receive+0x204>
 80078ba:	e0c0      	b.n	8007a3e <HAL_SPI_Receive+0x4b6>
 80078bc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d117      	bne.n	8007906 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078e2:	7812      	ldrb	r2, [r2, #0]
 80078e4:	b2d2      	uxtb	r2, r2
 80078e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	3b01      	subs	r3, #1
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007904:	e094      	b.n	8007a30 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800790c:	b29b      	uxth	r3, r3
 800790e:	8bfa      	ldrh	r2, [r7, #30]
 8007910:	429a      	cmp	r2, r3
 8007912:	d946      	bls.n	80079a2 <HAL_SPI_Receive+0x41a>
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d041      	beq.n	80079a2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800792a:	7812      	ldrb	r2, [r2, #0]
 800792c:	b2d2      	uxtb	r2, r2
 800792e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007946:	7812      	ldrb	r2, [r2, #0]
 8007948:	b2d2      	uxtb	r2, r2
 800794a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007962:	7812      	ldrb	r2, [r2, #0]
 8007964:	b2d2      	uxtb	r2, r2
 8007966:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800797e:	7812      	ldrb	r2, [r2, #0]
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007994:	b29b      	uxth	r3, r3
 8007996:	3b04      	subs	r3, #4
 8007998:	b29a      	uxth	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80079a0:	e046      	b.n	8007a30 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d81c      	bhi.n	80079e8 <HAL_SPI_Receive+0x460>
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d017      	beq.n	80079e8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079c4:	7812      	ldrb	r2, [r2, #0]
 80079c6:	b2d2      	uxtb	r2, r2
 80079c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80079e6:	e023      	b.n	8007a30 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079e8:	f7fb ff7c 	bl	80038e4 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d803      	bhi.n	8007a00 <HAL_SPI_Receive+0x478>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fe:	d102      	bne.n	8007a06 <HAL_SPI_Receive+0x47e>
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d114      	bne.n	8007a30 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 f83e 	bl	8007a88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e019      	b.n	8007a64 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f47f af41 	bne.w	80078c0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f000 f822 	bl	8007a88 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e000      	b.n	8007a64 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007a62:	2300      	movs	r3, #0
  }
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3720      	adds	r7, #32
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007a7a:	b2db      	uxtb	r3, r3
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	699a      	ldr	r2, [r3, #24]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0208 	orr.w	r2, r2, #8
 8007aa6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	699a      	ldr	r2, [r3, #24]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f042 0210 	orr.w	r2, r2, #16
 8007ab6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 0201 	bic.w	r2, r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6919      	ldr	r1, [r3, #16]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	4b3c      	ldr	r3, [pc, #240]	@ (8007bc4 <SPI_CloseTransfer+0x13c>)
 8007ad4:	400b      	ands	r3, r1
 8007ad6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007ae6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b04      	cmp	r3, #4
 8007af2:	d014      	beq.n	8007b1e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f003 0320 	and.w	r3, r3, #32
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00f      	beq.n	8007b1e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b04:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	699a      	ldr	r2, [r3, #24]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f042 0220 	orr.w	r2, r2, #32
 8007b1c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d014      	beq.n	8007b54 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00f      	beq.n	8007b54 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b3a:	f043 0204 	orr.w	r2, r3, #4
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	699a      	ldr	r2, [r3, #24]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b52:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00f      	beq.n	8007b7e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b64:	f043 0201 	orr.w	r2, r3, #1
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699a      	ldr	r2, [r3, #24]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b7c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00f      	beq.n	8007ba8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b8e:	f043 0208 	orr.w	r2, r3, #8
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699a      	ldr	r2, [r3, #24]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ba6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007bb8:	bf00      	nop
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	fffffc90 	.word	0xfffffc90

08007bc8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007bd8:	e010      	b.n	8007bfc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bda:	f7fb fe83 	bl	80038e4 <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d803      	bhi.n	8007bf2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf0:	d102      	bne.n	8007bf8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e00f      	b.n	8007c1c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	695a      	ldr	r2, [r3, #20]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	4013      	ands	r3, r2
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	bf0c      	ite	eq
 8007c0c:	2301      	moveq	r3, #1
 8007c0e:	2300      	movne	r3, #0
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	461a      	mov	r2, r3
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d0df      	beq.n	8007bda <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c30:	095b      	lsrs	r3, r3, #5
 8007c32:	3301      	adds	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	3307      	adds	r3, #7
 8007c42:	08db      	lsrs	r3, r3, #3
 8007c44:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	fb02 f303 	mul.w	r3, r2, r3
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e049      	b.n	8007d00 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d106      	bne.n	8007c86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7f9 fca3 	bl	80015cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3304      	adds	r3, #4
 8007c96:	4619      	mov	r1, r3
 8007c98:	4610      	mov	r0, r2
 8007c9a:	f000 fa09 	bl	80080b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e049      	b.n	8007dae <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f841 	bl	8007db6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3304      	adds	r3, #4
 8007d44:	4619      	mov	r1, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	f000 f9b2 	bl	80080b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
	...

08007dcc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d101      	bne.n	8007dea <HAL_TIM_OC_ConfigChannel+0x1e>
 8007de6:	2302      	movs	r3, #2
 8007de8:	e066      	b.n	8007eb8 <HAL_TIM_OC_ConfigChannel+0xec>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b14      	cmp	r3, #20
 8007df6:	d857      	bhi.n	8007ea8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007df8:	a201      	add	r2, pc, #4	@ (adr r2, 8007e00 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfe:	bf00      	nop
 8007e00:	08007e55 	.word	0x08007e55
 8007e04:	08007ea9 	.word	0x08007ea9
 8007e08:	08007ea9 	.word	0x08007ea9
 8007e0c:	08007ea9 	.word	0x08007ea9
 8007e10:	08007e63 	.word	0x08007e63
 8007e14:	08007ea9 	.word	0x08007ea9
 8007e18:	08007ea9 	.word	0x08007ea9
 8007e1c:	08007ea9 	.word	0x08007ea9
 8007e20:	08007e71 	.word	0x08007e71
 8007e24:	08007ea9 	.word	0x08007ea9
 8007e28:	08007ea9 	.word	0x08007ea9
 8007e2c:	08007ea9 	.word	0x08007ea9
 8007e30:	08007e7f 	.word	0x08007e7f
 8007e34:	08007ea9 	.word	0x08007ea9
 8007e38:	08007ea9 	.word	0x08007ea9
 8007e3c:	08007ea9 	.word	0x08007ea9
 8007e40:	08007e8d 	.word	0x08007e8d
 8007e44:	08007ea9 	.word	0x08007ea9
 8007e48:	08007ea9 	.word	0x08007ea9
 8007e4c:	08007ea9 	.word	0x08007ea9
 8007e50:	08007e9b 	.word	0x08007e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 f9ce 	bl	80081fc <TIM_OC1_SetConfig>
      break;
 8007e60:	e025      	b.n	8007eae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68b9      	ldr	r1, [r7, #8]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 fa57 	bl	800831c <TIM_OC2_SetConfig>
      break;
 8007e6e:	e01e      	b.n	8007eae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68b9      	ldr	r1, [r7, #8]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fada 	bl	8008430 <TIM_OC3_SetConfig>
      break;
 8007e7c:	e017      	b.n	8007eae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68b9      	ldr	r1, [r7, #8]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 fb5b 	bl	8008540 <TIM_OC4_SetConfig>
      break;
 8007e8a:	e010      	b.n	8007eae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68b9      	ldr	r1, [r7, #8]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fbbe 	bl	8008614 <TIM_OC5_SetConfig>
      break;
 8007e98:	e009      	b.n	8007eae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68b9      	ldr	r1, [r7, #8]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fc1b 	bl	80086dc <TIM_OC6_SetConfig>
      break;
 8007ea6:	e002      	b.n	8007eae <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8007eac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d101      	bne.n	8007edc <HAL_TIM_ConfigClockSource+0x1c>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e0dc      	b.n	8008096 <HAL_TIM_ConfigClockSource+0x1d6>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80080a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a64      	ldr	r2, [pc, #400]	@ (80080a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	f000 80a9 	beq.w	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f18:	4a62      	ldr	r2, [pc, #392]	@ (80080a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	f200 80ae 	bhi.w	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f20:	4a61      	ldr	r2, [pc, #388]	@ (80080a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	f000 80a1 	beq.w	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f28:	4a5f      	ldr	r2, [pc, #380]	@ (80080a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	f200 80a6 	bhi.w	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f30:	4a5e      	ldr	r2, [pc, #376]	@ (80080ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	f000 8099 	beq.w	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f38:	4a5c      	ldr	r2, [pc, #368]	@ (80080ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	f200 809e 	bhi.w	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007f44:	f000 8091 	beq.w	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007f4c:	f200 8096 	bhi.w	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f54:	f000 8089 	beq.w	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f5c:	f200 808e 	bhi.w	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f64:	d03e      	beq.n	8007fe4 <HAL_TIM_ConfigClockSource+0x124>
 8007f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f6a:	f200 8087 	bhi.w	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f72:	f000 8086 	beq.w	8008082 <HAL_TIM_ConfigClockSource+0x1c2>
 8007f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f7a:	d87f      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f7c:	2b70      	cmp	r3, #112	@ 0x70
 8007f7e:	d01a      	beq.n	8007fb6 <HAL_TIM_ConfigClockSource+0xf6>
 8007f80:	2b70      	cmp	r3, #112	@ 0x70
 8007f82:	d87b      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f84:	2b60      	cmp	r3, #96	@ 0x60
 8007f86:	d050      	beq.n	800802a <HAL_TIM_ConfigClockSource+0x16a>
 8007f88:	2b60      	cmp	r3, #96	@ 0x60
 8007f8a:	d877      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f8c:	2b50      	cmp	r3, #80	@ 0x50
 8007f8e:	d03c      	beq.n	800800a <HAL_TIM_ConfigClockSource+0x14a>
 8007f90:	2b50      	cmp	r3, #80	@ 0x50
 8007f92:	d873      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f94:	2b40      	cmp	r3, #64	@ 0x40
 8007f96:	d058      	beq.n	800804a <HAL_TIM_ConfigClockSource+0x18a>
 8007f98:	2b40      	cmp	r3, #64	@ 0x40
 8007f9a:	d86f      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f9c:	2b30      	cmp	r3, #48	@ 0x30
 8007f9e:	d064      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fa0:	2b30      	cmp	r3, #48	@ 0x30
 8007fa2:	d86b      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007fa4:	2b20      	cmp	r3, #32
 8007fa6:	d060      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fa8:	2b20      	cmp	r3, #32
 8007faa:	d867      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d05c      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fb0:	2b10      	cmp	r3, #16
 8007fb2:	d05a      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fb4:	e062      	b.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fc6:	f000 fc6d 	bl	80088a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	609a      	str	r2, [r3, #8]
      break;
 8007fe2:	e04f      	b.n	8008084 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ff4:	f000 fc56 	bl	80088a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689a      	ldr	r2, [r3, #8]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008006:	609a      	str	r2, [r3, #8]
      break;
 8008008:	e03c      	b.n	8008084 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008016:	461a      	mov	r2, r3
 8008018:	f000 fbc6 	bl	80087a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2150      	movs	r1, #80	@ 0x50
 8008022:	4618      	mov	r0, r3
 8008024:	f000 fc20 	bl	8008868 <TIM_ITRx_SetConfig>
      break;
 8008028:	e02c      	b.n	8008084 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008036:	461a      	mov	r2, r3
 8008038:	f000 fbe5 	bl	8008806 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2160      	movs	r1, #96	@ 0x60
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fc10 	bl	8008868 <TIM_ITRx_SetConfig>
      break;
 8008048:	e01c      	b.n	8008084 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008056:	461a      	mov	r2, r3
 8008058:	f000 fba6 	bl	80087a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2140      	movs	r1, #64	@ 0x40
 8008062:	4618      	mov	r0, r3
 8008064:	f000 fc00 	bl	8008868 <TIM_ITRx_SetConfig>
      break;
 8008068:	e00c      	b.n	8008084 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f000 fbf7 	bl	8008868 <TIM_ITRx_SetConfig>
      break;
 800807a:	e003      	b.n	8008084 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	73fb      	strb	r3, [r7, #15]
      break;
 8008080:	e000      	b.n	8008084 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008094:	7bfb      	ldrb	r3, [r7, #15]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	ffceff88 	.word	0xffceff88
 80080a4:	00100040 	.word	0x00100040
 80080a8:	00100030 	.word	0x00100030
 80080ac:	00100020 	.word	0x00100020

080080b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a46      	ldr	r2, [pc, #280]	@ (80081dc <TIM_Base_SetConfig+0x12c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d013      	beq.n	80080f0 <TIM_Base_SetConfig+0x40>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ce:	d00f      	beq.n	80080f0 <TIM_Base_SetConfig+0x40>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a43      	ldr	r2, [pc, #268]	@ (80081e0 <TIM_Base_SetConfig+0x130>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d00b      	beq.n	80080f0 <TIM_Base_SetConfig+0x40>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a42      	ldr	r2, [pc, #264]	@ (80081e4 <TIM_Base_SetConfig+0x134>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d007      	beq.n	80080f0 <TIM_Base_SetConfig+0x40>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a41      	ldr	r2, [pc, #260]	@ (80081e8 <TIM_Base_SetConfig+0x138>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d003      	beq.n	80080f0 <TIM_Base_SetConfig+0x40>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a40      	ldr	r2, [pc, #256]	@ (80081ec <TIM_Base_SetConfig+0x13c>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d108      	bne.n	8008102 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a35      	ldr	r2, [pc, #212]	@ (80081dc <TIM_Base_SetConfig+0x12c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d01f      	beq.n	800814a <TIM_Base_SetConfig+0x9a>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008110:	d01b      	beq.n	800814a <TIM_Base_SetConfig+0x9a>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a32      	ldr	r2, [pc, #200]	@ (80081e0 <TIM_Base_SetConfig+0x130>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d017      	beq.n	800814a <TIM_Base_SetConfig+0x9a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a31      	ldr	r2, [pc, #196]	@ (80081e4 <TIM_Base_SetConfig+0x134>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d013      	beq.n	800814a <TIM_Base_SetConfig+0x9a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a30      	ldr	r2, [pc, #192]	@ (80081e8 <TIM_Base_SetConfig+0x138>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00f      	beq.n	800814a <TIM_Base_SetConfig+0x9a>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a2f      	ldr	r2, [pc, #188]	@ (80081ec <TIM_Base_SetConfig+0x13c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00b      	beq.n	800814a <TIM_Base_SetConfig+0x9a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a2e      	ldr	r2, [pc, #184]	@ (80081f0 <TIM_Base_SetConfig+0x140>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d007      	beq.n	800814a <TIM_Base_SetConfig+0x9a>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a2d      	ldr	r2, [pc, #180]	@ (80081f4 <TIM_Base_SetConfig+0x144>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d003      	beq.n	800814a <TIM_Base_SetConfig+0x9a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a2c      	ldr	r2, [pc, #176]	@ (80081f8 <TIM_Base_SetConfig+0x148>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d108      	bne.n	800815c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	4313      	orrs	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a16      	ldr	r2, [pc, #88]	@ (80081dc <TIM_Base_SetConfig+0x12c>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d00f      	beq.n	80081a8 <TIM_Base_SetConfig+0xf8>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a18      	ldr	r2, [pc, #96]	@ (80081ec <TIM_Base_SetConfig+0x13c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d00b      	beq.n	80081a8 <TIM_Base_SetConfig+0xf8>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a17      	ldr	r2, [pc, #92]	@ (80081f0 <TIM_Base_SetConfig+0x140>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d007      	beq.n	80081a8 <TIM_Base_SetConfig+0xf8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a16      	ldr	r2, [pc, #88]	@ (80081f4 <TIM_Base_SetConfig+0x144>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d003      	beq.n	80081a8 <TIM_Base_SetConfig+0xf8>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a15      	ldr	r2, [pc, #84]	@ (80081f8 <TIM_Base_SetConfig+0x148>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d103      	bne.n	80081b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	691a      	ldr	r2, [r3, #16]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d105      	bne.n	80081ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	f023 0201 	bic.w	r2, r3, #1
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	611a      	str	r2, [r3, #16]
  }
}
 80081ce:	bf00      	nop
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	40010000 	.word	0x40010000
 80081e0:	40000400 	.word	0x40000400
 80081e4:	40000800 	.word	0x40000800
 80081e8:	40000c00 	.word	0x40000c00
 80081ec:	40010400 	.word	0x40010400
 80081f0:	40014000 	.word	0x40014000
 80081f4:	40014400 	.word	0x40014400
 80081f8:	40014800 	.word	0x40014800

080081fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a1b      	ldr	r3, [r3, #32]
 8008210:	f023 0201 	bic.w	r2, r3, #1
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	4b37      	ldr	r3, [pc, #220]	@ (8008304 <TIM_OC1_SetConfig+0x108>)
 8008228:	4013      	ands	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f023 0303 	bic.w	r3, r3, #3
 8008232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f023 0302 	bic.w	r3, r3, #2
 8008244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	4313      	orrs	r3, r2
 800824e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a2d      	ldr	r2, [pc, #180]	@ (8008308 <TIM_OC1_SetConfig+0x10c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d00f      	beq.n	8008278 <TIM_OC1_SetConfig+0x7c>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a2c      	ldr	r2, [pc, #176]	@ (800830c <TIM_OC1_SetConfig+0x110>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00b      	beq.n	8008278 <TIM_OC1_SetConfig+0x7c>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a2b      	ldr	r2, [pc, #172]	@ (8008310 <TIM_OC1_SetConfig+0x114>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d007      	beq.n	8008278 <TIM_OC1_SetConfig+0x7c>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a2a      	ldr	r2, [pc, #168]	@ (8008314 <TIM_OC1_SetConfig+0x118>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d003      	beq.n	8008278 <TIM_OC1_SetConfig+0x7c>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a29      	ldr	r2, [pc, #164]	@ (8008318 <TIM_OC1_SetConfig+0x11c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d10c      	bne.n	8008292 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	f023 0308 	bic.w	r3, r3, #8
 800827e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	4313      	orrs	r3, r2
 8008288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f023 0304 	bic.w	r3, r3, #4
 8008290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a1c      	ldr	r2, [pc, #112]	@ (8008308 <TIM_OC1_SetConfig+0x10c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00f      	beq.n	80082ba <TIM_OC1_SetConfig+0xbe>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a1b      	ldr	r2, [pc, #108]	@ (800830c <TIM_OC1_SetConfig+0x110>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d00b      	beq.n	80082ba <TIM_OC1_SetConfig+0xbe>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a1a      	ldr	r2, [pc, #104]	@ (8008310 <TIM_OC1_SetConfig+0x114>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d007      	beq.n	80082ba <TIM_OC1_SetConfig+0xbe>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a19      	ldr	r2, [pc, #100]	@ (8008314 <TIM_OC1_SetConfig+0x118>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d003      	beq.n	80082ba <TIM_OC1_SetConfig+0xbe>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a18      	ldr	r2, [pc, #96]	@ (8008318 <TIM_OC1_SetConfig+0x11c>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d111      	bne.n	80082de <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80082c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	4313      	orrs	r3, r2
 80082dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	621a      	str	r2, [r3, #32]
}
 80082f8:	bf00      	nop
 80082fa:	371c      	adds	r7, #28
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	fffeff8f 	.word	0xfffeff8f
 8008308:	40010000 	.word	0x40010000
 800830c:	40010400 	.word	0x40010400
 8008310:	40014000 	.word	0x40014000
 8008314:	40014400 	.word	0x40014400
 8008318:	40014800 	.word	0x40014800

0800831c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	f023 0210 	bic.w	r2, r3, #16
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	4b34      	ldr	r3, [pc, #208]	@ (8008418 <TIM_OC2_SetConfig+0xfc>)
 8008348:	4013      	ands	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	021b      	lsls	r3, r3, #8
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	4313      	orrs	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f023 0320 	bic.w	r3, r3, #32
 8008366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	011b      	lsls	r3, r3, #4
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4313      	orrs	r3, r2
 8008372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a29      	ldr	r2, [pc, #164]	@ (800841c <TIM_OC2_SetConfig+0x100>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d003      	beq.n	8008384 <TIM_OC2_SetConfig+0x68>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a28      	ldr	r2, [pc, #160]	@ (8008420 <TIM_OC2_SetConfig+0x104>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d10d      	bne.n	80083a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800838a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	011b      	lsls	r3, r3, #4
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	4313      	orrs	r3, r2
 8008396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800839e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a1e      	ldr	r2, [pc, #120]	@ (800841c <TIM_OC2_SetConfig+0x100>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00f      	beq.n	80083c8 <TIM_OC2_SetConfig+0xac>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a1d      	ldr	r2, [pc, #116]	@ (8008420 <TIM_OC2_SetConfig+0x104>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00b      	beq.n	80083c8 <TIM_OC2_SetConfig+0xac>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a1c      	ldr	r2, [pc, #112]	@ (8008424 <TIM_OC2_SetConfig+0x108>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d007      	beq.n	80083c8 <TIM_OC2_SetConfig+0xac>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008428 <TIM_OC2_SetConfig+0x10c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d003      	beq.n	80083c8 <TIM_OC2_SetConfig+0xac>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a1a      	ldr	r2, [pc, #104]	@ (800842c <TIM_OC2_SetConfig+0x110>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d113      	bne.n	80083f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	621a      	str	r2, [r3, #32]
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	feff8fff 	.word	0xfeff8fff
 800841c:	40010000 	.word	0x40010000
 8008420:	40010400 	.word	0x40010400
 8008424:	40014000 	.word	0x40014000
 8008428:	40014400 	.word	0x40014400
 800842c:	40014800 	.word	0x40014800

08008430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	4b33      	ldr	r3, [pc, #204]	@ (8008528 <TIM_OC3_SetConfig+0xf8>)
 800845c:	4013      	ands	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f023 0303 	bic.w	r3, r3, #3
 8008466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	021b      	lsls	r3, r3, #8
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a28      	ldr	r2, [pc, #160]	@ (800852c <TIM_OC3_SetConfig+0xfc>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d003      	beq.n	8008496 <TIM_OC3_SetConfig+0x66>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a27      	ldr	r2, [pc, #156]	@ (8008530 <TIM_OC3_SetConfig+0x100>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d10d      	bne.n	80084b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800849c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	021b      	lsls	r3, r3, #8
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a1d      	ldr	r2, [pc, #116]	@ (800852c <TIM_OC3_SetConfig+0xfc>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d00f      	beq.n	80084da <TIM_OC3_SetConfig+0xaa>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008530 <TIM_OC3_SetConfig+0x100>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00b      	beq.n	80084da <TIM_OC3_SetConfig+0xaa>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008534 <TIM_OC3_SetConfig+0x104>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d007      	beq.n	80084da <TIM_OC3_SetConfig+0xaa>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a1a      	ldr	r2, [pc, #104]	@ (8008538 <TIM_OC3_SetConfig+0x108>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d003      	beq.n	80084da <TIM_OC3_SetConfig+0xaa>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a19      	ldr	r2, [pc, #100]	@ (800853c <TIM_OC3_SetConfig+0x10c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d113      	bne.n	8008502 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	011b      	lsls	r3, r3, #4
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	4313      	orrs	r3, r2
 8008500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	621a      	str	r2, [r3, #32]
}
 800851c:	bf00      	nop
 800851e:	371c      	adds	r7, #28
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	fffeff8f 	.word	0xfffeff8f
 800852c:	40010000 	.word	0x40010000
 8008530:	40010400 	.word	0x40010400
 8008534:	40014000 	.word	0x40014000
 8008538:	40014400 	.word	0x40014400
 800853c:	40014800 	.word	0x40014800

08008540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	69db      	ldr	r3, [r3, #28]
 8008566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	4b24      	ldr	r3, [pc, #144]	@ (80085fc <TIM_OC4_SetConfig+0xbc>)
 800856c:	4013      	ands	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	021b      	lsls	r3, r3, #8
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	4313      	orrs	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800858a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	031b      	lsls	r3, r3, #12
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	4313      	orrs	r3, r2
 8008596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a19      	ldr	r2, [pc, #100]	@ (8008600 <TIM_OC4_SetConfig+0xc0>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00f      	beq.n	80085c0 <TIM_OC4_SetConfig+0x80>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a18      	ldr	r2, [pc, #96]	@ (8008604 <TIM_OC4_SetConfig+0xc4>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d00b      	beq.n	80085c0 <TIM_OC4_SetConfig+0x80>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a17      	ldr	r2, [pc, #92]	@ (8008608 <TIM_OC4_SetConfig+0xc8>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d007      	beq.n	80085c0 <TIM_OC4_SetConfig+0x80>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a16      	ldr	r2, [pc, #88]	@ (800860c <TIM_OC4_SetConfig+0xcc>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d003      	beq.n	80085c0 <TIM_OC4_SetConfig+0x80>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a15      	ldr	r2, [pc, #84]	@ (8008610 <TIM_OC4_SetConfig+0xd0>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d109      	bne.n	80085d4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	019b      	lsls	r3, r3, #6
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	621a      	str	r2, [r3, #32]
}
 80085ee:	bf00      	nop
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	feff8fff 	.word	0xfeff8fff
 8008600:	40010000 	.word	0x40010000
 8008604:	40010400 	.word	0x40010400
 8008608:	40014000 	.word	0x40014000
 800860c:	40014400 	.word	0x40014400
 8008610:	40014800 	.word	0x40014800

08008614 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008614:	b480      	push	{r7}
 8008616:	b087      	sub	sp, #28
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a1b      	ldr	r3, [r3, #32]
 8008628:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800863a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4b21      	ldr	r3, [pc, #132]	@ (80086c4 <TIM_OC5_SetConfig+0xb0>)
 8008640:	4013      	ands	r3, r2
 8008642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	4313      	orrs	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008654:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	041b      	lsls	r3, r3, #16
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	4313      	orrs	r3, r2
 8008660:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a18      	ldr	r2, [pc, #96]	@ (80086c8 <TIM_OC5_SetConfig+0xb4>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d00f      	beq.n	800868a <TIM_OC5_SetConfig+0x76>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a17      	ldr	r2, [pc, #92]	@ (80086cc <TIM_OC5_SetConfig+0xb8>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d00b      	beq.n	800868a <TIM_OC5_SetConfig+0x76>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a16      	ldr	r2, [pc, #88]	@ (80086d0 <TIM_OC5_SetConfig+0xbc>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d007      	beq.n	800868a <TIM_OC5_SetConfig+0x76>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a15      	ldr	r2, [pc, #84]	@ (80086d4 <TIM_OC5_SetConfig+0xc0>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d003      	beq.n	800868a <TIM_OC5_SetConfig+0x76>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a14      	ldr	r2, [pc, #80]	@ (80086d8 <TIM_OC5_SetConfig+0xc4>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d109      	bne.n	800869e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008690:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	021b      	lsls	r3, r3, #8
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	4313      	orrs	r3, r2
 800869c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	621a      	str	r2, [r3, #32]
}
 80086b8:	bf00      	nop
 80086ba:	371c      	adds	r7, #28
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	fffeff8f 	.word	0xfffeff8f
 80086c8:	40010000 	.word	0x40010000
 80086cc:	40010400 	.word	0x40010400
 80086d0:	40014000 	.word	0x40014000
 80086d4:	40014400 	.word	0x40014400
 80086d8:	40014800 	.word	0x40014800

080086dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	4b22      	ldr	r3, [pc, #136]	@ (8008790 <TIM_OC6_SetConfig+0xb4>)
 8008708:	4013      	ands	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	021b      	lsls	r3, r3, #8
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	4313      	orrs	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800871e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	051b      	lsls	r3, r3, #20
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	4313      	orrs	r3, r2
 800872a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a19      	ldr	r2, [pc, #100]	@ (8008794 <TIM_OC6_SetConfig+0xb8>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00f      	beq.n	8008754 <TIM_OC6_SetConfig+0x78>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a18      	ldr	r2, [pc, #96]	@ (8008798 <TIM_OC6_SetConfig+0xbc>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d00b      	beq.n	8008754 <TIM_OC6_SetConfig+0x78>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a17      	ldr	r2, [pc, #92]	@ (800879c <TIM_OC6_SetConfig+0xc0>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d007      	beq.n	8008754 <TIM_OC6_SetConfig+0x78>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a16      	ldr	r2, [pc, #88]	@ (80087a0 <TIM_OC6_SetConfig+0xc4>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d003      	beq.n	8008754 <TIM_OC6_SetConfig+0x78>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a15      	ldr	r2, [pc, #84]	@ (80087a4 <TIM_OC6_SetConfig+0xc8>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d109      	bne.n	8008768 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800875a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	029b      	lsls	r3, r3, #10
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	4313      	orrs	r3, r2
 8008766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	621a      	str	r2, [r3, #32]
}
 8008782:	bf00      	nop
 8008784:	371c      	adds	r7, #28
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	feff8fff 	.word	0xfeff8fff
 8008794:	40010000 	.word	0x40010000
 8008798:	40010400 	.word	0x40010400
 800879c:	40014000 	.word	0x40014000
 80087a0:	40014400 	.word	0x40014400
 80087a4:	40014800 	.word	0x40014800

080087a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b087      	sub	sp, #28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6a1b      	ldr	r3, [r3, #32]
 80087b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	f023 0201 	bic.w	r2, r3, #1
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	011b      	lsls	r3, r3, #4
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	4313      	orrs	r3, r2
 80087dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f023 030a 	bic.w	r3, r3, #10
 80087e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	621a      	str	r2, [r3, #32]
}
 80087fa:	bf00      	nop
 80087fc:	371c      	adds	r7, #28
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008806:	b480      	push	{r7}
 8008808:	b087      	sub	sp, #28
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6a1b      	ldr	r3, [r3, #32]
 800881c:	f023 0210 	bic.w	r2, r3, #16
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008830:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	031b      	lsls	r3, r3, #12
 8008836:	693a      	ldr	r2, [r7, #16]
 8008838:	4313      	orrs	r3, r2
 800883a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008842:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	011b      	lsls	r3, r3, #4
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	4313      	orrs	r3, r2
 800884c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	621a      	str	r2, [r3, #32]
}
 800885a:	bf00      	nop
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
	...

08008868 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	4b09      	ldr	r3, [pc, #36]	@ (80088a0 <TIM_ITRx_SetConfig+0x38>)
 800887c:	4013      	ands	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	4313      	orrs	r3, r2
 8008886:	f043 0307 	orr.w	r3, r3, #7
 800888a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	609a      	str	r2, [r3, #8]
}
 8008892:	bf00      	nop
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	ffcfff8f 	.word	0xffcfff8f

080088a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	021a      	lsls	r2, r3, #8
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	431a      	orrs	r2, r3
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	697a      	ldr	r2, [r7, #20]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	609a      	str	r2, [r3, #8]
}
 80088d8:	bf00      	nop
 80088da:	371c      	adds	r7, #28
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d101      	bne.n	80088fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088f8:	2302      	movs	r3, #2
 80088fa:	e06d      	b.n	80089d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2202      	movs	r2, #2
 8008908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a30      	ldr	r2, [pc, #192]	@ (80089e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d004      	beq.n	8008930 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a2f      	ldr	r2, [pc, #188]	@ (80089e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d108      	bne.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008936:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	4313      	orrs	r3, r2
 8008940:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008948:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	4313      	orrs	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a20      	ldr	r2, [pc, #128]	@ (80089e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d022      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800896e:	d01d      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a1d      	ldr	r2, [pc, #116]	@ (80089ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d018      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a1c      	ldr	r2, [pc, #112]	@ (80089f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d013      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a1a      	ldr	r2, [pc, #104]	@ (80089f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d00e      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a15      	ldr	r2, [pc, #84]	@ (80089e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d009      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a16      	ldr	r2, [pc, #88]	@ (80089f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d004      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a15      	ldr	r2, [pc, #84]	@ (80089fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d10c      	bne.n	80089c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	40010000 	.word	0x40010000
 80089e8:	40010400 	.word	0x40010400
 80089ec:	40000400 	.word	0x40000400
 80089f0:	40000800 	.word	0x40000800
 80089f4:	40000c00 	.word	0x40000c00
 80089f8:	40001800 	.word	0x40001800
 80089fc:	40014000 	.word	0x40014000

08008a00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e042      	b.n	8008a98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d106      	bne.n	8008a2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7f8 feb5 	bl	8001794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2224      	movs	r2, #36	@ 0x24
 8008a2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f022 0201 	bic.w	r2, r2, #1
 8008a40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fe1e 	bl	800968c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f8b3 	bl	8008bbc <UART_SetConfig>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d101      	bne.n	8008a60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e01b      	b.n	8008a98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689a      	ldr	r2, [r3, #8]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f042 0201 	orr.w	r2, r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fe9d 	bl	80097d0 <UART_CheckIdleState>
 8008a96:	4603      	mov	r3, r0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b08a      	sub	sp, #40	@ 0x28
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	603b      	str	r3, [r7, #0]
 8008aac:	4613      	mov	r3, r2
 8008aae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	d17b      	bne.n	8008bb2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <HAL_UART_Transmit+0x26>
 8008ac0:	88fb      	ldrh	r3, [r7, #6]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e074      	b.n	8008bb4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2221      	movs	r2, #33	@ 0x21
 8008ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ada:	f7fa ff03 	bl	80038e4 <HAL_GetTick>
 8008ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	88fa      	ldrh	r2, [r7, #6]
 8008ae4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	88fa      	ldrh	r2, [r7, #6]
 8008aec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008af8:	d108      	bne.n	8008b0c <HAL_UART_Transmit+0x6c>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d104      	bne.n	8008b0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	61bb      	str	r3, [r7, #24]
 8008b0a:	e003      	b.n	8008b14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b10:	2300      	movs	r3, #0
 8008b12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008b14:	e030      	b.n	8008b78 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2180      	movs	r1, #128	@ 0x80
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 feff 	bl	8009924 <UART_WaitOnFlagUntilTimeout>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2220      	movs	r2, #32
 8008b30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e03d      	b.n	8008bb4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d10b      	bne.n	8008b56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	3302      	adds	r3, #2
 8008b52:	61bb      	str	r3, [r7, #24]
 8008b54:	e007      	b.n	8008b66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	781a      	ldrb	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	3301      	adds	r3, #1
 8008b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1c8      	bne.n	8008b16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	2140      	movs	r1, #64	@ 0x40
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 fec8 	bl	8009924 <UART_WaitOnFlagUntilTimeout>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d005      	beq.n	8008ba6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e006      	b.n	8008bb4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	e000      	b.n	8008bb4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008bb2:	2302      	movs	r3, #2
  }
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3720      	adds	r7, #32
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bc0:	b092      	sub	sp, #72	@ 0x48
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	689a      	ldr	r2, [r3, #8]
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	4bbe      	ldr	r3, [pc, #760]	@ (8008ee4 <UART_SetConfig+0x328>)
 8008bec:	4013      	ands	r3, r2
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	6812      	ldr	r2, [r2, #0]
 8008bf2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bf4:	430b      	orrs	r3, r1
 8008bf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4ab3      	ldr	r2, [pc, #716]	@ (8008ee8 <UART_SetConfig+0x32c>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d004      	beq.n	8008c28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c24:	4313      	orrs	r3, r2
 8008c26:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689a      	ldr	r2, [r3, #8]
 8008c2e:	4baf      	ldr	r3, [pc, #700]	@ (8008eec <UART_SetConfig+0x330>)
 8008c30:	4013      	ands	r3, r2
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	6812      	ldr	r2, [r2, #0]
 8008c36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c42:	f023 010f 	bic.w	r1, r3, #15
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4aa6      	ldr	r2, [pc, #664]	@ (8008ef0 <UART_SetConfig+0x334>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d177      	bne.n	8008d4c <UART_SetConfig+0x190>
 8008c5c:	4ba5      	ldr	r3, [pc, #660]	@ (8008ef4 <UART_SetConfig+0x338>)
 8008c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c64:	2b28      	cmp	r3, #40	@ 0x28
 8008c66:	d86d      	bhi.n	8008d44 <UART_SetConfig+0x188>
 8008c68:	a201      	add	r2, pc, #4	@ (adr r2, 8008c70 <UART_SetConfig+0xb4>)
 8008c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6e:	bf00      	nop
 8008c70:	08008d15 	.word	0x08008d15
 8008c74:	08008d45 	.word	0x08008d45
 8008c78:	08008d45 	.word	0x08008d45
 8008c7c:	08008d45 	.word	0x08008d45
 8008c80:	08008d45 	.word	0x08008d45
 8008c84:	08008d45 	.word	0x08008d45
 8008c88:	08008d45 	.word	0x08008d45
 8008c8c:	08008d45 	.word	0x08008d45
 8008c90:	08008d1d 	.word	0x08008d1d
 8008c94:	08008d45 	.word	0x08008d45
 8008c98:	08008d45 	.word	0x08008d45
 8008c9c:	08008d45 	.word	0x08008d45
 8008ca0:	08008d45 	.word	0x08008d45
 8008ca4:	08008d45 	.word	0x08008d45
 8008ca8:	08008d45 	.word	0x08008d45
 8008cac:	08008d45 	.word	0x08008d45
 8008cb0:	08008d25 	.word	0x08008d25
 8008cb4:	08008d45 	.word	0x08008d45
 8008cb8:	08008d45 	.word	0x08008d45
 8008cbc:	08008d45 	.word	0x08008d45
 8008cc0:	08008d45 	.word	0x08008d45
 8008cc4:	08008d45 	.word	0x08008d45
 8008cc8:	08008d45 	.word	0x08008d45
 8008ccc:	08008d45 	.word	0x08008d45
 8008cd0:	08008d2d 	.word	0x08008d2d
 8008cd4:	08008d45 	.word	0x08008d45
 8008cd8:	08008d45 	.word	0x08008d45
 8008cdc:	08008d45 	.word	0x08008d45
 8008ce0:	08008d45 	.word	0x08008d45
 8008ce4:	08008d45 	.word	0x08008d45
 8008ce8:	08008d45 	.word	0x08008d45
 8008cec:	08008d45 	.word	0x08008d45
 8008cf0:	08008d35 	.word	0x08008d35
 8008cf4:	08008d45 	.word	0x08008d45
 8008cf8:	08008d45 	.word	0x08008d45
 8008cfc:	08008d45 	.word	0x08008d45
 8008d00:	08008d45 	.word	0x08008d45
 8008d04:	08008d45 	.word	0x08008d45
 8008d08:	08008d45 	.word	0x08008d45
 8008d0c:	08008d45 	.word	0x08008d45
 8008d10:	08008d3d 	.word	0x08008d3d
 8008d14:	2301      	movs	r3, #1
 8008d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1a:	e222      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008d1c:	2304      	movs	r3, #4
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d22:	e21e      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008d24:	2308      	movs	r3, #8
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2a:	e21a      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008d2c:	2310      	movs	r3, #16
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e216      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008d34:	2320      	movs	r3, #32
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3a:	e212      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008d3c:	2340      	movs	r3, #64	@ 0x40
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d42:	e20e      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008d44:	2380      	movs	r3, #128	@ 0x80
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4a:	e20a      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a69      	ldr	r2, [pc, #420]	@ (8008ef8 <UART_SetConfig+0x33c>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d130      	bne.n	8008db8 <UART_SetConfig+0x1fc>
 8008d56:	4b67      	ldr	r3, [pc, #412]	@ (8008ef4 <UART_SetConfig+0x338>)
 8008d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	2b05      	cmp	r3, #5
 8008d60:	d826      	bhi.n	8008db0 <UART_SetConfig+0x1f4>
 8008d62:	a201      	add	r2, pc, #4	@ (adr r2, 8008d68 <UART_SetConfig+0x1ac>)
 8008d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d68:	08008d81 	.word	0x08008d81
 8008d6c:	08008d89 	.word	0x08008d89
 8008d70:	08008d91 	.word	0x08008d91
 8008d74:	08008d99 	.word	0x08008d99
 8008d78:	08008da1 	.word	0x08008da1
 8008d7c:	08008da9 	.word	0x08008da9
 8008d80:	2300      	movs	r3, #0
 8008d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d86:	e1ec      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008d88:	2304      	movs	r3, #4
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8e:	e1e8      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008d90:	2308      	movs	r3, #8
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d96:	e1e4      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008d98:	2310      	movs	r3, #16
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9e:	e1e0      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008da0:	2320      	movs	r3, #32
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da6:	e1dc      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008da8:	2340      	movs	r3, #64	@ 0x40
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dae:	e1d8      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008db0:	2380      	movs	r3, #128	@ 0x80
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db6:	e1d4      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a4f      	ldr	r2, [pc, #316]	@ (8008efc <UART_SetConfig+0x340>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d130      	bne.n	8008e24 <UART_SetConfig+0x268>
 8008dc2:	4b4c      	ldr	r3, [pc, #304]	@ (8008ef4 <UART_SetConfig+0x338>)
 8008dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc6:	f003 0307 	and.w	r3, r3, #7
 8008dca:	2b05      	cmp	r3, #5
 8008dcc:	d826      	bhi.n	8008e1c <UART_SetConfig+0x260>
 8008dce:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd4 <UART_SetConfig+0x218>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008ded 	.word	0x08008ded
 8008dd8:	08008df5 	.word	0x08008df5
 8008ddc:	08008dfd 	.word	0x08008dfd
 8008de0:	08008e05 	.word	0x08008e05
 8008de4:	08008e0d 	.word	0x08008e0d
 8008de8:	08008e15 	.word	0x08008e15
 8008dec:	2300      	movs	r3, #0
 8008dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df2:	e1b6      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008df4:	2304      	movs	r3, #4
 8008df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfa:	e1b2      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008dfc:	2308      	movs	r3, #8
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e02:	e1ae      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008e04:	2310      	movs	r3, #16
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e1aa      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008e0c:	2320      	movs	r3, #32
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e12:	e1a6      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008e14:	2340      	movs	r3, #64	@ 0x40
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1a:	e1a2      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008e1c:	2380      	movs	r3, #128	@ 0x80
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e19e      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a35      	ldr	r2, [pc, #212]	@ (8008f00 <UART_SetConfig+0x344>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d130      	bne.n	8008e90 <UART_SetConfig+0x2d4>
 8008e2e:	4b31      	ldr	r3, [pc, #196]	@ (8008ef4 <UART_SetConfig+0x338>)
 8008e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e32:	f003 0307 	and.w	r3, r3, #7
 8008e36:	2b05      	cmp	r3, #5
 8008e38:	d826      	bhi.n	8008e88 <UART_SetConfig+0x2cc>
 8008e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e40 <UART_SetConfig+0x284>)
 8008e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e40:	08008e59 	.word	0x08008e59
 8008e44:	08008e61 	.word	0x08008e61
 8008e48:	08008e69 	.word	0x08008e69
 8008e4c:	08008e71 	.word	0x08008e71
 8008e50:	08008e79 	.word	0x08008e79
 8008e54:	08008e81 	.word	0x08008e81
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5e:	e180      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008e60:	2304      	movs	r3, #4
 8008e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e66:	e17c      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008e68:	2308      	movs	r3, #8
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6e:	e178      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008e70:	2310      	movs	r3, #16
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e76:	e174      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008e78:	2320      	movs	r3, #32
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7e:	e170      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008e80:	2340      	movs	r3, #64	@ 0x40
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e86:	e16c      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008e88:	2380      	movs	r3, #128	@ 0x80
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e168      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a1b      	ldr	r2, [pc, #108]	@ (8008f04 <UART_SetConfig+0x348>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d142      	bne.n	8008f20 <UART_SetConfig+0x364>
 8008e9a:	4b16      	ldr	r3, [pc, #88]	@ (8008ef4 <UART_SetConfig+0x338>)
 8008e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e9e:	f003 0307 	and.w	r3, r3, #7
 8008ea2:	2b05      	cmp	r3, #5
 8008ea4:	d838      	bhi.n	8008f18 <UART_SetConfig+0x35c>
 8008ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8008eac <UART_SetConfig+0x2f0>)
 8008ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eac:	08008ec5 	.word	0x08008ec5
 8008eb0:	08008ecd 	.word	0x08008ecd
 8008eb4:	08008ed5 	.word	0x08008ed5
 8008eb8:	08008edd 	.word	0x08008edd
 8008ebc:	08008f09 	.word	0x08008f09
 8008ec0:	08008f11 	.word	0x08008f11
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eca:	e14a      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008ecc:	2304      	movs	r3, #4
 8008ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed2:	e146      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008ed4:	2308      	movs	r3, #8
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eda:	e142      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008edc:	2310      	movs	r3, #16
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee2:	e13e      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008ee4:	cfff69f3 	.word	0xcfff69f3
 8008ee8:	58000c00 	.word	0x58000c00
 8008eec:	11fff4ff 	.word	0x11fff4ff
 8008ef0:	40011000 	.word	0x40011000
 8008ef4:	58024400 	.word	0x58024400
 8008ef8:	40004400 	.word	0x40004400
 8008efc:	40004800 	.word	0x40004800
 8008f00:	40004c00 	.word	0x40004c00
 8008f04:	40005000 	.word	0x40005000
 8008f08:	2320      	movs	r3, #32
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0e:	e128      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008f10:	2340      	movs	r3, #64	@ 0x40
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f16:	e124      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008f18:	2380      	movs	r3, #128	@ 0x80
 8008f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1e:	e120      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4acb      	ldr	r2, [pc, #812]	@ (8009254 <UART_SetConfig+0x698>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d176      	bne.n	8009018 <UART_SetConfig+0x45c>
 8008f2a:	4bcb      	ldr	r3, [pc, #812]	@ (8009258 <UART_SetConfig+0x69c>)
 8008f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f32:	2b28      	cmp	r3, #40	@ 0x28
 8008f34:	d86c      	bhi.n	8009010 <UART_SetConfig+0x454>
 8008f36:	a201      	add	r2, pc, #4	@ (adr r2, 8008f3c <UART_SetConfig+0x380>)
 8008f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3c:	08008fe1 	.word	0x08008fe1
 8008f40:	08009011 	.word	0x08009011
 8008f44:	08009011 	.word	0x08009011
 8008f48:	08009011 	.word	0x08009011
 8008f4c:	08009011 	.word	0x08009011
 8008f50:	08009011 	.word	0x08009011
 8008f54:	08009011 	.word	0x08009011
 8008f58:	08009011 	.word	0x08009011
 8008f5c:	08008fe9 	.word	0x08008fe9
 8008f60:	08009011 	.word	0x08009011
 8008f64:	08009011 	.word	0x08009011
 8008f68:	08009011 	.word	0x08009011
 8008f6c:	08009011 	.word	0x08009011
 8008f70:	08009011 	.word	0x08009011
 8008f74:	08009011 	.word	0x08009011
 8008f78:	08009011 	.word	0x08009011
 8008f7c:	08008ff1 	.word	0x08008ff1
 8008f80:	08009011 	.word	0x08009011
 8008f84:	08009011 	.word	0x08009011
 8008f88:	08009011 	.word	0x08009011
 8008f8c:	08009011 	.word	0x08009011
 8008f90:	08009011 	.word	0x08009011
 8008f94:	08009011 	.word	0x08009011
 8008f98:	08009011 	.word	0x08009011
 8008f9c:	08008ff9 	.word	0x08008ff9
 8008fa0:	08009011 	.word	0x08009011
 8008fa4:	08009011 	.word	0x08009011
 8008fa8:	08009011 	.word	0x08009011
 8008fac:	08009011 	.word	0x08009011
 8008fb0:	08009011 	.word	0x08009011
 8008fb4:	08009011 	.word	0x08009011
 8008fb8:	08009011 	.word	0x08009011
 8008fbc:	08009001 	.word	0x08009001
 8008fc0:	08009011 	.word	0x08009011
 8008fc4:	08009011 	.word	0x08009011
 8008fc8:	08009011 	.word	0x08009011
 8008fcc:	08009011 	.word	0x08009011
 8008fd0:	08009011 	.word	0x08009011
 8008fd4:	08009011 	.word	0x08009011
 8008fd8:	08009011 	.word	0x08009011
 8008fdc:	08009009 	.word	0x08009009
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe6:	e0bc      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008fe8:	2304      	movs	r3, #4
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fee:	e0b8      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008ff0:	2308      	movs	r3, #8
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff6:	e0b4      	b.n	8009162 <UART_SetConfig+0x5a6>
 8008ff8:	2310      	movs	r3, #16
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffe:	e0b0      	b.n	8009162 <UART_SetConfig+0x5a6>
 8009000:	2320      	movs	r3, #32
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009006:	e0ac      	b.n	8009162 <UART_SetConfig+0x5a6>
 8009008:	2340      	movs	r3, #64	@ 0x40
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900e:	e0a8      	b.n	8009162 <UART_SetConfig+0x5a6>
 8009010:	2380      	movs	r3, #128	@ 0x80
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e0a4      	b.n	8009162 <UART_SetConfig+0x5a6>
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a8f      	ldr	r2, [pc, #572]	@ (800925c <UART_SetConfig+0x6a0>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d130      	bne.n	8009084 <UART_SetConfig+0x4c8>
 8009022:	4b8d      	ldr	r3, [pc, #564]	@ (8009258 <UART_SetConfig+0x69c>)
 8009024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009026:	f003 0307 	and.w	r3, r3, #7
 800902a:	2b05      	cmp	r3, #5
 800902c:	d826      	bhi.n	800907c <UART_SetConfig+0x4c0>
 800902e:	a201      	add	r2, pc, #4	@ (adr r2, 8009034 <UART_SetConfig+0x478>)
 8009030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009034:	0800904d 	.word	0x0800904d
 8009038:	08009055 	.word	0x08009055
 800903c:	0800905d 	.word	0x0800905d
 8009040:	08009065 	.word	0x08009065
 8009044:	0800906d 	.word	0x0800906d
 8009048:	08009075 	.word	0x08009075
 800904c:	2300      	movs	r3, #0
 800904e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009052:	e086      	b.n	8009162 <UART_SetConfig+0x5a6>
 8009054:	2304      	movs	r3, #4
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800905a:	e082      	b.n	8009162 <UART_SetConfig+0x5a6>
 800905c:	2308      	movs	r3, #8
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009062:	e07e      	b.n	8009162 <UART_SetConfig+0x5a6>
 8009064:	2310      	movs	r3, #16
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906a:	e07a      	b.n	8009162 <UART_SetConfig+0x5a6>
 800906c:	2320      	movs	r3, #32
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009072:	e076      	b.n	8009162 <UART_SetConfig+0x5a6>
 8009074:	2340      	movs	r3, #64	@ 0x40
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907a:	e072      	b.n	8009162 <UART_SetConfig+0x5a6>
 800907c:	2380      	movs	r3, #128	@ 0x80
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e06e      	b.n	8009162 <UART_SetConfig+0x5a6>
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a75      	ldr	r2, [pc, #468]	@ (8009260 <UART_SetConfig+0x6a4>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d130      	bne.n	80090f0 <UART_SetConfig+0x534>
 800908e:	4b72      	ldr	r3, [pc, #456]	@ (8009258 <UART_SetConfig+0x69c>)
 8009090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	2b05      	cmp	r3, #5
 8009098:	d826      	bhi.n	80090e8 <UART_SetConfig+0x52c>
 800909a:	a201      	add	r2, pc, #4	@ (adr r2, 80090a0 <UART_SetConfig+0x4e4>)
 800909c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a0:	080090b9 	.word	0x080090b9
 80090a4:	080090c1 	.word	0x080090c1
 80090a8:	080090c9 	.word	0x080090c9
 80090ac:	080090d1 	.word	0x080090d1
 80090b0:	080090d9 	.word	0x080090d9
 80090b4:	080090e1 	.word	0x080090e1
 80090b8:	2300      	movs	r3, #0
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090be:	e050      	b.n	8009162 <UART_SetConfig+0x5a6>
 80090c0:	2304      	movs	r3, #4
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c6:	e04c      	b.n	8009162 <UART_SetConfig+0x5a6>
 80090c8:	2308      	movs	r3, #8
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e048      	b.n	8009162 <UART_SetConfig+0x5a6>
 80090d0:	2310      	movs	r3, #16
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e044      	b.n	8009162 <UART_SetConfig+0x5a6>
 80090d8:	2320      	movs	r3, #32
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e040      	b.n	8009162 <UART_SetConfig+0x5a6>
 80090e0:	2340      	movs	r3, #64	@ 0x40
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e03c      	b.n	8009162 <UART_SetConfig+0x5a6>
 80090e8:	2380      	movs	r3, #128	@ 0x80
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e038      	b.n	8009162 <UART_SetConfig+0x5a6>
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a5b      	ldr	r2, [pc, #364]	@ (8009264 <UART_SetConfig+0x6a8>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d130      	bne.n	800915c <UART_SetConfig+0x5a0>
 80090fa:	4b57      	ldr	r3, [pc, #348]	@ (8009258 <UART_SetConfig+0x69c>)
 80090fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090fe:	f003 0307 	and.w	r3, r3, #7
 8009102:	2b05      	cmp	r3, #5
 8009104:	d826      	bhi.n	8009154 <UART_SetConfig+0x598>
 8009106:	a201      	add	r2, pc, #4	@ (adr r2, 800910c <UART_SetConfig+0x550>)
 8009108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910c:	08009125 	.word	0x08009125
 8009110:	0800912d 	.word	0x0800912d
 8009114:	08009135 	.word	0x08009135
 8009118:	0800913d 	.word	0x0800913d
 800911c:	08009145 	.word	0x08009145
 8009120:	0800914d 	.word	0x0800914d
 8009124:	2302      	movs	r3, #2
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912a:	e01a      	b.n	8009162 <UART_SetConfig+0x5a6>
 800912c:	2304      	movs	r3, #4
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009132:	e016      	b.n	8009162 <UART_SetConfig+0x5a6>
 8009134:	2308      	movs	r3, #8
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e012      	b.n	8009162 <UART_SetConfig+0x5a6>
 800913c:	2310      	movs	r3, #16
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e00e      	b.n	8009162 <UART_SetConfig+0x5a6>
 8009144:	2320      	movs	r3, #32
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914a:	e00a      	b.n	8009162 <UART_SetConfig+0x5a6>
 800914c:	2340      	movs	r3, #64	@ 0x40
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009152:	e006      	b.n	8009162 <UART_SetConfig+0x5a6>
 8009154:	2380      	movs	r3, #128	@ 0x80
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915a:	e002      	b.n	8009162 <UART_SetConfig+0x5a6>
 800915c:	2380      	movs	r3, #128	@ 0x80
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a3f      	ldr	r2, [pc, #252]	@ (8009264 <UART_SetConfig+0x6a8>)
 8009168:	4293      	cmp	r3, r2
 800916a:	f040 80f8 	bne.w	800935e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800916e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009172:	2b20      	cmp	r3, #32
 8009174:	dc46      	bgt.n	8009204 <UART_SetConfig+0x648>
 8009176:	2b02      	cmp	r3, #2
 8009178:	f2c0 8082 	blt.w	8009280 <UART_SetConfig+0x6c4>
 800917c:	3b02      	subs	r3, #2
 800917e:	2b1e      	cmp	r3, #30
 8009180:	d87e      	bhi.n	8009280 <UART_SetConfig+0x6c4>
 8009182:	a201      	add	r2, pc, #4	@ (adr r2, 8009188 <UART_SetConfig+0x5cc>)
 8009184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009188:	0800920b 	.word	0x0800920b
 800918c:	08009281 	.word	0x08009281
 8009190:	08009213 	.word	0x08009213
 8009194:	08009281 	.word	0x08009281
 8009198:	08009281 	.word	0x08009281
 800919c:	08009281 	.word	0x08009281
 80091a0:	08009223 	.word	0x08009223
 80091a4:	08009281 	.word	0x08009281
 80091a8:	08009281 	.word	0x08009281
 80091ac:	08009281 	.word	0x08009281
 80091b0:	08009281 	.word	0x08009281
 80091b4:	08009281 	.word	0x08009281
 80091b8:	08009281 	.word	0x08009281
 80091bc:	08009281 	.word	0x08009281
 80091c0:	08009233 	.word	0x08009233
 80091c4:	08009281 	.word	0x08009281
 80091c8:	08009281 	.word	0x08009281
 80091cc:	08009281 	.word	0x08009281
 80091d0:	08009281 	.word	0x08009281
 80091d4:	08009281 	.word	0x08009281
 80091d8:	08009281 	.word	0x08009281
 80091dc:	08009281 	.word	0x08009281
 80091e0:	08009281 	.word	0x08009281
 80091e4:	08009281 	.word	0x08009281
 80091e8:	08009281 	.word	0x08009281
 80091ec:	08009281 	.word	0x08009281
 80091f0:	08009281 	.word	0x08009281
 80091f4:	08009281 	.word	0x08009281
 80091f8:	08009281 	.word	0x08009281
 80091fc:	08009281 	.word	0x08009281
 8009200:	08009273 	.word	0x08009273
 8009204:	2b40      	cmp	r3, #64	@ 0x40
 8009206:	d037      	beq.n	8009278 <UART_SetConfig+0x6bc>
 8009208:	e03a      	b.n	8009280 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800920a:	f7fd fa89 	bl	8006720 <HAL_RCCEx_GetD3PCLK1Freq>
 800920e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009210:	e03c      	b.n	800928c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009216:	4618      	mov	r0, r3
 8009218:	f7fd fa98 	bl	800674c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800921c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009220:	e034      	b.n	800928c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009222:	f107 0318 	add.w	r3, r7, #24
 8009226:	4618      	mov	r0, r3
 8009228:	f7fd fbe4 	bl	80069f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009230:	e02c      	b.n	800928c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009232:	4b09      	ldr	r3, [pc, #36]	@ (8009258 <UART_SetConfig+0x69c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0320 	and.w	r3, r3, #32
 800923a:	2b00      	cmp	r3, #0
 800923c:	d016      	beq.n	800926c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800923e:	4b06      	ldr	r3, [pc, #24]	@ (8009258 <UART_SetConfig+0x69c>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	08db      	lsrs	r3, r3, #3
 8009244:	f003 0303 	and.w	r3, r3, #3
 8009248:	4a07      	ldr	r2, [pc, #28]	@ (8009268 <UART_SetConfig+0x6ac>)
 800924a:	fa22 f303 	lsr.w	r3, r2, r3
 800924e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009250:	e01c      	b.n	800928c <UART_SetConfig+0x6d0>
 8009252:	bf00      	nop
 8009254:	40011400 	.word	0x40011400
 8009258:	58024400 	.word	0x58024400
 800925c:	40007800 	.word	0x40007800
 8009260:	40007c00 	.word	0x40007c00
 8009264:	58000c00 	.word	0x58000c00
 8009268:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800926c:	4b9d      	ldr	r3, [pc, #628]	@ (80094e4 <UART_SetConfig+0x928>)
 800926e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009270:	e00c      	b.n	800928c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009272:	4b9d      	ldr	r3, [pc, #628]	@ (80094e8 <UART_SetConfig+0x92c>)
 8009274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009276:	e009      	b.n	800928c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009278:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800927c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800927e:	e005      	b.n	800928c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009280:	2300      	movs	r3, #0
 8009282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800928a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800928c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 81de 	beq.w	8009650 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009298:	4a94      	ldr	r2, [pc, #592]	@ (80094ec <UART_SetConfig+0x930>)
 800929a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800929e:	461a      	mov	r2, r3
 80092a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80092a6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	4613      	mov	r3, r2
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	4413      	add	r3, r2
 80092b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d305      	bcc.n	80092c4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d903      	bls.n	80092cc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80092ca:	e1c1      	b.n	8009650 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ce:	2200      	movs	r2, #0
 80092d0:	60bb      	str	r3, [r7, #8]
 80092d2:	60fa      	str	r2, [r7, #12]
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d8:	4a84      	ldr	r2, [pc, #528]	@ (80094ec <UART_SetConfig+0x930>)
 80092da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	2200      	movs	r2, #0
 80092e2:	603b      	str	r3, [r7, #0]
 80092e4:	607a      	str	r2, [r7, #4]
 80092e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092ee:	f7f7 f84f 	bl	8000390 <__aeabi_uldivmod>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	4610      	mov	r0, r2
 80092f8:	4619      	mov	r1, r3
 80092fa:	f04f 0200 	mov.w	r2, #0
 80092fe:	f04f 0300 	mov.w	r3, #0
 8009302:	020b      	lsls	r3, r1, #8
 8009304:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009308:	0202      	lsls	r2, r0, #8
 800930a:	6979      	ldr	r1, [r7, #20]
 800930c:	6849      	ldr	r1, [r1, #4]
 800930e:	0849      	lsrs	r1, r1, #1
 8009310:	2000      	movs	r0, #0
 8009312:	460c      	mov	r4, r1
 8009314:	4605      	mov	r5, r0
 8009316:	eb12 0804 	adds.w	r8, r2, r4
 800931a:	eb43 0905 	adc.w	r9, r3, r5
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	469a      	mov	sl, r3
 8009326:	4693      	mov	fp, r2
 8009328:	4652      	mov	r2, sl
 800932a:	465b      	mov	r3, fp
 800932c:	4640      	mov	r0, r8
 800932e:	4649      	mov	r1, r9
 8009330:	f7f7 f82e 	bl	8000390 <__aeabi_uldivmod>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4613      	mov	r3, r2
 800933a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800933c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009342:	d308      	bcc.n	8009356 <UART_SetConfig+0x79a>
 8009344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009346:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800934a:	d204      	bcs.n	8009356 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009352:	60da      	str	r2, [r3, #12]
 8009354:	e17c      	b.n	8009650 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800935c:	e178      	b.n	8009650 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009366:	f040 80c5 	bne.w	80094f4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800936a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800936e:	2b20      	cmp	r3, #32
 8009370:	dc48      	bgt.n	8009404 <UART_SetConfig+0x848>
 8009372:	2b00      	cmp	r3, #0
 8009374:	db7b      	blt.n	800946e <UART_SetConfig+0x8b2>
 8009376:	2b20      	cmp	r3, #32
 8009378:	d879      	bhi.n	800946e <UART_SetConfig+0x8b2>
 800937a:	a201      	add	r2, pc, #4	@ (adr r2, 8009380 <UART_SetConfig+0x7c4>)
 800937c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009380:	0800940b 	.word	0x0800940b
 8009384:	08009413 	.word	0x08009413
 8009388:	0800946f 	.word	0x0800946f
 800938c:	0800946f 	.word	0x0800946f
 8009390:	0800941b 	.word	0x0800941b
 8009394:	0800946f 	.word	0x0800946f
 8009398:	0800946f 	.word	0x0800946f
 800939c:	0800946f 	.word	0x0800946f
 80093a0:	0800942b 	.word	0x0800942b
 80093a4:	0800946f 	.word	0x0800946f
 80093a8:	0800946f 	.word	0x0800946f
 80093ac:	0800946f 	.word	0x0800946f
 80093b0:	0800946f 	.word	0x0800946f
 80093b4:	0800946f 	.word	0x0800946f
 80093b8:	0800946f 	.word	0x0800946f
 80093bc:	0800946f 	.word	0x0800946f
 80093c0:	0800943b 	.word	0x0800943b
 80093c4:	0800946f 	.word	0x0800946f
 80093c8:	0800946f 	.word	0x0800946f
 80093cc:	0800946f 	.word	0x0800946f
 80093d0:	0800946f 	.word	0x0800946f
 80093d4:	0800946f 	.word	0x0800946f
 80093d8:	0800946f 	.word	0x0800946f
 80093dc:	0800946f 	.word	0x0800946f
 80093e0:	0800946f 	.word	0x0800946f
 80093e4:	0800946f 	.word	0x0800946f
 80093e8:	0800946f 	.word	0x0800946f
 80093ec:	0800946f 	.word	0x0800946f
 80093f0:	0800946f 	.word	0x0800946f
 80093f4:	0800946f 	.word	0x0800946f
 80093f8:	0800946f 	.word	0x0800946f
 80093fc:	0800946f 	.word	0x0800946f
 8009400:	08009461 	.word	0x08009461
 8009404:	2b40      	cmp	r3, #64	@ 0x40
 8009406:	d02e      	beq.n	8009466 <UART_SetConfig+0x8aa>
 8009408:	e031      	b.n	800946e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800940a:	f7fb ff53 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 800940e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009410:	e033      	b.n	800947a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009412:	f7fb ff65 	bl	80052e0 <HAL_RCC_GetPCLK2Freq>
 8009416:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009418:	e02f      	b.n	800947a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800941a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800941e:	4618      	mov	r0, r3
 8009420:	f7fd f994 	bl	800674c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009428:	e027      	b.n	800947a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800942a:	f107 0318 	add.w	r3, r7, #24
 800942e:	4618      	mov	r0, r3
 8009430:	f7fd fae0 	bl	80069f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009438:	e01f      	b.n	800947a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800943a:	4b2d      	ldr	r3, [pc, #180]	@ (80094f0 <UART_SetConfig+0x934>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0320 	and.w	r3, r3, #32
 8009442:	2b00      	cmp	r3, #0
 8009444:	d009      	beq.n	800945a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009446:	4b2a      	ldr	r3, [pc, #168]	@ (80094f0 <UART_SetConfig+0x934>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	08db      	lsrs	r3, r3, #3
 800944c:	f003 0303 	and.w	r3, r3, #3
 8009450:	4a24      	ldr	r2, [pc, #144]	@ (80094e4 <UART_SetConfig+0x928>)
 8009452:	fa22 f303 	lsr.w	r3, r2, r3
 8009456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009458:	e00f      	b.n	800947a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800945a:	4b22      	ldr	r3, [pc, #136]	@ (80094e4 <UART_SetConfig+0x928>)
 800945c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800945e:	e00c      	b.n	800947a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009460:	4b21      	ldr	r3, [pc, #132]	@ (80094e8 <UART_SetConfig+0x92c>)
 8009462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009464:	e009      	b.n	800947a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800946a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800946c:	e005      	b.n	800947a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009478:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800947a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 80e7 	beq.w	8009650 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009486:	4a19      	ldr	r2, [pc, #100]	@ (80094ec <UART_SetConfig+0x930>)
 8009488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800948c:	461a      	mov	r2, r3
 800948e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009490:	fbb3 f3f2 	udiv	r3, r3, r2
 8009494:	005a      	lsls	r2, r3, #1
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	085b      	lsrs	r3, r3, #1
 800949c:	441a      	add	r2, r3
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094aa:	2b0f      	cmp	r3, #15
 80094ac:	d916      	bls.n	80094dc <UART_SetConfig+0x920>
 80094ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094b4:	d212      	bcs.n	80094dc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	f023 030f 	bic.w	r3, r3, #15
 80094be:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c2:	085b      	lsrs	r3, r3, #1
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	f003 0307 	and.w	r3, r3, #7
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80094ce:	4313      	orrs	r3, r2
 80094d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80094d8:	60da      	str	r2, [r3, #12]
 80094da:	e0b9      	b.n	8009650 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80094e2:	e0b5      	b.n	8009650 <UART_SetConfig+0xa94>
 80094e4:	03d09000 	.word	0x03d09000
 80094e8:	003d0900 	.word	0x003d0900
 80094ec:	0800c94c 	.word	0x0800c94c
 80094f0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80094f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80094f8:	2b20      	cmp	r3, #32
 80094fa:	dc49      	bgt.n	8009590 <UART_SetConfig+0x9d4>
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	db7c      	blt.n	80095fa <UART_SetConfig+0xa3e>
 8009500:	2b20      	cmp	r3, #32
 8009502:	d87a      	bhi.n	80095fa <UART_SetConfig+0xa3e>
 8009504:	a201      	add	r2, pc, #4	@ (adr r2, 800950c <UART_SetConfig+0x950>)
 8009506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950a:	bf00      	nop
 800950c:	08009597 	.word	0x08009597
 8009510:	0800959f 	.word	0x0800959f
 8009514:	080095fb 	.word	0x080095fb
 8009518:	080095fb 	.word	0x080095fb
 800951c:	080095a7 	.word	0x080095a7
 8009520:	080095fb 	.word	0x080095fb
 8009524:	080095fb 	.word	0x080095fb
 8009528:	080095fb 	.word	0x080095fb
 800952c:	080095b7 	.word	0x080095b7
 8009530:	080095fb 	.word	0x080095fb
 8009534:	080095fb 	.word	0x080095fb
 8009538:	080095fb 	.word	0x080095fb
 800953c:	080095fb 	.word	0x080095fb
 8009540:	080095fb 	.word	0x080095fb
 8009544:	080095fb 	.word	0x080095fb
 8009548:	080095fb 	.word	0x080095fb
 800954c:	080095c7 	.word	0x080095c7
 8009550:	080095fb 	.word	0x080095fb
 8009554:	080095fb 	.word	0x080095fb
 8009558:	080095fb 	.word	0x080095fb
 800955c:	080095fb 	.word	0x080095fb
 8009560:	080095fb 	.word	0x080095fb
 8009564:	080095fb 	.word	0x080095fb
 8009568:	080095fb 	.word	0x080095fb
 800956c:	080095fb 	.word	0x080095fb
 8009570:	080095fb 	.word	0x080095fb
 8009574:	080095fb 	.word	0x080095fb
 8009578:	080095fb 	.word	0x080095fb
 800957c:	080095fb 	.word	0x080095fb
 8009580:	080095fb 	.word	0x080095fb
 8009584:	080095fb 	.word	0x080095fb
 8009588:	080095fb 	.word	0x080095fb
 800958c:	080095ed 	.word	0x080095ed
 8009590:	2b40      	cmp	r3, #64	@ 0x40
 8009592:	d02e      	beq.n	80095f2 <UART_SetConfig+0xa36>
 8009594:	e031      	b.n	80095fa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009596:	f7fb fe8d 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 800959a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800959c:	e033      	b.n	8009606 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800959e:	f7fb fe9f 	bl	80052e0 <HAL_RCC_GetPCLK2Freq>
 80095a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095a4:	e02f      	b.n	8009606 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fd f8ce 	bl	800674c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095b4:	e027      	b.n	8009606 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095b6:	f107 0318 	add.w	r3, r7, #24
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fd fa1a 	bl	80069f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095c4:	e01f      	b.n	8009606 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095c6:	4b2d      	ldr	r3, [pc, #180]	@ (800967c <UART_SetConfig+0xac0>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 0320 	and.w	r3, r3, #32
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d009      	beq.n	80095e6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095d2:	4b2a      	ldr	r3, [pc, #168]	@ (800967c <UART_SetConfig+0xac0>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	08db      	lsrs	r3, r3, #3
 80095d8:	f003 0303 	and.w	r3, r3, #3
 80095dc:	4a28      	ldr	r2, [pc, #160]	@ (8009680 <UART_SetConfig+0xac4>)
 80095de:	fa22 f303 	lsr.w	r3, r2, r3
 80095e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095e4:	e00f      	b.n	8009606 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80095e6:	4b26      	ldr	r3, [pc, #152]	@ (8009680 <UART_SetConfig+0xac4>)
 80095e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ea:	e00c      	b.n	8009606 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095ec:	4b25      	ldr	r3, [pc, #148]	@ (8009684 <UART_SetConfig+0xac8>)
 80095ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095f0:	e009      	b.n	8009606 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095f8:	e005      	b.n	8009606 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009604:	bf00      	nop
    }

    if (pclk != 0U)
 8009606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009608:	2b00      	cmp	r3, #0
 800960a:	d021      	beq.n	8009650 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009610:	4a1d      	ldr	r2, [pc, #116]	@ (8009688 <UART_SetConfig+0xacc>)
 8009612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009616:	461a      	mov	r2, r3
 8009618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800961a:	fbb3 f2f2 	udiv	r2, r3, r2
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	085b      	lsrs	r3, r3, #1
 8009624:	441a      	add	r2, r3
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	fbb2 f3f3 	udiv	r3, r2, r3
 800962e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009632:	2b0f      	cmp	r3, #15
 8009634:	d909      	bls.n	800964a <UART_SetConfig+0xa8e>
 8009636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800963c:	d205      	bcs.n	800964a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800963e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009640:	b29a      	uxth	r2, r3
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	60da      	str	r2, [r3, #12]
 8009648:	e002      	b.n	8009650 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	2201      	movs	r2, #1
 8009654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2201      	movs	r2, #1
 800965c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	2200      	movs	r2, #0
 8009664:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	2200      	movs	r2, #0
 800966a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800966c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009670:	4618      	mov	r0, r3
 8009672:	3748      	adds	r7, #72	@ 0x48
 8009674:	46bd      	mov	sp, r7
 8009676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800967a:	bf00      	nop
 800967c:	58024400 	.word	0x58024400
 8009680:	03d09000 	.word	0x03d09000
 8009684:	003d0900 	.word	0x003d0900
 8009688:	0800c94c 	.word	0x0800c94c

0800968c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009698:	f003 0308 	and.w	r3, r3, #8
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00a      	beq.n	80096b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ba:	f003 0301 	and.w	r3, r3, #1
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00a      	beq.n	80096d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	430a      	orrs	r2, r1
 80096d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00a      	beq.n	80096fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	430a      	orrs	r2, r1
 80096f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096fe:	f003 0304 	and.w	r3, r3, #4
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00a      	beq.n	800971c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	430a      	orrs	r2, r1
 800971a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009720:	f003 0310 	and.w	r3, r3, #16
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00a      	beq.n	800973e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009742:	f003 0320 	and.w	r3, r3, #32
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009768:	2b00      	cmp	r3, #0
 800976a:	d01a      	beq.n	80097a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	430a      	orrs	r2, r1
 8009780:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009786:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800978a:	d10a      	bne.n	80097a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00a      	beq.n	80097c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	430a      	orrs	r2, r1
 80097c2:	605a      	str	r2, [r3, #4]
  }
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b098      	sub	sp, #96	@ 0x60
 80097d4:	af02      	add	r7, sp, #8
 80097d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097e0:	f7fa f880 	bl	80038e4 <HAL_GetTick>
 80097e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0308 	and.w	r3, r3, #8
 80097f0:	2b08      	cmp	r3, #8
 80097f2:	d12f      	bne.n	8009854 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097fc:	2200      	movs	r2, #0
 80097fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f88e 	bl	8009924 <UART_WaitOnFlagUntilTimeout>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d022      	beq.n	8009854 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009816:	e853 3f00 	ldrex	r3, [r3]
 800981a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800981c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800981e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009822:	653b      	str	r3, [r7, #80]	@ 0x50
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	461a      	mov	r2, r3
 800982a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800982c:	647b      	str	r3, [r7, #68]	@ 0x44
 800982e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009830:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009832:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009834:	e841 2300 	strex	r3, r2, [r1]
 8009838:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800983a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1e6      	bne.n	800980e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2220      	movs	r2, #32
 8009844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009850:	2303      	movs	r3, #3
 8009852:	e063      	b.n	800991c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 0304 	and.w	r3, r3, #4
 800985e:	2b04      	cmp	r3, #4
 8009860:	d149      	bne.n	80098f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009862:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800986a:	2200      	movs	r2, #0
 800986c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f857 	bl	8009924 <UART_WaitOnFlagUntilTimeout>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d03c      	beq.n	80098f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	623b      	str	r3, [r7, #32]
   return(result);
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009890:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	461a      	mov	r2, r3
 8009898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800989a:	633b      	str	r3, [r7, #48]	@ 0x30
 800989c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098a2:	e841 2300 	strex	r3, r2, [r1]
 80098a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1e6      	bne.n	800987c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3308      	adds	r3, #8
 80098b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f023 0301 	bic.w	r3, r3, #1
 80098c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3308      	adds	r3, #8
 80098cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098ce:	61fa      	str	r2, [r7, #28]
 80098d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	69b9      	ldr	r1, [r7, #24]
 80098d4:	69fa      	ldr	r2, [r7, #28]
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	617b      	str	r3, [r7, #20]
   return(result);
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e5      	bne.n	80098ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2220      	movs	r2, #32
 80098e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e012      	b.n	800991c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2220      	movs	r2, #32
 80098fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2220      	movs	r2, #32
 8009902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3758      	adds	r7, #88	@ 0x58
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	4613      	mov	r3, r2
 8009932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009934:	e04f      	b.n	80099d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993c:	d04b      	beq.n	80099d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800993e:	f7f9 ffd1 	bl	80038e4 <HAL_GetTick>
 8009942:	4602      	mov	r2, r0
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	69ba      	ldr	r2, [r7, #24]
 800994a:	429a      	cmp	r2, r3
 800994c:	d302      	bcc.n	8009954 <UART_WaitOnFlagUntilTimeout+0x30>
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	e04e      	b.n	80099f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 0304 	and.w	r3, r3, #4
 8009962:	2b00      	cmp	r3, #0
 8009964:	d037      	beq.n	80099d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2b80      	cmp	r3, #128	@ 0x80
 800996a:	d034      	beq.n	80099d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2b40      	cmp	r3, #64	@ 0x40
 8009970:	d031      	beq.n	80099d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	69db      	ldr	r3, [r3, #28]
 8009978:	f003 0308 	and.w	r3, r3, #8
 800997c:	2b08      	cmp	r3, #8
 800997e:	d110      	bne.n	80099a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2208      	movs	r2, #8
 8009986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 f839 	bl	8009a00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2208      	movs	r2, #8
 8009992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e029      	b.n	80099f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099b0:	d111      	bne.n	80099d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 f81f 	bl	8009a00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2220      	movs	r2, #32
 80099c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e00f      	b.n	80099f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	69da      	ldr	r2, [r3, #28]
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	4013      	ands	r3, r2
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	bf0c      	ite	eq
 80099e6:	2301      	moveq	r3, #1
 80099e8:	2300      	movne	r3, #0
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	461a      	mov	r2, r3
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d0a0      	beq.n	8009936 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
	...

08009a00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b095      	sub	sp, #84	@ 0x54
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a10:	e853 3f00 	ldrex	r3, [r3]
 8009a14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a26:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a28:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a2e:	e841 2300 	strex	r3, r2, [r1]
 8009a32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1e6      	bne.n	8009a08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3308      	adds	r3, #8
 8009a40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	e853 3f00 	ldrex	r3, [r3]
 8009a48:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a4a:	69fa      	ldr	r2, [r7, #28]
 8009a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8009ac8 <UART_EndRxTransfer+0xc8>)
 8009a4e:	4013      	ands	r3, r2
 8009a50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3308      	adds	r3, #8
 8009a58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a62:	e841 2300 	strex	r3, r2, [r1]
 8009a66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1e5      	bne.n	8009a3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d118      	bne.n	8009aa8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	e853 3f00 	ldrex	r3, [r3]
 8009a82:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	f023 0310 	bic.w	r3, r3, #16
 8009a8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	461a      	mov	r2, r3
 8009a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a94:	61bb      	str	r3, [r7, #24]
 8009a96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a98:	6979      	ldr	r1, [r7, #20]
 8009a9a:	69ba      	ldr	r2, [r7, #24]
 8009a9c:	e841 2300 	strex	r3, r2, [r1]
 8009aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1e6      	bne.n	8009a76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2220      	movs	r2, #32
 8009aac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009abc:	bf00      	nop
 8009abe:	3754      	adds	r7, #84	@ 0x54
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr
 8009ac8:	effffffe 	.word	0xeffffffe

08009acc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d101      	bne.n	8009ae2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ade:	2302      	movs	r3, #2
 8009ae0:	e027      	b.n	8009b32 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2224      	movs	r2, #36	@ 0x24
 8009aee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 0201 	bic.w	r2, r2, #1
 8009b08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009b10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2220      	movs	r2, #32
 8009b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d101      	bne.n	8009b56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b52:	2302      	movs	r3, #2
 8009b54:	e02d      	b.n	8009bb2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2224      	movs	r2, #36	@ 0x24
 8009b62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f022 0201 	bic.w	r2, r2, #1
 8009b7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	430a      	orrs	r2, r1
 8009b90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f850 	bl	8009c38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2220      	movs	r2, #32
 8009ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
 8009bc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d101      	bne.n	8009bd2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009bce:	2302      	movs	r3, #2
 8009bd0:	e02d      	b.n	8009c2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2224      	movs	r2, #36	@ 0x24
 8009bde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f022 0201 	bic.w	r2, r2, #1
 8009bf8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f812 	bl	8009c38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2220      	movs	r2, #32
 8009c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
	...

08009c38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d108      	bne.n	8009c5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c58:	e031      	b.n	8009cbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c5a:	2310      	movs	r3, #16
 8009c5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c5e:	2310      	movs	r3, #16
 8009c60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	0e5b      	lsrs	r3, r3, #25
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	f003 0307 	and.w	r3, r3, #7
 8009c70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	0f5b      	lsrs	r3, r3, #29
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	f003 0307 	and.w	r3, r3, #7
 8009c80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
 8009c84:	7b3a      	ldrb	r2, [r7, #12]
 8009c86:	4911      	ldr	r1, [pc, #68]	@ (8009ccc <UARTEx_SetNbDataToProcess+0x94>)
 8009c88:	5c8a      	ldrb	r2, [r1, r2]
 8009c8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c8e:	7b3a      	ldrb	r2, [r7, #12]
 8009c90:	490f      	ldr	r1, [pc, #60]	@ (8009cd0 <UARTEx_SetNbDataToProcess+0x98>)
 8009c92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c94:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ca0:	7bfb      	ldrb	r3, [r7, #15]
 8009ca2:	7b7a      	ldrb	r2, [r7, #13]
 8009ca4:	4909      	ldr	r1, [pc, #36]	@ (8009ccc <UARTEx_SetNbDataToProcess+0x94>)
 8009ca6:	5c8a      	ldrb	r2, [r1, r2]
 8009ca8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009cac:	7b7a      	ldrb	r2, [r7, #13]
 8009cae:	4908      	ldr	r1, [pc, #32]	@ (8009cd0 <UARTEx_SetNbDataToProcess+0x98>)
 8009cb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009cbe:	bf00      	nop
 8009cc0:	3714      	adds	r7, #20
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	0800c964 	.word	0x0800c964
 8009cd0:	0800c96c 	.word	0x0800c96c

08009cd4 <__cvt>:
 8009cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cd6:	ed2d 8b02 	vpush	{d8}
 8009cda:	eeb0 8b40 	vmov.f64	d8, d0
 8009cde:	b085      	sub	sp, #20
 8009ce0:	4617      	mov	r7, r2
 8009ce2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009ce4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ce6:	ee18 2a90 	vmov	r2, s17
 8009cea:	f025 0520 	bic.w	r5, r5, #32
 8009cee:	2a00      	cmp	r2, #0
 8009cf0:	bfb6      	itet	lt
 8009cf2:	222d      	movlt	r2, #45	@ 0x2d
 8009cf4:	2200      	movge	r2, #0
 8009cf6:	eeb1 8b40 	vneglt.f64	d8, d0
 8009cfa:	2d46      	cmp	r5, #70	@ 0x46
 8009cfc:	460c      	mov	r4, r1
 8009cfe:	701a      	strb	r2, [r3, #0]
 8009d00:	d004      	beq.n	8009d0c <__cvt+0x38>
 8009d02:	2d45      	cmp	r5, #69	@ 0x45
 8009d04:	d100      	bne.n	8009d08 <__cvt+0x34>
 8009d06:	3401      	adds	r4, #1
 8009d08:	2102      	movs	r1, #2
 8009d0a:	e000      	b.n	8009d0e <__cvt+0x3a>
 8009d0c:	2103      	movs	r1, #3
 8009d0e:	ab03      	add	r3, sp, #12
 8009d10:	9301      	str	r3, [sp, #4]
 8009d12:	ab02      	add	r3, sp, #8
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	4622      	mov	r2, r4
 8009d18:	4633      	mov	r3, r6
 8009d1a:	eeb0 0b48 	vmov.f64	d0, d8
 8009d1e:	f000 fe2f 	bl	800a980 <_dtoa_r>
 8009d22:	2d47      	cmp	r5, #71	@ 0x47
 8009d24:	d114      	bne.n	8009d50 <__cvt+0x7c>
 8009d26:	07fb      	lsls	r3, r7, #31
 8009d28:	d50a      	bpl.n	8009d40 <__cvt+0x6c>
 8009d2a:	1902      	adds	r2, r0, r4
 8009d2c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d34:	bf08      	it	eq
 8009d36:	9203      	streq	r2, [sp, #12]
 8009d38:	2130      	movs	r1, #48	@ 0x30
 8009d3a:	9b03      	ldr	r3, [sp, #12]
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d319      	bcc.n	8009d74 <__cvt+0xa0>
 8009d40:	9b03      	ldr	r3, [sp, #12]
 8009d42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d44:	1a1b      	subs	r3, r3, r0
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	b005      	add	sp, #20
 8009d4a:	ecbd 8b02 	vpop	{d8}
 8009d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d50:	2d46      	cmp	r5, #70	@ 0x46
 8009d52:	eb00 0204 	add.w	r2, r0, r4
 8009d56:	d1e9      	bne.n	8009d2c <__cvt+0x58>
 8009d58:	7803      	ldrb	r3, [r0, #0]
 8009d5a:	2b30      	cmp	r3, #48	@ 0x30
 8009d5c:	d107      	bne.n	8009d6e <__cvt+0x9a>
 8009d5e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d66:	bf1c      	itt	ne
 8009d68:	f1c4 0401 	rsbne	r4, r4, #1
 8009d6c:	6034      	strne	r4, [r6, #0]
 8009d6e:	6833      	ldr	r3, [r6, #0]
 8009d70:	441a      	add	r2, r3
 8009d72:	e7db      	b.n	8009d2c <__cvt+0x58>
 8009d74:	1c5c      	adds	r4, r3, #1
 8009d76:	9403      	str	r4, [sp, #12]
 8009d78:	7019      	strb	r1, [r3, #0]
 8009d7a:	e7de      	b.n	8009d3a <__cvt+0x66>

08009d7c <__exponent>:
 8009d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d7e:	2900      	cmp	r1, #0
 8009d80:	bfba      	itte	lt
 8009d82:	4249      	neglt	r1, r1
 8009d84:	232d      	movlt	r3, #45	@ 0x2d
 8009d86:	232b      	movge	r3, #43	@ 0x2b
 8009d88:	2909      	cmp	r1, #9
 8009d8a:	7002      	strb	r2, [r0, #0]
 8009d8c:	7043      	strb	r3, [r0, #1]
 8009d8e:	dd29      	ble.n	8009de4 <__exponent+0x68>
 8009d90:	f10d 0307 	add.w	r3, sp, #7
 8009d94:	461d      	mov	r5, r3
 8009d96:	270a      	movs	r7, #10
 8009d98:	461a      	mov	r2, r3
 8009d9a:	fbb1 f6f7 	udiv	r6, r1, r7
 8009d9e:	fb07 1416 	mls	r4, r7, r6, r1
 8009da2:	3430      	adds	r4, #48	@ 0x30
 8009da4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009da8:	460c      	mov	r4, r1
 8009daa:	2c63      	cmp	r4, #99	@ 0x63
 8009dac:	f103 33ff 	add.w	r3, r3, #4294967295
 8009db0:	4631      	mov	r1, r6
 8009db2:	dcf1      	bgt.n	8009d98 <__exponent+0x1c>
 8009db4:	3130      	adds	r1, #48	@ 0x30
 8009db6:	1e94      	subs	r4, r2, #2
 8009db8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009dbc:	1c41      	adds	r1, r0, #1
 8009dbe:	4623      	mov	r3, r4
 8009dc0:	42ab      	cmp	r3, r5
 8009dc2:	d30a      	bcc.n	8009dda <__exponent+0x5e>
 8009dc4:	f10d 0309 	add.w	r3, sp, #9
 8009dc8:	1a9b      	subs	r3, r3, r2
 8009dca:	42ac      	cmp	r4, r5
 8009dcc:	bf88      	it	hi
 8009dce:	2300      	movhi	r3, #0
 8009dd0:	3302      	adds	r3, #2
 8009dd2:	4403      	add	r3, r0
 8009dd4:	1a18      	subs	r0, r3, r0
 8009dd6:	b003      	add	sp, #12
 8009dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dda:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009dde:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009de2:	e7ed      	b.n	8009dc0 <__exponent+0x44>
 8009de4:	2330      	movs	r3, #48	@ 0x30
 8009de6:	3130      	adds	r1, #48	@ 0x30
 8009de8:	7083      	strb	r3, [r0, #2]
 8009dea:	70c1      	strb	r1, [r0, #3]
 8009dec:	1d03      	adds	r3, r0, #4
 8009dee:	e7f1      	b.n	8009dd4 <__exponent+0x58>

08009df0 <_printf_float>:
 8009df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df4:	b08d      	sub	sp, #52	@ 0x34
 8009df6:	460c      	mov	r4, r1
 8009df8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009dfc:	4616      	mov	r6, r2
 8009dfe:	461f      	mov	r7, r3
 8009e00:	4605      	mov	r5, r0
 8009e02:	f000 fcbd 	bl	800a780 <_localeconv_r>
 8009e06:	f8d0 b000 	ldr.w	fp, [r0]
 8009e0a:	4658      	mov	r0, fp
 8009e0c:	f7f6 fab8 	bl	8000380 <strlen>
 8009e10:	2300      	movs	r3, #0
 8009e12:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e14:	f8d8 3000 	ldr.w	r3, [r8]
 8009e18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009e1c:	6822      	ldr	r2, [r4, #0]
 8009e1e:	9005      	str	r0, [sp, #20]
 8009e20:	3307      	adds	r3, #7
 8009e22:	f023 0307 	bic.w	r3, r3, #7
 8009e26:	f103 0108 	add.w	r1, r3, #8
 8009e2a:	f8c8 1000 	str.w	r1, [r8]
 8009e2e:	ed93 0b00 	vldr	d0, [r3]
 8009e32:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a090 <_printf_float+0x2a0>
 8009e36:	eeb0 7bc0 	vabs.f64	d7, d0
 8009e3a:	eeb4 7b46 	vcmp.f64	d7, d6
 8009e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e42:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009e46:	dd24      	ble.n	8009e92 <_printf_float+0xa2>
 8009e48:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e50:	d502      	bpl.n	8009e58 <_printf_float+0x68>
 8009e52:	232d      	movs	r3, #45	@ 0x2d
 8009e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e58:	498f      	ldr	r1, [pc, #572]	@ (800a098 <_printf_float+0x2a8>)
 8009e5a:	4b90      	ldr	r3, [pc, #576]	@ (800a09c <_printf_float+0x2ac>)
 8009e5c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009e60:	bf94      	ite	ls
 8009e62:	4688      	movls	r8, r1
 8009e64:	4698      	movhi	r8, r3
 8009e66:	f022 0204 	bic.w	r2, r2, #4
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	6123      	str	r3, [r4, #16]
 8009e6e:	6022      	str	r2, [r4, #0]
 8009e70:	f04f 0a00 	mov.w	sl, #0
 8009e74:	9700      	str	r7, [sp, #0]
 8009e76:	4633      	mov	r3, r6
 8009e78:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009e7a:	4621      	mov	r1, r4
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	f000 f9d1 	bl	800a224 <_printf_common>
 8009e82:	3001      	adds	r0, #1
 8009e84:	f040 8089 	bne.w	8009f9a <_printf_float+0x1aa>
 8009e88:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8c:	b00d      	add	sp, #52	@ 0x34
 8009e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e92:	eeb4 0b40 	vcmp.f64	d0, d0
 8009e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e9a:	d709      	bvc.n	8009eb0 <_printf_float+0xc0>
 8009e9c:	ee10 3a90 	vmov	r3, s1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	bfbc      	itt	lt
 8009ea4:	232d      	movlt	r3, #45	@ 0x2d
 8009ea6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009eaa:	497d      	ldr	r1, [pc, #500]	@ (800a0a0 <_printf_float+0x2b0>)
 8009eac:	4b7d      	ldr	r3, [pc, #500]	@ (800a0a4 <_printf_float+0x2b4>)
 8009eae:	e7d5      	b.n	8009e5c <_printf_float+0x6c>
 8009eb0:	6863      	ldr	r3, [r4, #4]
 8009eb2:	1c59      	adds	r1, r3, #1
 8009eb4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009eb8:	d139      	bne.n	8009f2e <_printf_float+0x13e>
 8009eba:	2306      	movs	r3, #6
 8009ebc:	6063      	str	r3, [r4, #4]
 8009ebe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	6022      	str	r2, [r4, #0]
 8009ec6:	9303      	str	r3, [sp, #12]
 8009ec8:	ab0a      	add	r3, sp, #40	@ 0x28
 8009eca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009ece:	ab09      	add	r3, sp, #36	@ 0x24
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	6861      	ldr	r1, [r4, #4]
 8009ed4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f7ff fefb 	bl	8009cd4 <__cvt>
 8009ede:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009ee2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ee4:	4680      	mov	r8, r0
 8009ee6:	d129      	bne.n	8009f3c <_printf_float+0x14c>
 8009ee8:	1cc8      	adds	r0, r1, #3
 8009eea:	db02      	blt.n	8009ef2 <_printf_float+0x102>
 8009eec:	6863      	ldr	r3, [r4, #4]
 8009eee:	4299      	cmp	r1, r3
 8009ef0:	dd41      	ble.n	8009f76 <_printf_float+0x186>
 8009ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8009ef6:	fa5f f989 	uxtb.w	r9, r9
 8009efa:	3901      	subs	r1, #1
 8009efc:	464a      	mov	r2, r9
 8009efe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009f02:	9109      	str	r1, [sp, #36]	@ 0x24
 8009f04:	f7ff ff3a 	bl	8009d7c <__exponent>
 8009f08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f0a:	1813      	adds	r3, r2, r0
 8009f0c:	2a01      	cmp	r2, #1
 8009f0e:	4682      	mov	sl, r0
 8009f10:	6123      	str	r3, [r4, #16]
 8009f12:	dc02      	bgt.n	8009f1a <_printf_float+0x12a>
 8009f14:	6822      	ldr	r2, [r4, #0]
 8009f16:	07d2      	lsls	r2, r2, #31
 8009f18:	d501      	bpl.n	8009f1e <_printf_float+0x12e>
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	6123      	str	r3, [r4, #16]
 8009f1e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d0a6      	beq.n	8009e74 <_printf_float+0x84>
 8009f26:	232d      	movs	r3, #45	@ 0x2d
 8009f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f2c:	e7a2      	b.n	8009e74 <_printf_float+0x84>
 8009f2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009f32:	d1c4      	bne.n	8009ebe <_printf_float+0xce>
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1c2      	bne.n	8009ebe <_printf_float+0xce>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e7bf      	b.n	8009ebc <_printf_float+0xcc>
 8009f3c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009f40:	d9db      	bls.n	8009efa <_printf_float+0x10a>
 8009f42:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009f46:	d118      	bne.n	8009f7a <_printf_float+0x18a>
 8009f48:	2900      	cmp	r1, #0
 8009f4a:	6863      	ldr	r3, [r4, #4]
 8009f4c:	dd0b      	ble.n	8009f66 <_printf_float+0x176>
 8009f4e:	6121      	str	r1, [r4, #16]
 8009f50:	b913      	cbnz	r3, 8009f58 <_printf_float+0x168>
 8009f52:	6822      	ldr	r2, [r4, #0]
 8009f54:	07d0      	lsls	r0, r2, #31
 8009f56:	d502      	bpl.n	8009f5e <_printf_float+0x16e>
 8009f58:	3301      	adds	r3, #1
 8009f5a:	440b      	add	r3, r1
 8009f5c:	6123      	str	r3, [r4, #16]
 8009f5e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009f60:	f04f 0a00 	mov.w	sl, #0
 8009f64:	e7db      	b.n	8009f1e <_printf_float+0x12e>
 8009f66:	b913      	cbnz	r3, 8009f6e <_printf_float+0x17e>
 8009f68:	6822      	ldr	r2, [r4, #0]
 8009f6a:	07d2      	lsls	r2, r2, #31
 8009f6c:	d501      	bpl.n	8009f72 <_printf_float+0x182>
 8009f6e:	3302      	adds	r3, #2
 8009f70:	e7f4      	b.n	8009f5c <_printf_float+0x16c>
 8009f72:	2301      	movs	r3, #1
 8009f74:	e7f2      	b.n	8009f5c <_printf_float+0x16c>
 8009f76:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009f7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f7c:	4299      	cmp	r1, r3
 8009f7e:	db05      	blt.n	8009f8c <_printf_float+0x19c>
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	6121      	str	r1, [r4, #16]
 8009f84:	07d8      	lsls	r0, r3, #31
 8009f86:	d5ea      	bpl.n	8009f5e <_printf_float+0x16e>
 8009f88:	1c4b      	adds	r3, r1, #1
 8009f8a:	e7e7      	b.n	8009f5c <_printf_float+0x16c>
 8009f8c:	2900      	cmp	r1, #0
 8009f8e:	bfd4      	ite	le
 8009f90:	f1c1 0202 	rsble	r2, r1, #2
 8009f94:	2201      	movgt	r2, #1
 8009f96:	4413      	add	r3, r2
 8009f98:	e7e0      	b.n	8009f5c <_printf_float+0x16c>
 8009f9a:	6823      	ldr	r3, [r4, #0]
 8009f9c:	055a      	lsls	r2, r3, #21
 8009f9e:	d407      	bmi.n	8009fb0 <_printf_float+0x1c0>
 8009fa0:	6923      	ldr	r3, [r4, #16]
 8009fa2:	4642      	mov	r2, r8
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	47b8      	blx	r7
 8009faa:	3001      	adds	r0, #1
 8009fac:	d12a      	bne.n	800a004 <_printf_float+0x214>
 8009fae:	e76b      	b.n	8009e88 <_printf_float+0x98>
 8009fb0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009fb4:	f240 80e0 	bls.w	800a178 <_printf_float+0x388>
 8009fb8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009fbc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc4:	d133      	bne.n	800a02e <_printf_float+0x23e>
 8009fc6:	4a38      	ldr	r2, [pc, #224]	@ (800a0a8 <_printf_float+0x2b8>)
 8009fc8:	2301      	movs	r3, #1
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b8      	blx	r7
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	f43f af59 	beq.w	8009e88 <_printf_float+0x98>
 8009fd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009fda:	4543      	cmp	r3, r8
 8009fdc:	db02      	blt.n	8009fe4 <_printf_float+0x1f4>
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	07d8      	lsls	r0, r3, #31
 8009fe2:	d50f      	bpl.n	800a004 <_printf_float+0x214>
 8009fe4:	9b05      	ldr	r3, [sp, #20]
 8009fe6:	465a      	mov	r2, fp
 8009fe8:	4631      	mov	r1, r6
 8009fea:	4628      	mov	r0, r5
 8009fec:	47b8      	blx	r7
 8009fee:	3001      	adds	r0, #1
 8009ff0:	f43f af4a 	beq.w	8009e88 <_printf_float+0x98>
 8009ff4:	f04f 0900 	mov.w	r9, #0
 8009ff8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ffc:	f104 0a1a 	add.w	sl, r4, #26
 800a000:	45c8      	cmp	r8, r9
 800a002:	dc09      	bgt.n	800a018 <_printf_float+0x228>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	079b      	lsls	r3, r3, #30
 800a008:	f100 8107 	bmi.w	800a21a <_printf_float+0x42a>
 800a00c:	68e0      	ldr	r0, [r4, #12]
 800a00e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a010:	4298      	cmp	r0, r3
 800a012:	bfb8      	it	lt
 800a014:	4618      	movlt	r0, r3
 800a016:	e739      	b.n	8009e8c <_printf_float+0x9c>
 800a018:	2301      	movs	r3, #1
 800a01a:	4652      	mov	r2, sl
 800a01c:	4631      	mov	r1, r6
 800a01e:	4628      	mov	r0, r5
 800a020:	47b8      	blx	r7
 800a022:	3001      	adds	r0, #1
 800a024:	f43f af30 	beq.w	8009e88 <_printf_float+0x98>
 800a028:	f109 0901 	add.w	r9, r9, #1
 800a02c:	e7e8      	b.n	800a000 <_printf_float+0x210>
 800a02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	dc3b      	bgt.n	800a0ac <_printf_float+0x2bc>
 800a034:	4a1c      	ldr	r2, [pc, #112]	@ (800a0a8 <_printf_float+0x2b8>)
 800a036:	2301      	movs	r3, #1
 800a038:	4631      	mov	r1, r6
 800a03a:	4628      	mov	r0, r5
 800a03c:	47b8      	blx	r7
 800a03e:	3001      	adds	r0, #1
 800a040:	f43f af22 	beq.w	8009e88 <_printf_float+0x98>
 800a044:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a048:	ea59 0303 	orrs.w	r3, r9, r3
 800a04c:	d102      	bne.n	800a054 <_printf_float+0x264>
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	07d9      	lsls	r1, r3, #31
 800a052:	d5d7      	bpl.n	800a004 <_printf_float+0x214>
 800a054:	9b05      	ldr	r3, [sp, #20]
 800a056:	465a      	mov	r2, fp
 800a058:	4631      	mov	r1, r6
 800a05a:	4628      	mov	r0, r5
 800a05c:	47b8      	blx	r7
 800a05e:	3001      	adds	r0, #1
 800a060:	f43f af12 	beq.w	8009e88 <_printf_float+0x98>
 800a064:	f04f 0a00 	mov.w	sl, #0
 800a068:	f104 0b1a 	add.w	fp, r4, #26
 800a06c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a06e:	425b      	negs	r3, r3
 800a070:	4553      	cmp	r3, sl
 800a072:	dc01      	bgt.n	800a078 <_printf_float+0x288>
 800a074:	464b      	mov	r3, r9
 800a076:	e794      	b.n	8009fa2 <_printf_float+0x1b2>
 800a078:	2301      	movs	r3, #1
 800a07a:	465a      	mov	r2, fp
 800a07c:	4631      	mov	r1, r6
 800a07e:	4628      	mov	r0, r5
 800a080:	47b8      	blx	r7
 800a082:	3001      	adds	r0, #1
 800a084:	f43f af00 	beq.w	8009e88 <_printf_float+0x98>
 800a088:	f10a 0a01 	add.w	sl, sl, #1
 800a08c:	e7ee      	b.n	800a06c <_printf_float+0x27c>
 800a08e:	bf00      	nop
 800a090:	ffffffff 	.word	0xffffffff
 800a094:	7fefffff 	.word	0x7fefffff
 800a098:	0800c974 	.word	0x0800c974
 800a09c:	0800c978 	.word	0x0800c978
 800a0a0:	0800c97c 	.word	0x0800c97c
 800a0a4:	0800c980 	.word	0x0800c980
 800a0a8:	0800c984 	.word	0x0800c984
 800a0ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a0b2:	4553      	cmp	r3, sl
 800a0b4:	bfa8      	it	ge
 800a0b6:	4653      	movge	r3, sl
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	4699      	mov	r9, r3
 800a0bc:	dc37      	bgt.n	800a12e <_printf_float+0x33e>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	9307      	str	r3, [sp, #28]
 800a0c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0c6:	f104 021a 	add.w	r2, r4, #26
 800a0ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0cc:	9907      	ldr	r1, [sp, #28]
 800a0ce:	9306      	str	r3, [sp, #24]
 800a0d0:	eba3 0309 	sub.w	r3, r3, r9
 800a0d4:	428b      	cmp	r3, r1
 800a0d6:	dc31      	bgt.n	800a13c <_printf_float+0x34c>
 800a0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0da:	459a      	cmp	sl, r3
 800a0dc:	dc3b      	bgt.n	800a156 <_printf_float+0x366>
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	07da      	lsls	r2, r3, #31
 800a0e2:	d438      	bmi.n	800a156 <_printf_float+0x366>
 800a0e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e6:	ebaa 0903 	sub.w	r9, sl, r3
 800a0ea:	9b06      	ldr	r3, [sp, #24]
 800a0ec:	ebaa 0303 	sub.w	r3, sl, r3
 800a0f0:	4599      	cmp	r9, r3
 800a0f2:	bfa8      	it	ge
 800a0f4:	4699      	movge	r9, r3
 800a0f6:	f1b9 0f00 	cmp.w	r9, #0
 800a0fa:	dc34      	bgt.n	800a166 <_printf_float+0x376>
 800a0fc:	f04f 0800 	mov.w	r8, #0
 800a100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a104:	f104 0b1a 	add.w	fp, r4, #26
 800a108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a10a:	ebaa 0303 	sub.w	r3, sl, r3
 800a10e:	eba3 0309 	sub.w	r3, r3, r9
 800a112:	4543      	cmp	r3, r8
 800a114:	f77f af76 	ble.w	800a004 <_printf_float+0x214>
 800a118:	2301      	movs	r3, #1
 800a11a:	465a      	mov	r2, fp
 800a11c:	4631      	mov	r1, r6
 800a11e:	4628      	mov	r0, r5
 800a120:	47b8      	blx	r7
 800a122:	3001      	adds	r0, #1
 800a124:	f43f aeb0 	beq.w	8009e88 <_printf_float+0x98>
 800a128:	f108 0801 	add.w	r8, r8, #1
 800a12c:	e7ec      	b.n	800a108 <_printf_float+0x318>
 800a12e:	4642      	mov	r2, r8
 800a130:	4631      	mov	r1, r6
 800a132:	4628      	mov	r0, r5
 800a134:	47b8      	blx	r7
 800a136:	3001      	adds	r0, #1
 800a138:	d1c1      	bne.n	800a0be <_printf_float+0x2ce>
 800a13a:	e6a5      	b.n	8009e88 <_printf_float+0x98>
 800a13c:	2301      	movs	r3, #1
 800a13e:	4631      	mov	r1, r6
 800a140:	4628      	mov	r0, r5
 800a142:	9206      	str	r2, [sp, #24]
 800a144:	47b8      	blx	r7
 800a146:	3001      	adds	r0, #1
 800a148:	f43f ae9e 	beq.w	8009e88 <_printf_float+0x98>
 800a14c:	9b07      	ldr	r3, [sp, #28]
 800a14e:	9a06      	ldr	r2, [sp, #24]
 800a150:	3301      	adds	r3, #1
 800a152:	9307      	str	r3, [sp, #28]
 800a154:	e7b9      	b.n	800a0ca <_printf_float+0x2da>
 800a156:	9b05      	ldr	r3, [sp, #20]
 800a158:	465a      	mov	r2, fp
 800a15a:	4631      	mov	r1, r6
 800a15c:	4628      	mov	r0, r5
 800a15e:	47b8      	blx	r7
 800a160:	3001      	adds	r0, #1
 800a162:	d1bf      	bne.n	800a0e4 <_printf_float+0x2f4>
 800a164:	e690      	b.n	8009e88 <_printf_float+0x98>
 800a166:	9a06      	ldr	r2, [sp, #24]
 800a168:	464b      	mov	r3, r9
 800a16a:	4442      	add	r2, r8
 800a16c:	4631      	mov	r1, r6
 800a16e:	4628      	mov	r0, r5
 800a170:	47b8      	blx	r7
 800a172:	3001      	adds	r0, #1
 800a174:	d1c2      	bne.n	800a0fc <_printf_float+0x30c>
 800a176:	e687      	b.n	8009e88 <_printf_float+0x98>
 800a178:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a17c:	f1b9 0f01 	cmp.w	r9, #1
 800a180:	dc01      	bgt.n	800a186 <_printf_float+0x396>
 800a182:	07db      	lsls	r3, r3, #31
 800a184:	d536      	bpl.n	800a1f4 <_printf_float+0x404>
 800a186:	2301      	movs	r3, #1
 800a188:	4642      	mov	r2, r8
 800a18a:	4631      	mov	r1, r6
 800a18c:	4628      	mov	r0, r5
 800a18e:	47b8      	blx	r7
 800a190:	3001      	adds	r0, #1
 800a192:	f43f ae79 	beq.w	8009e88 <_printf_float+0x98>
 800a196:	9b05      	ldr	r3, [sp, #20]
 800a198:	465a      	mov	r2, fp
 800a19a:	4631      	mov	r1, r6
 800a19c:	4628      	mov	r0, r5
 800a19e:	47b8      	blx	r7
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	f43f ae71 	beq.w	8009e88 <_printf_float+0x98>
 800a1a6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a1aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b2:	f109 39ff 	add.w	r9, r9, #4294967295
 800a1b6:	d018      	beq.n	800a1ea <_printf_float+0x3fa>
 800a1b8:	464b      	mov	r3, r9
 800a1ba:	f108 0201 	add.w	r2, r8, #1
 800a1be:	4631      	mov	r1, r6
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	47b8      	blx	r7
 800a1c4:	3001      	adds	r0, #1
 800a1c6:	d10c      	bne.n	800a1e2 <_printf_float+0x3f2>
 800a1c8:	e65e      	b.n	8009e88 <_printf_float+0x98>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	465a      	mov	r2, fp
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	47b8      	blx	r7
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	f43f ae57 	beq.w	8009e88 <_printf_float+0x98>
 800a1da:	f108 0801 	add.w	r8, r8, #1
 800a1de:	45c8      	cmp	r8, r9
 800a1e0:	dbf3      	blt.n	800a1ca <_printf_float+0x3da>
 800a1e2:	4653      	mov	r3, sl
 800a1e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a1e8:	e6dc      	b.n	8009fa4 <_printf_float+0x1b4>
 800a1ea:	f04f 0800 	mov.w	r8, #0
 800a1ee:	f104 0b1a 	add.w	fp, r4, #26
 800a1f2:	e7f4      	b.n	800a1de <_printf_float+0x3ee>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	4642      	mov	r2, r8
 800a1f8:	e7e1      	b.n	800a1be <_printf_float+0x3ce>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	464a      	mov	r2, r9
 800a1fe:	4631      	mov	r1, r6
 800a200:	4628      	mov	r0, r5
 800a202:	47b8      	blx	r7
 800a204:	3001      	adds	r0, #1
 800a206:	f43f ae3f 	beq.w	8009e88 <_printf_float+0x98>
 800a20a:	f108 0801 	add.w	r8, r8, #1
 800a20e:	68e3      	ldr	r3, [r4, #12]
 800a210:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a212:	1a5b      	subs	r3, r3, r1
 800a214:	4543      	cmp	r3, r8
 800a216:	dcf0      	bgt.n	800a1fa <_printf_float+0x40a>
 800a218:	e6f8      	b.n	800a00c <_printf_float+0x21c>
 800a21a:	f04f 0800 	mov.w	r8, #0
 800a21e:	f104 0919 	add.w	r9, r4, #25
 800a222:	e7f4      	b.n	800a20e <_printf_float+0x41e>

0800a224 <_printf_common>:
 800a224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a228:	4616      	mov	r6, r2
 800a22a:	4698      	mov	r8, r3
 800a22c:	688a      	ldr	r2, [r1, #8]
 800a22e:	690b      	ldr	r3, [r1, #16]
 800a230:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a234:	4293      	cmp	r3, r2
 800a236:	bfb8      	it	lt
 800a238:	4613      	movlt	r3, r2
 800a23a:	6033      	str	r3, [r6, #0]
 800a23c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a240:	4607      	mov	r7, r0
 800a242:	460c      	mov	r4, r1
 800a244:	b10a      	cbz	r2, 800a24a <_printf_common+0x26>
 800a246:	3301      	adds	r3, #1
 800a248:	6033      	str	r3, [r6, #0]
 800a24a:	6823      	ldr	r3, [r4, #0]
 800a24c:	0699      	lsls	r1, r3, #26
 800a24e:	bf42      	ittt	mi
 800a250:	6833      	ldrmi	r3, [r6, #0]
 800a252:	3302      	addmi	r3, #2
 800a254:	6033      	strmi	r3, [r6, #0]
 800a256:	6825      	ldr	r5, [r4, #0]
 800a258:	f015 0506 	ands.w	r5, r5, #6
 800a25c:	d106      	bne.n	800a26c <_printf_common+0x48>
 800a25e:	f104 0a19 	add.w	sl, r4, #25
 800a262:	68e3      	ldr	r3, [r4, #12]
 800a264:	6832      	ldr	r2, [r6, #0]
 800a266:	1a9b      	subs	r3, r3, r2
 800a268:	42ab      	cmp	r3, r5
 800a26a:	dc26      	bgt.n	800a2ba <_printf_common+0x96>
 800a26c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a270:	6822      	ldr	r2, [r4, #0]
 800a272:	3b00      	subs	r3, #0
 800a274:	bf18      	it	ne
 800a276:	2301      	movne	r3, #1
 800a278:	0692      	lsls	r2, r2, #26
 800a27a:	d42b      	bmi.n	800a2d4 <_printf_common+0xb0>
 800a27c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a280:	4641      	mov	r1, r8
 800a282:	4638      	mov	r0, r7
 800a284:	47c8      	blx	r9
 800a286:	3001      	adds	r0, #1
 800a288:	d01e      	beq.n	800a2c8 <_printf_common+0xa4>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	6922      	ldr	r2, [r4, #16]
 800a28e:	f003 0306 	and.w	r3, r3, #6
 800a292:	2b04      	cmp	r3, #4
 800a294:	bf02      	ittt	eq
 800a296:	68e5      	ldreq	r5, [r4, #12]
 800a298:	6833      	ldreq	r3, [r6, #0]
 800a29a:	1aed      	subeq	r5, r5, r3
 800a29c:	68a3      	ldr	r3, [r4, #8]
 800a29e:	bf0c      	ite	eq
 800a2a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2a4:	2500      	movne	r5, #0
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	bfc4      	itt	gt
 800a2aa:	1a9b      	subgt	r3, r3, r2
 800a2ac:	18ed      	addgt	r5, r5, r3
 800a2ae:	2600      	movs	r6, #0
 800a2b0:	341a      	adds	r4, #26
 800a2b2:	42b5      	cmp	r5, r6
 800a2b4:	d11a      	bne.n	800a2ec <_printf_common+0xc8>
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	e008      	b.n	800a2cc <_printf_common+0xa8>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	4652      	mov	r2, sl
 800a2be:	4641      	mov	r1, r8
 800a2c0:	4638      	mov	r0, r7
 800a2c2:	47c8      	blx	r9
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	d103      	bne.n	800a2d0 <_printf_common+0xac>
 800a2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d0:	3501      	adds	r5, #1
 800a2d2:	e7c6      	b.n	800a262 <_printf_common+0x3e>
 800a2d4:	18e1      	adds	r1, r4, r3
 800a2d6:	1c5a      	adds	r2, r3, #1
 800a2d8:	2030      	movs	r0, #48	@ 0x30
 800a2da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a2de:	4422      	add	r2, r4
 800a2e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a2e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a2e8:	3302      	adds	r3, #2
 800a2ea:	e7c7      	b.n	800a27c <_printf_common+0x58>
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	4622      	mov	r2, r4
 800a2f0:	4641      	mov	r1, r8
 800a2f2:	4638      	mov	r0, r7
 800a2f4:	47c8      	blx	r9
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	d0e6      	beq.n	800a2c8 <_printf_common+0xa4>
 800a2fa:	3601      	adds	r6, #1
 800a2fc:	e7d9      	b.n	800a2b2 <_printf_common+0x8e>
	...

0800a300 <_printf_i>:
 800a300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a304:	7e0f      	ldrb	r7, [r1, #24]
 800a306:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a308:	2f78      	cmp	r7, #120	@ 0x78
 800a30a:	4691      	mov	r9, r2
 800a30c:	4680      	mov	r8, r0
 800a30e:	460c      	mov	r4, r1
 800a310:	469a      	mov	sl, r3
 800a312:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a316:	d807      	bhi.n	800a328 <_printf_i+0x28>
 800a318:	2f62      	cmp	r7, #98	@ 0x62
 800a31a:	d80a      	bhi.n	800a332 <_printf_i+0x32>
 800a31c:	2f00      	cmp	r7, #0
 800a31e:	f000 80d2 	beq.w	800a4c6 <_printf_i+0x1c6>
 800a322:	2f58      	cmp	r7, #88	@ 0x58
 800a324:	f000 80b9 	beq.w	800a49a <_printf_i+0x19a>
 800a328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a32c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a330:	e03a      	b.n	800a3a8 <_printf_i+0xa8>
 800a332:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a336:	2b15      	cmp	r3, #21
 800a338:	d8f6      	bhi.n	800a328 <_printf_i+0x28>
 800a33a:	a101      	add	r1, pc, #4	@ (adr r1, 800a340 <_printf_i+0x40>)
 800a33c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a340:	0800a399 	.word	0x0800a399
 800a344:	0800a3ad 	.word	0x0800a3ad
 800a348:	0800a329 	.word	0x0800a329
 800a34c:	0800a329 	.word	0x0800a329
 800a350:	0800a329 	.word	0x0800a329
 800a354:	0800a329 	.word	0x0800a329
 800a358:	0800a3ad 	.word	0x0800a3ad
 800a35c:	0800a329 	.word	0x0800a329
 800a360:	0800a329 	.word	0x0800a329
 800a364:	0800a329 	.word	0x0800a329
 800a368:	0800a329 	.word	0x0800a329
 800a36c:	0800a4ad 	.word	0x0800a4ad
 800a370:	0800a3d7 	.word	0x0800a3d7
 800a374:	0800a467 	.word	0x0800a467
 800a378:	0800a329 	.word	0x0800a329
 800a37c:	0800a329 	.word	0x0800a329
 800a380:	0800a4cf 	.word	0x0800a4cf
 800a384:	0800a329 	.word	0x0800a329
 800a388:	0800a3d7 	.word	0x0800a3d7
 800a38c:	0800a329 	.word	0x0800a329
 800a390:	0800a329 	.word	0x0800a329
 800a394:	0800a46f 	.word	0x0800a46f
 800a398:	6833      	ldr	r3, [r6, #0]
 800a39a:	1d1a      	adds	r2, r3, #4
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	6032      	str	r2, [r6, #0]
 800a3a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e09d      	b.n	800a4e8 <_printf_i+0x1e8>
 800a3ac:	6833      	ldr	r3, [r6, #0]
 800a3ae:	6820      	ldr	r0, [r4, #0]
 800a3b0:	1d19      	adds	r1, r3, #4
 800a3b2:	6031      	str	r1, [r6, #0]
 800a3b4:	0606      	lsls	r6, r0, #24
 800a3b6:	d501      	bpl.n	800a3bc <_printf_i+0xbc>
 800a3b8:	681d      	ldr	r5, [r3, #0]
 800a3ba:	e003      	b.n	800a3c4 <_printf_i+0xc4>
 800a3bc:	0645      	lsls	r5, r0, #25
 800a3be:	d5fb      	bpl.n	800a3b8 <_printf_i+0xb8>
 800a3c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a3c4:	2d00      	cmp	r5, #0
 800a3c6:	da03      	bge.n	800a3d0 <_printf_i+0xd0>
 800a3c8:	232d      	movs	r3, #45	@ 0x2d
 800a3ca:	426d      	negs	r5, r5
 800a3cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3d0:	4859      	ldr	r0, [pc, #356]	@ (800a538 <_printf_i+0x238>)
 800a3d2:	230a      	movs	r3, #10
 800a3d4:	e011      	b.n	800a3fa <_printf_i+0xfa>
 800a3d6:	6821      	ldr	r1, [r4, #0]
 800a3d8:	6833      	ldr	r3, [r6, #0]
 800a3da:	0608      	lsls	r0, r1, #24
 800a3dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a3e0:	d402      	bmi.n	800a3e8 <_printf_i+0xe8>
 800a3e2:	0649      	lsls	r1, r1, #25
 800a3e4:	bf48      	it	mi
 800a3e6:	b2ad      	uxthmi	r5, r5
 800a3e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a3ea:	4853      	ldr	r0, [pc, #332]	@ (800a538 <_printf_i+0x238>)
 800a3ec:	6033      	str	r3, [r6, #0]
 800a3ee:	bf14      	ite	ne
 800a3f0:	230a      	movne	r3, #10
 800a3f2:	2308      	moveq	r3, #8
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3fa:	6866      	ldr	r6, [r4, #4]
 800a3fc:	60a6      	str	r6, [r4, #8]
 800a3fe:	2e00      	cmp	r6, #0
 800a400:	bfa2      	ittt	ge
 800a402:	6821      	ldrge	r1, [r4, #0]
 800a404:	f021 0104 	bicge.w	r1, r1, #4
 800a408:	6021      	strge	r1, [r4, #0]
 800a40a:	b90d      	cbnz	r5, 800a410 <_printf_i+0x110>
 800a40c:	2e00      	cmp	r6, #0
 800a40e:	d04b      	beq.n	800a4a8 <_printf_i+0x1a8>
 800a410:	4616      	mov	r6, r2
 800a412:	fbb5 f1f3 	udiv	r1, r5, r3
 800a416:	fb03 5711 	mls	r7, r3, r1, r5
 800a41a:	5dc7      	ldrb	r7, [r0, r7]
 800a41c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a420:	462f      	mov	r7, r5
 800a422:	42bb      	cmp	r3, r7
 800a424:	460d      	mov	r5, r1
 800a426:	d9f4      	bls.n	800a412 <_printf_i+0x112>
 800a428:	2b08      	cmp	r3, #8
 800a42a:	d10b      	bne.n	800a444 <_printf_i+0x144>
 800a42c:	6823      	ldr	r3, [r4, #0]
 800a42e:	07df      	lsls	r7, r3, #31
 800a430:	d508      	bpl.n	800a444 <_printf_i+0x144>
 800a432:	6923      	ldr	r3, [r4, #16]
 800a434:	6861      	ldr	r1, [r4, #4]
 800a436:	4299      	cmp	r1, r3
 800a438:	bfde      	ittt	le
 800a43a:	2330      	movle	r3, #48	@ 0x30
 800a43c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a440:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a444:	1b92      	subs	r2, r2, r6
 800a446:	6122      	str	r2, [r4, #16]
 800a448:	f8cd a000 	str.w	sl, [sp]
 800a44c:	464b      	mov	r3, r9
 800a44e:	aa03      	add	r2, sp, #12
 800a450:	4621      	mov	r1, r4
 800a452:	4640      	mov	r0, r8
 800a454:	f7ff fee6 	bl	800a224 <_printf_common>
 800a458:	3001      	adds	r0, #1
 800a45a:	d14a      	bne.n	800a4f2 <_printf_i+0x1f2>
 800a45c:	f04f 30ff 	mov.w	r0, #4294967295
 800a460:	b004      	add	sp, #16
 800a462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a466:	6823      	ldr	r3, [r4, #0]
 800a468:	f043 0320 	orr.w	r3, r3, #32
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	4833      	ldr	r0, [pc, #204]	@ (800a53c <_printf_i+0x23c>)
 800a470:	2778      	movs	r7, #120	@ 0x78
 800a472:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	6831      	ldr	r1, [r6, #0]
 800a47a:	061f      	lsls	r7, r3, #24
 800a47c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a480:	d402      	bmi.n	800a488 <_printf_i+0x188>
 800a482:	065f      	lsls	r7, r3, #25
 800a484:	bf48      	it	mi
 800a486:	b2ad      	uxthmi	r5, r5
 800a488:	6031      	str	r1, [r6, #0]
 800a48a:	07d9      	lsls	r1, r3, #31
 800a48c:	bf44      	itt	mi
 800a48e:	f043 0320 	orrmi.w	r3, r3, #32
 800a492:	6023      	strmi	r3, [r4, #0]
 800a494:	b11d      	cbz	r5, 800a49e <_printf_i+0x19e>
 800a496:	2310      	movs	r3, #16
 800a498:	e7ac      	b.n	800a3f4 <_printf_i+0xf4>
 800a49a:	4827      	ldr	r0, [pc, #156]	@ (800a538 <_printf_i+0x238>)
 800a49c:	e7e9      	b.n	800a472 <_printf_i+0x172>
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	f023 0320 	bic.w	r3, r3, #32
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	e7f6      	b.n	800a496 <_printf_i+0x196>
 800a4a8:	4616      	mov	r6, r2
 800a4aa:	e7bd      	b.n	800a428 <_printf_i+0x128>
 800a4ac:	6833      	ldr	r3, [r6, #0]
 800a4ae:	6825      	ldr	r5, [r4, #0]
 800a4b0:	6961      	ldr	r1, [r4, #20]
 800a4b2:	1d18      	adds	r0, r3, #4
 800a4b4:	6030      	str	r0, [r6, #0]
 800a4b6:	062e      	lsls	r6, r5, #24
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	d501      	bpl.n	800a4c0 <_printf_i+0x1c0>
 800a4bc:	6019      	str	r1, [r3, #0]
 800a4be:	e002      	b.n	800a4c6 <_printf_i+0x1c6>
 800a4c0:	0668      	lsls	r0, r5, #25
 800a4c2:	d5fb      	bpl.n	800a4bc <_printf_i+0x1bc>
 800a4c4:	8019      	strh	r1, [r3, #0]
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	6123      	str	r3, [r4, #16]
 800a4ca:	4616      	mov	r6, r2
 800a4cc:	e7bc      	b.n	800a448 <_printf_i+0x148>
 800a4ce:	6833      	ldr	r3, [r6, #0]
 800a4d0:	1d1a      	adds	r2, r3, #4
 800a4d2:	6032      	str	r2, [r6, #0]
 800a4d4:	681e      	ldr	r6, [r3, #0]
 800a4d6:	6862      	ldr	r2, [r4, #4]
 800a4d8:	2100      	movs	r1, #0
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f7f5 ff00 	bl	80002e0 <memchr>
 800a4e0:	b108      	cbz	r0, 800a4e6 <_printf_i+0x1e6>
 800a4e2:	1b80      	subs	r0, r0, r6
 800a4e4:	6060      	str	r0, [r4, #4]
 800a4e6:	6863      	ldr	r3, [r4, #4]
 800a4e8:	6123      	str	r3, [r4, #16]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4f0:	e7aa      	b.n	800a448 <_printf_i+0x148>
 800a4f2:	6923      	ldr	r3, [r4, #16]
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	4649      	mov	r1, r9
 800a4f8:	4640      	mov	r0, r8
 800a4fa:	47d0      	blx	sl
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d0ad      	beq.n	800a45c <_printf_i+0x15c>
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	079b      	lsls	r3, r3, #30
 800a504:	d413      	bmi.n	800a52e <_printf_i+0x22e>
 800a506:	68e0      	ldr	r0, [r4, #12]
 800a508:	9b03      	ldr	r3, [sp, #12]
 800a50a:	4298      	cmp	r0, r3
 800a50c:	bfb8      	it	lt
 800a50e:	4618      	movlt	r0, r3
 800a510:	e7a6      	b.n	800a460 <_printf_i+0x160>
 800a512:	2301      	movs	r3, #1
 800a514:	4632      	mov	r2, r6
 800a516:	4649      	mov	r1, r9
 800a518:	4640      	mov	r0, r8
 800a51a:	47d0      	blx	sl
 800a51c:	3001      	adds	r0, #1
 800a51e:	d09d      	beq.n	800a45c <_printf_i+0x15c>
 800a520:	3501      	adds	r5, #1
 800a522:	68e3      	ldr	r3, [r4, #12]
 800a524:	9903      	ldr	r1, [sp, #12]
 800a526:	1a5b      	subs	r3, r3, r1
 800a528:	42ab      	cmp	r3, r5
 800a52a:	dcf2      	bgt.n	800a512 <_printf_i+0x212>
 800a52c:	e7eb      	b.n	800a506 <_printf_i+0x206>
 800a52e:	2500      	movs	r5, #0
 800a530:	f104 0619 	add.w	r6, r4, #25
 800a534:	e7f5      	b.n	800a522 <_printf_i+0x222>
 800a536:	bf00      	nop
 800a538:	0800c986 	.word	0x0800c986
 800a53c:	0800c997 	.word	0x0800c997

0800a540 <std>:
 800a540:	2300      	movs	r3, #0
 800a542:	b510      	push	{r4, lr}
 800a544:	4604      	mov	r4, r0
 800a546:	e9c0 3300 	strd	r3, r3, [r0]
 800a54a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a54e:	6083      	str	r3, [r0, #8]
 800a550:	8181      	strh	r1, [r0, #12]
 800a552:	6643      	str	r3, [r0, #100]	@ 0x64
 800a554:	81c2      	strh	r2, [r0, #14]
 800a556:	6183      	str	r3, [r0, #24]
 800a558:	4619      	mov	r1, r3
 800a55a:	2208      	movs	r2, #8
 800a55c:	305c      	adds	r0, #92	@ 0x5c
 800a55e:	f000 f906 	bl	800a76e <memset>
 800a562:	4b0d      	ldr	r3, [pc, #52]	@ (800a598 <std+0x58>)
 800a564:	6263      	str	r3, [r4, #36]	@ 0x24
 800a566:	4b0d      	ldr	r3, [pc, #52]	@ (800a59c <std+0x5c>)
 800a568:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a56a:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a0 <std+0x60>)
 800a56c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a56e:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a4 <std+0x64>)
 800a570:	6323      	str	r3, [r4, #48]	@ 0x30
 800a572:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a8 <std+0x68>)
 800a574:	6224      	str	r4, [r4, #32]
 800a576:	429c      	cmp	r4, r3
 800a578:	d006      	beq.n	800a588 <std+0x48>
 800a57a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a57e:	4294      	cmp	r4, r2
 800a580:	d002      	beq.n	800a588 <std+0x48>
 800a582:	33d0      	adds	r3, #208	@ 0xd0
 800a584:	429c      	cmp	r4, r3
 800a586:	d105      	bne.n	800a594 <std+0x54>
 800a588:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a590:	f000 b96a 	b.w	800a868 <__retarget_lock_init_recursive>
 800a594:	bd10      	pop	{r4, pc}
 800a596:	bf00      	nop
 800a598:	0800a6e9 	.word	0x0800a6e9
 800a59c:	0800a70b 	.word	0x0800a70b
 800a5a0:	0800a743 	.word	0x0800a743
 800a5a4:	0800a767 	.word	0x0800a767
 800a5a8:	24000b30 	.word	0x24000b30

0800a5ac <stdio_exit_handler>:
 800a5ac:	4a02      	ldr	r2, [pc, #8]	@ (800a5b8 <stdio_exit_handler+0xc>)
 800a5ae:	4903      	ldr	r1, [pc, #12]	@ (800a5bc <stdio_exit_handler+0x10>)
 800a5b0:	4803      	ldr	r0, [pc, #12]	@ (800a5c0 <stdio_exit_handler+0x14>)
 800a5b2:	f000 b869 	b.w	800a688 <_fwalk_sglue>
 800a5b6:	bf00      	nop
 800a5b8:	24000020 	.word	0x24000020
 800a5bc:	0800c0bd 	.word	0x0800c0bd
 800a5c0:	24000030 	.word	0x24000030

0800a5c4 <cleanup_stdio>:
 800a5c4:	6841      	ldr	r1, [r0, #4]
 800a5c6:	4b0c      	ldr	r3, [pc, #48]	@ (800a5f8 <cleanup_stdio+0x34>)
 800a5c8:	4299      	cmp	r1, r3
 800a5ca:	b510      	push	{r4, lr}
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	d001      	beq.n	800a5d4 <cleanup_stdio+0x10>
 800a5d0:	f001 fd74 	bl	800c0bc <_fflush_r>
 800a5d4:	68a1      	ldr	r1, [r4, #8]
 800a5d6:	4b09      	ldr	r3, [pc, #36]	@ (800a5fc <cleanup_stdio+0x38>)
 800a5d8:	4299      	cmp	r1, r3
 800a5da:	d002      	beq.n	800a5e2 <cleanup_stdio+0x1e>
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f001 fd6d 	bl	800c0bc <_fflush_r>
 800a5e2:	68e1      	ldr	r1, [r4, #12]
 800a5e4:	4b06      	ldr	r3, [pc, #24]	@ (800a600 <cleanup_stdio+0x3c>)
 800a5e6:	4299      	cmp	r1, r3
 800a5e8:	d004      	beq.n	800a5f4 <cleanup_stdio+0x30>
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5f0:	f001 bd64 	b.w	800c0bc <_fflush_r>
 800a5f4:	bd10      	pop	{r4, pc}
 800a5f6:	bf00      	nop
 800a5f8:	24000b30 	.word	0x24000b30
 800a5fc:	24000b98 	.word	0x24000b98
 800a600:	24000c00 	.word	0x24000c00

0800a604 <global_stdio_init.part.0>:
 800a604:	b510      	push	{r4, lr}
 800a606:	4b0b      	ldr	r3, [pc, #44]	@ (800a634 <global_stdio_init.part.0+0x30>)
 800a608:	4c0b      	ldr	r4, [pc, #44]	@ (800a638 <global_stdio_init.part.0+0x34>)
 800a60a:	4a0c      	ldr	r2, [pc, #48]	@ (800a63c <global_stdio_init.part.0+0x38>)
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	4620      	mov	r0, r4
 800a610:	2200      	movs	r2, #0
 800a612:	2104      	movs	r1, #4
 800a614:	f7ff ff94 	bl	800a540 <std>
 800a618:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a61c:	2201      	movs	r2, #1
 800a61e:	2109      	movs	r1, #9
 800a620:	f7ff ff8e 	bl	800a540 <std>
 800a624:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a628:	2202      	movs	r2, #2
 800a62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a62e:	2112      	movs	r1, #18
 800a630:	f7ff bf86 	b.w	800a540 <std>
 800a634:	24000c68 	.word	0x24000c68
 800a638:	24000b30 	.word	0x24000b30
 800a63c:	0800a5ad 	.word	0x0800a5ad

0800a640 <__sfp_lock_acquire>:
 800a640:	4801      	ldr	r0, [pc, #4]	@ (800a648 <__sfp_lock_acquire+0x8>)
 800a642:	f000 b912 	b.w	800a86a <__retarget_lock_acquire_recursive>
 800a646:	bf00      	nop
 800a648:	24000c71 	.word	0x24000c71

0800a64c <__sfp_lock_release>:
 800a64c:	4801      	ldr	r0, [pc, #4]	@ (800a654 <__sfp_lock_release+0x8>)
 800a64e:	f000 b90d 	b.w	800a86c <__retarget_lock_release_recursive>
 800a652:	bf00      	nop
 800a654:	24000c71 	.word	0x24000c71

0800a658 <__sinit>:
 800a658:	b510      	push	{r4, lr}
 800a65a:	4604      	mov	r4, r0
 800a65c:	f7ff fff0 	bl	800a640 <__sfp_lock_acquire>
 800a660:	6a23      	ldr	r3, [r4, #32]
 800a662:	b11b      	cbz	r3, 800a66c <__sinit+0x14>
 800a664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a668:	f7ff bff0 	b.w	800a64c <__sfp_lock_release>
 800a66c:	4b04      	ldr	r3, [pc, #16]	@ (800a680 <__sinit+0x28>)
 800a66e:	6223      	str	r3, [r4, #32]
 800a670:	4b04      	ldr	r3, [pc, #16]	@ (800a684 <__sinit+0x2c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1f5      	bne.n	800a664 <__sinit+0xc>
 800a678:	f7ff ffc4 	bl	800a604 <global_stdio_init.part.0>
 800a67c:	e7f2      	b.n	800a664 <__sinit+0xc>
 800a67e:	bf00      	nop
 800a680:	0800a5c5 	.word	0x0800a5c5
 800a684:	24000c68 	.word	0x24000c68

0800a688 <_fwalk_sglue>:
 800a688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a68c:	4607      	mov	r7, r0
 800a68e:	4688      	mov	r8, r1
 800a690:	4614      	mov	r4, r2
 800a692:	2600      	movs	r6, #0
 800a694:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a698:	f1b9 0901 	subs.w	r9, r9, #1
 800a69c:	d505      	bpl.n	800a6aa <_fwalk_sglue+0x22>
 800a69e:	6824      	ldr	r4, [r4, #0]
 800a6a0:	2c00      	cmp	r4, #0
 800a6a2:	d1f7      	bne.n	800a694 <_fwalk_sglue+0xc>
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6aa:	89ab      	ldrh	r3, [r5, #12]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d907      	bls.n	800a6c0 <_fwalk_sglue+0x38>
 800a6b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	d003      	beq.n	800a6c0 <_fwalk_sglue+0x38>
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	4638      	mov	r0, r7
 800a6bc:	47c0      	blx	r8
 800a6be:	4306      	orrs	r6, r0
 800a6c0:	3568      	adds	r5, #104	@ 0x68
 800a6c2:	e7e9      	b.n	800a698 <_fwalk_sglue+0x10>

0800a6c4 <iprintf>:
 800a6c4:	b40f      	push	{r0, r1, r2, r3}
 800a6c6:	b507      	push	{r0, r1, r2, lr}
 800a6c8:	4906      	ldr	r1, [pc, #24]	@ (800a6e4 <iprintf+0x20>)
 800a6ca:	ab04      	add	r3, sp, #16
 800a6cc:	6808      	ldr	r0, [r1, #0]
 800a6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6d2:	6881      	ldr	r1, [r0, #8]
 800a6d4:	9301      	str	r3, [sp, #4]
 800a6d6:	f001 fb55 	bl	800bd84 <_vfiprintf_r>
 800a6da:	b003      	add	sp, #12
 800a6dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6e0:	b004      	add	sp, #16
 800a6e2:	4770      	bx	lr
 800a6e4:	2400002c 	.word	0x2400002c

0800a6e8 <__sread>:
 800a6e8:	b510      	push	{r4, lr}
 800a6ea:	460c      	mov	r4, r1
 800a6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f0:	f000 f86c 	bl	800a7cc <_read_r>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	bfab      	itete	ge
 800a6f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a6fa:	89a3      	ldrhlt	r3, [r4, #12]
 800a6fc:	181b      	addge	r3, r3, r0
 800a6fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a702:	bfac      	ite	ge
 800a704:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a706:	81a3      	strhlt	r3, [r4, #12]
 800a708:	bd10      	pop	{r4, pc}

0800a70a <__swrite>:
 800a70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a70e:	461f      	mov	r7, r3
 800a710:	898b      	ldrh	r3, [r1, #12]
 800a712:	05db      	lsls	r3, r3, #23
 800a714:	4605      	mov	r5, r0
 800a716:	460c      	mov	r4, r1
 800a718:	4616      	mov	r6, r2
 800a71a:	d505      	bpl.n	800a728 <__swrite+0x1e>
 800a71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a720:	2302      	movs	r3, #2
 800a722:	2200      	movs	r2, #0
 800a724:	f000 f840 	bl	800a7a8 <_lseek_r>
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a72e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a732:	81a3      	strh	r3, [r4, #12]
 800a734:	4632      	mov	r2, r6
 800a736:	463b      	mov	r3, r7
 800a738:	4628      	mov	r0, r5
 800a73a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a73e:	f000 b857 	b.w	800a7f0 <_write_r>

0800a742 <__sseek>:
 800a742:	b510      	push	{r4, lr}
 800a744:	460c      	mov	r4, r1
 800a746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a74a:	f000 f82d 	bl	800a7a8 <_lseek_r>
 800a74e:	1c43      	adds	r3, r0, #1
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	bf15      	itete	ne
 800a754:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a756:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a75a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a75e:	81a3      	strheq	r3, [r4, #12]
 800a760:	bf18      	it	ne
 800a762:	81a3      	strhne	r3, [r4, #12]
 800a764:	bd10      	pop	{r4, pc}

0800a766 <__sclose>:
 800a766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a76a:	f000 b80d 	b.w	800a788 <_close_r>

0800a76e <memset>:
 800a76e:	4402      	add	r2, r0
 800a770:	4603      	mov	r3, r0
 800a772:	4293      	cmp	r3, r2
 800a774:	d100      	bne.n	800a778 <memset+0xa>
 800a776:	4770      	bx	lr
 800a778:	f803 1b01 	strb.w	r1, [r3], #1
 800a77c:	e7f9      	b.n	800a772 <memset+0x4>
	...

0800a780 <_localeconv_r>:
 800a780:	4800      	ldr	r0, [pc, #0]	@ (800a784 <_localeconv_r+0x4>)
 800a782:	4770      	bx	lr
 800a784:	2400016c 	.word	0x2400016c

0800a788 <_close_r>:
 800a788:	b538      	push	{r3, r4, r5, lr}
 800a78a:	4d06      	ldr	r5, [pc, #24]	@ (800a7a4 <_close_r+0x1c>)
 800a78c:	2300      	movs	r3, #0
 800a78e:	4604      	mov	r4, r0
 800a790:	4608      	mov	r0, r1
 800a792:	602b      	str	r3, [r5, #0]
 800a794:	f7f6 fd57 	bl	8001246 <_close>
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	d102      	bne.n	800a7a2 <_close_r+0x1a>
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	b103      	cbz	r3, 800a7a2 <_close_r+0x1a>
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	24000c6c 	.word	0x24000c6c

0800a7a8 <_lseek_r>:
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	4d07      	ldr	r5, [pc, #28]	@ (800a7c8 <_lseek_r+0x20>)
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	4608      	mov	r0, r1
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	602a      	str	r2, [r5, #0]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f7f6 fd6c 	bl	8001294 <_lseek>
 800a7bc:	1c43      	adds	r3, r0, #1
 800a7be:	d102      	bne.n	800a7c6 <_lseek_r+0x1e>
 800a7c0:	682b      	ldr	r3, [r5, #0]
 800a7c2:	b103      	cbz	r3, 800a7c6 <_lseek_r+0x1e>
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}
 800a7c8:	24000c6c 	.word	0x24000c6c

0800a7cc <_read_r>:
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	4d07      	ldr	r5, [pc, #28]	@ (800a7ec <_read_r+0x20>)
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	4608      	mov	r0, r1
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	602a      	str	r2, [r5, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	f7f6 fd16 	bl	800120c <_read>
 800a7e0:	1c43      	adds	r3, r0, #1
 800a7e2:	d102      	bne.n	800a7ea <_read_r+0x1e>
 800a7e4:	682b      	ldr	r3, [r5, #0]
 800a7e6:	b103      	cbz	r3, 800a7ea <_read_r+0x1e>
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	bd38      	pop	{r3, r4, r5, pc}
 800a7ec:	24000c6c 	.word	0x24000c6c

0800a7f0 <_write_r>:
 800a7f0:	b538      	push	{r3, r4, r5, lr}
 800a7f2:	4d07      	ldr	r5, [pc, #28]	@ (800a810 <_write_r+0x20>)
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	4608      	mov	r0, r1
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	602a      	str	r2, [r5, #0]
 800a7fe:	461a      	mov	r2, r3
 800a800:	f7f7 f830 	bl	8001864 <_write>
 800a804:	1c43      	adds	r3, r0, #1
 800a806:	d102      	bne.n	800a80e <_write_r+0x1e>
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	b103      	cbz	r3, 800a80e <_write_r+0x1e>
 800a80c:	6023      	str	r3, [r4, #0]
 800a80e:	bd38      	pop	{r3, r4, r5, pc}
 800a810:	24000c6c 	.word	0x24000c6c

0800a814 <__errno>:
 800a814:	4b01      	ldr	r3, [pc, #4]	@ (800a81c <__errno+0x8>)
 800a816:	6818      	ldr	r0, [r3, #0]
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	2400002c 	.word	0x2400002c

0800a820 <__libc_init_array>:
 800a820:	b570      	push	{r4, r5, r6, lr}
 800a822:	4d0d      	ldr	r5, [pc, #52]	@ (800a858 <__libc_init_array+0x38>)
 800a824:	4c0d      	ldr	r4, [pc, #52]	@ (800a85c <__libc_init_array+0x3c>)
 800a826:	1b64      	subs	r4, r4, r5
 800a828:	10a4      	asrs	r4, r4, #2
 800a82a:	2600      	movs	r6, #0
 800a82c:	42a6      	cmp	r6, r4
 800a82e:	d109      	bne.n	800a844 <__libc_init_array+0x24>
 800a830:	4d0b      	ldr	r5, [pc, #44]	@ (800a860 <__libc_init_array+0x40>)
 800a832:	4c0c      	ldr	r4, [pc, #48]	@ (800a864 <__libc_init_array+0x44>)
 800a834:	f002 f810 	bl	800c858 <_init>
 800a838:	1b64      	subs	r4, r4, r5
 800a83a:	10a4      	asrs	r4, r4, #2
 800a83c:	2600      	movs	r6, #0
 800a83e:	42a6      	cmp	r6, r4
 800a840:	d105      	bne.n	800a84e <__libc_init_array+0x2e>
 800a842:	bd70      	pop	{r4, r5, r6, pc}
 800a844:	f855 3b04 	ldr.w	r3, [r5], #4
 800a848:	4798      	blx	r3
 800a84a:	3601      	adds	r6, #1
 800a84c:	e7ee      	b.n	800a82c <__libc_init_array+0xc>
 800a84e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a852:	4798      	blx	r3
 800a854:	3601      	adds	r6, #1
 800a856:	e7f2      	b.n	800a83e <__libc_init_array+0x1e>
 800a858:	0800cd28 	.word	0x0800cd28
 800a85c:	0800cd28 	.word	0x0800cd28
 800a860:	0800cd28 	.word	0x0800cd28
 800a864:	0800cd2c 	.word	0x0800cd2c

0800a868 <__retarget_lock_init_recursive>:
 800a868:	4770      	bx	lr

0800a86a <__retarget_lock_acquire_recursive>:
 800a86a:	4770      	bx	lr

0800a86c <__retarget_lock_release_recursive>:
 800a86c:	4770      	bx	lr

0800a86e <quorem>:
 800a86e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a872:	6903      	ldr	r3, [r0, #16]
 800a874:	690c      	ldr	r4, [r1, #16]
 800a876:	42a3      	cmp	r3, r4
 800a878:	4607      	mov	r7, r0
 800a87a:	db7e      	blt.n	800a97a <quorem+0x10c>
 800a87c:	3c01      	subs	r4, #1
 800a87e:	f101 0814 	add.w	r8, r1, #20
 800a882:	00a3      	lsls	r3, r4, #2
 800a884:	f100 0514 	add.w	r5, r0, #20
 800a888:	9300      	str	r3, [sp, #0]
 800a88a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a894:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a898:	3301      	adds	r3, #1
 800a89a:	429a      	cmp	r2, r3
 800a89c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8a4:	d32e      	bcc.n	800a904 <quorem+0x96>
 800a8a6:	f04f 0a00 	mov.w	sl, #0
 800a8aa:	46c4      	mov	ip, r8
 800a8ac:	46ae      	mov	lr, r5
 800a8ae:	46d3      	mov	fp, sl
 800a8b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a8b4:	b298      	uxth	r0, r3
 800a8b6:	fb06 a000 	mla	r0, r6, r0, sl
 800a8ba:	0c02      	lsrs	r2, r0, #16
 800a8bc:	0c1b      	lsrs	r3, r3, #16
 800a8be:	fb06 2303 	mla	r3, r6, r3, r2
 800a8c2:	f8de 2000 	ldr.w	r2, [lr]
 800a8c6:	b280      	uxth	r0, r0
 800a8c8:	b292      	uxth	r2, r2
 800a8ca:	1a12      	subs	r2, r2, r0
 800a8cc:	445a      	add	r2, fp
 800a8ce:	f8de 0000 	ldr.w	r0, [lr]
 800a8d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a8dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a8e0:	b292      	uxth	r2, r2
 800a8e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a8e6:	45e1      	cmp	r9, ip
 800a8e8:	f84e 2b04 	str.w	r2, [lr], #4
 800a8ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a8f0:	d2de      	bcs.n	800a8b0 <quorem+0x42>
 800a8f2:	9b00      	ldr	r3, [sp, #0]
 800a8f4:	58eb      	ldr	r3, [r5, r3]
 800a8f6:	b92b      	cbnz	r3, 800a904 <quorem+0x96>
 800a8f8:	9b01      	ldr	r3, [sp, #4]
 800a8fa:	3b04      	subs	r3, #4
 800a8fc:	429d      	cmp	r5, r3
 800a8fe:	461a      	mov	r2, r3
 800a900:	d32f      	bcc.n	800a962 <quorem+0xf4>
 800a902:	613c      	str	r4, [r7, #16]
 800a904:	4638      	mov	r0, r7
 800a906:	f001 f90b 	bl	800bb20 <__mcmp>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	db25      	blt.n	800a95a <quorem+0xec>
 800a90e:	4629      	mov	r1, r5
 800a910:	2000      	movs	r0, #0
 800a912:	f858 2b04 	ldr.w	r2, [r8], #4
 800a916:	f8d1 c000 	ldr.w	ip, [r1]
 800a91a:	fa1f fe82 	uxth.w	lr, r2
 800a91e:	fa1f f38c 	uxth.w	r3, ip
 800a922:	eba3 030e 	sub.w	r3, r3, lr
 800a926:	4403      	add	r3, r0
 800a928:	0c12      	lsrs	r2, r2, #16
 800a92a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a92e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a932:	b29b      	uxth	r3, r3
 800a934:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a938:	45c1      	cmp	r9, r8
 800a93a:	f841 3b04 	str.w	r3, [r1], #4
 800a93e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a942:	d2e6      	bcs.n	800a912 <quorem+0xa4>
 800a944:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a948:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a94c:	b922      	cbnz	r2, 800a958 <quorem+0xea>
 800a94e:	3b04      	subs	r3, #4
 800a950:	429d      	cmp	r5, r3
 800a952:	461a      	mov	r2, r3
 800a954:	d30b      	bcc.n	800a96e <quorem+0x100>
 800a956:	613c      	str	r4, [r7, #16]
 800a958:	3601      	adds	r6, #1
 800a95a:	4630      	mov	r0, r6
 800a95c:	b003      	add	sp, #12
 800a95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a962:	6812      	ldr	r2, [r2, #0]
 800a964:	3b04      	subs	r3, #4
 800a966:	2a00      	cmp	r2, #0
 800a968:	d1cb      	bne.n	800a902 <quorem+0x94>
 800a96a:	3c01      	subs	r4, #1
 800a96c:	e7c6      	b.n	800a8fc <quorem+0x8e>
 800a96e:	6812      	ldr	r2, [r2, #0]
 800a970:	3b04      	subs	r3, #4
 800a972:	2a00      	cmp	r2, #0
 800a974:	d1ef      	bne.n	800a956 <quorem+0xe8>
 800a976:	3c01      	subs	r4, #1
 800a978:	e7ea      	b.n	800a950 <quorem+0xe2>
 800a97a:	2000      	movs	r0, #0
 800a97c:	e7ee      	b.n	800a95c <quorem+0xee>
	...

0800a980 <_dtoa_r>:
 800a980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a984:	ed2d 8b02 	vpush	{d8}
 800a988:	69c7      	ldr	r7, [r0, #28]
 800a98a:	b091      	sub	sp, #68	@ 0x44
 800a98c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a990:	ec55 4b10 	vmov	r4, r5, d0
 800a994:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a996:	9107      	str	r1, [sp, #28]
 800a998:	4681      	mov	r9, r0
 800a99a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a99c:	930d      	str	r3, [sp, #52]	@ 0x34
 800a99e:	b97f      	cbnz	r7, 800a9c0 <_dtoa_r+0x40>
 800a9a0:	2010      	movs	r0, #16
 800a9a2:	f000 fd8d 	bl	800b4c0 <malloc>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	f8c9 001c 	str.w	r0, [r9, #28]
 800a9ac:	b920      	cbnz	r0, 800a9b8 <_dtoa_r+0x38>
 800a9ae:	4ba0      	ldr	r3, [pc, #640]	@ (800ac30 <_dtoa_r+0x2b0>)
 800a9b0:	21ef      	movs	r1, #239	@ 0xef
 800a9b2:	48a0      	ldr	r0, [pc, #640]	@ (800ac34 <_dtoa_r+0x2b4>)
 800a9b4:	f001 fc5c 	bl	800c270 <__assert_func>
 800a9b8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a9bc:	6007      	str	r7, [r0, #0]
 800a9be:	60c7      	str	r7, [r0, #12]
 800a9c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a9c4:	6819      	ldr	r1, [r3, #0]
 800a9c6:	b159      	cbz	r1, 800a9e0 <_dtoa_r+0x60>
 800a9c8:	685a      	ldr	r2, [r3, #4]
 800a9ca:	604a      	str	r2, [r1, #4]
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	4093      	lsls	r3, r2
 800a9d0:	608b      	str	r3, [r1, #8]
 800a9d2:	4648      	mov	r0, r9
 800a9d4:	f000 fe6a 	bl	800b6ac <_Bfree>
 800a9d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	601a      	str	r2, [r3, #0]
 800a9e0:	1e2b      	subs	r3, r5, #0
 800a9e2:	bfbb      	ittet	lt
 800a9e4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a9e8:	9303      	strlt	r3, [sp, #12]
 800a9ea:	2300      	movge	r3, #0
 800a9ec:	2201      	movlt	r2, #1
 800a9ee:	bfac      	ite	ge
 800a9f0:	6033      	strge	r3, [r6, #0]
 800a9f2:	6032      	strlt	r2, [r6, #0]
 800a9f4:	4b90      	ldr	r3, [pc, #576]	@ (800ac38 <_dtoa_r+0x2b8>)
 800a9f6:	9e03      	ldr	r6, [sp, #12]
 800a9f8:	43b3      	bics	r3, r6
 800a9fa:	d110      	bne.n	800aa1e <_dtoa_r+0x9e>
 800a9fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a9fe:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aa02:	6013      	str	r3, [r2, #0]
 800aa04:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800aa08:	4323      	orrs	r3, r4
 800aa0a:	f000 84de 	beq.w	800b3ca <_dtoa_r+0xa4a>
 800aa0e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aa10:	4f8a      	ldr	r7, [pc, #552]	@ (800ac3c <_dtoa_r+0x2bc>)
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f000 84e0 	beq.w	800b3d8 <_dtoa_r+0xa58>
 800aa18:	1cfb      	adds	r3, r7, #3
 800aa1a:	f000 bcdb 	b.w	800b3d4 <_dtoa_r+0xa54>
 800aa1e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800aa22:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aa26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa2a:	d10a      	bne.n	800aa42 <_dtoa_r+0xc2>
 800aa2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aa2e:	2301      	movs	r3, #1
 800aa30:	6013      	str	r3, [r2, #0]
 800aa32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aa34:	b113      	cbz	r3, 800aa3c <_dtoa_r+0xbc>
 800aa36:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800aa38:	4b81      	ldr	r3, [pc, #516]	@ (800ac40 <_dtoa_r+0x2c0>)
 800aa3a:	6013      	str	r3, [r2, #0]
 800aa3c:	4f81      	ldr	r7, [pc, #516]	@ (800ac44 <_dtoa_r+0x2c4>)
 800aa3e:	f000 bccb 	b.w	800b3d8 <_dtoa_r+0xa58>
 800aa42:	aa0e      	add	r2, sp, #56	@ 0x38
 800aa44:	a90f      	add	r1, sp, #60	@ 0x3c
 800aa46:	4648      	mov	r0, r9
 800aa48:	eeb0 0b48 	vmov.f64	d0, d8
 800aa4c:	f001 f918 	bl	800bc80 <__d2b>
 800aa50:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800aa54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa56:	9001      	str	r0, [sp, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d045      	beq.n	800aae8 <_dtoa_r+0x168>
 800aa5c:	eeb0 7b48 	vmov.f64	d7, d8
 800aa60:	ee18 1a90 	vmov	r1, s17
 800aa64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800aa68:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800aa6c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800aa70:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800aa74:	2500      	movs	r5, #0
 800aa76:	ee07 1a90 	vmov	s15, r1
 800aa7a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800aa7e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ac18 <_dtoa_r+0x298>
 800aa82:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aa86:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ac20 <_dtoa_r+0x2a0>
 800aa8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800aa8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ac28 <_dtoa_r+0x2a8>
 800aa92:	ee07 3a90 	vmov	s15, r3
 800aa96:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800aa9a:	eeb0 7b46 	vmov.f64	d7, d6
 800aa9e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800aaa2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800aaa6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800aaaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaae:	ee16 8a90 	vmov	r8, s13
 800aab2:	d508      	bpl.n	800aac6 <_dtoa_r+0x146>
 800aab4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800aab8:	eeb4 6b47 	vcmp.f64	d6, d7
 800aabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac0:	bf18      	it	ne
 800aac2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800aac6:	f1b8 0f16 	cmp.w	r8, #22
 800aaca:	d82b      	bhi.n	800ab24 <_dtoa_r+0x1a4>
 800aacc:	495e      	ldr	r1, [pc, #376]	@ (800ac48 <_dtoa_r+0x2c8>)
 800aace:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800aad2:	ed91 7b00 	vldr	d7, [r1]
 800aad6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800aada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aade:	d501      	bpl.n	800aae4 <_dtoa_r+0x164>
 800aae0:	f108 38ff 	add.w	r8, r8, #4294967295
 800aae4:	2100      	movs	r1, #0
 800aae6:	e01e      	b.n	800ab26 <_dtoa_r+0x1a6>
 800aae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaea:	4413      	add	r3, r2
 800aaec:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800aaf0:	2920      	cmp	r1, #32
 800aaf2:	bfc1      	itttt	gt
 800aaf4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800aaf8:	408e      	lslgt	r6, r1
 800aafa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800aafe:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ab02:	bfd6      	itet	le
 800ab04:	f1c1 0120 	rsble	r1, r1, #32
 800ab08:	4331      	orrgt	r1, r6
 800ab0a:	fa04 f101 	lslle.w	r1, r4, r1
 800ab0e:	ee07 1a90 	vmov	s15, r1
 800ab12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ab16:	3b01      	subs	r3, #1
 800ab18:	ee17 1a90 	vmov	r1, s15
 800ab1c:	2501      	movs	r5, #1
 800ab1e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ab22:	e7a8      	b.n	800aa76 <_dtoa_r+0xf6>
 800ab24:	2101      	movs	r1, #1
 800ab26:	1ad2      	subs	r2, r2, r3
 800ab28:	1e53      	subs	r3, r2, #1
 800ab2a:	9306      	str	r3, [sp, #24]
 800ab2c:	bf45      	ittet	mi
 800ab2e:	f1c2 0301 	rsbmi	r3, r2, #1
 800ab32:	9305      	strmi	r3, [sp, #20]
 800ab34:	2300      	movpl	r3, #0
 800ab36:	2300      	movmi	r3, #0
 800ab38:	bf4c      	ite	mi
 800ab3a:	9306      	strmi	r3, [sp, #24]
 800ab3c:	9305      	strpl	r3, [sp, #20]
 800ab3e:	f1b8 0f00 	cmp.w	r8, #0
 800ab42:	910c      	str	r1, [sp, #48]	@ 0x30
 800ab44:	db18      	blt.n	800ab78 <_dtoa_r+0x1f8>
 800ab46:	9b06      	ldr	r3, [sp, #24]
 800ab48:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ab4c:	4443      	add	r3, r8
 800ab4e:	9306      	str	r3, [sp, #24]
 800ab50:	2300      	movs	r3, #0
 800ab52:	9a07      	ldr	r2, [sp, #28]
 800ab54:	2a09      	cmp	r2, #9
 800ab56:	d849      	bhi.n	800abec <_dtoa_r+0x26c>
 800ab58:	2a05      	cmp	r2, #5
 800ab5a:	bfc4      	itt	gt
 800ab5c:	3a04      	subgt	r2, #4
 800ab5e:	9207      	strgt	r2, [sp, #28]
 800ab60:	9a07      	ldr	r2, [sp, #28]
 800ab62:	f1a2 0202 	sub.w	r2, r2, #2
 800ab66:	bfcc      	ite	gt
 800ab68:	2400      	movgt	r4, #0
 800ab6a:	2401      	movle	r4, #1
 800ab6c:	2a03      	cmp	r2, #3
 800ab6e:	d848      	bhi.n	800ac02 <_dtoa_r+0x282>
 800ab70:	e8df f002 	tbb	[pc, r2]
 800ab74:	3a2c2e0b 	.word	0x3a2c2e0b
 800ab78:	9b05      	ldr	r3, [sp, #20]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	eba3 0308 	sub.w	r3, r3, r8
 800ab80:	9305      	str	r3, [sp, #20]
 800ab82:	920a      	str	r2, [sp, #40]	@ 0x28
 800ab84:	f1c8 0300 	rsb	r3, r8, #0
 800ab88:	e7e3      	b.n	800ab52 <_dtoa_r+0x1d2>
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	9208      	str	r2, [sp, #32]
 800ab8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab90:	2a00      	cmp	r2, #0
 800ab92:	dc39      	bgt.n	800ac08 <_dtoa_r+0x288>
 800ab94:	f04f 0b01 	mov.w	fp, #1
 800ab98:	46da      	mov	sl, fp
 800ab9a:	465a      	mov	r2, fp
 800ab9c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800aba0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800aba4:	2100      	movs	r1, #0
 800aba6:	2004      	movs	r0, #4
 800aba8:	f100 0614 	add.w	r6, r0, #20
 800abac:	4296      	cmp	r6, r2
 800abae:	d930      	bls.n	800ac12 <_dtoa_r+0x292>
 800abb0:	6079      	str	r1, [r7, #4]
 800abb2:	4648      	mov	r0, r9
 800abb4:	9304      	str	r3, [sp, #16]
 800abb6:	f000 fd39 	bl	800b62c <_Balloc>
 800abba:	9b04      	ldr	r3, [sp, #16]
 800abbc:	4607      	mov	r7, r0
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d146      	bne.n	800ac50 <_dtoa_r+0x2d0>
 800abc2:	4b22      	ldr	r3, [pc, #136]	@ (800ac4c <_dtoa_r+0x2cc>)
 800abc4:	4602      	mov	r2, r0
 800abc6:	f240 11af 	movw	r1, #431	@ 0x1af
 800abca:	e6f2      	b.n	800a9b2 <_dtoa_r+0x32>
 800abcc:	2201      	movs	r2, #1
 800abce:	e7dd      	b.n	800ab8c <_dtoa_r+0x20c>
 800abd0:	2200      	movs	r2, #0
 800abd2:	9208      	str	r2, [sp, #32]
 800abd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abd6:	eb08 0b02 	add.w	fp, r8, r2
 800abda:	f10b 0a01 	add.w	sl, fp, #1
 800abde:	4652      	mov	r2, sl
 800abe0:	2a01      	cmp	r2, #1
 800abe2:	bfb8      	it	lt
 800abe4:	2201      	movlt	r2, #1
 800abe6:	e7db      	b.n	800aba0 <_dtoa_r+0x220>
 800abe8:	2201      	movs	r2, #1
 800abea:	e7f2      	b.n	800abd2 <_dtoa_r+0x252>
 800abec:	2401      	movs	r4, #1
 800abee:	2200      	movs	r2, #0
 800abf0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800abf4:	f04f 3bff 	mov.w	fp, #4294967295
 800abf8:	2100      	movs	r1, #0
 800abfa:	46da      	mov	sl, fp
 800abfc:	2212      	movs	r2, #18
 800abfe:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac00:	e7ce      	b.n	800aba0 <_dtoa_r+0x220>
 800ac02:	2201      	movs	r2, #1
 800ac04:	9208      	str	r2, [sp, #32]
 800ac06:	e7f5      	b.n	800abf4 <_dtoa_r+0x274>
 800ac08:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ac0c:	46da      	mov	sl, fp
 800ac0e:	465a      	mov	r2, fp
 800ac10:	e7c6      	b.n	800aba0 <_dtoa_r+0x220>
 800ac12:	3101      	adds	r1, #1
 800ac14:	0040      	lsls	r0, r0, #1
 800ac16:	e7c7      	b.n	800aba8 <_dtoa_r+0x228>
 800ac18:	636f4361 	.word	0x636f4361
 800ac1c:	3fd287a7 	.word	0x3fd287a7
 800ac20:	8b60c8b3 	.word	0x8b60c8b3
 800ac24:	3fc68a28 	.word	0x3fc68a28
 800ac28:	509f79fb 	.word	0x509f79fb
 800ac2c:	3fd34413 	.word	0x3fd34413
 800ac30:	0800c9b5 	.word	0x0800c9b5
 800ac34:	0800c9cc 	.word	0x0800c9cc
 800ac38:	7ff00000 	.word	0x7ff00000
 800ac3c:	0800c9b1 	.word	0x0800c9b1
 800ac40:	0800c985 	.word	0x0800c985
 800ac44:	0800c984 	.word	0x0800c984
 800ac48:	0800cac8 	.word	0x0800cac8
 800ac4c:	0800ca24 	.word	0x0800ca24
 800ac50:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ac54:	f1ba 0f0e 	cmp.w	sl, #14
 800ac58:	6010      	str	r0, [r2, #0]
 800ac5a:	d86f      	bhi.n	800ad3c <_dtoa_r+0x3bc>
 800ac5c:	2c00      	cmp	r4, #0
 800ac5e:	d06d      	beq.n	800ad3c <_dtoa_r+0x3bc>
 800ac60:	f1b8 0f00 	cmp.w	r8, #0
 800ac64:	f340 80c2 	ble.w	800adec <_dtoa_r+0x46c>
 800ac68:	4aca      	ldr	r2, [pc, #808]	@ (800af94 <_dtoa_r+0x614>)
 800ac6a:	f008 010f 	and.w	r1, r8, #15
 800ac6e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ac72:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ac76:	ed92 7b00 	vldr	d7, [r2]
 800ac7a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ac7e:	f000 80a9 	beq.w	800add4 <_dtoa_r+0x454>
 800ac82:	4ac5      	ldr	r2, [pc, #788]	@ (800af98 <_dtoa_r+0x618>)
 800ac84:	ed92 6b08 	vldr	d6, [r2, #32]
 800ac88:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ac8c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ac90:	f001 010f 	and.w	r1, r1, #15
 800ac94:	2203      	movs	r2, #3
 800ac96:	48c0      	ldr	r0, [pc, #768]	@ (800af98 <_dtoa_r+0x618>)
 800ac98:	2900      	cmp	r1, #0
 800ac9a:	f040 809d 	bne.w	800add8 <_dtoa_r+0x458>
 800ac9e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aca2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800aca6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800acaa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800acac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800acb0:	2900      	cmp	r1, #0
 800acb2:	f000 80c1 	beq.w	800ae38 <_dtoa_r+0x4b8>
 800acb6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800acba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800acbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acc2:	f140 80b9 	bpl.w	800ae38 <_dtoa_r+0x4b8>
 800acc6:	f1ba 0f00 	cmp.w	sl, #0
 800acca:	f000 80b5 	beq.w	800ae38 <_dtoa_r+0x4b8>
 800acce:	f1bb 0f00 	cmp.w	fp, #0
 800acd2:	dd31      	ble.n	800ad38 <_dtoa_r+0x3b8>
 800acd4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800acd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800acdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ace0:	f108 31ff 	add.w	r1, r8, #4294967295
 800ace4:	9104      	str	r1, [sp, #16]
 800ace6:	3201      	adds	r2, #1
 800ace8:	465c      	mov	r4, fp
 800acea:	ed9d 6b02 	vldr	d6, [sp, #8]
 800acee:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800acf2:	ee07 2a90 	vmov	s15, r2
 800acf6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800acfa:	eea7 5b06 	vfma.f64	d5, d7, d6
 800acfe:	ee15 2a90 	vmov	r2, s11
 800ad02:	ec51 0b15 	vmov	r0, r1, d5
 800ad06:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ad0a:	2c00      	cmp	r4, #0
 800ad0c:	f040 8098 	bne.w	800ae40 <_dtoa_r+0x4c0>
 800ad10:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ad14:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ad18:	ec41 0b17 	vmov	d7, r0, r1
 800ad1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ad20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad24:	f300 8261 	bgt.w	800b1ea <_dtoa_r+0x86a>
 800ad28:	eeb1 7b47 	vneg.f64	d7, d7
 800ad2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ad30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad34:	f100 80f5 	bmi.w	800af22 <_dtoa_r+0x5a2>
 800ad38:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ad3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ad3e:	2a00      	cmp	r2, #0
 800ad40:	f2c0 812c 	blt.w	800af9c <_dtoa_r+0x61c>
 800ad44:	f1b8 0f0e 	cmp.w	r8, #14
 800ad48:	f300 8128 	bgt.w	800af9c <_dtoa_r+0x61c>
 800ad4c:	4b91      	ldr	r3, [pc, #580]	@ (800af94 <_dtoa_r+0x614>)
 800ad4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ad52:	ed93 6b00 	vldr	d6, [r3]
 800ad56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	da03      	bge.n	800ad64 <_dtoa_r+0x3e4>
 800ad5c:	f1ba 0f00 	cmp.w	sl, #0
 800ad60:	f340 80d2 	ble.w	800af08 <_dtoa_r+0x588>
 800ad64:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ad68:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad6c:	463e      	mov	r6, r7
 800ad6e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ad72:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ad76:	ee15 3a10 	vmov	r3, s10
 800ad7a:	3330      	adds	r3, #48	@ 0x30
 800ad7c:	f806 3b01 	strb.w	r3, [r6], #1
 800ad80:	1bf3      	subs	r3, r6, r7
 800ad82:	459a      	cmp	sl, r3
 800ad84:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ad88:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ad8c:	f040 80f8 	bne.w	800af80 <_dtoa_r+0x600>
 800ad90:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ad94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ad98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9c:	f300 80dd 	bgt.w	800af5a <_dtoa_r+0x5da>
 800ada0:	eeb4 7b46 	vcmp.f64	d7, d6
 800ada4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ada8:	d104      	bne.n	800adb4 <_dtoa_r+0x434>
 800adaa:	ee15 3a10 	vmov	r3, s10
 800adae:	07db      	lsls	r3, r3, #31
 800adb0:	f100 80d3 	bmi.w	800af5a <_dtoa_r+0x5da>
 800adb4:	9901      	ldr	r1, [sp, #4]
 800adb6:	4648      	mov	r0, r9
 800adb8:	f000 fc78 	bl	800b6ac <_Bfree>
 800adbc:	2300      	movs	r3, #0
 800adbe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800adc0:	7033      	strb	r3, [r6, #0]
 800adc2:	f108 0301 	add.w	r3, r8, #1
 800adc6:	6013      	str	r3, [r2, #0]
 800adc8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f000 8304 	beq.w	800b3d8 <_dtoa_r+0xa58>
 800add0:	601e      	str	r6, [r3, #0]
 800add2:	e301      	b.n	800b3d8 <_dtoa_r+0xa58>
 800add4:	2202      	movs	r2, #2
 800add6:	e75e      	b.n	800ac96 <_dtoa_r+0x316>
 800add8:	07cc      	lsls	r4, r1, #31
 800adda:	d504      	bpl.n	800ade6 <_dtoa_r+0x466>
 800addc:	ed90 6b00 	vldr	d6, [r0]
 800ade0:	3201      	adds	r2, #1
 800ade2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ade6:	1049      	asrs	r1, r1, #1
 800ade8:	3008      	adds	r0, #8
 800adea:	e755      	b.n	800ac98 <_dtoa_r+0x318>
 800adec:	d022      	beq.n	800ae34 <_dtoa_r+0x4b4>
 800adee:	f1c8 0100 	rsb	r1, r8, #0
 800adf2:	4a68      	ldr	r2, [pc, #416]	@ (800af94 <_dtoa_r+0x614>)
 800adf4:	f001 000f 	and.w	r0, r1, #15
 800adf8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800adfc:	ed92 7b00 	vldr	d7, [r2]
 800ae00:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ae04:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae08:	4863      	ldr	r0, [pc, #396]	@ (800af98 <_dtoa_r+0x618>)
 800ae0a:	1109      	asrs	r1, r1, #4
 800ae0c:	2400      	movs	r4, #0
 800ae0e:	2202      	movs	r2, #2
 800ae10:	b929      	cbnz	r1, 800ae1e <_dtoa_r+0x49e>
 800ae12:	2c00      	cmp	r4, #0
 800ae14:	f43f af49 	beq.w	800acaa <_dtoa_r+0x32a>
 800ae18:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae1c:	e745      	b.n	800acaa <_dtoa_r+0x32a>
 800ae1e:	07ce      	lsls	r6, r1, #31
 800ae20:	d505      	bpl.n	800ae2e <_dtoa_r+0x4ae>
 800ae22:	ed90 6b00 	vldr	d6, [r0]
 800ae26:	3201      	adds	r2, #1
 800ae28:	2401      	movs	r4, #1
 800ae2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae2e:	1049      	asrs	r1, r1, #1
 800ae30:	3008      	adds	r0, #8
 800ae32:	e7ed      	b.n	800ae10 <_dtoa_r+0x490>
 800ae34:	2202      	movs	r2, #2
 800ae36:	e738      	b.n	800acaa <_dtoa_r+0x32a>
 800ae38:	f8cd 8010 	str.w	r8, [sp, #16]
 800ae3c:	4654      	mov	r4, sl
 800ae3e:	e754      	b.n	800acea <_dtoa_r+0x36a>
 800ae40:	4a54      	ldr	r2, [pc, #336]	@ (800af94 <_dtoa_r+0x614>)
 800ae42:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ae46:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ae4a:	9a08      	ldr	r2, [sp, #32]
 800ae4c:	ec41 0b17 	vmov	d7, r0, r1
 800ae50:	443c      	add	r4, r7
 800ae52:	b34a      	cbz	r2, 800aea8 <_dtoa_r+0x528>
 800ae54:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800ae58:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800ae5c:	463e      	mov	r6, r7
 800ae5e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ae62:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ae66:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ae6a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ae6e:	ee14 2a90 	vmov	r2, s9
 800ae72:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ae76:	3230      	adds	r2, #48	@ 0x30
 800ae78:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ae7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ae80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae84:	f806 2b01 	strb.w	r2, [r6], #1
 800ae88:	d438      	bmi.n	800aefc <_dtoa_r+0x57c>
 800ae8a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ae8e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ae92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae96:	d462      	bmi.n	800af5e <_dtoa_r+0x5de>
 800ae98:	42a6      	cmp	r6, r4
 800ae9a:	f43f af4d 	beq.w	800ad38 <_dtoa_r+0x3b8>
 800ae9e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800aea2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800aea6:	e7e0      	b.n	800ae6a <_dtoa_r+0x4ea>
 800aea8:	4621      	mov	r1, r4
 800aeaa:	463e      	mov	r6, r7
 800aeac:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aeb0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800aeb4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800aeb8:	ee14 2a90 	vmov	r2, s9
 800aebc:	3230      	adds	r2, #48	@ 0x30
 800aebe:	f806 2b01 	strb.w	r2, [r6], #1
 800aec2:	42a6      	cmp	r6, r4
 800aec4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800aec8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800aecc:	d119      	bne.n	800af02 <_dtoa_r+0x582>
 800aece:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800aed2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800aed6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800aeda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aede:	dc3e      	bgt.n	800af5e <_dtoa_r+0x5de>
 800aee0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800aee4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800aee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeec:	f57f af24 	bpl.w	800ad38 <_dtoa_r+0x3b8>
 800aef0:	460e      	mov	r6, r1
 800aef2:	3901      	subs	r1, #1
 800aef4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aef8:	2b30      	cmp	r3, #48	@ 0x30
 800aefa:	d0f9      	beq.n	800aef0 <_dtoa_r+0x570>
 800aefc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800af00:	e758      	b.n	800adb4 <_dtoa_r+0x434>
 800af02:	ee26 6b03 	vmul.f64	d6, d6, d3
 800af06:	e7d5      	b.n	800aeb4 <_dtoa_r+0x534>
 800af08:	d10b      	bne.n	800af22 <_dtoa_r+0x5a2>
 800af0a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800af0e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800af12:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af1e:	f2c0 8161 	blt.w	800b1e4 <_dtoa_r+0x864>
 800af22:	2400      	movs	r4, #0
 800af24:	4625      	mov	r5, r4
 800af26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af28:	43db      	mvns	r3, r3
 800af2a:	9304      	str	r3, [sp, #16]
 800af2c:	463e      	mov	r6, r7
 800af2e:	f04f 0800 	mov.w	r8, #0
 800af32:	4621      	mov	r1, r4
 800af34:	4648      	mov	r0, r9
 800af36:	f000 fbb9 	bl	800b6ac <_Bfree>
 800af3a:	2d00      	cmp	r5, #0
 800af3c:	d0de      	beq.n	800aefc <_dtoa_r+0x57c>
 800af3e:	f1b8 0f00 	cmp.w	r8, #0
 800af42:	d005      	beq.n	800af50 <_dtoa_r+0x5d0>
 800af44:	45a8      	cmp	r8, r5
 800af46:	d003      	beq.n	800af50 <_dtoa_r+0x5d0>
 800af48:	4641      	mov	r1, r8
 800af4a:	4648      	mov	r0, r9
 800af4c:	f000 fbae 	bl	800b6ac <_Bfree>
 800af50:	4629      	mov	r1, r5
 800af52:	4648      	mov	r0, r9
 800af54:	f000 fbaa 	bl	800b6ac <_Bfree>
 800af58:	e7d0      	b.n	800aefc <_dtoa_r+0x57c>
 800af5a:	f8cd 8010 	str.w	r8, [sp, #16]
 800af5e:	4633      	mov	r3, r6
 800af60:	461e      	mov	r6, r3
 800af62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af66:	2a39      	cmp	r2, #57	@ 0x39
 800af68:	d106      	bne.n	800af78 <_dtoa_r+0x5f8>
 800af6a:	429f      	cmp	r7, r3
 800af6c:	d1f8      	bne.n	800af60 <_dtoa_r+0x5e0>
 800af6e:	9a04      	ldr	r2, [sp, #16]
 800af70:	3201      	adds	r2, #1
 800af72:	9204      	str	r2, [sp, #16]
 800af74:	2230      	movs	r2, #48	@ 0x30
 800af76:	703a      	strb	r2, [r7, #0]
 800af78:	781a      	ldrb	r2, [r3, #0]
 800af7a:	3201      	adds	r2, #1
 800af7c:	701a      	strb	r2, [r3, #0]
 800af7e:	e7bd      	b.n	800aefc <_dtoa_r+0x57c>
 800af80:	ee27 7b04 	vmul.f64	d7, d7, d4
 800af84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af8c:	f47f aeef 	bne.w	800ad6e <_dtoa_r+0x3ee>
 800af90:	e710      	b.n	800adb4 <_dtoa_r+0x434>
 800af92:	bf00      	nop
 800af94:	0800cac8 	.word	0x0800cac8
 800af98:	0800caa0 	.word	0x0800caa0
 800af9c:	9908      	ldr	r1, [sp, #32]
 800af9e:	2900      	cmp	r1, #0
 800afa0:	f000 80e3 	beq.w	800b16a <_dtoa_r+0x7ea>
 800afa4:	9907      	ldr	r1, [sp, #28]
 800afa6:	2901      	cmp	r1, #1
 800afa8:	f300 80c8 	bgt.w	800b13c <_dtoa_r+0x7bc>
 800afac:	2d00      	cmp	r5, #0
 800afae:	f000 80c1 	beq.w	800b134 <_dtoa_r+0x7b4>
 800afb2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800afb6:	9e05      	ldr	r6, [sp, #20]
 800afb8:	461c      	mov	r4, r3
 800afba:	9304      	str	r3, [sp, #16]
 800afbc:	9b05      	ldr	r3, [sp, #20]
 800afbe:	4413      	add	r3, r2
 800afc0:	9305      	str	r3, [sp, #20]
 800afc2:	9b06      	ldr	r3, [sp, #24]
 800afc4:	2101      	movs	r1, #1
 800afc6:	4413      	add	r3, r2
 800afc8:	4648      	mov	r0, r9
 800afca:	9306      	str	r3, [sp, #24]
 800afcc:	f000 fc22 	bl	800b814 <__i2b>
 800afd0:	9b04      	ldr	r3, [sp, #16]
 800afd2:	4605      	mov	r5, r0
 800afd4:	b166      	cbz	r6, 800aff0 <_dtoa_r+0x670>
 800afd6:	9a06      	ldr	r2, [sp, #24]
 800afd8:	2a00      	cmp	r2, #0
 800afda:	dd09      	ble.n	800aff0 <_dtoa_r+0x670>
 800afdc:	42b2      	cmp	r2, r6
 800afde:	9905      	ldr	r1, [sp, #20]
 800afe0:	bfa8      	it	ge
 800afe2:	4632      	movge	r2, r6
 800afe4:	1a89      	subs	r1, r1, r2
 800afe6:	9105      	str	r1, [sp, #20]
 800afe8:	9906      	ldr	r1, [sp, #24]
 800afea:	1ab6      	subs	r6, r6, r2
 800afec:	1a8a      	subs	r2, r1, r2
 800afee:	9206      	str	r2, [sp, #24]
 800aff0:	b1fb      	cbz	r3, 800b032 <_dtoa_r+0x6b2>
 800aff2:	9a08      	ldr	r2, [sp, #32]
 800aff4:	2a00      	cmp	r2, #0
 800aff6:	f000 80bc 	beq.w	800b172 <_dtoa_r+0x7f2>
 800affa:	b19c      	cbz	r4, 800b024 <_dtoa_r+0x6a4>
 800affc:	4629      	mov	r1, r5
 800affe:	4622      	mov	r2, r4
 800b000:	4648      	mov	r0, r9
 800b002:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b004:	f000 fcc6 	bl	800b994 <__pow5mult>
 800b008:	9a01      	ldr	r2, [sp, #4]
 800b00a:	4601      	mov	r1, r0
 800b00c:	4605      	mov	r5, r0
 800b00e:	4648      	mov	r0, r9
 800b010:	f000 fc16 	bl	800b840 <__multiply>
 800b014:	9901      	ldr	r1, [sp, #4]
 800b016:	9004      	str	r0, [sp, #16]
 800b018:	4648      	mov	r0, r9
 800b01a:	f000 fb47 	bl	800b6ac <_Bfree>
 800b01e:	9a04      	ldr	r2, [sp, #16]
 800b020:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b022:	9201      	str	r2, [sp, #4]
 800b024:	1b1a      	subs	r2, r3, r4
 800b026:	d004      	beq.n	800b032 <_dtoa_r+0x6b2>
 800b028:	9901      	ldr	r1, [sp, #4]
 800b02a:	4648      	mov	r0, r9
 800b02c:	f000 fcb2 	bl	800b994 <__pow5mult>
 800b030:	9001      	str	r0, [sp, #4]
 800b032:	2101      	movs	r1, #1
 800b034:	4648      	mov	r0, r9
 800b036:	f000 fbed 	bl	800b814 <__i2b>
 800b03a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b03c:	4604      	mov	r4, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f000 81d0 	beq.w	800b3e4 <_dtoa_r+0xa64>
 800b044:	461a      	mov	r2, r3
 800b046:	4601      	mov	r1, r0
 800b048:	4648      	mov	r0, r9
 800b04a:	f000 fca3 	bl	800b994 <__pow5mult>
 800b04e:	9b07      	ldr	r3, [sp, #28]
 800b050:	2b01      	cmp	r3, #1
 800b052:	4604      	mov	r4, r0
 800b054:	f300 8095 	bgt.w	800b182 <_dtoa_r+0x802>
 800b058:	9b02      	ldr	r3, [sp, #8]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f040 808b 	bne.w	800b176 <_dtoa_r+0x7f6>
 800b060:	9b03      	ldr	r3, [sp, #12]
 800b062:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b066:	2a00      	cmp	r2, #0
 800b068:	f040 8087 	bne.w	800b17a <_dtoa_r+0x7fa>
 800b06c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b070:	0d12      	lsrs	r2, r2, #20
 800b072:	0512      	lsls	r2, r2, #20
 800b074:	2a00      	cmp	r2, #0
 800b076:	f000 8082 	beq.w	800b17e <_dtoa_r+0x7fe>
 800b07a:	9b05      	ldr	r3, [sp, #20]
 800b07c:	3301      	adds	r3, #1
 800b07e:	9305      	str	r3, [sp, #20]
 800b080:	9b06      	ldr	r3, [sp, #24]
 800b082:	3301      	adds	r3, #1
 800b084:	9306      	str	r3, [sp, #24]
 800b086:	2301      	movs	r3, #1
 800b088:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b08a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f000 81af 	beq.w	800b3f0 <_dtoa_r+0xa70>
 800b092:	6922      	ldr	r2, [r4, #16]
 800b094:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b098:	6910      	ldr	r0, [r2, #16]
 800b09a:	f000 fb6f 	bl	800b77c <__hi0bits>
 800b09e:	f1c0 0020 	rsb	r0, r0, #32
 800b0a2:	9b06      	ldr	r3, [sp, #24]
 800b0a4:	4418      	add	r0, r3
 800b0a6:	f010 001f 	ands.w	r0, r0, #31
 800b0aa:	d076      	beq.n	800b19a <_dtoa_r+0x81a>
 800b0ac:	f1c0 0220 	rsb	r2, r0, #32
 800b0b0:	2a04      	cmp	r2, #4
 800b0b2:	dd69      	ble.n	800b188 <_dtoa_r+0x808>
 800b0b4:	9b05      	ldr	r3, [sp, #20]
 800b0b6:	f1c0 001c 	rsb	r0, r0, #28
 800b0ba:	4403      	add	r3, r0
 800b0bc:	9305      	str	r3, [sp, #20]
 800b0be:	9b06      	ldr	r3, [sp, #24]
 800b0c0:	4406      	add	r6, r0
 800b0c2:	4403      	add	r3, r0
 800b0c4:	9306      	str	r3, [sp, #24]
 800b0c6:	9b05      	ldr	r3, [sp, #20]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	dd05      	ble.n	800b0d8 <_dtoa_r+0x758>
 800b0cc:	9901      	ldr	r1, [sp, #4]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	4648      	mov	r0, r9
 800b0d2:	f000 fcb9 	bl	800ba48 <__lshift>
 800b0d6:	9001      	str	r0, [sp, #4]
 800b0d8:	9b06      	ldr	r3, [sp, #24]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	dd05      	ble.n	800b0ea <_dtoa_r+0x76a>
 800b0de:	4621      	mov	r1, r4
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	4648      	mov	r0, r9
 800b0e4:	f000 fcb0 	bl	800ba48 <__lshift>
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d056      	beq.n	800b19e <_dtoa_r+0x81e>
 800b0f0:	9801      	ldr	r0, [sp, #4]
 800b0f2:	4621      	mov	r1, r4
 800b0f4:	f000 fd14 	bl	800bb20 <__mcmp>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	da50      	bge.n	800b19e <_dtoa_r+0x81e>
 800b0fc:	f108 33ff 	add.w	r3, r8, #4294967295
 800b100:	9304      	str	r3, [sp, #16]
 800b102:	9901      	ldr	r1, [sp, #4]
 800b104:	2300      	movs	r3, #0
 800b106:	220a      	movs	r2, #10
 800b108:	4648      	mov	r0, r9
 800b10a:	f000 faf1 	bl	800b6f0 <__multadd>
 800b10e:	9b08      	ldr	r3, [sp, #32]
 800b110:	9001      	str	r0, [sp, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	f000 816e 	beq.w	800b3f4 <_dtoa_r+0xa74>
 800b118:	4629      	mov	r1, r5
 800b11a:	2300      	movs	r3, #0
 800b11c:	220a      	movs	r2, #10
 800b11e:	4648      	mov	r0, r9
 800b120:	f000 fae6 	bl	800b6f0 <__multadd>
 800b124:	f1bb 0f00 	cmp.w	fp, #0
 800b128:	4605      	mov	r5, r0
 800b12a:	dc64      	bgt.n	800b1f6 <_dtoa_r+0x876>
 800b12c:	9b07      	ldr	r3, [sp, #28]
 800b12e:	2b02      	cmp	r3, #2
 800b130:	dc3e      	bgt.n	800b1b0 <_dtoa_r+0x830>
 800b132:	e060      	b.n	800b1f6 <_dtoa_r+0x876>
 800b134:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b136:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b13a:	e73c      	b.n	800afb6 <_dtoa_r+0x636>
 800b13c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b140:	42a3      	cmp	r3, r4
 800b142:	bfbf      	itttt	lt
 800b144:	1ae2      	sublt	r2, r4, r3
 800b146:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b148:	189b      	addlt	r3, r3, r2
 800b14a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800b14c:	bfae      	itee	ge
 800b14e:	1b1c      	subge	r4, r3, r4
 800b150:	4623      	movlt	r3, r4
 800b152:	2400      	movlt	r4, #0
 800b154:	f1ba 0f00 	cmp.w	sl, #0
 800b158:	bfb5      	itete	lt
 800b15a:	9a05      	ldrlt	r2, [sp, #20]
 800b15c:	9e05      	ldrge	r6, [sp, #20]
 800b15e:	eba2 060a 	sublt.w	r6, r2, sl
 800b162:	4652      	movge	r2, sl
 800b164:	bfb8      	it	lt
 800b166:	2200      	movlt	r2, #0
 800b168:	e727      	b.n	800afba <_dtoa_r+0x63a>
 800b16a:	9e05      	ldr	r6, [sp, #20]
 800b16c:	9d08      	ldr	r5, [sp, #32]
 800b16e:	461c      	mov	r4, r3
 800b170:	e730      	b.n	800afd4 <_dtoa_r+0x654>
 800b172:	461a      	mov	r2, r3
 800b174:	e758      	b.n	800b028 <_dtoa_r+0x6a8>
 800b176:	2300      	movs	r3, #0
 800b178:	e786      	b.n	800b088 <_dtoa_r+0x708>
 800b17a:	9b02      	ldr	r3, [sp, #8]
 800b17c:	e784      	b.n	800b088 <_dtoa_r+0x708>
 800b17e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b180:	e783      	b.n	800b08a <_dtoa_r+0x70a>
 800b182:	2300      	movs	r3, #0
 800b184:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b186:	e784      	b.n	800b092 <_dtoa_r+0x712>
 800b188:	d09d      	beq.n	800b0c6 <_dtoa_r+0x746>
 800b18a:	9b05      	ldr	r3, [sp, #20]
 800b18c:	321c      	adds	r2, #28
 800b18e:	4413      	add	r3, r2
 800b190:	9305      	str	r3, [sp, #20]
 800b192:	9b06      	ldr	r3, [sp, #24]
 800b194:	4416      	add	r6, r2
 800b196:	4413      	add	r3, r2
 800b198:	e794      	b.n	800b0c4 <_dtoa_r+0x744>
 800b19a:	4602      	mov	r2, r0
 800b19c:	e7f5      	b.n	800b18a <_dtoa_r+0x80a>
 800b19e:	f1ba 0f00 	cmp.w	sl, #0
 800b1a2:	f8cd 8010 	str.w	r8, [sp, #16]
 800b1a6:	46d3      	mov	fp, sl
 800b1a8:	dc21      	bgt.n	800b1ee <_dtoa_r+0x86e>
 800b1aa:	9b07      	ldr	r3, [sp, #28]
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	dd1e      	ble.n	800b1ee <_dtoa_r+0x86e>
 800b1b0:	f1bb 0f00 	cmp.w	fp, #0
 800b1b4:	f47f aeb7 	bne.w	800af26 <_dtoa_r+0x5a6>
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	465b      	mov	r3, fp
 800b1bc:	2205      	movs	r2, #5
 800b1be:	4648      	mov	r0, r9
 800b1c0:	f000 fa96 	bl	800b6f0 <__multadd>
 800b1c4:	4601      	mov	r1, r0
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	9801      	ldr	r0, [sp, #4]
 800b1ca:	f000 fca9 	bl	800bb20 <__mcmp>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	f77f aea9 	ble.w	800af26 <_dtoa_r+0x5a6>
 800b1d4:	463e      	mov	r6, r7
 800b1d6:	2331      	movs	r3, #49	@ 0x31
 800b1d8:	f806 3b01 	strb.w	r3, [r6], #1
 800b1dc:	9b04      	ldr	r3, [sp, #16]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	9304      	str	r3, [sp, #16]
 800b1e2:	e6a4      	b.n	800af2e <_dtoa_r+0x5ae>
 800b1e4:	f8cd 8010 	str.w	r8, [sp, #16]
 800b1e8:	4654      	mov	r4, sl
 800b1ea:	4625      	mov	r5, r4
 800b1ec:	e7f2      	b.n	800b1d4 <_dtoa_r+0x854>
 800b1ee:	9b08      	ldr	r3, [sp, #32]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f000 8103 	beq.w	800b3fc <_dtoa_r+0xa7c>
 800b1f6:	2e00      	cmp	r6, #0
 800b1f8:	dd05      	ble.n	800b206 <_dtoa_r+0x886>
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	4632      	mov	r2, r6
 800b1fe:	4648      	mov	r0, r9
 800b200:	f000 fc22 	bl	800ba48 <__lshift>
 800b204:	4605      	mov	r5, r0
 800b206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d058      	beq.n	800b2be <_dtoa_r+0x93e>
 800b20c:	6869      	ldr	r1, [r5, #4]
 800b20e:	4648      	mov	r0, r9
 800b210:	f000 fa0c 	bl	800b62c <_Balloc>
 800b214:	4606      	mov	r6, r0
 800b216:	b928      	cbnz	r0, 800b224 <_dtoa_r+0x8a4>
 800b218:	4b82      	ldr	r3, [pc, #520]	@ (800b424 <_dtoa_r+0xaa4>)
 800b21a:	4602      	mov	r2, r0
 800b21c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b220:	f7ff bbc7 	b.w	800a9b2 <_dtoa_r+0x32>
 800b224:	692a      	ldr	r2, [r5, #16]
 800b226:	3202      	adds	r2, #2
 800b228:	0092      	lsls	r2, r2, #2
 800b22a:	f105 010c 	add.w	r1, r5, #12
 800b22e:	300c      	adds	r0, #12
 800b230:	f001 f810 	bl	800c254 <memcpy>
 800b234:	2201      	movs	r2, #1
 800b236:	4631      	mov	r1, r6
 800b238:	4648      	mov	r0, r9
 800b23a:	f000 fc05 	bl	800ba48 <__lshift>
 800b23e:	1c7b      	adds	r3, r7, #1
 800b240:	9305      	str	r3, [sp, #20]
 800b242:	eb07 030b 	add.w	r3, r7, fp
 800b246:	9309      	str	r3, [sp, #36]	@ 0x24
 800b248:	9b02      	ldr	r3, [sp, #8]
 800b24a:	f003 0301 	and.w	r3, r3, #1
 800b24e:	46a8      	mov	r8, r5
 800b250:	9308      	str	r3, [sp, #32]
 800b252:	4605      	mov	r5, r0
 800b254:	9b05      	ldr	r3, [sp, #20]
 800b256:	9801      	ldr	r0, [sp, #4]
 800b258:	4621      	mov	r1, r4
 800b25a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b25e:	f7ff fb06 	bl	800a86e <quorem>
 800b262:	4641      	mov	r1, r8
 800b264:	9002      	str	r0, [sp, #8]
 800b266:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b26a:	9801      	ldr	r0, [sp, #4]
 800b26c:	f000 fc58 	bl	800bb20 <__mcmp>
 800b270:	462a      	mov	r2, r5
 800b272:	9006      	str	r0, [sp, #24]
 800b274:	4621      	mov	r1, r4
 800b276:	4648      	mov	r0, r9
 800b278:	f000 fc6e 	bl	800bb58 <__mdiff>
 800b27c:	68c2      	ldr	r2, [r0, #12]
 800b27e:	4606      	mov	r6, r0
 800b280:	b9fa      	cbnz	r2, 800b2c2 <_dtoa_r+0x942>
 800b282:	4601      	mov	r1, r0
 800b284:	9801      	ldr	r0, [sp, #4]
 800b286:	f000 fc4b 	bl	800bb20 <__mcmp>
 800b28a:	4602      	mov	r2, r0
 800b28c:	4631      	mov	r1, r6
 800b28e:	4648      	mov	r0, r9
 800b290:	920a      	str	r2, [sp, #40]	@ 0x28
 800b292:	f000 fa0b 	bl	800b6ac <_Bfree>
 800b296:	9b07      	ldr	r3, [sp, #28]
 800b298:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b29a:	9e05      	ldr	r6, [sp, #20]
 800b29c:	ea43 0102 	orr.w	r1, r3, r2
 800b2a0:	9b08      	ldr	r3, [sp, #32]
 800b2a2:	4319      	orrs	r1, r3
 800b2a4:	d10f      	bne.n	800b2c6 <_dtoa_r+0x946>
 800b2a6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b2aa:	d028      	beq.n	800b2fe <_dtoa_r+0x97e>
 800b2ac:	9b06      	ldr	r3, [sp, #24]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	dd02      	ble.n	800b2b8 <_dtoa_r+0x938>
 800b2b2:	9b02      	ldr	r3, [sp, #8]
 800b2b4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b2b8:	f88b a000 	strb.w	sl, [fp]
 800b2bc:	e639      	b.n	800af32 <_dtoa_r+0x5b2>
 800b2be:	4628      	mov	r0, r5
 800b2c0:	e7bd      	b.n	800b23e <_dtoa_r+0x8be>
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	e7e2      	b.n	800b28c <_dtoa_r+0x90c>
 800b2c6:	9b06      	ldr	r3, [sp, #24]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	db04      	blt.n	800b2d6 <_dtoa_r+0x956>
 800b2cc:	9907      	ldr	r1, [sp, #28]
 800b2ce:	430b      	orrs	r3, r1
 800b2d0:	9908      	ldr	r1, [sp, #32]
 800b2d2:	430b      	orrs	r3, r1
 800b2d4:	d120      	bne.n	800b318 <_dtoa_r+0x998>
 800b2d6:	2a00      	cmp	r2, #0
 800b2d8:	ddee      	ble.n	800b2b8 <_dtoa_r+0x938>
 800b2da:	9901      	ldr	r1, [sp, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	4648      	mov	r0, r9
 800b2e0:	f000 fbb2 	bl	800ba48 <__lshift>
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	9001      	str	r0, [sp, #4]
 800b2e8:	f000 fc1a 	bl	800bb20 <__mcmp>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	dc03      	bgt.n	800b2f8 <_dtoa_r+0x978>
 800b2f0:	d1e2      	bne.n	800b2b8 <_dtoa_r+0x938>
 800b2f2:	f01a 0f01 	tst.w	sl, #1
 800b2f6:	d0df      	beq.n	800b2b8 <_dtoa_r+0x938>
 800b2f8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b2fc:	d1d9      	bne.n	800b2b2 <_dtoa_r+0x932>
 800b2fe:	2339      	movs	r3, #57	@ 0x39
 800b300:	f88b 3000 	strb.w	r3, [fp]
 800b304:	4633      	mov	r3, r6
 800b306:	461e      	mov	r6, r3
 800b308:	3b01      	subs	r3, #1
 800b30a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b30e:	2a39      	cmp	r2, #57	@ 0x39
 800b310:	d053      	beq.n	800b3ba <_dtoa_r+0xa3a>
 800b312:	3201      	adds	r2, #1
 800b314:	701a      	strb	r2, [r3, #0]
 800b316:	e60c      	b.n	800af32 <_dtoa_r+0x5b2>
 800b318:	2a00      	cmp	r2, #0
 800b31a:	dd07      	ble.n	800b32c <_dtoa_r+0x9ac>
 800b31c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b320:	d0ed      	beq.n	800b2fe <_dtoa_r+0x97e>
 800b322:	f10a 0301 	add.w	r3, sl, #1
 800b326:	f88b 3000 	strb.w	r3, [fp]
 800b32a:	e602      	b.n	800af32 <_dtoa_r+0x5b2>
 800b32c:	9b05      	ldr	r3, [sp, #20]
 800b32e:	9a05      	ldr	r2, [sp, #20]
 800b330:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b336:	4293      	cmp	r3, r2
 800b338:	d029      	beq.n	800b38e <_dtoa_r+0xa0e>
 800b33a:	9901      	ldr	r1, [sp, #4]
 800b33c:	2300      	movs	r3, #0
 800b33e:	220a      	movs	r2, #10
 800b340:	4648      	mov	r0, r9
 800b342:	f000 f9d5 	bl	800b6f0 <__multadd>
 800b346:	45a8      	cmp	r8, r5
 800b348:	9001      	str	r0, [sp, #4]
 800b34a:	f04f 0300 	mov.w	r3, #0
 800b34e:	f04f 020a 	mov.w	r2, #10
 800b352:	4641      	mov	r1, r8
 800b354:	4648      	mov	r0, r9
 800b356:	d107      	bne.n	800b368 <_dtoa_r+0x9e8>
 800b358:	f000 f9ca 	bl	800b6f0 <__multadd>
 800b35c:	4680      	mov	r8, r0
 800b35e:	4605      	mov	r5, r0
 800b360:	9b05      	ldr	r3, [sp, #20]
 800b362:	3301      	adds	r3, #1
 800b364:	9305      	str	r3, [sp, #20]
 800b366:	e775      	b.n	800b254 <_dtoa_r+0x8d4>
 800b368:	f000 f9c2 	bl	800b6f0 <__multadd>
 800b36c:	4629      	mov	r1, r5
 800b36e:	4680      	mov	r8, r0
 800b370:	2300      	movs	r3, #0
 800b372:	220a      	movs	r2, #10
 800b374:	4648      	mov	r0, r9
 800b376:	f000 f9bb 	bl	800b6f0 <__multadd>
 800b37a:	4605      	mov	r5, r0
 800b37c:	e7f0      	b.n	800b360 <_dtoa_r+0x9e0>
 800b37e:	f1bb 0f00 	cmp.w	fp, #0
 800b382:	bfcc      	ite	gt
 800b384:	465e      	movgt	r6, fp
 800b386:	2601      	movle	r6, #1
 800b388:	443e      	add	r6, r7
 800b38a:	f04f 0800 	mov.w	r8, #0
 800b38e:	9901      	ldr	r1, [sp, #4]
 800b390:	2201      	movs	r2, #1
 800b392:	4648      	mov	r0, r9
 800b394:	f000 fb58 	bl	800ba48 <__lshift>
 800b398:	4621      	mov	r1, r4
 800b39a:	9001      	str	r0, [sp, #4]
 800b39c:	f000 fbc0 	bl	800bb20 <__mcmp>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	dcaf      	bgt.n	800b304 <_dtoa_r+0x984>
 800b3a4:	d102      	bne.n	800b3ac <_dtoa_r+0xa2c>
 800b3a6:	f01a 0f01 	tst.w	sl, #1
 800b3aa:	d1ab      	bne.n	800b304 <_dtoa_r+0x984>
 800b3ac:	4633      	mov	r3, r6
 800b3ae:	461e      	mov	r6, r3
 800b3b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3b4:	2a30      	cmp	r2, #48	@ 0x30
 800b3b6:	d0fa      	beq.n	800b3ae <_dtoa_r+0xa2e>
 800b3b8:	e5bb      	b.n	800af32 <_dtoa_r+0x5b2>
 800b3ba:	429f      	cmp	r7, r3
 800b3bc:	d1a3      	bne.n	800b306 <_dtoa_r+0x986>
 800b3be:	9b04      	ldr	r3, [sp, #16]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	9304      	str	r3, [sp, #16]
 800b3c4:	2331      	movs	r3, #49	@ 0x31
 800b3c6:	703b      	strb	r3, [r7, #0]
 800b3c8:	e5b3      	b.n	800af32 <_dtoa_r+0x5b2>
 800b3ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b3cc:	4f16      	ldr	r7, [pc, #88]	@ (800b428 <_dtoa_r+0xaa8>)
 800b3ce:	b11b      	cbz	r3, 800b3d8 <_dtoa_r+0xa58>
 800b3d0:	f107 0308 	add.w	r3, r7, #8
 800b3d4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b3d6:	6013      	str	r3, [r2, #0]
 800b3d8:	4638      	mov	r0, r7
 800b3da:	b011      	add	sp, #68	@ 0x44
 800b3dc:	ecbd 8b02 	vpop	{d8}
 800b3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e4:	9b07      	ldr	r3, [sp, #28]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	f77f ae36 	ble.w	800b058 <_dtoa_r+0x6d8>
 800b3ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3f0:	2001      	movs	r0, #1
 800b3f2:	e656      	b.n	800b0a2 <_dtoa_r+0x722>
 800b3f4:	f1bb 0f00 	cmp.w	fp, #0
 800b3f8:	f77f aed7 	ble.w	800b1aa <_dtoa_r+0x82a>
 800b3fc:	463e      	mov	r6, r7
 800b3fe:	9801      	ldr	r0, [sp, #4]
 800b400:	4621      	mov	r1, r4
 800b402:	f7ff fa34 	bl	800a86e <quorem>
 800b406:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b40a:	f806 ab01 	strb.w	sl, [r6], #1
 800b40e:	1bf2      	subs	r2, r6, r7
 800b410:	4593      	cmp	fp, r2
 800b412:	ddb4      	ble.n	800b37e <_dtoa_r+0x9fe>
 800b414:	9901      	ldr	r1, [sp, #4]
 800b416:	2300      	movs	r3, #0
 800b418:	220a      	movs	r2, #10
 800b41a:	4648      	mov	r0, r9
 800b41c:	f000 f968 	bl	800b6f0 <__multadd>
 800b420:	9001      	str	r0, [sp, #4]
 800b422:	e7ec      	b.n	800b3fe <_dtoa_r+0xa7e>
 800b424:	0800ca24 	.word	0x0800ca24
 800b428:	0800c9a8 	.word	0x0800c9a8

0800b42c <_free_r>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	4605      	mov	r5, r0
 800b430:	2900      	cmp	r1, #0
 800b432:	d041      	beq.n	800b4b8 <_free_r+0x8c>
 800b434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b438:	1f0c      	subs	r4, r1, #4
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	bfb8      	it	lt
 800b43e:	18e4      	addlt	r4, r4, r3
 800b440:	f000 f8e8 	bl	800b614 <__malloc_lock>
 800b444:	4a1d      	ldr	r2, [pc, #116]	@ (800b4bc <_free_r+0x90>)
 800b446:	6813      	ldr	r3, [r2, #0]
 800b448:	b933      	cbnz	r3, 800b458 <_free_r+0x2c>
 800b44a:	6063      	str	r3, [r4, #4]
 800b44c:	6014      	str	r4, [r2, #0]
 800b44e:	4628      	mov	r0, r5
 800b450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b454:	f000 b8e4 	b.w	800b620 <__malloc_unlock>
 800b458:	42a3      	cmp	r3, r4
 800b45a:	d908      	bls.n	800b46e <_free_r+0x42>
 800b45c:	6820      	ldr	r0, [r4, #0]
 800b45e:	1821      	adds	r1, r4, r0
 800b460:	428b      	cmp	r3, r1
 800b462:	bf01      	itttt	eq
 800b464:	6819      	ldreq	r1, [r3, #0]
 800b466:	685b      	ldreq	r3, [r3, #4]
 800b468:	1809      	addeq	r1, r1, r0
 800b46a:	6021      	streq	r1, [r4, #0]
 800b46c:	e7ed      	b.n	800b44a <_free_r+0x1e>
 800b46e:	461a      	mov	r2, r3
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	b10b      	cbz	r3, 800b478 <_free_r+0x4c>
 800b474:	42a3      	cmp	r3, r4
 800b476:	d9fa      	bls.n	800b46e <_free_r+0x42>
 800b478:	6811      	ldr	r1, [r2, #0]
 800b47a:	1850      	adds	r0, r2, r1
 800b47c:	42a0      	cmp	r0, r4
 800b47e:	d10b      	bne.n	800b498 <_free_r+0x6c>
 800b480:	6820      	ldr	r0, [r4, #0]
 800b482:	4401      	add	r1, r0
 800b484:	1850      	adds	r0, r2, r1
 800b486:	4283      	cmp	r3, r0
 800b488:	6011      	str	r1, [r2, #0]
 800b48a:	d1e0      	bne.n	800b44e <_free_r+0x22>
 800b48c:	6818      	ldr	r0, [r3, #0]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	6053      	str	r3, [r2, #4]
 800b492:	4408      	add	r0, r1
 800b494:	6010      	str	r0, [r2, #0]
 800b496:	e7da      	b.n	800b44e <_free_r+0x22>
 800b498:	d902      	bls.n	800b4a0 <_free_r+0x74>
 800b49a:	230c      	movs	r3, #12
 800b49c:	602b      	str	r3, [r5, #0]
 800b49e:	e7d6      	b.n	800b44e <_free_r+0x22>
 800b4a0:	6820      	ldr	r0, [r4, #0]
 800b4a2:	1821      	adds	r1, r4, r0
 800b4a4:	428b      	cmp	r3, r1
 800b4a6:	bf04      	itt	eq
 800b4a8:	6819      	ldreq	r1, [r3, #0]
 800b4aa:	685b      	ldreq	r3, [r3, #4]
 800b4ac:	6063      	str	r3, [r4, #4]
 800b4ae:	bf04      	itt	eq
 800b4b0:	1809      	addeq	r1, r1, r0
 800b4b2:	6021      	streq	r1, [r4, #0]
 800b4b4:	6054      	str	r4, [r2, #4]
 800b4b6:	e7ca      	b.n	800b44e <_free_r+0x22>
 800b4b8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ba:	bf00      	nop
 800b4bc:	24000c78 	.word	0x24000c78

0800b4c0 <malloc>:
 800b4c0:	4b02      	ldr	r3, [pc, #8]	@ (800b4cc <malloc+0xc>)
 800b4c2:	4601      	mov	r1, r0
 800b4c4:	6818      	ldr	r0, [r3, #0]
 800b4c6:	f000 b825 	b.w	800b514 <_malloc_r>
 800b4ca:	bf00      	nop
 800b4cc:	2400002c 	.word	0x2400002c

0800b4d0 <sbrk_aligned>:
 800b4d0:	b570      	push	{r4, r5, r6, lr}
 800b4d2:	4e0f      	ldr	r6, [pc, #60]	@ (800b510 <sbrk_aligned+0x40>)
 800b4d4:	460c      	mov	r4, r1
 800b4d6:	6831      	ldr	r1, [r6, #0]
 800b4d8:	4605      	mov	r5, r0
 800b4da:	b911      	cbnz	r1, 800b4e2 <sbrk_aligned+0x12>
 800b4dc:	f000 feaa 	bl	800c234 <_sbrk_r>
 800b4e0:	6030      	str	r0, [r6, #0]
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	f000 fea5 	bl	800c234 <_sbrk_r>
 800b4ea:	1c43      	adds	r3, r0, #1
 800b4ec:	d103      	bne.n	800b4f6 <sbrk_aligned+0x26>
 800b4ee:	f04f 34ff 	mov.w	r4, #4294967295
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	bd70      	pop	{r4, r5, r6, pc}
 800b4f6:	1cc4      	adds	r4, r0, #3
 800b4f8:	f024 0403 	bic.w	r4, r4, #3
 800b4fc:	42a0      	cmp	r0, r4
 800b4fe:	d0f8      	beq.n	800b4f2 <sbrk_aligned+0x22>
 800b500:	1a21      	subs	r1, r4, r0
 800b502:	4628      	mov	r0, r5
 800b504:	f000 fe96 	bl	800c234 <_sbrk_r>
 800b508:	3001      	adds	r0, #1
 800b50a:	d1f2      	bne.n	800b4f2 <sbrk_aligned+0x22>
 800b50c:	e7ef      	b.n	800b4ee <sbrk_aligned+0x1e>
 800b50e:	bf00      	nop
 800b510:	24000c74 	.word	0x24000c74

0800b514 <_malloc_r>:
 800b514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b518:	1ccd      	adds	r5, r1, #3
 800b51a:	f025 0503 	bic.w	r5, r5, #3
 800b51e:	3508      	adds	r5, #8
 800b520:	2d0c      	cmp	r5, #12
 800b522:	bf38      	it	cc
 800b524:	250c      	movcc	r5, #12
 800b526:	2d00      	cmp	r5, #0
 800b528:	4606      	mov	r6, r0
 800b52a:	db01      	blt.n	800b530 <_malloc_r+0x1c>
 800b52c:	42a9      	cmp	r1, r5
 800b52e:	d904      	bls.n	800b53a <_malloc_r+0x26>
 800b530:	230c      	movs	r3, #12
 800b532:	6033      	str	r3, [r6, #0]
 800b534:	2000      	movs	r0, #0
 800b536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b53a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b610 <_malloc_r+0xfc>
 800b53e:	f000 f869 	bl	800b614 <__malloc_lock>
 800b542:	f8d8 3000 	ldr.w	r3, [r8]
 800b546:	461c      	mov	r4, r3
 800b548:	bb44      	cbnz	r4, 800b59c <_malloc_r+0x88>
 800b54a:	4629      	mov	r1, r5
 800b54c:	4630      	mov	r0, r6
 800b54e:	f7ff ffbf 	bl	800b4d0 <sbrk_aligned>
 800b552:	1c43      	adds	r3, r0, #1
 800b554:	4604      	mov	r4, r0
 800b556:	d158      	bne.n	800b60a <_malloc_r+0xf6>
 800b558:	f8d8 4000 	ldr.w	r4, [r8]
 800b55c:	4627      	mov	r7, r4
 800b55e:	2f00      	cmp	r7, #0
 800b560:	d143      	bne.n	800b5ea <_malloc_r+0xd6>
 800b562:	2c00      	cmp	r4, #0
 800b564:	d04b      	beq.n	800b5fe <_malloc_r+0xea>
 800b566:	6823      	ldr	r3, [r4, #0]
 800b568:	4639      	mov	r1, r7
 800b56a:	4630      	mov	r0, r6
 800b56c:	eb04 0903 	add.w	r9, r4, r3
 800b570:	f000 fe60 	bl	800c234 <_sbrk_r>
 800b574:	4581      	cmp	r9, r0
 800b576:	d142      	bne.n	800b5fe <_malloc_r+0xea>
 800b578:	6821      	ldr	r1, [r4, #0]
 800b57a:	1a6d      	subs	r5, r5, r1
 800b57c:	4629      	mov	r1, r5
 800b57e:	4630      	mov	r0, r6
 800b580:	f7ff ffa6 	bl	800b4d0 <sbrk_aligned>
 800b584:	3001      	adds	r0, #1
 800b586:	d03a      	beq.n	800b5fe <_malloc_r+0xea>
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	442b      	add	r3, r5
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	f8d8 3000 	ldr.w	r3, [r8]
 800b592:	685a      	ldr	r2, [r3, #4]
 800b594:	bb62      	cbnz	r2, 800b5f0 <_malloc_r+0xdc>
 800b596:	f8c8 7000 	str.w	r7, [r8]
 800b59a:	e00f      	b.n	800b5bc <_malloc_r+0xa8>
 800b59c:	6822      	ldr	r2, [r4, #0]
 800b59e:	1b52      	subs	r2, r2, r5
 800b5a0:	d420      	bmi.n	800b5e4 <_malloc_r+0xd0>
 800b5a2:	2a0b      	cmp	r2, #11
 800b5a4:	d917      	bls.n	800b5d6 <_malloc_r+0xc2>
 800b5a6:	1961      	adds	r1, r4, r5
 800b5a8:	42a3      	cmp	r3, r4
 800b5aa:	6025      	str	r5, [r4, #0]
 800b5ac:	bf18      	it	ne
 800b5ae:	6059      	strne	r1, [r3, #4]
 800b5b0:	6863      	ldr	r3, [r4, #4]
 800b5b2:	bf08      	it	eq
 800b5b4:	f8c8 1000 	streq.w	r1, [r8]
 800b5b8:	5162      	str	r2, [r4, r5]
 800b5ba:	604b      	str	r3, [r1, #4]
 800b5bc:	4630      	mov	r0, r6
 800b5be:	f000 f82f 	bl	800b620 <__malloc_unlock>
 800b5c2:	f104 000b 	add.w	r0, r4, #11
 800b5c6:	1d23      	adds	r3, r4, #4
 800b5c8:	f020 0007 	bic.w	r0, r0, #7
 800b5cc:	1ac2      	subs	r2, r0, r3
 800b5ce:	bf1c      	itt	ne
 800b5d0:	1a1b      	subne	r3, r3, r0
 800b5d2:	50a3      	strne	r3, [r4, r2]
 800b5d4:	e7af      	b.n	800b536 <_malloc_r+0x22>
 800b5d6:	6862      	ldr	r2, [r4, #4]
 800b5d8:	42a3      	cmp	r3, r4
 800b5da:	bf0c      	ite	eq
 800b5dc:	f8c8 2000 	streq.w	r2, [r8]
 800b5e0:	605a      	strne	r2, [r3, #4]
 800b5e2:	e7eb      	b.n	800b5bc <_malloc_r+0xa8>
 800b5e4:	4623      	mov	r3, r4
 800b5e6:	6864      	ldr	r4, [r4, #4]
 800b5e8:	e7ae      	b.n	800b548 <_malloc_r+0x34>
 800b5ea:	463c      	mov	r4, r7
 800b5ec:	687f      	ldr	r7, [r7, #4]
 800b5ee:	e7b6      	b.n	800b55e <_malloc_r+0x4a>
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	42a3      	cmp	r3, r4
 800b5f6:	d1fb      	bne.n	800b5f0 <_malloc_r+0xdc>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	6053      	str	r3, [r2, #4]
 800b5fc:	e7de      	b.n	800b5bc <_malloc_r+0xa8>
 800b5fe:	230c      	movs	r3, #12
 800b600:	6033      	str	r3, [r6, #0]
 800b602:	4630      	mov	r0, r6
 800b604:	f000 f80c 	bl	800b620 <__malloc_unlock>
 800b608:	e794      	b.n	800b534 <_malloc_r+0x20>
 800b60a:	6005      	str	r5, [r0, #0]
 800b60c:	e7d6      	b.n	800b5bc <_malloc_r+0xa8>
 800b60e:	bf00      	nop
 800b610:	24000c78 	.word	0x24000c78

0800b614 <__malloc_lock>:
 800b614:	4801      	ldr	r0, [pc, #4]	@ (800b61c <__malloc_lock+0x8>)
 800b616:	f7ff b928 	b.w	800a86a <__retarget_lock_acquire_recursive>
 800b61a:	bf00      	nop
 800b61c:	24000c70 	.word	0x24000c70

0800b620 <__malloc_unlock>:
 800b620:	4801      	ldr	r0, [pc, #4]	@ (800b628 <__malloc_unlock+0x8>)
 800b622:	f7ff b923 	b.w	800a86c <__retarget_lock_release_recursive>
 800b626:	bf00      	nop
 800b628:	24000c70 	.word	0x24000c70

0800b62c <_Balloc>:
 800b62c:	b570      	push	{r4, r5, r6, lr}
 800b62e:	69c6      	ldr	r6, [r0, #28]
 800b630:	4604      	mov	r4, r0
 800b632:	460d      	mov	r5, r1
 800b634:	b976      	cbnz	r6, 800b654 <_Balloc+0x28>
 800b636:	2010      	movs	r0, #16
 800b638:	f7ff ff42 	bl	800b4c0 <malloc>
 800b63c:	4602      	mov	r2, r0
 800b63e:	61e0      	str	r0, [r4, #28]
 800b640:	b920      	cbnz	r0, 800b64c <_Balloc+0x20>
 800b642:	4b18      	ldr	r3, [pc, #96]	@ (800b6a4 <_Balloc+0x78>)
 800b644:	4818      	ldr	r0, [pc, #96]	@ (800b6a8 <_Balloc+0x7c>)
 800b646:	216b      	movs	r1, #107	@ 0x6b
 800b648:	f000 fe12 	bl	800c270 <__assert_func>
 800b64c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b650:	6006      	str	r6, [r0, #0]
 800b652:	60c6      	str	r6, [r0, #12]
 800b654:	69e6      	ldr	r6, [r4, #28]
 800b656:	68f3      	ldr	r3, [r6, #12]
 800b658:	b183      	cbz	r3, 800b67c <_Balloc+0x50>
 800b65a:	69e3      	ldr	r3, [r4, #28]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b662:	b9b8      	cbnz	r0, 800b694 <_Balloc+0x68>
 800b664:	2101      	movs	r1, #1
 800b666:	fa01 f605 	lsl.w	r6, r1, r5
 800b66a:	1d72      	adds	r2, r6, #5
 800b66c:	0092      	lsls	r2, r2, #2
 800b66e:	4620      	mov	r0, r4
 800b670:	f000 fe1c 	bl	800c2ac <_calloc_r>
 800b674:	b160      	cbz	r0, 800b690 <_Balloc+0x64>
 800b676:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b67a:	e00e      	b.n	800b69a <_Balloc+0x6e>
 800b67c:	2221      	movs	r2, #33	@ 0x21
 800b67e:	2104      	movs	r1, #4
 800b680:	4620      	mov	r0, r4
 800b682:	f000 fe13 	bl	800c2ac <_calloc_r>
 800b686:	69e3      	ldr	r3, [r4, #28]
 800b688:	60f0      	str	r0, [r6, #12]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1e4      	bne.n	800b65a <_Balloc+0x2e>
 800b690:	2000      	movs	r0, #0
 800b692:	bd70      	pop	{r4, r5, r6, pc}
 800b694:	6802      	ldr	r2, [r0, #0]
 800b696:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b69a:	2300      	movs	r3, #0
 800b69c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6a0:	e7f7      	b.n	800b692 <_Balloc+0x66>
 800b6a2:	bf00      	nop
 800b6a4:	0800c9b5 	.word	0x0800c9b5
 800b6a8:	0800ca35 	.word	0x0800ca35

0800b6ac <_Bfree>:
 800b6ac:	b570      	push	{r4, r5, r6, lr}
 800b6ae:	69c6      	ldr	r6, [r0, #28]
 800b6b0:	4605      	mov	r5, r0
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	b976      	cbnz	r6, 800b6d4 <_Bfree+0x28>
 800b6b6:	2010      	movs	r0, #16
 800b6b8:	f7ff ff02 	bl	800b4c0 <malloc>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	61e8      	str	r0, [r5, #28]
 800b6c0:	b920      	cbnz	r0, 800b6cc <_Bfree+0x20>
 800b6c2:	4b09      	ldr	r3, [pc, #36]	@ (800b6e8 <_Bfree+0x3c>)
 800b6c4:	4809      	ldr	r0, [pc, #36]	@ (800b6ec <_Bfree+0x40>)
 800b6c6:	218f      	movs	r1, #143	@ 0x8f
 800b6c8:	f000 fdd2 	bl	800c270 <__assert_func>
 800b6cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6d0:	6006      	str	r6, [r0, #0]
 800b6d2:	60c6      	str	r6, [r0, #12]
 800b6d4:	b13c      	cbz	r4, 800b6e6 <_Bfree+0x3a>
 800b6d6:	69eb      	ldr	r3, [r5, #28]
 800b6d8:	6862      	ldr	r2, [r4, #4]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6e0:	6021      	str	r1, [r4, #0]
 800b6e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6e6:	bd70      	pop	{r4, r5, r6, pc}
 800b6e8:	0800c9b5 	.word	0x0800c9b5
 800b6ec:	0800ca35 	.word	0x0800ca35

0800b6f0 <__multadd>:
 800b6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f4:	690d      	ldr	r5, [r1, #16]
 800b6f6:	4607      	mov	r7, r0
 800b6f8:	460c      	mov	r4, r1
 800b6fa:	461e      	mov	r6, r3
 800b6fc:	f101 0c14 	add.w	ip, r1, #20
 800b700:	2000      	movs	r0, #0
 800b702:	f8dc 3000 	ldr.w	r3, [ip]
 800b706:	b299      	uxth	r1, r3
 800b708:	fb02 6101 	mla	r1, r2, r1, r6
 800b70c:	0c1e      	lsrs	r6, r3, #16
 800b70e:	0c0b      	lsrs	r3, r1, #16
 800b710:	fb02 3306 	mla	r3, r2, r6, r3
 800b714:	b289      	uxth	r1, r1
 800b716:	3001      	adds	r0, #1
 800b718:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b71c:	4285      	cmp	r5, r0
 800b71e:	f84c 1b04 	str.w	r1, [ip], #4
 800b722:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b726:	dcec      	bgt.n	800b702 <__multadd+0x12>
 800b728:	b30e      	cbz	r6, 800b76e <__multadd+0x7e>
 800b72a:	68a3      	ldr	r3, [r4, #8]
 800b72c:	42ab      	cmp	r3, r5
 800b72e:	dc19      	bgt.n	800b764 <__multadd+0x74>
 800b730:	6861      	ldr	r1, [r4, #4]
 800b732:	4638      	mov	r0, r7
 800b734:	3101      	adds	r1, #1
 800b736:	f7ff ff79 	bl	800b62c <_Balloc>
 800b73a:	4680      	mov	r8, r0
 800b73c:	b928      	cbnz	r0, 800b74a <__multadd+0x5a>
 800b73e:	4602      	mov	r2, r0
 800b740:	4b0c      	ldr	r3, [pc, #48]	@ (800b774 <__multadd+0x84>)
 800b742:	480d      	ldr	r0, [pc, #52]	@ (800b778 <__multadd+0x88>)
 800b744:	21ba      	movs	r1, #186	@ 0xba
 800b746:	f000 fd93 	bl	800c270 <__assert_func>
 800b74a:	6922      	ldr	r2, [r4, #16]
 800b74c:	3202      	adds	r2, #2
 800b74e:	f104 010c 	add.w	r1, r4, #12
 800b752:	0092      	lsls	r2, r2, #2
 800b754:	300c      	adds	r0, #12
 800b756:	f000 fd7d 	bl	800c254 <memcpy>
 800b75a:	4621      	mov	r1, r4
 800b75c:	4638      	mov	r0, r7
 800b75e:	f7ff ffa5 	bl	800b6ac <_Bfree>
 800b762:	4644      	mov	r4, r8
 800b764:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b768:	3501      	adds	r5, #1
 800b76a:	615e      	str	r6, [r3, #20]
 800b76c:	6125      	str	r5, [r4, #16]
 800b76e:	4620      	mov	r0, r4
 800b770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b774:	0800ca24 	.word	0x0800ca24
 800b778:	0800ca35 	.word	0x0800ca35

0800b77c <__hi0bits>:
 800b77c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b780:	4603      	mov	r3, r0
 800b782:	bf36      	itet	cc
 800b784:	0403      	lslcc	r3, r0, #16
 800b786:	2000      	movcs	r0, #0
 800b788:	2010      	movcc	r0, #16
 800b78a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b78e:	bf3c      	itt	cc
 800b790:	021b      	lslcc	r3, r3, #8
 800b792:	3008      	addcc	r0, #8
 800b794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b798:	bf3c      	itt	cc
 800b79a:	011b      	lslcc	r3, r3, #4
 800b79c:	3004      	addcc	r0, #4
 800b79e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7a2:	bf3c      	itt	cc
 800b7a4:	009b      	lslcc	r3, r3, #2
 800b7a6:	3002      	addcc	r0, #2
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	db05      	blt.n	800b7b8 <__hi0bits+0x3c>
 800b7ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b7b0:	f100 0001 	add.w	r0, r0, #1
 800b7b4:	bf08      	it	eq
 800b7b6:	2020      	moveq	r0, #32
 800b7b8:	4770      	bx	lr

0800b7ba <__lo0bits>:
 800b7ba:	6803      	ldr	r3, [r0, #0]
 800b7bc:	4602      	mov	r2, r0
 800b7be:	f013 0007 	ands.w	r0, r3, #7
 800b7c2:	d00b      	beq.n	800b7dc <__lo0bits+0x22>
 800b7c4:	07d9      	lsls	r1, r3, #31
 800b7c6:	d421      	bmi.n	800b80c <__lo0bits+0x52>
 800b7c8:	0798      	lsls	r0, r3, #30
 800b7ca:	bf49      	itett	mi
 800b7cc:	085b      	lsrmi	r3, r3, #1
 800b7ce:	089b      	lsrpl	r3, r3, #2
 800b7d0:	2001      	movmi	r0, #1
 800b7d2:	6013      	strmi	r3, [r2, #0]
 800b7d4:	bf5c      	itt	pl
 800b7d6:	6013      	strpl	r3, [r2, #0]
 800b7d8:	2002      	movpl	r0, #2
 800b7da:	4770      	bx	lr
 800b7dc:	b299      	uxth	r1, r3
 800b7de:	b909      	cbnz	r1, 800b7e4 <__lo0bits+0x2a>
 800b7e0:	0c1b      	lsrs	r3, r3, #16
 800b7e2:	2010      	movs	r0, #16
 800b7e4:	b2d9      	uxtb	r1, r3
 800b7e6:	b909      	cbnz	r1, 800b7ec <__lo0bits+0x32>
 800b7e8:	3008      	adds	r0, #8
 800b7ea:	0a1b      	lsrs	r3, r3, #8
 800b7ec:	0719      	lsls	r1, r3, #28
 800b7ee:	bf04      	itt	eq
 800b7f0:	091b      	lsreq	r3, r3, #4
 800b7f2:	3004      	addeq	r0, #4
 800b7f4:	0799      	lsls	r1, r3, #30
 800b7f6:	bf04      	itt	eq
 800b7f8:	089b      	lsreq	r3, r3, #2
 800b7fa:	3002      	addeq	r0, #2
 800b7fc:	07d9      	lsls	r1, r3, #31
 800b7fe:	d403      	bmi.n	800b808 <__lo0bits+0x4e>
 800b800:	085b      	lsrs	r3, r3, #1
 800b802:	f100 0001 	add.w	r0, r0, #1
 800b806:	d003      	beq.n	800b810 <__lo0bits+0x56>
 800b808:	6013      	str	r3, [r2, #0]
 800b80a:	4770      	bx	lr
 800b80c:	2000      	movs	r0, #0
 800b80e:	4770      	bx	lr
 800b810:	2020      	movs	r0, #32
 800b812:	4770      	bx	lr

0800b814 <__i2b>:
 800b814:	b510      	push	{r4, lr}
 800b816:	460c      	mov	r4, r1
 800b818:	2101      	movs	r1, #1
 800b81a:	f7ff ff07 	bl	800b62c <_Balloc>
 800b81e:	4602      	mov	r2, r0
 800b820:	b928      	cbnz	r0, 800b82e <__i2b+0x1a>
 800b822:	4b05      	ldr	r3, [pc, #20]	@ (800b838 <__i2b+0x24>)
 800b824:	4805      	ldr	r0, [pc, #20]	@ (800b83c <__i2b+0x28>)
 800b826:	f240 1145 	movw	r1, #325	@ 0x145
 800b82a:	f000 fd21 	bl	800c270 <__assert_func>
 800b82e:	2301      	movs	r3, #1
 800b830:	6144      	str	r4, [r0, #20]
 800b832:	6103      	str	r3, [r0, #16]
 800b834:	bd10      	pop	{r4, pc}
 800b836:	bf00      	nop
 800b838:	0800ca24 	.word	0x0800ca24
 800b83c:	0800ca35 	.word	0x0800ca35

0800b840 <__multiply>:
 800b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	4614      	mov	r4, r2
 800b846:	690a      	ldr	r2, [r1, #16]
 800b848:	6923      	ldr	r3, [r4, #16]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	bfa8      	it	ge
 800b84e:	4623      	movge	r3, r4
 800b850:	460f      	mov	r7, r1
 800b852:	bfa4      	itt	ge
 800b854:	460c      	movge	r4, r1
 800b856:	461f      	movge	r7, r3
 800b858:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b85c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b860:	68a3      	ldr	r3, [r4, #8]
 800b862:	6861      	ldr	r1, [r4, #4]
 800b864:	eb0a 0609 	add.w	r6, sl, r9
 800b868:	42b3      	cmp	r3, r6
 800b86a:	b085      	sub	sp, #20
 800b86c:	bfb8      	it	lt
 800b86e:	3101      	addlt	r1, #1
 800b870:	f7ff fedc 	bl	800b62c <_Balloc>
 800b874:	b930      	cbnz	r0, 800b884 <__multiply+0x44>
 800b876:	4602      	mov	r2, r0
 800b878:	4b44      	ldr	r3, [pc, #272]	@ (800b98c <__multiply+0x14c>)
 800b87a:	4845      	ldr	r0, [pc, #276]	@ (800b990 <__multiply+0x150>)
 800b87c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b880:	f000 fcf6 	bl	800c270 <__assert_func>
 800b884:	f100 0514 	add.w	r5, r0, #20
 800b888:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b88c:	462b      	mov	r3, r5
 800b88e:	2200      	movs	r2, #0
 800b890:	4543      	cmp	r3, r8
 800b892:	d321      	bcc.n	800b8d8 <__multiply+0x98>
 800b894:	f107 0114 	add.w	r1, r7, #20
 800b898:	f104 0214 	add.w	r2, r4, #20
 800b89c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b8a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b8a4:	9302      	str	r3, [sp, #8]
 800b8a6:	1b13      	subs	r3, r2, r4
 800b8a8:	3b15      	subs	r3, #21
 800b8aa:	f023 0303 	bic.w	r3, r3, #3
 800b8ae:	3304      	adds	r3, #4
 800b8b0:	f104 0715 	add.w	r7, r4, #21
 800b8b4:	42ba      	cmp	r2, r7
 800b8b6:	bf38      	it	cc
 800b8b8:	2304      	movcc	r3, #4
 800b8ba:	9301      	str	r3, [sp, #4]
 800b8bc:	9b02      	ldr	r3, [sp, #8]
 800b8be:	9103      	str	r1, [sp, #12]
 800b8c0:	428b      	cmp	r3, r1
 800b8c2:	d80c      	bhi.n	800b8de <__multiply+0x9e>
 800b8c4:	2e00      	cmp	r6, #0
 800b8c6:	dd03      	ble.n	800b8d0 <__multiply+0x90>
 800b8c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d05b      	beq.n	800b988 <__multiply+0x148>
 800b8d0:	6106      	str	r6, [r0, #16]
 800b8d2:	b005      	add	sp, #20
 800b8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d8:	f843 2b04 	str.w	r2, [r3], #4
 800b8dc:	e7d8      	b.n	800b890 <__multiply+0x50>
 800b8de:	f8b1 a000 	ldrh.w	sl, [r1]
 800b8e2:	f1ba 0f00 	cmp.w	sl, #0
 800b8e6:	d024      	beq.n	800b932 <__multiply+0xf2>
 800b8e8:	f104 0e14 	add.w	lr, r4, #20
 800b8ec:	46a9      	mov	r9, r5
 800b8ee:	f04f 0c00 	mov.w	ip, #0
 800b8f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b8f6:	f8d9 3000 	ldr.w	r3, [r9]
 800b8fa:	fa1f fb87 	uxth.w	fp, r7
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	fb0a 330b 	mla	r3, sl, fp, r3
 800b904:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b908:	f8d9 7000 	ldr.w	r7, [r9]
 800b90c:	4463      	add	r3, ip
 800b90e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b912:	fb0a c70b 	mla	r7, sl, fp, ip
 800b916:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b920:	4572      	cmp	r2, lr
 800b922:	f849 3b04 	str.w	r3, [r9], #4
 800b926:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b92a:	d8e2      	bhi.n	800b8f2 <__multiply+0xb2>
 800b92c:	9b01      	ldr	r3, [sp, #4]
 800b92e:	f845 c003 	str.w	ip, [r5, r3]
 800b932:	9b03      	ldr	r3, [sp, #12]
 800b934:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b938:	3104      	adds	r1, #4
 800b93a:	f1b9 0f00 	cmp.w	r9, #0
 800b93e:	d021      	beq.n	800b984 <__multiply+0x144>
 800b940:	682b      	ldr	r3, [r5, #0]
 800b942:	f104 0c14 	add.w	ip, r4, #20
 800b946:	46ae      	mov	lr, r5
 800b948:	f04f 0a00 	mov.w	sl, #0
 800b94c:	f8bc b000 	ldrh.w	fp, [ip]
 800b950:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b954:	fb09 770b 	mla	r7, r9, fp, r7
 800b958:	4457      	add	r7, sl
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b960:	f84e 3b04 	str.w	r3, [lr], #4
 800b964:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b968:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b96c:	f8be 3000 	ldrh.w	r3, [lr]
 800b970:	fb09 330a 	mla	r3, r9, sl, r3
 800b974:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b978:	4562      	cmp	r2, ip
 800b97a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b97e:	d8e5      	bhi.n	800b94c <__multiply+0x10c>
 800b980:	9f01      	ldr	r7, [sp, #4]
 800b982:	51eb      	str	r3, [r5, r7]
 800b984:	3504      	adds	r5, #4
 800b986:	e799      	b.n	800b8bc <__multiply+0x7c>
 800b988:	3e01      	subs	r6, #1
 800b98a:	e79b      	b.n	800b8c4 <__multiply+0x84>
 800b98c:	0800ca24 	.word	0x0800ca24
 800b990:	0800ca35 	.word	0x0800ca35

0800b994 <__pow5mult>:
 800b994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b998:	4615      	mov	r5, r2
 800b99a:	f012 0203 	ands.w	r2, r2, #3
 800b99e:	4607      	mov	r7, r0
 800b9a0:	460e      	mov	r6, r1
 800b9a2:	d007      	beq.n	800b9b4 <__pow5mult+0x20>
 800b9a4:	4c25      	ldr	r4, [pc, #148]	@ (800ba3c <__pow5mult+0xa8>)
 800b9a6:	3a01      	subs	r2, #1
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9ae:	f7ff fe9f 	bl	800b6f0 <__multadd>
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	10ad      	asrs	r5, r5, #2
 800b9b6:	d03d      	beq.n	800ba34 <__pow5mult+0xa0>
 800b9b8:	69fc      	ldr	r4, [r7, #28]
 800b9ba:	b97c      	cbnz	r4, 800b9dc <__pow5mult+0x48>
 800b9bc:	2010      	movs	r0, #16
 800b9be:	f7ff fd7f 	bl	800b4c0 <malloc>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	61f8      	str	r0, [r7, #28]
 800b9c6:	b928      	cbnz	r0, 800b9d4 <__pow5mult+0x40>
 800b9c8:	4b1d      	ldr	r3, [pc, #116]	@ (800ba40 <__pow5mult+0xac>)
 800b9ca:	481e      	ldr	r0, [pc, #120]	@ (800ba44 <__pow5mult+0xb0>)
 800b9cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b9d0:	f000 fc4e 	bl	800c270 <__assert_func>
 800b9d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9d8:	6004      	str	r4, [r0, #0]
 800b9da:	60c4      	str	r4, [r0, #12]
 800b9dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b9e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9e4:	b94c      	cbnz	r4, 800b9fa <__pow5mult+0x66>
 800b9e6:	f240 2171 	movw	r1, #625	@ 0x271
 800b9ea:	4638      	mov	r0, r7
 800b9ec:	f7ff ff12 	bl	800b814 <__i2b>
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	6003      	str	r3, [r0, #0]
 800b9fa:	f04f 0900 	mov.w	r9, #0
 800b9fe:	07eb      	lsls	r3, r5, #31
 800ba00:	d50a      	bpl.n	800ba18 <__pow5mult+0x84>
 800ba02:	4631      	mov	r1, r6
 800ba04:	4622      	mov	r2, r4
 800ba06:	4638      	mov	r0, r7
 800ba08:	f7ff ff1a 	bl	800b840 <__multiply>
 800ba0c:	4631      	mov	r1, r6
 800ba0e:	4680      	mov	r8, r0
 800ba10:	4638      	mov	r0, r7
 800ba12:	f7ff fe4b 	bl	800b6ac <_Bfree>
 800ba16:	4646      	mov	r6, r8
 800ba18:	106d      	asrs	r5, r5, #1
 800ba1a:	d00b      	beq.n	800ba34 <__pow5mult+0xa0>
 800ba1c:	6820      	ldr	r0, [r4, #0]
 800ba1e:	b938      	cbnz	r0, 800ba30 <__pow5mult+0x9c>
 800ba20:	4622      	mov	r2, r4
 800ba22:	4621      	mov	r1, r4
 800ba24:	4638      	mov	r0, r7
 800ba26:	f7ff ff0b 	bl	800b840 <__multiply>
 800ba2a:	6020      	str	r0, [r4, #0]
 800ba2c:	f8c0 9000 	str.w	r9, [r0]
 800ba30:	4604      	mov	r4, r0
 800ba32:	e7e4      	b.n	800b9fe <__pow5mult+0x6a>
 800ba34:	4630      	mov	r0, r6
 800ba36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba3a:	bf00      	nop
 800ba3c:	0800ca90 	.word	0x0800ca90
 800ba40:	0800c9b5 	.word	0x0800c9b5
 800ba44:	0800ca35 	.word	0x0800ca35

0800ba48 <__lshift>:
 800ba48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba4c:	460c      	mov	r4, r1
 800ba4e:	6849      	ldr	r1, [r1, #4]
 800ba50:	6923      	ldr	r3, [r4, #16]
 800ba52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba56:	68a3      	ldr	r3, [r4, #8]
 800ba58:	4607      	mov	r7, r0
 800ba5a:	4691      	mov	r9, r2
 800ba5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba60:	f108 0601 	add.w	r6, r8, #1
 800ba64:	42b3      	cmp	r3, r6
 800ba66:	db0b      	blt.n	800ba80 <__lshift+0x38>
 800ba68:	4638      	mov	r0, r7
 800ba6a:	f7ff fddf 	bl	800b62c <_Balloc>
 800ba6e:	4605      	mov	r5, r0
 800ba70:	b948      	cbnz	r0, 800ba86 <__lshift+0x3e>
 800ba72:	4602      	mov	r2, r0
 800ba74:	4b28      	ldr	r3, [pc, #160]	@ (800bb18 <__lshift+0xd0>)
 800ba76:	4829      	ldr	r0, [pc, #164]	@ (800bb1c <__lshift+0xd4>)
 800ba78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ba7c:	f000 fbf8 	bl	800c270 <__assert_func>
 800ba80:	3101      	adds	r1, #1
 800ba82:	005b      	lsls	r3, r3, #1
 800ba84:	e7ee      	b.n	800ba64 <__lshift+0x1c>
 800ba86:	2300      	movs	r3, #0
 800ba88:	f100 0114 	add.w	r1, r0, #20
 800ba8c:	f100 0210 	add.w	r2, r0, #16
 800ba90:	4618      	mov	r0, r3
 800ba92:	4553      	cmp	r3, sl
 800ba94:	db33      	blt.n	800bafe <__lshift+0xb6>
 800ba96:	6920      	ldr	r0, [r4, #16]
 800ba98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba9c:	f104 0314 	add.w	r3, r4, #20
 800baa0:	f019 091f 	ands.w	r9, r9, #31
 800baa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800baa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800baac:	d02b      	beq.n	800bb06 <__lshift+0xbe>
 800baae:	f1c9 0e20 	rsb	lr, r9, #32
 800bab2:	468a      	mov	sl, r1
 800bab4:	2200      	movs	r2, #0
 800bab6:	6818      	ldr	r0, [r3, #0]
 800bab8:	fa00 f009 	lsl.w	r0, r0, r9
 800babc:	4310      	orrs	r0, r2
 800babe:	f84a 0b04 	str.w	r0, [sl], #4
 800bac2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bac6:	459c      	cmp	ip, r3
 800bac8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bacc:	d8f3      	bhi.n	800bab6 <__lshift+0x6e>
 800bace:	ebac 0304 	sub.w	r3, ip, r4
 800bad2:	3b15      	subs	r3, #21
 800bad4:	f023 0303 	bic.w	r3, r3, #3
 800bad8:	3304      	adds	r3, #4
 800bada:	f104 0015 	add.w	r0, r4, #21
 800bade:	4584      	cmp	ip, r0
 800bae0:	bf38      	it	cc
 800bae2:	2304      	movcc	r3, #4
 800bae4:	50ca      	str	r2, [r1, r3]
 800bae6:	b10a      	cbz	r2, 800baec <__lshift+0xa4>
 800bae8:	f108 0602 	add.w	r6, r8, #2
 800baec:	3e01      	subs	r6, #1
 800baee:	4638      	mov	r0, r7
 800baf0:	612e      	str	r6, [r5, #16]
 800baf2:	4621      	mov	r1, r4
 800baf4:	f7ff fdda 	bl	800b6ac <_Bfree>
 800baf8:	4628      	mov	r0, r5
 800bafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bafe:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb02:	3301      	adds	r3, #1
 800bb04:	e7c5      	b.n	800ba92 <__lshift+0x4a>
 800bb06:	3904      	subs	r1, #4
 800bb08:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb10:	459c      	cmp	ip, r3
 800bb12:	d8f9      	bhi.n	800bb08 <__lshift+0xc0>
 800bb14:	e7ea      	b.n	800baec <__lshift+0xa4>
 800bb16:	bf00      	nop
 800bb18:	0800ca24 	.word	0x0800ca24
 800bb1c:	0800ca35 	.word	0x0800ca35

0800bb20 <__mcmp>:
 800bb20:	690a      	ldr	r2, [r1, #16]
 800bb22:	4603      	mov	r3, r0
 800bb24:	6900      	ldr	r0, [r0, #16]
 800bb26:	1a80      	subs	r0, r0, r2
 800bb28:	b530      	push	{r4, r5, lr}
 800bb2a:	d10e      	bne.n	800bb4a <__mcmp+0x2a>
 800bb2c:	3314      	adds	r3, #20
 800bb2e:	3114      	adds	r1, #20
 800bb30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bb34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bb38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb40:	4295      	cmp	r5, r2
 800bb42:	d003      	beq.n	800bb4c <__mcmp+0x2c>
 800bb44:	d205      	bcs.n	800bb52 <__mcmp+0x32>
 800bb46:	f04f 30ff 	mov.w	r0, #4294967295
 800bb4a:	bd30      	pop	{r4, r5, pc}
 800bb4c:	42a3      	cmp	r3, r4
 800bb4e:	d3f3      	bcc.n	800bb38 <__mcmp+0x18>
 800bb50:	e7fb      	b.n	800bb4a <__mcmp+0x2a>
 800bb52:	2001      	movs	r0, #1
 800bb54:	e7f9      	b.n	800bb4a <__mcmp+0x2a>
	...

0800bb58 <__mdiff>:
 800bb58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	4689      	mov	r9, r1
 800bb5e:	4606      	mov	r6, r0
 800bb60:	4611      	mov	r1, r2
 800bb62:	4648      	mov	r0, r9
 800bb64:	4614      	mov	r4, r2
 800bb66:	f7ff ffdb 	bl	800bb20 <__mcmp>
 800bb6a:	1e05      	subs	r5, r0, #0
 800bb6c:	d112      	bne.n	800bb94 <__mdiff+0x3c>
 800bb6e:	4629      	mov	r1, r5
 800bb70:	4630      	mov	r0, r6
 800bb72:	f7ff fd5b 	bl	800b62c <_Balloc>
 800bb76:	4602      	mov	r2, r0
 800bb78:	b928      	cbnz	r0, 800bb86 <__mdiff+0x2e>
 800bb7a:	4b3f      	ldr	r3, [pc, #252]	@ (800bc78 <__mdiff+0x120>)
 800bb7c:	f240 2137 	movw	r1, #567	@ 0x237
 800bb80:	483e      	ldr	r0, [pc, #248]	@ (800bc7c <__mdiff+0x124>)
 800bb82:	f000 fb75 	bl	800c270 <__assert_func>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb8c:	4610      	mov	r0, r2
 800bb8e:	b003      	add	sp, #12
 800bb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb94:	bfbc      	itt	lt
 800bb96:	464b      	movlt	r3, r9
 800bb98:	46a1      	movlt	r9, r4
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bba0:	bfba      	itte	lt
 800bba2:	461c      	movlt	r4, r3
 800bba4:	2501      	movlt	r5, #1
 800bba6:	2500      	movge	r5, #0
 800bba8:	f7ff fd40 	bl	800b62c <_Balloc>
 800bbac:	4602      	mov	r2, r0
 800bbae:	b918      	cbnz	r0, 800bbb8 <__mdiff+0x60>
 800bbb0:	4b31      	ldr	r3, [pc, #196]	@ (800bc78 <__mdiff+0x120>)
 800bbb2:	f240 2145 	movw	r1, #581	@ 0x245
 800bbb6:	e7e3      	b.n	800bb80 <__mdiff+0x28>
 800bbb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bbbc:	6926      	ldr	r6, [r4, #16]
 800bbbe:	60c5      	str	r5, [r0, #12]
 800bbc0:	f109 0310 	add.w	r3, r9, #16
 800bbc4:	f109 0514 	add.w	r5, r9, #20
 800bbc8:	f104 0e14 	add.w	lr, r4, #20
 800bbcc:	f100 0b14 	add.w	fp, r0, #20
 800bbd0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bbd4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bbd8:	9301      	str	r3, [sp, #4]
 800bbda:	46d9      	mov	r9, fp
 800bbdc:	f04f 0c00 	mov.w	ip, #0
 800bbe0:	9b01      	ldr	r3, [sp, #4]
 800bbe2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bbe6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bbea:	9301      	str	r3, [sp, #4]
 800bbec:	fa1f f38a 	uxth.w	r3, sl
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	b283      	uxth	r3, r0
 800bbf4:	1acb      	subs	r3, r1, r3
 800bbf6:	0c00      	lsrs	r0, r0, #16
 800bbf8:	4463      	add	r3, ip
 800bbfa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bbfe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bc08:	4576      	cmp	r6, lr
 800bc0a:	f849 3b04 	str.w	r3, [r9], #4
 800bc0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc12:	d8e5      	bhi.n	800bbe0 <__mdiff+0x88>
 800bc14:	1b33      	subs	r3, r6, r4
 800bc16:	3b15      	subs	r3, #21
 800bc18:	f023 0303 	bic.w	r3, r3, #3
 800bc1c:	3415      	adds	r4, #21
 800bc1e:	3304      	adds	r3, #4
 800bc20:	42a6      	cmp	r6, r4
 800bc22:	bf38      	it	cc
 800bc24:	2304      	movcc	r3, #4
 800bc26:	441d      	add	r5, r3
 800bc28:	445b      	add	r3, fp
 800bc2a:	461e      	mov	r6, r3
 800bc2c:	462c      	mov	r4, r5
 800bc2e:	4544      	cmp	r4, r8
 800bc30:	d30e      	bcc.n	800bc50 <__mdiff+0xf8>
 800bc32:	f108 0103 	add.w	r1, r8, #3
 800bc36:	1b49      	subs	r1, r1, r5
 800bc38:	f021 0103 	bic.w	r1, r1, #3
 800bc3c:	3d03      	subs	r5, #3
 800bc3e:	45a8      	cmp	r8, r5
 800bc40:	bf38      	it	cc
 800bc42:	2100      	movcc	r1, #0
 800bc44:	440b      	add	r3, r1
 800bc46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc4a:	b191      	cbz	r1, 800bc72 <__mdiff+0x11a>
 800bc4c:	6117      	str	r7, [r2, #16]
 800bc4e:	e79d      	b.n	800bb8c <__mdiff+0x34>
 800bc50:	f854 1b04 	ldr.w	r1, [r4], #4
 800bc54:	46e6      	mov	lr, ip
 800bc56:	0c08      	lsrs	r0, r1, #16
 800bc58:	fa1c fc81 	uxtah	ip, ip, r1
 800bc5c:	4471      	add	r1, lr
 800bc5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bc62:	b289      	uxth	r1, r1
 800bc64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bc68:	f846 1b04 	str.w	r1, [r6], #4
 800bc6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc70:	e7dd      	b.n	800bc2e <__mdiff+0xd6>
 800bc72:	3f01      	subs	r7, #1
 800bc74:	e7e7      	b.n	800bc46 <__mdiff+0xee>
 800bc76:	bf00      	nop
 800bc78:	0800ca24 	.word	0x0800ca24
 800bc7c:	0800ca35 	.word	0x0800ca35

0800bc80 <__d2b>:
 800bc80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc84:	460f      	mov	r7, r1
 800bc86:	2101      	movs	r1, #1
 800bc88:	ec59 8b10 	vmov	r8, r9, d0
 800bc8c:	4616      	mov	r6, r2
 800bc8e:	f7ff fccd 	bl	800b62c <_Balloc>
 800bc92:	4604      	mov	r4, r0
 800bc94:	b930      	cbnz	r0, 800bca4 <__d2b+0x24>
 800bc96:	4602      	mov	r2, r0
 800bc98:	4b23      	ldr	r3, [pc, #140]	@ (800bd28 <__d2b+0xa8>)
 800bc9a:	4824      	ldr	r0, [pc, #144]	@ (800bd2c <__d2b+0xac>)
 800bc9c:	f240 310f 	movw	r1, #783	@ 0x30f
 800bca0:	f000 fae6 	bl	800c270 <__assert_func>
 800bca4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bca8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcac:	b10d      	cbz	r5, 800bcb2 <__d2b+0x32>
 800bcae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bcb2:	9301      	str	r3, [sp, #4]
 800bcb4:	f1b8 0300 	subs.w	r3, r8, #0
 800bcb8:	d023      	beq.n	800bd02 <__d2b+0x82>
 800bcba:	4668      	mov	r0, sp
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	f7ff fd7c 	bl	800b7ba <__lo0bits>
 800bcc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bcc6:	b1d0      	cbz	r0, 800bcfe <__d2b+0x7e>
 800bcc8:	f1c0 0320 	rsb	r3, r0, #32
 800bccc:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd0:	430b      	orrs	r3, r1
 800bcd2:	40c2      	lsrs	r2, r0
 800bcd4:	6163      	str	r3, [r4, #20]
 800bcd6:	9201      	str	r2, [sp, #4]
 800bcd8:	9b01      	ldr	r3, [sp, #4]
 800bcda:	61a3      	str	r3, [r4, #24]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	bf0c      	ite	eq
 800bce0:	2201      	moveq	r2, #1
 800bce2:	2202      	movne	r2, #2
 800bce4:	6122      	str	r2, [r4, #16]
 800bce6:	b1a5      	cbz	r5, 800bd12 <__d2b+0x92>
 800bce8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bcec:	4405      	add	r5, r0
 800bcee:	603d      	str	r5, [r7, #0]
 800bcf0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bcf4:	6030      	str	r0, [r6, #0]
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	b003      	add	sp, #12
 800bcfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcfe:	6161      	str	r1, [r4, #20]
 800bd00:	e7ea      	b.n	800bcd8 <__d2b+0x58>
 800bd02:	a801      	add	r0, sp, #4
 800bd04:	f7ff fd59 	bl	800b7ba <__lo0bits>
 800bd08:	9b01      	ldr	r3, [sp, #4]
 800bd0a:	6163      	str	r3, [r4, #20]
 800bd0c:	3020      	adds	r0, #32
 800bd0e:	2201      	movs	r2, #1
 800bd10:	e7e8      	b.n	800bce4 <__d2b+0x64>
 800bd12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bd1a:	6038      	str	r0, [r7, #0]
 800bd1c:	6918      	ldr	r0, [r3, #16]
 800bd1e:	f7ff fd2d 	bl	800b77c <__hi0bits>
 800bd22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd26:	e7e5      	b.n	800bcf4 <__d2b+0x74>
 800bd28:	0800ca24 	.word	0x0800ca24
 800bd2c:	0800ca35 	.word	0x0800ca35

0800bd30 <__sfputc_r>:
 800bd30:	6893      	ldr	r3, [r2, #8]
 800bd32:	3b01      	subs	r3, #1
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	b410      	push	{r4}
 800bd38:	6093      	str	r3, [r2, #8]
 800bd3a:	da08      	bge.n	800bd4e <__sfputc_r+0x1e>
 800bd3c:	6994      	ldr	r4, [r2, #24]
 800bd3e:	42a3      	cmp	r3, r4
 800bd40:	db01      	blt.n	800bd46 <__sfputc_r+0x16>
 800bd42:	290a      	cmp	r1, #10
 800bd44:	d103      	bne.n	800bd4e <__sfputc_r+0x1e>
 800bd46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd4a:	f000 b9df 	b.w	800c10c <__swbuf_r>
 800bd4e:	6813      	ldr	r3, [r2, #0]
 800bd50:	1c58      	adds	r0, r3, #1
 800bd52:	6010      	str	r0, [r2, #0]
 800bd54:	7019      	strb	r1, [r3, #0]
 800bd56:	4608      	mov	r0, r1
 800bd58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd5c:	4770      	bx	lr

0800bd5e <__sfputs_r>:
 800bd5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd60:	4606      	mov	r6, r0
 800bd62:	460f      	mov	r7, r1
 800bd64:	4614      	mov	r4, r2
 800bd66:	18d5      	adds	r5, r2, r3
 800bd68:	42ac      	cmp	r4, r5
 800bd6a:	d101      	bne.n	800bd70 <__sfputs_r+0x12>
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	e007      	b.n	800bd80 <__sfputs_r+0x22>
 800bd70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd74:	463a      	mov	r2, r7
 800bd76:	4630      	mov	r0, r6
 800bd78:	f7ff ffda 	bl	800bd30 <__sfputc_r>
 800bd7c:	1c43      	adds	r3, r0, #1
 800bd7e:	d1f3      	bne.n	800bd68 <__sfputs_r+0xa>
 800bd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd84 <_vfiprintf_r>:
 800bd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd88:	460d      	mov	r5, r1
 800bd8a:	b09d      	sub	sp, #116	@ 0x74
 800bd8c:	4614      	mov	r4, r2
 800bd8e:	4698      	mov	r8, r3
 800bd90:	4606      	mov	r6, r0
 800bd92:	b118      	cbz	r0, 800bd9c <_vfiprintf_r+0x18>
 800bd94:	6a03      	ldr	r3, [r0, #32]
 800bd96:	b90b      	cbnz	r3, 800bd9c <_vfiprintf_r+0x18>
 800bd98:	f7fe fc5e 	bl	800a658 <__sinit>
 800bd9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd9e:	07d9      	lsls	r1, r3, #31
 800bda0:	d405      	bmi.n	800bdae <_vfiprintf_r+0x2a>
 800bda2:	89ab      	ldrh	r3, [r5, #12]
 800bda4:	059a      	lsls	r2, r3, #22
 800bda6:	d402      	bmi.n	800bdae <_vfiprintf_r+0x2a>
 800bda8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdaa:	f7fe fd5e 	bl	800a86a <__retarget_lock_acquire_recursive>
 800bdae:	89ab      	ldrh	r3, [r5, #12]
 800bdb0:	071b      	lsls	r3, r3, #28
 800bdb2:	d501      	bpl.n	800bdb8 <_vfiprintf_r+0x34>
 800bdb4:	692b      	ldr	r3, [r5, #16]
 800bdb6:	b99b      	cbnz	r3, 800bde0 <_vfiprintf_r+0x5c>
 800bdb8:	4629      	mov	r1, r5
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f000 f9e4 	bl	800c188 <__swsetup_r>
 800bdc0:	b170      	cbz	r0, 800bde0 <_vfiprintf_r+0x5c>
 800bdc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdc4:	07dc      	lsls	r4, r3, #31
 800bdc6:	d504      	bpl.n	800bdd2 <_vfiprintf_r+0x4e>
 800bdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdcc:	b01d      	add	sp, #116	@ 0x74
 800bdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd2:	89ab      	ldrh	r3, [r5, #12]
 800bdd4:	0598      	lsls	r0, r3, #22
 800bdd6:	d4f7      	bmi.n	800bdc8 <_vfiprintf_r+0x44>
 800bdd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdda:	f7fe fd47 	bl	800a86c <__retarget_lock_release_recursive>
 800bdde:	e7f3      	b.n	800bdc8 <_vfiprintf_r+0x44>
 800bde0:	2300      	movs	r3, #0
 800bde2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bde4:	2320      	movs	r3, #32
 800bde6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bdea:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdee:	2330      	movs	r3, #48	@ 0x30
 800bdf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bfa0 <_vfiprintf_r+0x21c>
 800bdf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bdf8:	f04f 0901 	mov.w	r9, #1
 800bdfc:	4623      	mov	r3, r4
 800bdfe:	469a      	mov	sl, r3
 800be00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be04:	b10a      	cbz	r2, 800be0a <_vfiprintf_r+0x86>
 800be06:	2a25      	cmp	r2, #37	@ 0x25
 800be08:	d1f9      	bne.n	800bdfe <_vfiprintf_r+0x7a>
 800be0a:	ebba 0b04 	subs.w	fp, sl, r4
 800be0e:	d00b      	beq.n	800be28 <_vfiprintf_r+0xa4>
 800be10:	465b      	mov	r3, fp
 800be12:	4622      	mov	r2, r4
 800be14:	4629      	mov	r1, r5
 800be16:	4630      	mov	r0, r6
 800be18:	f7ff ffa1 	bl	800bd5e <__sfputs_r>
 800be1c:	3001      	adds	r0, #1
 800be1e:	f000 80a7 	beq.w	800bf70 <_vfiprintf_r+0x1ec>
 800be22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be24:	445a      	add	r2, fp
 800be26:	9209      	str	r2, [sp, #36]	@ 0x24
 800be28:	f89a 3000 	ldrb.w	r3, [sl]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f000 809f 	beq.w	800bf70 <_vfiprintf_r+0x1ec>
 800be32:	2300      	movs	r3, #0
 800be34:	f04f 32ff 	mov.w	r2, #4294967295
 800be38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be3c:	f10a 0a01 	add.w	sl, sl, #1
 800be40:	9304      	str	r3, [sp, #16]
 800be42:	9307      	str	r3, [sp, #28]
 800be44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be48:	931a      	str	r3, [sp, #104]	@ 0x68
 800be4a:	4654      	mov	r4, sl
 800be4c:	2205      	movs	r2, #5
 800be4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be52:	4853      	ldr	r0, [pc, #332]	@ (800bfa0 <_vfiprintf_r+0x21c>)
 800be54:	f7f4 fa44 	bl	80002e0 <memchr>
 800be58:	9a04      	ldr	r2, [sp, #16]
 800be5a:	b9d8      	cbnz	r0, 800be94 <_vfiprintf_r+0x110>
 800be5c:	06d1      	lsls	r1, r2, #27
 800be5e:	bf44      	itt	mi
 800be60:	2320      	movmi	r3, #32
 800be62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be66:	0713      	lsls	r3, r2, #28
 800be68:	bf44      	itt	mi
 800be6a:	232b      	movmi	r3, #43	@ 0x2b
 800be6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be70:	f89a 3000 	ldrb.w	r3, [sl]
 800be74:	2b2a      	cmp	r3, #42	@ 0x2a
 800be76:	d015      	beq.n	800bea4 <_vfiprintf_r+0x120>
 800be78:	9a07      	ldr	r2, [sp, #28]
 800be7a:	4654      	mov	r4, sl
 800be7c:	2000      	movs	r0, #0
 800be7e:	f04f 0c0a 	mov.w	ip, #10
 800be82:	4621      	mov	r1, r4
 800be84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be88:	3b30      	subs	r3, #48	@ 0x30
 800be8a:	2b09      	cmp	r3, #9
 800be8c:	d94b      	bls.n	800bf26 <_vfiprintf_r+0x1a2>
 800be8e:	b1b0      	cbz	r0, 800bebe <_vfiprintf_r+0x13a>
 800be90:	9207      	str	r2, [sp, #28]
 800be92:	e014      	b.n	800bebe <_vfiprintf_r+0x13a>
 800be94:	eba0 0308 	sub.w	r3, r0, r8
 800be98:	fa09 f303 	lsl.w	r3, r9, r3
 800be9c:	4313      	orrs	r3, r2
 800be9e:	9304      	str	r3, [sp, #16]
 800bea0:	46a2      	mov	sl, r4
 800bea2:	e7d2      	b.n	800be4a <_vfiprintf_r+0xc6>
 800bea4:	9b03      	ldr	r3, [sp, #12]
 800bea6:	1d19      	adds	r1, r3, #4
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	9103      	str	r1, [sp, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	bfbb      	ittet	lt
 800beb0:	425b      	neglt	r3, r3
 800beb2:	f042 0202 	orrlt.w	r2, r2, #2
 800beb6:	9307      	strge	r3, [sp, #28]
 800beb8:	9307      	strlt	r3, [sp, #28]
 800beba:	bfb8      	it	lt
 800bebc:	9204      	strlt	r2, [sp, #16]
 800bebe:	7823      	ldrb	r3, [r4, #0]
 800bec0:	2b2e      	cmp	r3, #46	@ 0x2e
 800bec2:	d10a      	bne.n	800beda <_vfiprintf_r+0x156>
 800bec4:	7863      	ldrb	r3, [r4, #1]
 800bec6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bec8:	d132      	bne.n	800bf30 <_vfiprintf_r+0x1ac>
 800beca:	9b03      	ldr	r3, [sp, #12]
 800becc:	1d1a      	adds	r2, r3, #4
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	9203      	str	r2, [sp, #12]
 800bed2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bed6:	3402      	adds	r4, #2
 800bed8:	9305      	str	r3, [sp, #20]
 800beda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bfb0 <_vfiprintf_r+0x22c>
 800bede:	7821      	ldrb	r1, [r4, #0]
 800bee0:	2203      	movs	r2, #3
 800bee2:	4650      	mov	r0, sl
 800bee4:	f7f4 f9fc 	bl	80002e0 <memchr>
 800bee8:	b138      	cbz	r0, 800befa <_vfiprintf_r+0x176>
 800beea:	9b04      	ldr	r3, [sp, #16]
 800beec:	eba0 000a 	sub.w	r0, r0, sl
 800bef0:	2240      	movs	r2, #64	@ 0x40
 800bef2:	4082      	lsls	r2, r0
 800bef4:	4313      	orrs	r3, r2
 800bef6:	3401      	adds	r4, #1
 800bef8:	9304      	str	r3, [sp, #16]
 800befa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800befe:	4829      	ldr	r0, [pc, #164]	@ (800bfa4 <_vfiprintf_r+0x220>)
 800bf00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf04:	2206      	movs	r2, #6
 800bf06:	f7f4 f9eb 	bl	80002e0 <memchr>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d03f      	beq.n	800bf8e <_vfiprintf_r+0x20a>
 800bf0e:	4b26      	ldr	r3, [pc, #152]	@ (800bfa8 <_vfiprintf_r+0x224>)
 800bf10:	bb1b      	cbnz	r3, 800bf5a <_vfiprintf_r+0x1d6>
 800bf12:	9b03      	ldr	r3, [sp, #12]
 800bf14:	3307      	adds	r3, #7
 800bf16:	f023 0307 	bic.w	r3, r3, #7
 800bf1a:	3308      	adds	r3, #8
 800bf1c:	9303      	str	r3, [sp, #12]
 800bf1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf20:	443b      	add	r3, r7
 800bf22:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf24:	e76a      	b.n	800bdfc <_vfiprintf_r+0x78>
 800bf26:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	2001      	movs	r0, #1
 800bf2e:	e7a8      	b.n	800be82 <_vfiprintf_r+0xfe>
 800bf30:	2300      	movs	r3, #0
 800bf32:	3401      	adds	r4, #1
 800bf34:	9305      	str	r3, [sp, #20]
 800bf36:	4619      	mov	r1, r3
 800bf38:	f04f 0c0a 	mov.w	ip, #10
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf42:	3a30      	subs	r2, #48	@ 0x30
 800bf44:	2a09      	cmp	r2, #9
 800bf46:	d903      	bls.n	800bf50 <_vfiprintf_r+0x1cc>
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d0c6      	beq.n	800beda <_vfiprintf_r+0x156>
 800bf4c:	9105      	str	r1, [sp, #20]
 800bf4e:	e7c4      	b.n	800beda <_vfiprintf_r+0x156>
 800bf50:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf54:	4604      	mov	r4, r0
 800bf56:	2301      	movs	r3, #1
 800bf58:	e7f0      	b.n	800bf3c <_vfiprintf_r+0x1b8>
 800bf5a:	ab03      	add	r3, sp, #12
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	462a      	mov	r2, r5
 800bf60:	4b12      	ldr	r3, [pc, #72]	@ (800bfac <_vfiprintf_r+0x228>)
 800bf62:	a904      	add	r1, sp, #16
 800bf64:	4630      	mov	r0, r6
 800bf66:	f7fd ff43 	bl	8009df0 <_printf_float>
 800bf6a:	4607      	mov	r7, r0
 800bf6c:	1c78      	adds	r0, r7, #1
 800bf6e:	d1d6      	bne.n	800bf1e <_vfiprintf_r+0x19a>
 800bf70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf72:	07d9      	lsls	r1, r3, #31
 800bf74:	d405      	bmi.n	800bf82 <_vfiprintf_r+0x1fe>
 800bf76:	89ab      	ldrh	r3, [r5, #12]
 800bf78:	059a      	lsls	r2, r3, #22
 800bf7a:	d402      	bmi.n	800bf82 <_vfiprintf_r+0x1fe>
 800bf7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf7e:	f7fe fc75 	bl	800a86c <__retarget_lock_release_recursive>
 800bf82:	89ab      	ldrh	r3, [r5, #12]
 800bf84:	065b      	lsls	r3, r3, #25
 800bf86:	f53f af1f 	bmi.w	800bdc8 <_vfiprintf_r+0x44>
 800bf8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf8c:	e71e      	b.n	800bdcc <_vfiprintf_r+0x48>
 800bf8e:	ab03      	add	r3, sp, #12
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	462a      	mov	r2, r5
 800bf94:	4b05      	ldr	r3, [pc, #20]	@ (800bfac <_vfiprintf_r+0x228>)
 800bf96:	a904      	add	r1, sp, #16
 800bf98:	4630      	mov	r0, r6
 800bf9a:	f7fe f9b1 	bl	800a300 <_printf_i>
 800bf9e:	e7e4      	b.n	800bf6a <_vfiprintf_r+0x1e6>
 800bfa0:	0800cb90 	.word	0x0800cb90
 800bfa4:	0800cb9a 	.word	0x0800cb9a
 800bfa8:	08009df1 	.word	0x08009df1
 800bfac:	0800bd5f 	.word	0x0800bd5f
 800bfb0:	0800cb96 	.word	0x0800cb96

0800bfb4 <__sflush_r>:
 800bfb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfbc:	0716      	lsls	r6, r2, #28
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	460c      	mov	r4, r1
 800bfc2:	d454      	bmi.n	800c06e <__sflush_r+0xba>
 800bfc4:	684b      	ldr	r3, [r1, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	dc02      	bgt.n	800bfd0 <__sflush_r+0x1c>
 800bfca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	dd48      	ble.n	800c062 <__sflush_r+0xae>
 800bfd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bfd2:	2e00      	cmp	r6, #0
 800bfd4:	d045      	beq.n	800c062 <__sflush_r+0xae>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bfdc:	682f      	ldr	r7, [r5, #0]
 800bfde:	6a21      	ldr	r1, [r4, #32]
 800bfe0:	602b      	str	r3, [r5, #0]
 800bfe2:	d030      	beq.n	800c046 <__sflush_r+0x92>
 800bfe4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bfe6:	89a3      	ldrh	r3, [r4, #12]
 800bfe8:	0759      	lsls	r1, r3, #29
 800bfea:	d505      	bpl.n	800bff8 <__sflush_r+0x44>
 800bfec:	6863      	ldr	r3, [r4, #4]
 800bfee:	1ad2      	subs	r2, r2, r3
 800bff0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bff2:	b10b      	cbz	r3, 800bff8 <__sflush_r+0x44>
 800bff4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bff6:	1ad2      	subs	r2, r2, r3
 800bff8:	2300      	movs	r3, #0
 800bffa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bffc:	6a21      	ldr	r1, [r4, #32]
 800bffe:	4628      	mov	r0, r5
 800c000:	47b0      	blx	r6
 800c002:	1c43      	adds	r3, r0, #1
 800c004:	89a3      	ldrh	r3, [r4, #12]
 800c006:	d106      	bne.n	800c016 <__sflush_r+0x62>
 800c008:	6829      	ldr	r1, [r5, #0]
 800c00a:	291d      	cmp	r1, #29
 800c00c:	d82b      	bhi.n	800c066 <__sflush_r+0xb2>
 800c00e:	4a2a      	ldr	r2, [pc, #168]	@ (800c0b8 <__sflush_r+0x104>)
 800c010:	410a      	asrs	r2, r1
 800c012:	07d6      	lsls	r6, r2, #31
 800c014:	d427      	bmi.n	800c066 <__sflush_r+0xb2>
 800c016:	2200      	movs	r2, #0
 800c018:	6062      	str	r2, [r4, #4]
 800c01a:	04d9      	lsls	r1, r3, #19
 800c01c:	6922      	ldr	r2, [r4, #16]
 800c01e:	6022      	str	r2, [r4, #0]
 800c020:	d504      	bpl.n	800c02c <__sflush_r+0x78>
 800c022:	1c42      	adds	r2, r0, #1
 800c024:	d101      	bne.n	800c02a <__sflush_r+0x76>
 800c026:	682b      	ldr	r3, [r5, #0]
 800c028:	b903      	cbnz	r3, 800c02c <__sflush_r+0x78>
 800c02a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c02c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c02e:	602f      	str	r7, [r5, #0]
 800c030:	b1b9      	cbz	r1, 800c062 <__sflush_r+0xae>
 800c032:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c036:	4299      	cmp	r1, r3
 800c038:	d002      	beq.n	800c040 <__sflush_r+0x8c>
 800c03a:	4628      	mov	r0, r5
 800c03c:	f7ff f9f6 	bl	800b42c <_free_r>
 800c040:	2300      	movs	r3, #0
 800c042:	6363      	str	r3, [r4, #52]	@ 0x34
 800c044:	e00d      	b.n	800c062 <__sflush_r+0xae>
 800c046:	2301      	movs	r3, #1
 800c048:	4628      	mov	r0, r5
 800c04a:	47b0      	blx	r6
 800c04c:	4602      	mov	r2, r0
 800c04e:	1c50      	adds	r0, r2, #1
 800c050:	d1c9      	bne.n	800bfe6 <__sflush_r+0x32>
 800c052:	682b      	ldr	r3, [r5, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d0c6      	beq.n	800bfe6 <__sflush_r+0x32>
 800c058:	2b1d      	cmp	r3, #29
 800c05a:	d001      	beq.n	800c060 <__sflush_r+0xac>
 800c05c:	2b16      	cmp	r3, #22
 800c05e:	d11e      	bne.n	800c09e <__sflush_r+0xea>
 800c060:	602f      	str	r7, [r5, #0]
 800c062:	2000      	movs	r0, #0
 800c064:	e022      	b.n	800c0ac <__sflush_r+0xf8>
 800c066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c06a:	b21b      	sxth	r3, r3
 800c06c:	e01b      	b.n	800c0a6 <__sflush_r+0xf2>
 800c06e:	690f      	ldr	r7, [r1, #16]
 800c070:	2f00      	cmp	r7, #0
 800c072:	d0f6      	beq.n	800c062 <__sflush_r+0xae>
 800c074:	0793      	lsls	r3, r2, #30
 800c076:	680e      	ldr	r6, [r1, #0]
 800c078:	bf08      	it	eq
 800c07a:	694b      	ldreq	r3, [r1, #20]
 800c07c:	600f      	str	r7, [r1, #0]
 800c07e:	bf18      	it	ne
 800c080:	2300      	movne	r3, #0
 800c082:	eba6 0807 	sub.w	r8, r6, r7
 800c086:	608b      	str	r3, [r1, #8]
 800c088:	f1b8 0f00 	cmp.w	r8, #0
 800c08c:	dde9      	ble.n	800c062 <__sflush_r+0xae>
 800c08e:	6a21      	ldr	r1, [r4, #32]
 800c090:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c092:	4643      	mov	r3, r8
 800c094:	463a      	mov	r2, r7
 800c096:	4628      	mov	r0, r5
 800c098:	47b0      	blx	r6
 800c09a:	2800      	cmp	r0, #0
 800c09c:	dc08      	bgt.n	800c0b0 <__sflush_r+0xfc>
 800c09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0a6:	81a3      	strh	r3, [r4, #12]
 800c0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b0:	4407      	add	r7, r0
 800c0b2:	eba8 0800 	sub.w	r8, r8, r0
 800c0b6:	e7e7      	b.n	800c088 <__sflush_r+0xd4>
 800c0b8:	dfbffffe 	.word	0xdfbffffe

0800c0bc <_fflush_r>:
 800c0bc:	b538      	push	{r3, r4, r5, lr}
 800c0be:	690b      	ldr	r3, [r1, #16]
 800c0c0:	4605      	mov	r5, r0
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	b913      	cbnz	r3, 800c0cc <_fflush_r+0x10>
 800c0c6:	2500      	movs	r5, #0
 800c0c8:	4628      	mov	r0, r5
 800c0ca:	bd38      	pop	{r3, r4, r5, pc}
 800c0cc:	b118      	cbz	r0, 800c0d6 <_fflush_r+0x1a>
 800c0ce:	6a03      	ldr	r3, [r0, #32]
 800c0d0:	b90b      	cbnz	r3, 800c0d6 <_fflush_r+0x1a>
 800c0d2:	f7fe fac1 	bl	800a658 <__sinit>
 800c0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d0f3      	beq.n	800c0c6 <_fflush_r+0xa>
 800c0de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c0e0:	07d0      	lsls	r0, r2, #31
 800c0e2:	d404      	bmi.n	800c0ee <_fflush_r+0x32>
 800c0e4:	0599      	lsls	r1, r3, #22
 800c0e6:	d402      	bmi.n	800c0ee <_fflush_r+0x32>
 800c0e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0ea:	f7fe fbbe 	bl	800a86a <__retarget_lock_acquire_recursive>
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	4621      	mov	r1, r4
 800c0f2:	f7ff ff5f 	bl	800bfb4 <__sflush_r>
 800c0f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0f8:	07da      	lsls	r2, r3, #31
 800c0fa:	4605      	mov	r5, r0
 800c0fc:	d4e4      	bmi.n	800c0c8 <_fflush_r+0xc>
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	059b      	lsls	r3, r3, #22
 800c102:	d4e1      	bmi.n	800c0c8 <_fflush_r+0xc>
 800c104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c106:	f7fe fbb1 	bl	800a86c <__retarget_lock_release_recursive>
 800c10a:	e7dd      	b.n	800c0c8 <_fflush_r+0xc>

0800c10c <__swbuf_r>:
 800c10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10e:	460e      	mov	r6, r1
 800c110:	4614      	mov	r4, r2
 800c112:	4605      	mov	r5, r0
 800c114:	b118      	cbz	r0, 800c11e <__swbuf_r+0x12>
 800c116:	6a03      	ldr	r3, [r0, #32]
 800c118:	b90b      	cbnz	r3, 800c11e <__swbuf_r+0x12>
 800c11a:	f7fe fa9d 	bl	800a658 <__sinit>
 800c11e:	69a3      	ldr	r3, [r4, #24]
 800c120:	60a3      	str	r3, [r4, #8]
 800c122:	89a3      	ldrh	r3, [r4, #12]
 800c124:	071a      	lsls	r2, r3, #28
 800c126:	d501      	bpl.n	800c12c <__swbuf_r+0x20>
 800c128:	6923      	ldr	r3, [r4, #16]
 800c12a:	b943      	cbnz	r3, 800c13e <__swbuf_r+0x32>
 800c12c:	4621      	mov	r1, r4
 800c12e:	4628      	mov	r0, r5
 800c130:	f000 f82a 	bl	800c188 <__swsetup_r>
 800c134:	b118      	cbz	r0, 800c13e <__swbuf_r+0x32>
 800c136:	f04f 37ff 	mov.w	r7, #4294967295
 800c13a:	4638      	mov	r0, r7
 800c13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c13e:	6823      	ldr	r3, [r4, #0]
 800c140:	6922      	ldr	r2, [r4, #16]
 800c142:	1a98      	subs	r0, r3, r2
 800c144:	6963      	ldr	r3, [r4, #20]
 800c146:	b2f6      	uxtb	r6, r6
 800c148:	4283      	cmp	r3, r0
 800c14a:	4637      	mov	r7, r6
 800c14c:	dc05      	bgt.n	800c15a <__swbuf_r+0x4e>
 800c14e:	4621      	mov	r1, r4
 800c150:	4628      	mov	r0, r5
 800c152:	f7ff ffb3 	bl	800c0bc <_fflush_r>
 800c156:	2800      	cmp	r0, #0
 800c158:	d1ed      	bne.n	800c136 <__swbuf_r+0x2a>
 800c15a:	68a3      	ldr	r3, [r4, #8]
 800c15c:	3b01      	subs	r3, #1
 800c15e:	60a3      	str	r3, [r4, #8]
 800c160:	6823      	ldr	r3, [r4, #0]
 800c162:	1c5a      	adds	r2, r3, #1
 800c164:	6022      	str	r2, [r4, #0]
 800c166:	701e      	strb	r6, [r3, #0]
 800c168:	6962      	ldr	r2, [r4, #20]
 800c16a:	1c43      	adds	r3, r0, #1
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d004      	beq.n	800c17a <__swbuf_r+0x6e>
 800c170:	89a3      	ldrh	r3, [r4, #12]
 800c172:	07db      	lsls	r3, r3, #31
 800c174:	d5e1      	bpl.n	800c13a <__swbuf_r+0x2e>
 800c176:	2e0a      	cmp	r6, #10
 800c178:	d1df      	bne.n	800c13a <__swbuf_r+0x2e>
 800c17a:	4621      	mov	r1, r4
 800c17c:	4628      	mov	r0, r5
 800c17e:	f7ff ff9d 	bl	800c0bc <_fflush_r>
 800c182:	2800      	cmp	r0, #0
 800c184:	d0d9      	beq.n	800c13a <__swbuf_r+0x2e>
 800c186:	e7d6      	b.n	800c136 <__swbuf_r+0x2a>

0800c188 <__swsetup_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	4b29      	ldr	r3, [pc, #164]	@ (800c230 <__swsetup_r+0xa8>)
 800c18c:	4605      	mov	r5, r0
 800c18e:	6818      	ldr	r0, [r3, #0]
 800c190:	460c      	mov	r4, r1
 800c192:	b118      	cbz	r0, 800c19c <__swsetup_r+0x14>
 800c194:	6a03      	ldr	r3, [r0, #32]
 800c196:	b90b      	cbnz	r3, 800c19c <__swsetup_r+0x14>
 800c198:	f7fe fa5e 	bl	800a658 <__sinit>
 800c19c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1a0:	0719      	lsls	r1, r3, #28
 800c1a2:	d422      	bmi.n	800c1ea <__swsetup_r+0x62>
 800c1a4:	06da      	lsls	r2, r3, #27
 800c1a6:	d407      	bmi.n	800c1b8 <__swsetup_r+0x30>
 800c1a8:	2209      	movs	r2, #9
 800c1aa:	602a      	str	r2, [r5, #0]
 800c1ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1b0:	81a3      	strh	r3, [r4, #12]
 800c1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b6:	e033      	b.n	800c220 <__swsetup_r+0x98>
 800c1b8:	0758      	lsls	r0, r3, #29
 800c1ba:	d512      	bpl.n	800c1e2 <__swsetup_r+0x5a>
 800c1bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1be:	b141      	cbz	r1, 800c1d2 <__swsetup_r+0x4a>
 800c1c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1c4:	4299      	cmp	r1, r3
 800c1c6:	d002      	beq.n	800c1ce <__swsetup_r+0x46>
 800c1c8:	4628      	mov	r0, r5
 800c1ca:	f7ff f92f 	bl	800b42c <_free_r>
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1d2:	89a3      	ldrh	r3, [r4, #12]
 800c1d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c1d8:	81a3      	strh	r3, [r4, #12]
 800c1da:	2300      	movs	r3, #0
 800c1dc:	6063      	str	r3, [r4, #4]
 800c1de:	6923      	ldr	r3, [r4, #16]
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	f043 0308 	orr.w	r3, r3, #8
 800c1e8:	81a3      	strh	r3, [r4, #12]
 800c1ea:	6923      	ldr	r3, [r4, #16]
 800c1ec:	b94b      	cbnz	r3, 800c202 <__swsetup_r+0x7a>
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c1f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1f8:	d003      	beq.n	800c202 <__swsetup_r+0x7a>
 800c1fa:	4621      	mov	r1, r4
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	f000 f8c1 	bl	800c384 <__smakebuf_r>
 800c202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c206:	f013 0201 	ands.w	r2, r3, #1
 800c20a:	d00a      	beq.n	800c222 <__swsetup_r+0x9a>
 800c20c:	2200      	movs	r2, #0
 800c20e:	60a2      	str	r2, [r4, #8]
 800c210:	6962      	ldr	r2, [r4, #20]
 800c212:	4252      	negs	r2, r2
 800c214:	61a2      	str	r2, [r4, #24]
 800c216:	6922      	ldr	r2, [r4, #16]
 800c218:	b942      	cbnz	r2, 800c22c <__swsetup_r+0xa4>
 800c21a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c21e:	d1c5      	bne.n	800c1ac <__swsetup_r+0x24>
 800c220:	bd38      	pop	{r3, r4, r5, pc}
 800c222:	0799      	lsls	r1, r3, #30
 800c224:	bf58      	it	pl
 800c226:	6962      	ldrpl	r2, [r4, #20]
 800c228:	60a2      	str	r2, [r4, #8]
 800c22a:	e7f4      	b.n	800c216 <__swsetup_r+0x8e>
 800c22c:	2000      	movs	r0, #0
 800c22e:	e7f7      	b.n	800c220 <__swsetup_r+0x98>
 800c230:	2400002c 	.word	0x2400002c

0800c234 <_sbrk_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4d06      	ldr	r5, [pc, #24]	@ (800c250 <_sbrk_r+0x1c>)
 800c238:	2300      	movs	r3, #0
 800c23a:	4604      	mov	r4, r0
 800c23c:	4608      	mov	r0, r1
 800c23e:	602b      	str	r3, [r5, #0]
 800c240:	f7f5 f836 	bl	80012b0 <_sbrk>
 800c244:	1c43      	adds	r3, r0, #1
 800c246:	d102      	bne.n	800c24e <_sbrk_r+0x1a>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	b103      	cbz	r3, 800c24e <_sbrk_r+0x1a>
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	bd38      	pop	{r3, r4, r5, pc}
 800c250:	24000c6c 	.word	0x24000c6c

0800c254 <memcpy>:
 800c254:	440a      	add	r2, r1
 800c256:	4291      	cmp	r1, r2
 800c258:	f100 33ff 	add.w	r3, r0, #4294967295
 800c25c:	d100      	bne.n	800c260 <memcpy+0xc>
 800c25e:	4770      	bx	lr
 800c260:	b510      	push	{r4, lr}
 800c262:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c26a:	4291      	cmp	r1, r2
 800c26c:	d1f9      	bne.n	800c262 <memcpy+0xe>
 800c26e:	bd10      	pop	{r4, pc}

0800c270 <__assert_func>:
 800c270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c272:	4614      	mov	r4, r2
 800c274:	461a      	mov	r2, r3
 800c276:	4b09      	ldr	r3, [pc, #36]	@ (800c29c <__assert_func+0x2c>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4605      	mov	r5, r0
 800c27c:	68d8      	ldr	r0, [r3, #12]
 800c27e:	b954      	cbnz	r4, 800c296 <__assert_func+0x26>
 800c280:	4b07      	ldr	r3, [pc, #28]	@ (800c2a0 <__assert_func+0x30>)
 800c282:	461c      	mov	r4, r3
 800c284:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c288:	9100      	str	r1, [sp, #0]
 800c28a:	462b      	mov	r3, r5
 800c28c:	4905      	ldr	r1, [pc, #20]	@ (800c2a4 <__assert_func+0x34>)
 800c28e:	f000 f841 	bl	800c314 <fiprintf>
 800c292:	f000 f8d5 	bl	800c440 <abort>
 800c296:	4b04      	ldr	r3, [pc, #16]	@ (800c2a8 <__assert_func+0x38>)
 800c298:	e7f4      	b.n	800c284 <__assert_func+0x14>
 800c29a:	bf00      	nop
 800c29c:	2400002c 	.word	0x2400002c
 800c2a0:	0800cbe6 	.word	0x0800cbe6
 800c2a4:	0800cbb8 	.word	0x0800cbb8
 800c2a8:	0800cbab 	.word	0x0800cbab

0800c2ac <_calloc_r>:
 800c2ac:	b570      	push	{r4, r5, r6, lr}
 800c2ae:	fba1 5402 	umull	r5, r4, r1, r2
 800c2b2:	b93c      	cbnz	r4, 800c2c4 <_calloc_r+0x18>
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	f7ff f92d 	bl	800b514 <_malloc_r>
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	b928      	cbnz	r0, 800c2ca <_calloc_r+0x1e>
 800c2be:	2600      	movs	r6, #0
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}
 800c2c4:	220c      	movs	r2, #12
 800c2c6:	6002      	str	r2, [r0, #0]
 800c2c8:	e7f9      	b.n	800c2be <_calloc_r+0x12>
 800c2ca:	462a      	mov	r2, r5
 800c2cc:	4621      	mov	r1, r4
 800c2ce:	f7fe fa4e 	bl	800a76e <memset>
 800c2d2:	e7f5      	b.n	800c2c0 <_calloc_r+0x14>

0800c2d4 <__ascii_mbtowc>:
 800c2d4:	b082      	sub	sp, #8
 800c2d6:	b901      	cbnz	r1, 800c2da <__ascii_mbtowc+0x6>
 800c2d8:	a901      	add	r1, sp, #4
 800c2da:	b142      	cbz	r2, 800c2ee <__ascii_mbtowc+0x1a>
 800c2dc:	b14b      	cbz	r3, 800c2f2 <__ascii_mbtowc+0x1e>
 800c2de:	7813      	ldrb	r3, [r2, #0]
 800c2e0:	600b      	str	r3, [r1, #0]
 800c2e2:	7812      	ldrb	r2, [r2, #0]
 800c2e4:	1e10      	subs	r0, r2, #0
 800c2e6:	bf18      	it	ne
 800c2e8:	2001      	movne	r0, #1
 800c2ea:	b002      	add	sp, #8
 800c2ec:	4770      	bx	lr
 800c2ee:	4610      	mov	r0, r2
 800c2f0:	e7fb      	b.n	800c2ea <__ascii_mbtowc+0x16>
 800c2f2:	f06f 0001 	mvn.w	r0, #1
 800c2f6:	e7f8      	b.n	800c2ea <__ascii_mbtowc+0x16>

0800c2f8 <__ascii_wctomb>:
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	4608      	mov	r0, r1
 800c2fc:	b141      	cbz	r1, 800c310 <__ascii_wctomb+0x18>
 800c2fe:	2aff      	cmp	r2, #255	@ 0xff
 800c300:	d904      	bls.n	800c30c <__ascii_wctomb+0x14>
 800c302:	228a      	movs	r2, #138	@ 0x8a
 800c304:	601a      	str	r2, [r3, #0]
 800c306:	f04f 30ff 	mov.w	r0, #4294967295
 800c30a:	4770      	bx	lr
 800c30c:	700a      	strb	r2, [r1, #0]
 800c30e:	2001      	movs	r0, #1
 800c310:	4770      	bx	lr
	...

0800c314 <fiprintf>:
 800c314:	b40e      	push	{r1, r2, r3}
 800c316:	b503      	push	{r0, r1, lr}
 800c318:	4601      	mov	r1, r0
 800c31a:	ab03      	add	r3, sp, #12
 800c31c:	4805      	ldr	r0, [pc, #20]	@ (800c334 <fiprintf+0x20>)
 800c31e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c322:	6800      	ldr	r0, [r0, #0]
 800c324:	9301      	str	r3, [sp, #4]
 800c326:	f7ff fd2d 	bl	800bd84 <_vfiprintf_r>
 800c32a:	b002      	add	sp, #8
 800c32c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c330:	b003      	add	sp, #12
 800c332:	4770      	bx	lr
 800c334:	2400002c 	.word	0x2400002c

0800c338 <__swhatbuf_r>:
 800c338:	b570      	push	{r4, r5, r6, lr}
 800c33a:	460c      	mov	r4, r1
 800c33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c340:	2900      	cmp	r1, #0
 800c342:	b096      	sub	sp, #88	@ 0x58
 800c344:	4615      	mov	r5, r2
 800c346:	461e      	mov	r6, r3
 800c348:	da0d      	bge.n	800c366 <__swhatbuf_r+0x2e>
 800c34a:	89a3      	ldrh	r3, [r4, #12]
 800c34c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c350:	f04f 0100 	mov.w	r1, #0
 800c354:	bf14      	ite	ne
 800c356:	2340      	movne	r3, #64	@ 0x40
 800c358:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c35c:	2000      	movs	r0, #0
 800c35e:	6031      	str	r1, [r6, #0]
 800c360:	602b      	str	r3, [r5, #0]
 800c362:	b016      	add	sp, #88	@ 0x58
 800c364:	bd70      	pop	{r4, r5, r6, pc}
 800c366:	466a      	mov	r2, sp
 800c368:	f000 f848 	bl	800c3fc <_fstat_r>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	dbec      	blt.n	800c34a <__swhatbuf_r+0x12>
 800c370:	9901      	ldr	r1, [sp, #4]
 800c372:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c376:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c37a:	4259      	negs	r1, r3
 800c37c:	4159      	adcs	r1, r3
 800c37e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c382:	e7eb      	b.n	800c35c <__swhatbuf_r+0x24>

0800c384 <__smakebuf_r>:
 800c384:	898b      	ldrh	r3, [r1, #12]
 800c386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c388:	079d      	lsls	r5, r3, #30
 800c38a:	4606      	mov	r6, r0
 800c38c:	460c      	mov	r4, r1
 800c38e:	d507      	bpl.n	800c3a0 <__smakebuf_r+0x1c>
 800c390:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c394:	6023      	str	r3, [r4, #0]
 800c396:	6123      	str	r3, [r4, #16]
 800c398:	2301      	movs	r3, #1
 800c39a:	6163      	str	r3, [r4, #20]
 800c39c:	b003      	add	sp, #12
 800c39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3a0:	ab01      	add	r3, sp, #4
 800c3a2:	466a      	mov	r2, sp
 800c3a4:	f7ff ffc8 	bl	800c338 <__swhatbuf_r>
 800c3a8:	9f00      	ldr	r7, [sp, #0]
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	4639      	mov	r1, r7
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	f7ff f8b0 	bl	800b514 <_malloc_r>
 800c3b4:	b948      	cbnz	r0, 800c3ca <__smakebuf_r+0x46>
 800c3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ba:	059a      	lsls	r2, r3, #22
 800c3bc:	d4ee      	bmi.n	800c39c <__smakebuf_r+0x18>
 800c3be:	f023 0303 	bic.w	r3, r3, #3
 800c3c2:	f043 0302 	orr.w	r3, r3, #2
 800c3c6:	81a3      	strh	r3, [r4, #12]
 800c3c8:	e7e2      	b.n	800c390 <__smakebuf_r+0xc>
 800c3ca:	89a3      	ldrh	r3, [r4, #12]
 800c3cc:	6020      	str	r0, [r4, #0]
 800c3ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3d2:	81a3      	strh	r3, [r4, #12]
 800c3d4:	9b01      	ldr	r3, [sp, #4]
 800c3d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c3da:	b15b      	cbz	r3, 800c3f4 <__smakebuf_r+0x70>
 800c3dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	f000 f81d 	bl	800c420 <_isatty_r>
 800c3e6:	b128      	cbz	r0, 800c3f4 <__smakebuf_r+0x70>
 800c3e8:	89a3      	ldrh	r3, [r4, #12]
 800c3ea:	f023 0303 	bic.w	r3, r3, #3
 800c3ee:	f043 0301 	orr.w	r3, r3, #1
 800c3f2:	81a3      	strh	r3, [r4, #12]
 800c3f4:	89a3      	ldrh	r3, [r4, #12]
 800c3f6:	431d      	orrs	r5, r3
 800c3f8:	81a5      	strh	r5, [r4, #12]
 800c3fa:	e7cf      	b.n	800c39c <__smakebuf_r+0x18>

0800c3fc <_fstat_r>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	4d07      	ldr	r5, [pc, #28]	@ (800c41c <_fstat_r+0x20>)
 800c400:	2300      	movs	r3, #0
 800c402:	4604      	mov	r4, r0
 800c404:	4608      	mov	r0, r1
 800c406:	4611      	mov	r1, r2
 800c408:	602b      	str	r3, [r5, #0]
 800c40a:	f7f4 ff28 	bl	800125e <_fstat>
 800c40e:	1c43      	adds	r3, r0, #1
 800c410:	d102      	bne.n	800c418 <_fstat_r+0x1c>
 800c412:	682b      	ldr	r3, [r5, #0]
 800c414:	b103      	cbz	r3, 800c418 <_fstat_r+0x1c>
 800c416:	6023      	str	r3, [r4, #0]
 800c418:	bd38      	pop	{r3, r4, r5, pc}
 800c41a:	bf00      	nop
 800c41c:	24000c6c 	.word	0x24000c6c

0800c420 <_isatty_r>:
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	4d06      	ldr	r5, [pc, #24]	@ (800c43c <_isatty_r+0x1c>)
 800c424:	2300      	movs	r3, #0
 800c426:	4604      	mov	r4, r0
 800c428:	4608      	mov	r0, r1
 800c42a:	602b      	str	r3, [r5, #0]
 800c42c:	f7f4 ff27 	bl	800127e <_isatty>
 800c430:	1c43      	adds	r3, r0, #1
 800c432:	d102      	bne.n	800c43a <_isatty_r+0x1a>
 800c434:	682b      	ldr	r3, [r5, #0]
 800c436:	b103      	cbz	r3, 800c43a <_isatty_r+0x1a>
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	bd38      	pop	{r3, r4, r5, pc}
 800c43c:	24000c6c 	.word	0x24000c6c

0800c440 <abort>:
 800c440:	b508      	push	{r3, lr}
 800c442:	2006      	movs	r0, #6
 800c444:	f000 f82c 	bl	800c4a0 <raise>
 800c448:	2001      	movs	r0, #1
 800c44a:	f7f4 fed4 	bl	80011f6 <_exit>

0800c44e <_raise_r>:
 800c44e:	291f      	cmp	r1, #31
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4605      	mov	r5, r0
 800c454:	460c      	mov	r4, r1
 800c456:	d904      	bls.n	800c462 <_raise_r+0x14>
 800c458:	2316      	movs	r3, #22
 800c45a:	6003      	str	r3, [r0, #0]
 800c45c:	f04f 30ff 	mov.w	r0, #4294967295
 800c460:	bd38      	pop	{r3, r4, r5, pc}
 800c462:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c464:	b112      	cbz	r2, 800c46c <_raise_r+0x1e>
 800c466:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c46a:	b94b      	cbnz	r3, 800c480 <_raise_r+0x32>
 800c46c:	4628      	mov	r0, r5
 800c46e:	f000 f831 	bl	800c4d4 <_getpid_r>
 800c472:	4622      	mov	r2, r4
 800c474:	4601      	mov	r1, r0
 800c476:	4628      	mov	r0, r5
 800c478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c47c:	f000 b818 	b.w	800c4b0 <_kill_r>
 800c480:	2b01      	cmp	r3, #1
 800c482:	d00a      	beq.n	800c49a <_raise_r+0x4c>
 800c484:	1c59      	adds	r1, r3, #1
 800c486:	d103      	bne.n	800c490 <_raise_r+0x42>
 800c488:	2316      	movs	r3, #22
 800c48a:	6003      	str	r3, [r0, #0]
 800c48c:	2001      	movs	r0, #1
 800c48e:	e7e7      	b.n	800c460 <_raise_r+0x12>
 800c490:	2100      	movs	r1, #0
 800c492:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c496:	4620      	mov	r0, r4
 800c498:	4798      	blx	r3
 800c49a:	2000      	movs	r0, #0
 800c49c:	e7e0      	b.n	800c460 <_raise_r+0x12>
	...

0800c4a0 <raise>:
 800c4a0:	4b02      	ldr	r3, [pc, #8]	@ (800c4ac <raise+0xc>)
 800c4a2:	4601      	mov	r1, r0
 800c4a4:	6818      	ldr	r0, [r3, #0]
 800c4a6:	f7ff bfd2 	b.w	800c44e <_raise_r>
 800c4aa:	bf00      	nop
 800c4ac:	2400002c 	.word	0x2400002c

0800c4b0 <_kill_r>:
 800c4b0:	b538      	push	{r3, r4, r5, lr}
 800c4b2:	4d07      	ldr	r5, [pc, #28]	@ (800c4d0 <_kill_r+0x20>)
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	4608      	mov	r0, r1
 800c4ba:	4611      	mov	r1, r2
 800c4bc:	602b      	str	r3, [r5, #0]
 800c4be:	f7f4 fe8a 	bl	80011d6 <_kill>
 800c4c2:	1c43      	adds	r3, r0, #1
 800c4c4:	d102      	bne.n	800c4cc <_kill_r+0x1c>
 800c4c6:	682b      	ldr	r3, [r5, #0]
 800c4c8:	b103      	cbz	r3, 800c4cc <_kill_r+0x1c>
 800c4ca:	6023      	str	r3, [r4, #0]
 800c4cc:	bd38      	pop	{r3, r4, r5, pc}
 800c4ce:	bf00      	nop
 800c4d0:	24000c6c 	.word	0x24000c6c

0800c4d4 <_getpid_r>:
 800c4d4:	f7f4 be77 	b.w	80011c6 <_getpid>

0800c4d8 <atan2f>:
 800c4d8:	f000 b844 	b.w	800c564 <__ieee754_atan2f>

0800c4dc <round>:
 800c4dc:	ee10 3a90 	vmov	r3, s1
 800c4e0:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800c4e4:	f2a1 32ff 	subw	r2, r1, #1023	@ 0x3ff
 800c4e8:	2a13      	cmp	r2, #19
 800c4ea:	b510      	push	{r4, lr}
 800c4ec:	ee10 4a10 	vmov	r4, s0
 800c4f0:	dc1d      	bgt.n	800c52e <round+0x52>
 800c4f2:	2a00      	cmp	r2, #0
 800c4f4:	da0d      	bge.n	800c512 <round+0x36>
 800c4f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c4fa:	3201      	adds	r2, #1
 800c4fc:	bf04      	itt	eq
 800c4fe:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800c502:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800c506:	2200      	movs	r2, #0
 800c508:	4619      	mov	r1, r3
 800c50a:	4610      	mov	r0, r2
 800c50c:	ec41 0b10 	vmov	d0, r0, r1
 800c510:	e014      	b.n	800c53c <round+0x60>
 800c512:	4813      	ldr	r0, [pc, #76]	@ (800c560 <round+0x84>)
 800c514:	4110      	asrs	r0, r2
 800c516:	ea00 0103 	and.w	r1, r0, r3
 800c51a:	4321      	orrs	r1, r4
 800c51c:	d00e      	beq.n	800c53c <round+0x60>
 800c51e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800c522:	fa41 f202 	asr.w	r2, r1, r2
 800c526:	4413      	add	r3, r2
 800c528:	ea23 0300 	bic.w	r3, r3, r0
 800c52c:	e7eb      	b.n	800c506 <round+0x2a>
 800c52e:	2a33      	cmp	r2, #51	@ 0x33
 800c530:	dd05      	ble.n	800c53e <round+0x62>
 800c532:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800c536:	d101      	bne.n	800c53c <round+0x60>
 800c538:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c53c:	bd10      	pop	{r4, pc}
 800c53e:	f2a1 4113 	subw	r1, r1, #1043	@ 0x413
 800c542:	f04f 30ff 	mov.w	r0, #4294967295
 800c546:	40c8      	lsrs	r0, r1
 800c548:	4220      	tst	r0, r4
 800c54a:	d0f7      	beq.n	800c53c <round+0x60>
 800c54c:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800c550:	2201      	movs	r2, #1
 800c552:	408a      	lsls	r2, r1
 800c554:	1912      	adds	r2, r2, r4
 800c556:	bf28      	it	cs
 800c558:	3301      	addcs	r3, #1
 800c55a:	ea22 0200 	bic.w	r2, r2, r0
 800c55e:	e7d3      	b.n	800c508 <round+0x2c>
 800c560:	000fffff 	.word	0x000fffff

0800c564 <__ieee754_atan2f>:
 800c564:	ee10 2a90 	vmov	r2, s1
 800c568:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c56c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c570:	b510      	push	{r4, lr}
 800c572:	eef0 7a40 	vmov.f32	s15, s0
 800c576:	d806      	bhi.n	800c586 <__ieee754_atan2f+0x22>
 800c578:	ee10 0a10 	vmov	r0, s0
 800c57c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c580:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c584:	d904      	bls.n	800c590 <__ieee754_atan2f+0x2c>
 800c586:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c58a:	eeb0 0a67 	vmov.f32	s0, s15
 800c58e:	bd10      	pop	{r4, pc}
 800c590:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c594:	d103      	bne.n	800c59e <__ieee754_atan2f+0x3a>
 800c596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c59a:	f000 b881 	b.w	800c6a0 <atanf>
 800c59e:	1794      	asrs	r4, r2, #30
 800c5a0:	f004 0402 	and.w	r4, r4, #2
 800c5a4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c5a8:	b93b      	cbnz	r3, 800c5ba <__ieee754_atan2f+0x56>
 800c5aa:	2c02      	cmp	r4, #2
 800c5ac:	d05c      	beq.n	800c668 <__ieee754_atan2f+0x104>
 800c5ae:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800c67c <__ieee754_atan2f+0x118>
 800c5b2:	2c03      	cmp	r4, #3
 800c5b4:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800c5b8:	e7e7      	b.n	800c58a <__ieee754_atan2f+0x26>
 800c5ba:	b939      	cbnz	r1, 800c5cc <__ieee754_atan2f+0x68>
 800c5bc:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800c680 <__ieee754_atan2f+0x11c>
 800c5c0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800c684 <__ieee754_atan2f+0x120>
 800c5c4:	2800      	cmp	r0, #0
 800c5c6:	fe67 7a87 	vselge.f32	s15, s15, s14
 800c5ca:	e7de      	b.n	800c58a <__ieee754_atan2f+0x26>
 800c5cc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c5d0:	d110      	bne.n	800c5f4 <__ieee754_atan2f+0x90>
 800c5d2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c5d6:	f104 34ff 	add.w	r4, r4, #4294967295
 800c5da:	d107      	bne.n	800c5ec <__ieee754_atan2f+0x88>
 800c5dc:	2c02      	cmp	r4, #2
 800c5de:	d846      	bhi.n	800c66e <__ieee754_atan2f+0x10a>
 800c5e0:	4b29      	ldr	r3, [pc, #164]	@ (800c688 <__ieee754_atan2f+0x124>)
 800c5e2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c5e6:	edd3 7a00 	vldr	s15, [r3]
 800c5ea:	e7ce      	b.n	800c58a <__ieee754_atan2f+0x26>
 800c5ec:	2c02      	cmp	r4, #2
 800c5ee:	d841      	bhi.n	800c674 <__ieee754_atan2f+0x110>
 800c5f0:	4b26      	ldr	r3, [pc, #152]	@ (800c68c <__ieee754_atan2f+0x128>)
 800c5f2:	e7f6      	b.n	800c5e2 <__ieee754_atan2f+0x7e>
 800c5f4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c5f8:	d0e0      	beq.n	800c5bc <__ieee754_atan2f+0x58>
 800c5fa:	1a5b      	subs	r3, r3, r1
 800c5fc:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c600:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c604:	da1a      	bge.n	800c63c <__ieee754_atan2f+0xd8>
 800c606:	2a00      	cmp	r2, #0
 800c608:	da01      	bge.n	800c60e <__ieee754_atan2f+0xaa>
 800c60a:	313c      	adds	r1, #60	@ 0x3c
 800c60c:	db19      	blt.n	800c642 <__ieee754_atan2f+0xde>
 800c60e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c612:	f000 f919 	bl	800c848 <fabsf>
 800c616:	f000 f843 	bl	800c6a0 <atanf>
 800c61a:	eef0 7a40 	vmov.f32	s15, s0
 800c61e:	2c01      	cmp	r4, #1
 800c620:	d012      	beq.n	800c648 <__ieee754_atan2f+0xe4>
 800c622:	2c02      	cmp	r4, #2
 800c624:	d017      	beq.n	800c656 <__ieee754_atan2f+0xf2>
 800c626:	2c00      	cmp	r4, #0
 800c628:	d0af      	beq.n	800c58a <__ieee754_atan2f+0x26>
 800c62a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c690 <__ieee754_atan2f+0x12c>
 800c62e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c632:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800c694 <__ieee754_atan2f+0x130>
 800c636:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c63a:	e7a6      	b.n	800c58a <__ieee754_atan2f+0x26>
 800c63c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800c680 <__ieee754_atan2f+0x11c>
 800c640:	e7ed      	b.n	800c61e <__ieee754_atan2f+0xba>
 800c642:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c698 <__ieee754_atan2f+0x134>
 800c646:	e7ea      	b.n	800c61e <__ieee754_atan2f+0xba>
 800c648:	ee17 3a90 	vmov	r3, s15
 800c64c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c650:	ee07 3a90 	vmov	s15, r3
 800c654:	e799      	b.n	800c58a <__ieee754_atan2f+0x26>
 800c656:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c690 <__ieee754_atan2f+0x12c>
 800c65a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c65e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800c694 <__ieee754_atan2f+0x130>
 800c662:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c666:	e790      	b.n	800c58a <__ieee754_atan2f+0x26>
 800c668:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800c694 <__ieee754_atan2f+0x130>
 800c66c:	e78d      	b.n	800c58a <__ieee754_atan2f+0x26>
 800c66e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800c69c <__ieee754_atan2f+0x138>
 800c672:	e78a      	b.n	800c58a <__ieee754_atan2f+0x26>
 800c674:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c698 <__ieee754_atan2f+0x134>
 800c678:	e787      	b.n	800c58a <__ieee754_atan2f+0x26>
 800c67a:	bf00      	nop
 800c67c:	c0490fdb 	.word	0xc0490fdb
 800c680:	3fc90fdb 	.word	0x3fc90fdb
 800c684:	bfc90fdb 	.word	0xbfc90fdb
 800c688:	0800ccf4 	.word	0x0800ccf4
 800c68c:	0800cce8 	.word	0x0800cce8
 800c690:	33bbbd2e 	.word	0x33bbbd2e
 800c694:	40490fdb 	.word	0x40490fdb
 800c698:	00000000 	.word	0x00000000
 800c69c:	3f490fdb 	.word	0x3f490fdb

0800c6a0 <atanf>:
 800c6a0:	b538      	push	{r3, r4, r5, lr}
 800c6a2:	ee10 5a10 	vmov	r5, s0
 800c6a6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c6aa:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c6ae:	eef0 7a40 	vmov.f32	s15, s0
 800c6b2:	d30f      	bcc.n	800c6d4 <atanf+0x34>
 800c6b4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c6b8:	d904      	bls.n	800c6c4 <atanf+0x24>
 800c6ba:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c6be:	eeb0 0a67 	vmov.f32	s0, s15
 800c6c2:	bd38      	pop	{r3, r4, r5, pc}
 800c6c4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c7fc <atanf+0x15c>
 800c6c8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800c800 <atanf+0x160>
 800c6cc:	2d00      	cmp	r5, #0
 800c6ce:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800c6d2:	e7f4      	b.n	800c6be <atanf+0x1e>
 800c6d4:	4b4b      	ldr	r3, [pc, #300]	@ (800c804 <atanf+0x164>)
 800c6d6:	429c      	cmp	r4, r3
 800c6d8:	d810      	bhi.n	800c6fc <atanf+0x5c>
 800c6da:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c6de:	d20a      	bcs.n	800c6f6 <atanf+0x56>
 800c6e0:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800c808 <atanf+0x168>
 800c6e4:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c6e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6ec:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f4:	dce3      	bgt.n	800c6be <atanf+0x1e>
 800c6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6fa:	e013      	b.n	800c724 <atanf+0x84>
 800c6fc:	f000 f8a4 	bl	800c848 <fabsf>
 800c700:	4b42      	ldr	r3, [pc, #264]	@ (800c80c <atanf+0x16c>)
 800c702:	429c      	cmp	r4, r3
 800c704:	d84f      	bhi.n	800c7a6 <atanf+0x106>
 800c706:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c70a:	429c      	cmp	r4, r3
 800c70c:	d841      	bhi.n	800c792 <atanf+0xf2>
 800c70e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c712:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c716:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c71a:	2300      	movs	r3, #0
 800c71c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c720:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c724:	1c5a      	adds	r2, r3, #1
 800c726:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c72a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800c810 <atanf+0x170>
 800c72e:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800c814 <atanf+0x174>
 800c732:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800c818 <atanf+0x178>
 800c736:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c73a:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c73e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800c81c <atanf+0x17c>
 800c742:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c746:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800c820 <atanf+0x180>
 800c74a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c74e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800c824 <atanf+0x184>
 800c752:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c756:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c828 <atanf+0x188>
 800c75a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c75e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800c82c <atanf+0x18c>
 800c762:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c766:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c830 <atanf+0x190>
 800c76a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c76e:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800c834 <atanf+0x194>
 800c772:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c776:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800c838 <atanf+0x198>
 800c77a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c77e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c782:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c786:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c78a:	d121      	bne.n	800c7d0 <atanf+0x130>
 800c78c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c790:	e795      	b.n	800c6be <atanf+0x1e>
 800c792:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c796:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c79a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c79e:	2301      	movs	r3, #1
 800c7a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c7a4:	e7be      	b.n	800c724 <atanf+0x84>
 800c7a6:	4b25      	ldr	r3, [pc, #148]	@ (800c83c <atanf+0x19c>)
 800c7a8:	429c      	cmp	r4, r3
 800c7aa:	d80b      	bhi.n	800c7c4 <atanf+0x124>
 800c7ac:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800c7b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c7b4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c7b8:	2302      	movs	r3, #2
 800c7ba:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c7be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7c2:	e7af      	b.n	800c724 <atanf+0x84>
 800c7c4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c7c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c7cc:	2303      	movs	r3, #3
 800c7ce:	e7a9      	b.n	800c724 <atanf+0x84>
 800c7d0:	4a1b      	ldr	r2, [pc, #108]	@ (800c840 <atanf+0x1a0>)
 800c7d2:	491c      	ldr	r1, [pc, #112]	@ (800c844 <atanf+0x1a4>)
 800c7d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c7d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c7dc:	edd3 6a00 	vldr	s13, [r3]
 800c7e0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c7e4:	2d00      	cmp	r5, #0
 800c7e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c7ea:	edd2 7a00 	vldr	s15, [r2]
 800c7ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7f2:	bfb8      	it	lt
 800c7f4:	eef1 7a67 	vneglt.f32	s15, s15
 800c7f8:	e761      	b.n	800c6be <atanf+0x1e>
 800c7fa:	bf00      	nop
 800c7fc:	bfc90fdb 	.word	0xbfc90fdb
 800c800:	3fc90fdb 	.word	0x3fc90fdb
 800c804:	3edfffff 	.word	0x3edfffff
 800c808:	7149f2ca 	.word	0x7149f2ca
 800c80c:	3f97ffff 	.word	0x3f97ffff
 800c810:	3c8569d7 	.word	0x3c8569d7
 800c814:	3d4bda59 	.word	0x3d4bda59
 800c818:	bd6ef16b 	.word	0xbd6ef16b
 800c81c:	3d886b35 	.word	0x3d886b35
 800c820:	3dba2e6e 	.word	0x3dba2e6e
 800c824:	3e124925 	.word	0x3e124925
 800c828:	3eaaaaab 	.word	0x3eaaaaab
 800c82c:	bd15a221 	.word	0xbd15a221
 800c830:	bd9d8795 	.word	0xbd9d8795
 800c834:	bde38e38 	.word	0xbde38e38
 800c838:	be4ccccd 	.word	0xbe4ccccd
 800c83c:	401bffff 	.word	0x401bffff
 800c840:	0800cd10 	.word	0x0800cd10
 800c844:	0800cd00 	.word	0x0800cd00

0800c848 <fabsf>:
 800c848:	ee10 3a10 	vmov	r3, s0
 800c84c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c850:	ee00 3a10 	vmov	s0, r3
 800c854:	4770      	bx	lr
	...

0800c858 <_init>:
 800c858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c85a:	bf00      	nop
 800c85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c85e:	bc08      	pop	{r3}
 800c860:	469e      	mov	lr, r3
 800c862:	4770      	bx	lr

0800c864 <_fini>:
 800c864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c866:	bf00      	nop
 800c868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c86a:	bc08      	pop	{r3}
 800c86c:	469e      	mov	lr, r3
 800c86e:	4770      	bx	lr
